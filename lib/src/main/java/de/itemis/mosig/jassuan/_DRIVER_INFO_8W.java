// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _DRIVER_INFO_8W {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("cVersion"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("pName"),
        C_POINTER.withName("pEnvironment"),
        C_POINTER.withName("pDriverPath"),
        C_POINTER.withName("pDataFile"),
        C_POINTER.withName("pConfigFile"),
        C_POINTER.withName("pHelpFile"),
        C_POINTER.withName("pDependentFiles"),
        C_POINTER.withName("pMonitorName"),
        C_POINTER.withName("pDefaultDataType"),
        C_POINTER.withName("pszzPreviousNames"),
        MemoryLayout.structLayout(
            C_LONG.withName("dwLowDateTime"),
            C_LONG.withName("dwHighDateTime")
        ).withName("ftDriverDate"),
        C_LONG_LONG.withName("dwlDriverVersion"),
        C_POINTER.withName("pszMfgName"),
        C_POINTER.withName("pszOEMUrl"),
        C_POINTER.withName("pszHardwareID"),
        C_POINTER.withName("pszProvider"),
        C_POINTER.withName("pszPrintProcessor"),
        C_POINTER.withName("pszVendorSetup"),
        C_POINTER.withName("pszzColorProfiles"),
        C_POINTER.withName("pszInfPath"),
        C_LONG.withName("dwPrinterDriverAttributes"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("pszzCoreDriverDependencies"),
        MemoryLayout.structLayout(
            C_LONG.withName("dwLowDateTime"),
            C_LONG.withName("dwHighDateTime")
        ).withName("ftMinInboxDriverVerDate"),
        C_LONG_LONG.withName("dwlMinInboxDriverVerVersion")
    ).withName("_DRIVER_INFO_8W");
    public static MemoryLayout $LAYOUT() {
        return _DRIVER_INFO_8W.$struct$LAYOUT;
    }
    static final VarHandle cVersion$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cVersion"));
    public static VarHandle cVersion$VH() {
        return _DRIVER_INFO_8W.cVersion$VH;
    }
    public static int cVersion$get(MemorySegment seg) {
        return (int)_DRIVER_INFO_8W.cVersion$VH.get(seg);
    }
    public static void cVersion$set( MemorySegment seg, int x) {
        _DRIVER_INFO_8W.cVersion$VH.set(seg, x);
    }
    public static int cVersion$get(MemorySegment seg, long index) {
        return (int)_DRIVER_INFO_8W.cVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cVersion$set(MemorySegment seg, long index, int x) {
        _DRIVER_INFO_8W.cVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pName")));
    public static VarHandle pName$VH() {
        return _DRIVER_INFO_8W.pName$VH;
    }
    public static MemoryAddress pName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pName$VH.get(seg);
    }
    public static void pName$set( MemorySegment seg, MemoryAddress x) {
        _DRIVER_INFO_8W.pName$VH.set(seg, x);
    }
    public static MemoryAddress pName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pName$set(MemorySegment seg, long index, MemoryAddress x) {
        _DRIVER_INFO_8W.pName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pEnvironment$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pEnvironment")));
    public static VarHandle pEnvironment$VH() {
        return _DRIVER_INFO_8W.pEnvironment$VH;
    }
    public static MemoryAddress pEnvironment$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pEnvironment$VH.get(seg);
    }
    public static void pEnvironment$set( MemorySegment seg, MemoryAddress x) {
        _DRIVER_INFO_8W.pEnvironment$VH.set(seg, x);
    }
    public static MemoryAddress pEnvironment$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pEnvironment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pEnvironment$set(MemorySegment seg, long index, MemoryAddress x) {
        _DRIVER_INFO_8W.pEnvironment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pDriverPath$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pDriverPath")));
    public static VarHandle pDriverPath$VH() {
        return _DRIVER_INFO_8W.pDriverPath$VH;
    }
    public static MemoryAddress pDriverPath$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pDriverPath$VH.get(seg);
    }
    public static void pDriverPath$set( MemorySegment seg, MemoryAddress x) {
        _DRIVER_INFO_8W.pDriverPath$VH.set(seg, x);
    }
    public static MemoryAddress pDriverPath$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pDriverPath$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pDriverPath$set(MemorySegment seg, long index, MemoryAddress x) {
        _DRIVER_INFO_8W.pDriverPath$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pDataFile$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pDataFile")));
    public static VarHandle pDataFile$VH() {
        return _DRIVER_INFO_8W.pDataFile$VH;
    }
    public static MemoryAddress pDataFile$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pDataFile$VH.get(seg);
    }
    public static void pDataFile$set( MemorySegment seg, MemoryAddress x) {
        _DRIVER_INFO_8W.pDataFile$VH.set(seg, x);
    }
    public static MemoryAddress pDataFile$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pDataFile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pDataFile$set(MemorySegment seg, long index, MemoryAddress x) {
        _DRIVER_INFO_8W.pDataFile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pConfigFile$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pConfigFile")));
    public static VarHandle pConfigFile$VH() {
        return _DRIVER_INFO_8W.pConfigFile$VH;
    }
    public static MemoryAddress pConfigFile$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pConfigFile$VH.get(seg);
    }
    public static void pConfigFile$set( MemorySegment seg, MemoryAddress x) {
        _DRIVER_INFO_8W.pConfigFile$VH.set(seg, x);
    }
    public static MemoryAddress pConfigFile$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pConfigFile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pConfigFile$set(MemorySegment seg, long index, MemoryAddress x) {
        _DRIVER_INFO_8W.pConfigFile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pHelpFile$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pHelpFile")));
    public static VarHandle pHelpFile$VH() {
        return _DRIVER_INFO_8W.pHelpFile$VH;
    }
    public static MemoryAddress pHelpFile$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pHelpFile$VH.get(seg);
    }
    public static void pHelpFile$set( MemorySegment seg, MemoryAddress x) {
        _DRIVER_INFO_8W.pHelpFile$VH.set(seg, x);
    }
    public static MemoryAddress pHelpFile$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pHelpFile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pHelpFile$set(MemorySegment seg, long index, MemoryAddress x) {
        _DRIVER_INFO_8W.pHelpFile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pDependentFiles$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pDependentFiles")));
    public static VarHandle pDependentFiles$VH() {
        return _DRIVER_INFO_8W.pDependentFiles$VH;
    }
    public static MemoryAddress pDependentFiles$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pDependentFiles$VH.get(seg);
    }
    public static void pDependentFiles$set( MemorySegment seg, MemoryAddress x) {
        _DRIVER_INFO_8W.pDependentFiles$VH.set(seg, x);
    }
    public static MemoryAddress pDependentFiles$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pDependentFiles$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pDependentFiles$set(MemorySegment seg, long index, MemoryAddress x) {
        _DRIVER_INFO_8W.pDependentFiles$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pMonitorName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pMonitorName")));
    public static VarHandle pMonitorName$VH() {
        return _DRIVER_INFO_8W.pMonitorName$VH;
    }
    public static MemoryAddress pMonitorName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pMonitorName$VH.get(seg);
    }
    public static void pMonitorName$set( MemorySegment seg, MemoryAddress x) {
        _DRIVER_INFO_8W.pMonitorName$VH.set(seg, x);
    }
    public static MemoryAddress pMonitorName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pMonitorName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pMonitorName$set(MemorySegment seg, long index, MemoryAddress x) {
        _DRIVER_INFO_8W.pMonitorName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pDefaultDataType$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pDefaultDataType")));
    public static VarHandle pDefaultDataType$VH() {
        return _DRIVER_INFO_8W.pDefaultDataType$VH;
    }
    public static MemoryAddress pDefaultDataType$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pDefaultDataType$VH.get(seg);
    }
    public static void pDefaultDataType$set( MemorySegment seg, MemoryAddress x) {
        _DRIVER_INFO_8W.pDefaultDataType$VH.set(seg, x);
    }
    public static MemoryAddress pDefaultDataType$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pDefaultDataType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pDefaultDataType$set(MemorySegment seg, long index, MemoryAddress x) {
        _DRIVER_INFO_8W.pDefaultDataType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pszzPreviousNames$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszzPreviousNames")));
    public static VarHandle pszzPreviousNames$VH() {
        return _DRIVER_INFO_8W.pszzPreviousNames$VH;
    }
    public static MemoryAddress pszzPreviousNames$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pszzPreviousNames$VH.get(seg);
    }
    public static void pszzPreviousNames$set( MemorySegment seg, MemoryAddress x) {
        _DRIVER_INFO_8W.pszzPreviousNames$VH.set(seg, x);
    }
    public static MemoryAddress pszzPreviousNames$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pszzPreviousNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pszzPreviousNames$set(MemorySegment seg, long index, MemoryAddress x) {
        _DRIVER_INFO_8W.pszzPreviousNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ftDriverDate$slice(MemorySegment seg) {
        return seg.asSlice(88, 8);
    }
    static final VarHandle dwlDriverVersion$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwlDriverVersion"));
    public static VarHandle dwlDriverVersion$VH() {
        return _DRIVER_INFO_8W.dwlDriverVersion$VH;
    }
    public static long dwlDriverVersion$get(MemorySegment seg) {
        return (long)_DRIVER_INFO_8W.dwlDriverVersion$VH.get(seg);
    }
    public static void dwlDriverVersion$set( MemorySegment seg, long x) {
        _DRIVER_INFO_8W.dwlDriverVersion$VH.set(seg, x);
    }
    public static long dwlDriverVersion$get(MemorySegment seg, long index) {
        return (long)_DRIVER_INFO_8W.dwlDriverVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwlDriverVersion$set(MemorySegment seg, long index, long x) {
        _DRIVER_INFO_8W.dwlDriverVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pszMfgName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszMfgName")));
    public static VarHandle pszMfgName$VH() {
        return _DRIVER_INFO_8W.pszMfgName$VH;
    }
    public static MemoryAddress pszMfgName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pszMfgName$VH.get(seg);
    }
    public static void pszMfgName$set( MemorySegment seg, MemoryAddress x) {
        _DRIVER_INFO_8W.pszMfgName$VH.set(seg, x);
    }
    public static MemoryAddress pszMfgName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pszMfgName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pszMfgName$set(MemorySegment seg, long index, MemoryAddress x) {
        _DRIVER_INFO_8W.pszMfgName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pszOEMUrl$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszOEMUrl")));
    public static VarHandle pszOEMUrl$VH() {
        return _DRIVER_INFO_8W.pszOEMUrl$VH;
    }
    public static MemoryAddress pszOEMUrl$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pszOEMUrl$VH.get(seg);
    }
    public static void pszOEMUrl$set( MemorySegment seg, MemoryAddress x) {
        _DRIVER_INFO_8W.pszOEMUrl$VH.set(seg, x);
    }
    public static MemoryAddress pszOEMUrl$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pszOEMUrl$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pszOEMUrl$set(MemorySegment seg, long index, MemoryAddress x) {
        _DRIVER_INFO_8W.pszOEMUrl$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pszHardwareID$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszHardwareID")));
    public static VarHandle pszHardwareID$VH() {
        return _DRIVER_INFO_8W.pszHardwareID$VH;
    }
    public static MemoryAddress pszHardwareID$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pszHardwareID$VH.get(seg);
    }
    public static void pszHardwareID$set( MemorySegment seg, MemoryAddress x) {
        _DRIVER_INFO_8W.pszHardwareID$VH.set(seg, x);
    }
    public static MemoryAddress pszHardwareID$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pszHardwareID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pszHardwareID$set(MemorySegment seg, long index, MemoryAddress x) {
        _DRIVER_INFO_8W.pszHardwareID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pszProvider$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszProvider")));
    public static VarHandle pszProvider$VH() {
        return _DRIVER_INFO_8W.pszProvider$VH;
    }
    public static MemoryAddress pszProvider$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pszProvider$VH.get(seg);
    }
    public static void pszProvider$set( MemorySegment seg, MemoryAddress x) {
        _DRIVER_INFO_8W.pszProvider$VH.set(seg, x);
    }
    public static MemoryAddress pszProvider$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pszProvider$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pszProvider$set(MemorySegment seg, long index, MemoryAddress x) {
        _DRIVER_INFO_8W.pszProvider$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pszPrintProcessor$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszPrintProcessor")));
    public static VarHandle pszPrintProcessor$VH() {
        return _DRIVER_INFO_8W.pszPrintProcessor$VH;
    }
    public static MemoryAddress pszPrintProcessor$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pszPrintProcessor$VH.get(seg);
    }
    public static void pszPrintProcessor$set( MemorySegment seg, MemoryAddress x) {
        _DRIVER_INFO_8W.pszPrintProcessor$VH.set(seg, x);
    }
    public static MemoryAddress pszPrintProcessor$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pszPrintProcessor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pszPrintProcessor$set(MemorySegment seg, long index, MemoryAddress x) {
        _DRIVER_INFO_8W.pszPrintProcessor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pszVendorSetup$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszVendorSetup")));
    public static VarHandle pszVendorSetup$VH() {
        return _DRIVER_INFO_8W.pszVendorSetup$VH;
    }
    public static MemoryAddress pszVendorSetup$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pszVendorSetup$VH.get(seg);
    }
    public static void pszVendorSetup$set( MemorySegment seg, MemoryAddress x) {
        _DRIVER_INFO_8W.pszVendorSetup$VH.set(seg, x);
    }
    public static MemoryAddress pszVendorSetup$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pszVendorSetup$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pszVendorSetup$set(MemorySegment seg, long index, MemoryAddress x) {
        _DRIVER_INFO_8W.pszVendorSetup$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pszzColorProfiles$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszzColorProfiles")));
    public static VarHandle pszzColorProfiles$VH() {
        return _DRIVER_INFO_8W.pszzColorProfiles$VH;
    }
    public static MemoryAddress pszzColorProfiles$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pszzColorProfiles$VH.get(seg);
    }
    public static void pszzColorProfiles$set( MemorySegment seg, MemoryAddress x) {
        _DRIVER_INFO_8W.pszzColorProfiles$VH.set(seg, x);
    }
    public static MemoryAddress pszzColorProfiles$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pszzColorProfiles$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pszzColorProfiles$set(MemorySegment seg, long index, MemoryAddress x) {
        _DRIVER_INFO_8W.pszzColorProfiles$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pszInfPath$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszInfPath")));
    public static VarHandle pszInfPath$VH() {
        return _DRIVER_INFO_8W.pszInfPath$VH;
    }
    public static MemoryAddress pszInfPath$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pszInfPath$VH.get(seg);
    }
    public static void pszInfPath$set( MemorySegment seg, MemoryAddress x) {
        _DRIVER_INFO_8W.pszInfPath$VH.set(seg, x);
    }
    public static MemoryAddress pszInfPath$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pszInfPath$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pszInfPath$set(MemorySegment seg, long index, MemoryAddress x) {
        _DRIVER_INFO_8W.pszInfPath$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwPrinterDriverAttributes$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwPrinterDriverAttributes"));
    public static VarHandle dwPrinterDriverAttributes$VH() {
        return _DRIVER_INFO_8W.dwPrinterDriverAttributes$VH;
    }
    public static int dwPrinterDriverAttributes$get(MemorySegment seg) {
        return (int)_DRIVER_INFO_8W.dwPrinterDriverAttributes$VH.get(seg);
    }
    public static void dwPrinterDriverAttributes$set( MemorySegment seg, int x) {
        _DRIVER_INFO_8W.dwPrinterDriverAttributes$VH.set(seg, x);
    }
    public static int dwPrinterDriverAttributes$get(MemorySegment seg, long index) {
        return (int)_DRIVER_INFO_8W.dwPrinterDriverAttributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwPrinterDriverAttributes$set(MemorySegment seg, long index, int x) {
        _DRIVER_INFO_8W.dwPrinterDriverAttributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pszzCoreDriverDependencies$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszzCoreDriverDependencies")));
    public static VarHandle pszzCoreDriverDependencies$VH() {
        return _DRIVER_INFO_8W.pszzCoreDriverDependencies$VH;
    }
    public static MemoryAddress pszzCoreDriverDependencies$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pszzCoreDriverDependencies$VH.get(seg);
    }
    public static void pszzCoreDriverDependencies$set( MemorySegment seg, MemoryAddress x) {
        _DRIVER_INFO_8W.pszzCoreDriverDependencies$VH.set(seg, x);
    }
    public static MemoryAddress pszzCoreDriverDependencies$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_DRIVER_INFO_8W.pszzCoreDriverDependencies$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pszzCoreDriverDependencies$set(MemorySegment seg, long index, MemoryAddress x) {
        _DRIVER_INFO_8W.pszzCoreDriverDependencies$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ftMinInboxDriverVerDate$slice(MemorySegment seg) {
        return seg.asSlice(184, 8);
    }
    static final VarHandle dwlMinInboxDriverVerVersion$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwlMinInboxDriverVerVersion"));
    public static VarHandle dwlMinInboxDriverVerVersion$VH() {
        return _DRIVER_INFO_8W.dwlMinInboxDriverVerVersion$VH;
    }
    public static long dwlMinInboxDriverVerVersion$get(MemorySegment seg) {
        return (long)_DRIVER_INFO_8W.dwlMinInboxDriverVerVersion$VH.get(seg);
    }
    public static void dwlMinInboxDriverVerVersion$set( MemorySegment seg, long x) {
        _DRIVER_INFO_8W.dwlMinInboxDriverVerVersion$VH.set(seg, x);
    }
    public static long dwlMinInboxDriverVerVersion$get(MemorySegment seg, long index) {
        return (long)_DRIVER_INFO_8W.dwlMinInboxDriverVerVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwlMinInboxDriverVerVersion$set(MemorySegment seg, long index, long x) {
        _DRIVER_INFO_8W.dwlMinInboxDriverVerVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


