// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _EXTENDED_ENCRYPTED_DATA_INFO {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("ExtendedCode"),
        C_LONG.withName("Length"),
        C_LONG.withName("Flags"),
        C_LONG.withName("Reserved")
    ).withName("_EXTENDED_ENCRYPTED_DATA_INFO");
    public static MemoryLayout $LAYOUT() {
        return _EXTENDED_ENCRYPTED_DATA_INFO.$struct$LAYOUT;
    }
    static final VarHandle ExtendedCode$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExtendedCode"));
    public static VarHandle ExtendedCode$VH() {
        return _EXTENDED_ENCRYPTED_DATA_INFO.ExtendedCode$VH;
    }
    public static int ExtendedCode$get(MemorySegment seg) {
        return (int)_EXTENDED_ENCRYPTED_DATA_INFO.ExtendedCode$VH.get(seg);
    }
    public static void ExtendedCode$set( MemorySegment seg, int x) {
        _EXTENDED_ENCRYPTED_DATA_INFO.ExtendedCode$VH.set(seg, x);
    }
    public static int ExtendedCode$get(MemorySegment seg, long index) {
        return (int)_EXTENDED_ENCRYPTED_DATA_INFO.ExtendedCode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExtendedCode$set(MemorySegment seg, long index, int x) {
        _EXTENDED_ENCRYPTED_DATA_INFO.ExtendedCode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Length$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Length"));
    public static VarHandle Length$VH() {
        return _EXTENDED_ENCRYPTED_DATA_INFO.Length$VH;
    }
    public static int Length$get(MemorySegment seg) {
        return (int)_EXTENDED_ENCRYPTED_DATA_INFO.Length$VH.get(seg);
    }
    public static void Length$set( MemorySegment seg, int x) {
        _EXTENDED_ENCRYPTED_DATA_INFO.Length$VH.set(seg, x);
    }
    public static int Length$get(MemorySegment seg, long index) {
        return (int)_EXTENDED_ENCRYPTED_DATA_INFO.Length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Length$set(MemorySegment seg, long index, int x) {
        _EXTENDED_ENCRYPTED_DATA_INFO.Length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _EXTENDED_ENCRYPTED_DATA_INFO.Flags$VH;
    }
    public static int Flags$get(MemorySegment seg) {
        return (int)_EXTENDED_ENCRYPTED_DATA_INFO.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, int x) {
        _EXTENDED_ENCRYPTED_DATA_INFO.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_EXTENDED_ENCRYPTED_DATA_INFO.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _EXTENDED_ENCRYPTED_DATA_INFO.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Reserved$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    public static VarHandle Reserved$VH() {
        return _EXTENDED_ENCRYPTED_DATA_INFO.Reserved$VH;
    }
    public static int Reserved$get(MemorySegment seg) {
        return (int)_EXTENDED_ENCRYPTED_DATA_INFO.Reserved$VH.get(seg);
    }
    public static void Reserved$set( MemorySegment seg, int x) {
        _EXTENDED_ENCRYPTED_DATA_INFO.Reserved$VH.set(seg, x);
    }
    public static int Reserved$get(MemorySegment seg, long index) {
        return (int)_EXTENDED_ENCRYPTED_DATA_INFO.Reserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved$set(MemorySegment seg, long index, int x) {
        _EXTENDED_ENCRYPTED_DATA_INFO.Reserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


