// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _CONSOLE_SCREEN_BUFFER_INFOEX {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("cbSize"),
        MemoryLayout.structLayout(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("dwSize"),
        MemoryLayout.structLayout(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("dwCursorPosition"),
        C_SHORT.withName("wAttributes"),
        MemoryLayout.structLayout(
            C_SHORT.withName("Left"),
            C_SHORT.withName("Top"),
            C_SHORT.withName("Right"),
            C_SHORT.withName("Bottom")
        ).withName("srWindow"),
        MemoryLayout.structLayout(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("dwMaximumWindowSize"),
        C_SHORT.withName("wPopupAttributes"),
        C_INT.withName("bFullscreenSupported"),
        MemoryLayout.sequenceLayout(16, C_LONG).withName("ColorTable")
    ).withName("_CONSOLE_SCREEN_BUFFER_INFOEX");
    public static MemoryLayout $LAYOUT() {
        return _CONSOLE_SCREEN_BUFFER_INFOEX.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return _CONSOLE_SCREEN_BUFFER_INFOEX.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)_CONSOLE_SCREEN_BUFFER_INFOEX.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        _CONSOLE_SCREEN_BUFFER_INFOEX.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)_CONSOLE_SCREEN_BUFFER_INFOEX.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        _CONSOLE_SCREEN_BUFFER_INFOEX.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment dwSize$slice(MemorySegment seg) {
        return seg.asSlice(4, 4);
    }
    public static MemorySegment dwCursorPosition$slice(MemorySegment seg) {
        return seg.asSlice(8, 4);
    }
    static final VarHandle wAttributes$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("wAttributes"));
    public static VarHandle wAttributes$VH() {
        return _CONSOLE_SCREEN_BUFFER_INFOEX.wAttributes$VH;
    }
    public static short wAttributes$get(MemorySegment seg) {
        return (short)_CONSOLE_SCREEN_BUFFER_INFOEX.wAttributes$VH.get(seg);
    }
    public static void wAttributes$set( MemorySegment seg, short x) {
        _CONSOLE_SCREEN_BUFFER_INFOEX.wAttributes$VH.set(seg, x);
    }
    public static short wAttributes$get(MemorySegment seg, long index) {
        return (short)_CONSOLE_SCREEN_BUFFER_INFOEX.wAttributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wAttributes$set(MemorySegment seg, long index, short x) {
        _CONSOLE_SCREEN_BUFFER_INFOEX.wAttributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment srWindow$slice(MemorySegment seg) {
        return seg.asSlice(14, 8);
    }
    public static MemorySegment dwMaximumWindowSize$slice(MemorySegment seg) {
        return seg.asSlice(22, 4);
    }
    static final VarHandle wPopupAttributes$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("wPopupAttributes"));
    public static VarHandle wPopupAttributes$VH() {
        return _CONSOLE_SCREEN_BUFFER_INFOEX.wPopupAttributes$VH;
    }
    public static short wPopupAttributes$get(MemorySegment seg) {
        return (short)_CONSOLE_SCREEN_BUFFER_INFOEX.wPopupAttributes$VH.get(seg);
    }
    public static void wPopupAttributes$set( MemorySegment seg, short x) {
        _CONSOLE_SCREEN_BUFFER_INFOEX.wPopupAttributes$VH.set(seg, x);
    }
    public static short wPopupAttributes$get(MemorySegment seg, long index) {
        return (short)_CONSOLE_SCREEN_BUFFER_INFOEX.wPopupAttributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wPopupAttributes$set(MemorySegment seg, long index, short x) {
        _CONSOLE_SCREEN_BUFFER_INFOEX.wPopupAttributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bFullscreenSupported$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("bFullscreenSupported"));
    public static VarHandle bFullscreenSupported$VH() {
        return _CONSOLE_SCREEN_BUFFER_INFOEX.bFullscreenSupported$VH;
    }
    public static int bFullscreenSupported$get(MemorySegment seg) {
        return (int)_CONSOLE_SCREEN_BUFFER_INFOEX.bFullscreenSupported$VH.get(seg);
    }
    public static void bFullscreenSupported$set( MemorySegment seg, int x) {
        _CONSOLE_SCREEN_BUFFER_INFOEX.bFullscreenSupported$VH.set(seg, x);
    }
    public static int bFullscreenSupported$get(MemorySegment seg, long index) {
        return (int)_CONSOLE_SCREEN_BUFFER_INFOEX.bFullscreenSupported$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bFullscreenSupported$set(MemorySegment seg, long index, int x) {
        _CONSOLE_SCREEN_BUFFER_INFOEX.bFullscreenSupported$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ColorTable$slice(MemorySegment seg) {
        return seg.asSlice(32, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


