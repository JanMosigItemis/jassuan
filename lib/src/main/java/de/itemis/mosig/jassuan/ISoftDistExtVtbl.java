// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class ISoftDistExtVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("ProcessSoftDist"),
        C_POINTER.withName("GetFirstCodeBase"),
        C_POINTER.withName("GetNextCodeBase"),
        C_POINTER.withName("AsyncInstallDistributionUnit")
    ).withName("ISoftDistExtVtbl");
    public static MemoryLayout $LAYOUT() {
        return ISoftDistExtVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ISoftDistExtVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, ISoftDistExtVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, ISoftDistExtVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ISoftDistExtVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return ISoftDistExtVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ISoftDistExtVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        ISoftDistExtVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ISoftDistExtVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        ISoftDistExtVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ISoftDistExtVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, ISoftDistExtVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, ISoftDistExtVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)ISoftDistExtVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return ISoftDistExtVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ISoftDistExtVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        ISoftDistExtVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ISoftDistExtVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        ISoftDistExtVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ISoftDistExtVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, ISoftDistExtVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, ISoftDistExtVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)ISoftDistExtVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return ISoftDistExtVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ISoftDistExtVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        ISoftDistExtVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ISoftDistExtVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        ISoftDistExtVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor ProcessSoftDist$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle ProcessSoftDist$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ISoftDistExtVtbl.ProcessSoftDist$FUNC, false
    );
    public interface ProcessSoftDist {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(ProcessSoftDist fi) {
            return RuntimeHelper.upcallStub(ProcessSoftDist.class, fi, ISoftDistExtVtbl.ProcessSoftDist$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(ProcessSoftDist fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(ProcessSoftDist.class, fi, ISoftDistExtVtbl.ProcessSoftDist$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static ProcessSoftDist ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)ISoftDistExtVtbl.ProcessSoftDist$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ProcessSoftDist$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ProcessSoftDist")));
    public static VarHandle ProcessSoftDist$VH() {
        return ISoftDistExtVtbl.ProcessSoftDist$VH;
    }
    public static MemoryAddress ProcessSoftDist$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ISoftDistExtVtbl.ProcessSoftDist$VH.get(seg);
    }
    public static void ProcessSoftDist$set( MemorySegment seg, MemoryAddress x) {
        ISoftDistExtVtbl.ProcessSoftDist$VH.set(seg, x);
    }
    public static MemoryAddress ProcessSoftDist$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ISoftDistExtVtbl.ProcessSoftDist$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessSoftDist$set(MemorySegment seg, long index, MemoryAddress x) {
        ISoftDistExtVtbl.ProcessSoftDist$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ProcessSoftDist ProcessSoftDist (MemorySegment segment) {
        return ProcessSoftDist.ofAddress(ProcessSoftDist$get(segment));
    }
    static final FunctionDescriptor GetFirstCodeBase$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetFirstCodeBase$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ISoftDistExtVtbl.GetFirstCodeBase$FUNC, false
    );
    public interface GetFirstCodeBase {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetFirstCodeBase fi) {
            return RuntimeHelper.upcallStub(GetFirstCodeBase.class, fi, ISoftDistExtVtbl.GetFirstCodeBase$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetFirstCodeBase fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetFirstCodeBase.class, fi, ISoftDistExtVtbl.GetFirstCodeBase$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetFirstCodeBase ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ISoftDistExtVtbl.GetFirstCodeBase$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetFirstCodeBase$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetFirstCodeBase")));
    public static VarHandle GetFirstCodeBase$VH() {
        return ISoftDistExtVtbl.GetFirstCodeBase$VH;
    }
    public static MemoryAddress GetFirstCodeBase$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ISoftDistExtVtbl.GetFirstCodeBase$VH.get(seg);
    }
    public static void GetFirstCodeBase$set( MemorySegment seg, MemoryAddress x) {
        ISoftDistExtVtbl.GetFirstCodeBase$VH.set(seg, x);
    }
    public static MemoryAddress GetFirstCodeBase$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ISoftDistExtVtbl.GetFirstCodeBase$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFirstCodeBase$set(MemorySegment seg, long index, MemoryAddress x) {
        ISoftDistExtVtbl.GetFirstCodeBase$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFirstCodeBase GetFirstCodeBase (MemorySegment segment) {
        return GetFirstCodeBase.ofAddress(GetFirstCodeBase$get(segment));
    }
    static final FunctionDescriptor GetNextCodeBase$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetNextCodeBase$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ISoftDistExtVtbl.GetNextCodeBase$FUNC, false
    );
    public interface GetNextCodeBase {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetNextCodeBase fi) {
            return RuntimeHelper.upcallStub(GetNextCodeBase.class, fi, ISoftDistExtVtbl.GetNextCodeBase$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetNextCodeBase fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetNextCodeBase.class, fi, ISoftDistExtVtbl.GetNextCodeBase$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetNextCodeBase ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ISoftDistExtVtbl.GetNextCodeBase$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetNextCodeBase$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetNextCodeBase")));
    public static VarHandle GetNextCodeBase$VH() {
        return ISoftDistExtVtbl.GetNextCodeBase$VH;
    }
    public static MemoryAddress GetNextCodeBase$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ISoftDistExtVtbl.GetNextCodeBase$VH.get(seg);
    }
    public static void GetNextCodeBase$set( MemorySegment seg, MemoryAddress x) {
        ISoftDistExtVtbl.GetNextCodeBase$VH.set(seg, x);
    }
    public static MemoryAddress GetNextCodeBase$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ISoftDistExtVtbl.GetNextCodeBase$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetNextCodeBase$set(MemorySegment seg, long index, MemoryAddress x) {
        ISoftDistExtVtbl.GetNextCodeBase$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetNextCodeBase GetNextCodeBase (MemorySegment segment) {
        return GetNextCodeBase.ofAddress(GetNextCodeBase$get(segment));
    }
    static final FunctionDescriptor AsyncInstallDistributionUnit$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle AsyncInstallDistributionUnit$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ISoftDistExtVtbl.AsyncInstallDistributionUnit$FUNC, false
    );
    public interface AsyncInstallDistributionUnit {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4);
        static MemoryAddress allocate(AsyncInstallDistributionUnit fi) {
            return RuntimeHelper.upcallStub(AsyncInstallDistributionUnit.class, fi, ISoftDistExtVtbl.AsyncInstallDistributionUnit$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AsyncInstallDistributionUnit fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AsyncInstallDistributionUnit.class, fi, ISoftDistExtVtbl.AsyncInstallDistributionUnit$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AsyncInstallDistributionUnit ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4) -> {
                try {
                    return (int)ISoftDistExtVtbl.AsyncInstallDistributionUnit$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AsyncInstallDistributionUnit$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AsyncInstallDistributionUnit")));
    public static VarHandle AsyncInstallDistributionUnit$VH() {
        return ISoftDistExtVtbl.AsyncInstallDistributionUnit$VH;
    }
    public static MemoryAddress AsyncInstallDistributionUnit$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ISoftDistExtVtbl.AsyncInstallDistributionUnit$VH.get(seg);
    }
    public static void AsyncInstallDistributionUnit$set( MemorySegment seg, MemoryAddress x) {
        ISoftDistExtVtbl.AsyncInstallDistributionUnit$VH.set(seg, x);
    }
    public static MemoryAddress AsyncInstallDistributionUnit$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ISoftDistExtVtbl.AsyncInstallDistributionUnit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AsyncInstallDistributionUnit$set(MemorySegment seg, long index, MemoryAddress x) {
        ISoftDistExtVtbl.AsyncInstallDistributionUnit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AsyncInstallDistributionUnit AsyncInstallDistributionUnit (MemorySegment segment) {
        return AsyncInstallDistributionUnit.ofAddress(AsyncInstallDistributionUnit$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


