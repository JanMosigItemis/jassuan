// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _LOOKUP_STREAM_FROM_CLUSTER_ENTRY {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("OffsetToNext"),
        C_LONG.withName("Flags"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONG_LONG.withName("QuadPart")
        ).withName("Reserved"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONG_LONG.withName("QuadPart")
        ).withName("Cluster"),
        MemoryLayout.sequenceLayout(1, C_SHORT).withName("FileName"),
        MemoryLayout.paddingLayout(48)
    ).withName("_LOOKUP_STREAM_FROM_CLUSTER_ENTRY");
    public static MemoryLayout $LAYOUT() {
        return _LOOKUP_STREAM_FROM_CLUSTER_ENTRY.$struct$LAYOUT;
    }
    static final VarHandle OffsetToNext$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("OffsetToNext"));
    public static VarHandle OffsetToNext$VH() {
        return _LOOKUP_STREAM_FROM_CLUSTER_ENTRY.OffsetToNext$VH;
    }
    public static int OffsetToNext$get(MemorySegment seg) {
        return (int)_LOOKUP_STREAM_FROM_CLUSTER_ENTRY.OffsetToNext$VH.get(seg);
    }
    public static void OffsetToNext$set( MemorySegment seg, int x) {
        _LOOKUP_STREAM_FROM_CLUSTER_ENTRY.OffsetToNext$VH.set(seg, x);
    }
    public static int OffsetToNext$get(MemorySegment seg, long index) {
        return (int)_LOOKUP_STREAM_FROM_CLUSTER_ENTRY.OffsetToNext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OffsetToNext$set(MemorySegment seg, long index, int x) {
        _LOOKUP_STREAM_FROM_CLUSTER_ENTRY.OffsetToNext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _LOOKUP_STREAM_FROM_CLUSTER_ENTRY.Flags$VH;
    }
    public static int Flags$get(MemorySegment seg) {
        return (int)_LOOKUP_STREAM_FROM_CLUSTER_ENTRY.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, int x) {
        _LOOKUP_STREAM_FROM_CLUSTER_ENTRY.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_LOOKUP_STREAM_FROM_CLUSTER_ENTRY.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _LOOKUP_STREAM_FROM_CLUSTER_ENTRY.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Reserved$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static MemorySegment Cluster$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static MemorySegment FileName$slice(MemorySegment seg) {
        return seg.asSlice(24, 2);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


