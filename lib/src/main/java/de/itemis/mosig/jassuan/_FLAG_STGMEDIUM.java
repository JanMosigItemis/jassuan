// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _FLAG_STGMEDIUM {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("ContextFlags"),
        C_LONG.withName("fPassOwnership"),
        MemoryLayout.structLayout(
            C_LONG.withName("tymed"),
            MemoryLayout.paddingLayout(32),
            MemoryLayout.unionLayout(
                C_POINTER.withName("hBitmap"),
                C_POINTER.withName("hMetaFilePict"),
                C_POINTER.withName("hEnhMetaFile"),
                C_POINTER.withName("hGlobal"),
                C_POINTER.withName("lpszFileName"),
                C_POINTER.withName("pstm"),
                C_POINTER.withName("pstg")
            ).withName("$anon$0"),
            C_POINTER.withName("pUnkForRelease")
        ).withName("Stgmed")
    ).withName("_FLAG_STGMEDIUM");
    public static MemoryLayout $LAYOUT() {
        return _FLAG_STGMEDIUM.$struct$LAYOUT;
    }
    static final VarHandle ContextFlags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ContextFlags"));
    public static VarHandle ContextFlags$VH() {
        return _FLAG_STGMEDIUM.ContextFlags$VH;
    }
    public static int ContextFlags$get(MemorySegment seg) {
        return (int)_FLAG_STGMEDIUM.ContextFlags$VH.get(seg);
    }
    public static void ContextFlags$set( MemorySegment seg, int x) {
        _FLAG_STGMEDIUM.ContextFlags$VH.set(seg, x);
    }
    public static int ContextFlags$get(MemorySegment seg, long index) {
        return (int)_FLAG_STGMEDIUM.ContextFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ContextFlags$set(MemorySegment seg, long index, int x) {
        _FLAG_STGMEDIUM.ContextFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fPassOwnership$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("fPassOwnership"));
    public static VarHandle fPassOwnership$VH() {
        return _FLAG_STGMEDIUM.fPassOwnership$VH;
    }
    public static int fPassOwnership$get(MemorySegment seg) {
        return (int)_FLAG_STGMEDIUM.fPassOwnership$VH.get(seg);
    }
    public static void fPassOwnership$set( MemorySegment seg, int x) {
        _FLAG_STGMEDIUM.fPassOwnership$VH.set(seg, x);
    }
    public static int fPassOwnership$get(MemorySegment seg, long index) {
        return (int)_FLAG_STGMEDIUM.fPassOwnership$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fPassOwnership$set(MemorySegment seg, long index, int x) {
        _FLAG_STGMEDIUM.fPassOwnership$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Stgmed$slice(MemorySegment seg) {
        return seg.asSlice(8, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


