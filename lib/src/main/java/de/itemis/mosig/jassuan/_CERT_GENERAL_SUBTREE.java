// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _CERT_GENERAL_SUBTREE {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            C_LONG.withName("dwAltNameChoice"),
            MemoryLayout.paddingLayout(32),
            MemoryLayout.unionLayout(
                C_POINTER.withName("pOtherName"),
                C_POINTER.withName("pwszRfc822Name"),
                C_POINTER.withName("pwszDNSName"),
                MemoryLayout.structLayout(
                    C_LONG.withName("cbData"),
                    MemoryLayout.paddingLayout(32),
                    C_POINTER.withName("pbData")
                ).withName("DirectoryName"),
                C_POINTER.withName("pwszURL"),
                MemoryLayout.structLayout(
                    C_LONG.withName("cbData"),
                    MemoryLayout.paddingLayout(32),
                    C_POINTER.withName("pbData")
                ).withName("IPAddress"),
                C_POINTER.withName("pszRegisteredID")
            ).withName("$anon$0")
        ).withName("Base"),
        C_LONG.withName("dwMinimum"),
        C_INT.withName("fMaximum"),
        C_LONG.withName("dwMaximum"),
        MemoryLayout.paddingLayout(32)
    ).withName("_CERT_GENERAL_SUBTREE");
    public static MemoryLayout $LAYOUT() {
        return _CERT_GENERAL_SUBTREE.$struct$LAYOUT;
    }
    public static MemorySegment Base$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    static final VarHandle dwMinimum$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMinimum"));
    public static VarHandle dwMinimum$VH() {
        return _CERT_GENERAL_SUBTREE.dwMinimum$VH;
    }
    public static int dwMinimum$get(MemorySegment seg) {
        return (int)_CERT_GENERAL_SUBTREE.dwMinimum$VH.get(seg);
    }
    public static void dwMinimum$set( MemorySegment seg, int x) {
        _CERT_GENERAL_SUBTREE.dwMinimum$VH.set(seg, x);
    }
    public static int dwMinimum$get(MemorySegment seg, long index) {
        return (int)_CERT_GENERAL_SUBTREE.dwMinimum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwMinimum$set(MemorySegment seg, long index, int x) {
        _CERT_GENERAL_SUBTREE.dwMinimum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fMaximum$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("fMaximum"));
    public static VarHandle fMaximum$VH() {
        return _CERT_GENERAL_SUBTREE.fMaximum$VH;
    }
    public static int fMaximum$get(MemorySegment seg) {
        return (int)_CERT_GENERAL_SUBTREE.fMaximum$VH.get(seg);
    }
    public static void fMaximum$set( MemorySegment seg, int x) {
        _CERT_GENERAL_SUBTREE.fMaximum$VH.set(seg, x);
    }
    public static int fMaximum$get(MemorySegment seg, long index) {
        return (int)_CERT_GENERAL_SUBTREE.fMaximum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fMaximum$set(MemorySegment seg, long index, int x) {
        _CERT_GENERAL_SUBTREE.fMaximum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwMaximum$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMaximum"));
    public static VarHandle dwMaximum$VH() {
        return _CERT_GENERAL_SUBTREE.dwMaximum$VH;
    }
    public static int dwMaximum$get(MemorySegment seg) {
        return (int)_CERT_GENERAL_SUBTREE.dwMaximum$VH.get(seg);
    }
    public static void dwMaximum$set( MemorySegment seg, int x) {
        _CERT_GENERAL_SUBTREE.dwMaximum$VH.set(seg, x);
    }
    public static int dwMaximum$get(MemorySegment seg, long index) {
        return (int)_CERT_GENERAL_SUBTREE.dwMaximum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwMaximum$set(MemorySegment seg, long index, int x) {
        _CERT_GENERAL_SUBTREE.dwMaximum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


