// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IInternetProtocolVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("Start"),
        C_POINTER.withName("Continue"),
        C_POINTER.withName("Abort"),
        C_POINTER.withName("Terminate"),
        C_POINTER.withName("Suspend"),
        C_POINTER.withName("Resume"),
        C_POINTER.withName("Read"),
        C_POINTER.withName("Seek"),
        C_POINTER.withName("LockRequest"),
        C_POINTER.withName("UnlockRequest")
    ).withName("IInternetProtocolVtbl");
    public static MemoryLayout $LAYOUT() {
        return IInternetProtocolVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetProtocolVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IInternetProtocolVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IInternetProtocolVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IInternetProtocolVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IInternetProtocolVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetProtocolVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IInternetProtocolVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IInternetProtocolVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IInternetProtocolVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IInternetProtocolVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetProtocolVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IInternetProtocolVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IInternetProtocolVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IInternetProtocolVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IInternetProtocolVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor Start$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG_LONG
    );
    static final MethodHandle Start$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJ)I",
        IInternetProtocolVtbl.Start$FUNC, false
    );
    public interface Start {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, int x4, long x5);
        static MemoryAddress allocate(Start fi) {
            return RuntimeHelper.upcallStub(Start.class, fi, IInternetProtocolVtbl.Start$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJ)I");
        }
        static MemoryAddress allocate(Start fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Start.class, fi, IInternetProtocolVtbl.Start$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJ)I", scope);
        }
        static Start ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, int x4, long x5) -> {
                try {
                    return (int)IInternetProtocolVtbl.Start$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Start$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Start")));
    public static VarHandle Start$VH() {
        return IInternetProtocolVtbl.Start$VH;
    }
    public static MemoryAddress Start$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.Start$VH.get(seg);
    }
    public static void Start$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolVtbl.Start$VH.set(seg, x);
    }
    public static MemoryAddress Start$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.Start$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Start$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolVtbl.Start$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Start Start (MemorySegment segment) {
        return Start.ofAddress(Start$get(segment));
    }
    static final FunctionDescriptor Continue$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle Continue$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetProtocolVtbl.Continue$FUNC, false
    );
    public interface Continue {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(Continue fi) {
            return RuntimeHelper.upcallStub(Continue.class, fi, IInternetProtocolVtbl.Continue$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Continue fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Continue.class, fi, IInternetProtocolVtbl.Continue$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Continue ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IInternetProtocolVtbl.Continue$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Continue$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Continue")));
    public static VarHandle Continue$VH() {
        return IInternetProtocolVtbl.Continue$VH;
    }
    public static MemoryAddress Continue$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.Continue$VH.get(seg);
    }
    public static void Continue$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolVtbl.Continue$VH.set(seg, x);
    }
    public static MemoryAddress Continue$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.Continue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Continue$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolVtbl.Continue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Continue Continue (MemorySegment segment) {
        return Continue.ofAddress(Continue$get(segment));
    }
    static final FunctionDescriptor Abort$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final MethodHandle Abort$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        IInternetProtocolVtbl.Abort$FUNC, false
    );
    public interface Abort {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2);
        static MemoryAddress allocate(Abort fi) {
            return RuntimeHelper.upcallStub(Abort.class, fi, IInternetProtocolVtbl.Abort$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)I");
        }
        static MemoryAddress allocate(Abort fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Abort.class, fi, IInternetProtocolVtbl.Abort$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)I", scope);
        }
        static Abort ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2) -> {
                try {
                    return (int)IInternetProtocolVtbl.Abort$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Abort$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Abort")));
    public static VarHandle Abort$VH() {
        return IInternetProtocolVtbl.Abort$VH;
    }
    public static MemoryAddress Abort$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.Abort$VH.get(seg);
    }
    public static void Abort$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolVtbl.Abort$VH.set(seg, x);
    }
    public static MemoryAddress Abort$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.Abort$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Abort$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolVtbl.Abort$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Abort Abort (MemorySegment segment) {
        return Abort.ofAddress(Abort$get(segment));
    }
    static final FunctionDescriptor Terminate$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle Terminate$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        IInternetProtocolVtbl.Terminate$FUNC, false
    );
    public interface Terminate {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
        static MemoryAddress allocate(Terminate fi) {
            return RuntimeHelper.upcallStub(Terminate.class, fi, IInternetProtocolVtbl.Terminate$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(Terminate fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Terminate.class, fi, IInternetProtocolVtbl.Terminate$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static Terminate ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1) -> {
                try {
                    return (int)IInternetProtocolVtbl.Terminate$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Terminate$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Terminate")));
    public static VarHandle Terminate$VH() {
        return IInternetProtocolVtbl.Terminate$VH;
    }
    public static MemoryAddress Terminate$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.Terminate$VH.get(seg);
    }
    public static void Terminate$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolVtbl.Terminate$VH.set(seg, x);
    }
    public static MemoryAddress Terminate$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.Terminate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Terminate$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolVtbl.Terminate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Terminate Terminate (MemorySegment segment) {
        return Terminate.ofAddress(Terminate$get(segment));
    }
    static final FunctionDescriptor Suspend$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Suspend$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetProtocolVtbl.Suspend$FUNC, false
    );
    public interface Suspend {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Suspend fi) {
            return RuntimeHelper.upcallStub(Suspend.class, fi, IInternetProtocolVtbl.Suspend$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Suspend fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Suspend.class, fi, IInternetProtocolVtbl.Suspend$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Suspend ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IInternetProtocolVtbl.Suspend$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Suspend$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Suspend")));
    public static VarHandle Suspend$VH() {
        return IInternetProtocolVtbl.Suspend$VH;
    }
    public static MemoryAddress Suspend$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.Suspend$VH.get(seg);
    }
    public static void Suspend$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolVtbl.Suspend$VH.set(seg, x);
    }
    public static MemoryAddress Suspend$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.Suspend$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Suspend$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolVtbl.Suspend$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Suspend Suspend (MemorySegment segment) {
        return Suspend.ofAddress(Suspend$get(segment));
    }
    static final FunctionDescriptor Resume$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Resume$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetProtocolVtbl.Resume$FUNC, false
    );
    public interface Resume {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Resume fi) {
            return RuntimeHelper.upcallStub(Resume.class, fi, IInternetProtocolVtbl.Resume$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Resume fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Resume.class, fi, IInternetProtocolVtbl.Resume$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Resume ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IInternetProtocolVtbl.Resume$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Resume$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Resume")));
    public static VarHandle Resume$VH() {
        return IInternetProtocolVtbl.Resume$VH;
    }
    public static MemoryAddress Resume$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.Resume$VH.get(seg);
    }
    public static void Resume$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolVtbl.Resume$VH.set(seg, x);
    }
    public static MemoryAddress Resume$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.Resume$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Resume$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolVtbl.Resume$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Resume Resume (MemorySegment segment) {
        return Resume.ofAddress(Resume$get(segment));
    }
    static final FunctionDescriptor Read$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle Read$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        IInternetProtocolVtbl.Read$FUNC, false
    );
    public interface Read {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(Read fi) {
            return RuntimeHelper.upcallStub(Read.class, fi, IInternetProtocolVtbl.Read$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Read fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Read.class, fi, IInternetProtocolVtbl.Read$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Read ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)IInternetProtocolVtbl.Read$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Read$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Read")));
    public static VarHandle Read$VH() {
        return IInternetProtocolVtbl.Read$VH;
    }
    public static MemoryAddress Read$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.Read$VH.get(seg);
    }
    public static void Read$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolVtbl.Read$VH.set(seg, x);
    }
    public static MemoryAddress Read$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.Read$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Read$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolVtbl.Read$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Read Read (MemorySegment segment) {
        return Read.ofAddress(Read$get(segment));
    }
    static final FunctionDescriptor Seek$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONG_LONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        C_LONG,
        C_POINTER
    );
    static final MethodHandle Seek$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;ILjdk/incubator/foreign/MemoryAddress;)I",
        IInternetProtocolVtbl.Seek$FUNC, false
    );
    public interface Seek {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1, int x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(Seek fi) {
            return RuntimeHelper.upcallStub(Seek.class, fi, IInternetProtocolVtbl.Seek$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Seek fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Seek.class, fi, IInternetProtocolVtbl.Seek$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Seek ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1, int x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)IInternetProtocolVtbl.Seek$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Seek$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Seek")));
    public static VarHandle Seek$VH() {
        return IInternetProtocolVtbl.Seek$VH;
    }
    public static MemoryAddress Seek$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.Seek$VH.get(seg);
    }
    public static void Seek$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolVtbl.Seek$VH.set(seg, x);
    }
    public static MemoryAddress Seek$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.Seek$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Seek$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolVtbl.Seek$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Seek Seek (MemorySegment segment) {
        return Seek.ofAddress(Seek$get(segment));
    }
    static final FunctionDescriptor LockRequest$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle LockRequest$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        IInternetProtocolVtbl.LockRequest$FUNC, false
    );
    public interface LockRequest {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
        static MemoryAddress allocate(LockRequest fi) {
            return RuntimeHelper.upcallStub(LockRequest.class, fi, IInternetProtocolVtbl.LockRequest$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(LockRequest fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(LockRequest.class, fi, IInternetProtocolVtbl.LockRequest$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static LockRequest ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1) -> {
                try {
                    return (int)IInternetProtocolVtbl.LockRequest$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle LockRequest$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("LockRequest")));
    public static VarHandle LockRequest$VH() {
        return IInternetProtocolVtbl.LockRequest$VH;
    }
    public static MemoryAddress LockRequest$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.LockRequest$VH.get(seg);
    }
    public static void LockRequest$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolVtbl.LockRequest$VH.set(seg, x);
    }
    public static MemoryAddress LockRequest$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.LockRequest$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LockRequest$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolVtbl.LockRequest$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static LockRequest LockRequest (MemorySegment segment) {
        return LockRequest.ofAddress(LockRequest$get(segment));
    }
    static final FunctionDescriptor UnlockRequest$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle UnlockRequest$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetProtocolVtbl.UnlockRequest$FUNC, false
    );
    public interface UnlockRequest {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(UnlockRequest fi) {
            return RuntimeHelper.upcallStub(UnlockRequest.class, fi, IInternetProtocolVtbl.UnlockRequest$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(UnlockRequest fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(UnlockRequest.class, fi, IInternetProtocolVtbl.UnlockRequest$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static UnlockRequest ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IInternetProtocolVtbl.UnlockRequest$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle UnlockRequest$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("UnlockRequest")));
    public static VarHandle UnlockRequest$VH() {
        return IInternetProtocolVtbl.UnlockRequest$VH;
    }
    public static MemoryAddress UnlockRequest$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.UnlockRequest$VH.get(seg);
    }
    public static void UnlockRequest$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolVtbl.UnlockRequest$VH.set(seg, x);
    }
    public static MemoryAddress UnlockRequest$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolVtbl.UnlockRequest$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UnlockRequest$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolVtbl.UnlockRequest$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static UnlockRequest UnlockRequest (MemorySegment segment) {
        return UnlockRequest.ofAddress(UnlockRequest$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


