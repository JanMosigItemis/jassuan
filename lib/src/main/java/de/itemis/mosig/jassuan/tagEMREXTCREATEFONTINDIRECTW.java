// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class tagEMREXTCREATEFONTINDIRECTW {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr"),
        C_LONG.withName("ihFont"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                C_LONG.withName("lfHeight"),
                C_LONG.withName("lfWidth"),
                C_LONG.withName("lfEscapement"),
                C_LONG.withName("lfOrientation"),
                C_LONG.withName("lfWeight"),
                C_CHAR.withName("lfItalic"),
                C_CHAR.withName("lfUnderline"),
                C_CHAR.withName("lfStrikeOut"),
                C_CHAR.withName("lfCharSet"),
                C_CHAR.withName("lfOutPrecision"),
                C_CHAR.withName("lfClipPrecision"),
                C_CHAR.withName("lfQuality"),
                C_CHAR.withName("lfPitchAndFamily"),
                MemoryLayout.sequenceLayout(32, C_SHORT).withName("lfFaceName")
            ).withName("elfLogFont"),
            MemoryLayout.sequenceLayout(64, C_SHORT).withName("elfFullName"),
            MemoryLayout.sequenceLayout(32, C_SHORT).withName("elfStyle"),
            C_LONG.withName("elfVersion"),
            C_LONG.withName("elfStyleSize"),
            C_LONG.withName("elfMatch"),
            C_LONG.withName("elfReserved"),
            MemoryLayout.sequenceLayout(4, C_CHAR).withName("elfVendorId"),
            C_LONG.withName("elfCulture"),
            MemoryLayout.structLayout(
                C_CHAR.withName("bFamilyType"),
                C_CHAR.withName("bSerifStyle"),
                C_CHAR.withName("bWeight"),
                C_CHAR.withName("bProportion"),
                C_CHAR.withName("bContrast"),
                C_CHAR.withName("bStrokeVariation"),
                C_CHAR.withName("bArmStyle"),
                C_CHAR.withName("bLetterform"),
                C_CHAR.withName("bMidline"),
                C_CHAR.withName("bXHeight")
            ).withName("elfPanose"),
            MemoryLayout.paddingLayout(16)
        ).withName("elfw")
    ).withName("tagEMREXTCREATEFONTINDIRECTW");
    public static MemoryLayout $LAYOUT() {
        return tagEMREXTCREATEFONTINDIRECTW.$struct$LAYOUT;
    }
    public static MemorySegment emr$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    static final VarHandle ihFont$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ihFont"));
    public static VarHandle ihFont$VH() {
        return tagEMREXTCREATEFONTINDIRECTW.ihFont$VH;
    }
    public static int ihFont$get(MemorySegment seg) {
        return (int)tagEMREXTCREATEFONTINDIRECTW.ihFont$VH.get(seg);
    }
    public static void ihFont$set( MemorySegment seg, int x) {
        tagEMREXTCREATEFONTINDIRECTW.ihFont$VH.set(seg, x);
    }
    public static int ihFont$get(MemorySegment seg, long index) {
        return (int)tagEMREXTCREATEFONTINDIRECTW.ihFont$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ihFont$set(MemorySegment seg, long index, int x) {
        tagEMREXTCREATEFONTINDIRECTW.ihFont$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment elfw$slice(MemorySegment seg) {
        return seg.asSlice(12, 320);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


