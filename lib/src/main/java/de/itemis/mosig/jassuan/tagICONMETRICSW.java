// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class tagICONMETRICSW {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("cbSize"),
        C_INT.withName("iHorzSpacing"),
        C_INT.withName("iVertSpacing"),
        C_INT.withName("iTitleWrap"),
        MemoryLayout.structLayout(
            C_LONG.withName("lfHeight"),
            C_LONG.withName("lfWidth"),
            C_LONG.withName("lfEscapement"),
            C_LONG.withName("lfOrientation"),
            C_LONG.withName("lfWeight"),
            C_CHAR.withName("lfItalic"),
            C_CHAR.withName("lfUnderline"),
            C_CHAR.withName("lfStrikeOut"),
            C_CHAR.withName("lfCharSet"),
            C_CHAR.withName("lfOutPrecision"),
            C_CHAR.withName("lfClipPrecision"),
            C_CHAR.withName("lfQuality"),
            C_CHAR.withName("lfPitchAndFamily"),
            MemoryLayout.sequenceLayout(32, C_SHORT).withName("lfFaceName")
        ).withName("lfFont")
    ).withName("tagICONMETRICSW");
    public static MemoryLayout $LAYOUT() {
        return tagICONMETRICSW.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return tagICONMETRICSW.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)tagICONMETRICSW.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        tagICONMETRICSW.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)tagICONMETRICSW.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        tagICONMETRICSW.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iHorzSpacing$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("iHorzSpacing"));
    public static VarHandle iHorzSpacing$VH() {
        return tagICONMETRICSW.iHorzSpacing$VH;
    }
    public static int iHorzSpacing$get(MemorySegment seg) {
        return (int)tagICONMETRICSW.iHorzSpacing$VH.get(seg);
    }
    public static void iHorzSpacing$set( MemorySegment seg, int x) {
        tagICONMETRICSW.iHorzSpacing$VH.set(seg, x);
    }
    public static int iHorzSpacing$get(MemorySegment seg, long index) {
        return (int)tagICONMETRICSW.iHorzSpacing$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iHorzSpacing$set(MemorySegment seg, long index, int x) {
        tagICONMETRICSW.iHorzSpacing$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iVertSpacing$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("iVertSpacing"));
    public static VarHandle iVertSpacing$VH() {
        return tagICONMETRICSW.iVertSpacing$VH;
    }
    public static int iVertSpacing$get(MemorySegment seg) {
        return (int)tagICONMETRICSW.iVertSpacing$VH.get(seg);
    }
    public static void iVertSpacing$set( MemorySegment seg, int x) {
        tagICONMETRICSW.iVertSpacing$VH.set(seg, x);
    }
    public static int iVertSpacing$get(MemorySegment seg, long index) {
        return (int)tagICONMETRICSW.iVertSpacing$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iVertSpacing$set(MemorySegment seg, long index, int x) {
        tagICONMETRICSW.iVertSpacing$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iTitleWrap$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("iTitleWrap"));
    public static VarHandle iTitleWrap$VH() {
        return tagICONMETRICSW.iTitleWrap$VH;
    }
    public static int iTitleWrap$get(MemorySegment seg) {
        return (int)tagICONMETRICSW.iTitleWrap$VH.get(seg);
    }
    public static void iTitleWrap$set( MemorySegment seg, int x) {
        tagICONMETRICSW.iTitleWrap$VH.set(seg, x);
    }
    public static int iTitleWrap$get(MemorySegment seg, long index) {
        return (int)tagICONMETRICSW.iTitleWrap$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iTitleWrap$set(MemorySegment seg, long index, int x) {
        tagICONMETRICSW.iTitleWrap$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment lfFont$slice(MemorySegment seg) {
        return seg.asSlice(16, 92);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


