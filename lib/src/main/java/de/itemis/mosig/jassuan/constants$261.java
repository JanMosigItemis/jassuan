// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$261 {

    static final MemoryLayout GUID_PROCESSOR_THROTTLE_POLICY$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_THROTTLE_POLICY$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "GUID_PROCESSOR_THROTTLE_POLICY", constants$261.GUID_PROCESSOR_THROTTLE_POLICY$LAYOUT);
    static final MemoryLayout GUID_PROCESSOR_THROTTLE_MAXIMUM$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_THROTTLE_MAXIMUM$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "GUID_PROCESSOR_THROTTLE_MAXIMUM", constants$261.GUID_PROCESSOR_THROTTLE_MAXIMUM$LAYOUT);
    static final MemoryLayout GUID_PROCESSOR_THROTTLE_MINIMUM$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_THROTTLE_MINIMUM$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "GUID_PROCESSOR_THROTTLE_MINIMUM", constants$261.GUID_PROCESSOR_THROTTLE_MINIMUM$LAYOUT);
    static final MemoryLayout GUID_PROCESSOR_ALLOW_THROTTLING$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_ALLOW_THROTTLING$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "GUID_PROCESSOR_ALLOW_THROTTLING", constants$261.GUID_PROCESSOR_ALLOW_THROTTLING$LAYOUT);
    static final MemoryLayout GUID_PROCESSOR_IDLESTATE_POLICY$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_IDLESTATE_POLICY$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "GUID_PROCESSOR_IDLESTATE_POLICY", constants$261.GUID_PROCESSOR_IDLESTATE_POLICY$LAYOUT);
    static final MemoryLayout GUID_PROCESSOR_PERFSTATE_POLICY$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_PERFSTATE_POLICY$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "GUID_PROCESSOR_PERFSTATE_POLICY", constants$261.GUID_PROCESSOR_PERFSTATE_POLICY$LAYOUT);
}


