// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _userBITMAP {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("bmType"),
        C_LONG.withName("bmWidth"),
        C_LONG.withName("bmHeight"),
        C_LONG.withName("bmWidthBytes"),
        C_SHORT.withName("bmPlanes"),
        C_SHORT.withName("bmBitsPixel"),
        C_LONG.withName("cbSize"),
        MemoryLayout.sequenceLayout(1, C_CHAR).withName("pBuffer"),
        MemoryLayout.paddingLayout(24)
    ).withName("_userBITMAP");
    public static MemoryLayout $LAYOUT() {
        return _userBITMAP.$struct$LAYOUT;
    }
    static final VarHandle bmType$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("bmType"));
    public static VarHandle bmType$VH() {
        return _userBITMAP.bmType$VH;
    }
    public static int bmType$get(MemorySegment seg) {
        return (int)_userBITMAP.bmType$VH.get(seg);
    }
    public static void bmType$set( MemorySegment seg, int x) {
        _userBITMAP.bmType$VH.set(seg, x);
    }
    public static int bmType$get(MemorySegment seg, long index) {
        return (int)_userBITMAP.bmType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bmType$set(MemorySegment seg, long index, int x) {
        _userBITMAP.bmType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bmWidth$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("bmWidth"));
    public static VarHandle bmWidth$VH() {
        return _userBITMAP.bmWidth$VH;
    }
    public static int bmWidth$get(MemorySegment seg) {
        return (int)_userBITMAP.bmWidth$VH.get(seg);
    }
    public static void bmWidth$set( MemorySegment seg, int x) {
        _userBITMAP.bmWidth$VH.set(seg, x);
    }
    public static int bmWidth$get(MemorySegment seg, long index) {
        return (int)_userBITMAP.bmWidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bmWidth$set(MemorySegment seg, long index, int x) {
        _userBITMAP.bmWidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bmHeight$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("bmHeight"));
    public static VarHandle bmHeight$VH() {
        return _userBITMAP.bmHeight$VH;
    }
    public static int bmHeight$get(MemorySegment seg) {
        return (int)_userBITMAP.bmHeight$VH.get(seg);
    }
    public static void bmHeight$set( MemorySegment seg, int x) {
        _userBITMAP.bmHeight$VH.set(seg, x);
    }
    public static int bmHeight$get(MemorySegment seg, long index) {
        return (int)_userBITMAP.bmHeight$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bmHeight$set(MemorySegment seg, long index, int x) {
        _userBITMAP.bmHeight$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bmWidthBytes$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("bmWidthBytes"));
    public static VarHandle bmWidthBytes$VH() {
        return _userBITMAP.bmWidthBytes$VH;
    }
    public static int bmWidthBytes$get(MemorySegment seg) {
        return (int)_userBITMAP.bmWidthBytes$VH.get(seg);
    }
    public static void bmWidthBytes$set( MemorySegment seg, int x) {
        _userBITMAP.bmWidthBytes$VH.set(seg, x);
    }
    public static int bmWidthBytes$get(MemorySegment seg, long index) {
        return (int)_userBITMAP.bmWidthBytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bmWidthBytes$set(MemorySegment seg, long index, int x) {
        _userBITMAP.bmWidthBytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bmPlanes$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("bmPlanes"));
    public static VarHandle bmPlanes$VH() {
        return _userBITMAP.bmPlanes$VH;
    }
    public static short bmPlanes$get(MemorySegment seg) {
        return (short)_userBITMAP.bmPlanes$VH.get(seg);
    }
    public static void bmPlanes$set( MemorySegment seg, short x) {
        _userBITMAP.bmPlanes$VH.set(seg, x);
    }
    public static short bmPlanes$get(MemorySegment seg, long index) {
        return (short)_userBITMAP.bmPlanes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bmPlanes$set(MemorySegment seg, long index, short x) {
        _userBITMAP.bmPlanes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bmBitsPixel$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("bmBitsPixel"));
    public static VarHandle bmBitsPixel$VH() {
        return _userBITMAP.bmBitsPixel$VH;
    }
    public static short bmBitsPixel$get(MemorySegment seg) {
        return (short)_userBITMAP.bmBitsPixel$VH.get(seg);
    }
    public static void bmBitsPixel$set( MemorySegment seg, short x) {
        _userBITMAP.bmBitsPixel$VH.set(seg, x);
    }
    public static short bmBitsPixel$get(MemorySegment seg, long index) {
        return (short)_userBITMAP.bmBitsPixel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bmBitsPixel$set(MemorySegment seg, long index, short x) {
        _userBITMAP.bmBitsPixel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return _userBITMAP.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)_userBITMAP.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        _userBITMAP.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)_userBITMAP.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        _userBITMAP.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment pBuffer$slice(MemorySegment seg) {
        return seg.asSlice(24, 1);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


