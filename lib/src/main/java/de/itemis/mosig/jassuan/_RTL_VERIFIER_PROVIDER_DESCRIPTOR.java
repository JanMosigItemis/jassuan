// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _RTL_VERIFIER_PROVIDER_DESCRIPTOR {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Length"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("ProviderDlls"),
        C_POINTER.withName("ProviderDllLoadCallback"),
        C_POINTER.withName("ProviderDllUnloadCallback"),
        C_POINTER.withName("VerifierImage"),
        C_LONG.withName("VerifierFlags"),
        C_LONG.withName("VerifierDebug"),
        C_POINTER.withName("RtlpGetStackTraceAddress"),
        C_POINTER.withName("RtlpDebugPageHeapCreate"),
        C_POINTER.withName("RtlpDebugPageHeapDestroy"),
        C_POINTER.withName("ProviderNtdllHeapFreeCallback")
    ).withName("_RTL_VERIFIER_PROVIDER_DESCRIPTOR");
    public static MemoryLayout $LAYOUT() {
        return _RTL_VERIFIER_PROVIDER_DESCRIPTOR.$struct$LAYOUT;
    }
    static final VarHandle Length$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Length"));
    public static VarHandle Length$VH() {
        return _RTL_VERIFIER_PROVIDER_DESCRIPTOR.Length$VH;
    }
    public static int Length$get(MemorySegment seg) {
        return (int)_RTL_VERIFIER_PROVIDER_DESCRIPTOR.Length$VH.get(seg);
    }
    public static void Length$set( MemorySegment seg, int x) {
        _RTL_VERIFIER_PROVIDER_DESCRIPTOR.Length$VH.set(seg, x);
    }
    public static int Length$get(MemorySegment seg, long index) {
        return (int)_RTL_VERIFIER_PROVIDER_DESCRIPTOR.Length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Length$set(MemorySegment seg, long index, int x) {
        _RTL_VERIFIER_PROVIDER_DESCRIPTOR.Length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ProviderDlls$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ProviderDlls")));
    public static VarHandle ProviderDlls$VH() {
        return _RTL_VERIFIER_PROVIDER_DESCRIPTOR.ProviderDlls$VH;
    }
    public static MemoryAddress ProviderDlls$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_PROVIDER_DESCRIPTOR.ProviderDlls$VH.get(seg);
    }
    public static void ProviderDlls$set( MemorySegment seg, MemoryAddress x) {
        _RTL_VERIFIER_PROVIDER_DESCRIPTOR.ProviderDlls$VH.set(seg, x);
    }
    public static MemoryAddress ProviderDlls$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_PROVIDER_DESCRIPTOR.ProviderDlls$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProviderDlls$set(MemorySegment seg, long index, MemoryAddress x) {
        _RTL_VERIFIER_PROVIDER_DESCRIPTOR.ProviderDlls$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ProviderDllLoadCallback$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ProviderDllLoadCallback")));
    public static VarHandle ProviderDllLoadCallback$VH() {
        return _RTL_VERIFIER_PROVIDER_DESCRIPTOR.ProviderDllLoadCallback$VH;
    }
    public static MemoryAddress ProviderDllLoadCallback$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_PROVIDER_DESCRIPTOR.ProviderDllLoadCallback$VH.get(seg);
    }
    public static void ProviderDllLoadCallback$set( MemorySegment seg, MemoryAddress x) {
        _RTL_VERIFIER_PROVIDER_DESCRIPTOR.ProviderDllLoadCallback$VH.set(seg, x);
    }
    public static MemoryAddress ProviderDllLoadCallback$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_PROVIDER_DESCRIPTOR.ProviderDllLoadCallback$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProviderDllLoadCallback$set(MemorySegment seg, long index, MemoryAddress x) {
        _RTL_VERIFIER_PROVIDER_DESCRIPTOR.ProviderDllLoadCallback$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RTL_VERIFIER_DLL_LOAD_CALLBACK ProviderDllLoadCallback (MemorySegment segment) {
        return RTL_VERIFIER_DLL_LOAD_CALLBACK.ofAddress(ProviderDllLoadCallback$get(segment));
    }
    static final VarHandle ProviderDllUnloadCallback$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ProviderDllUnloadCallback")));
    public static VarHandle ProviderDllUnloadCallback$VH() {
        return _RTL_VERIFIER_PROVIDER_DESCRIPTOR.ProviderDllUnloadCallback$VH;
    }
    public static MemoryAddress ProviderDllUnloadCallback$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_PROVIDER_DESCRIPTOR.ProviderDllUnloadCallback$VH.get(seg);
    }
    public static void ProviderDllUnloadCallback$set( MemorySegment seg, MemoryAddress x) {
        _RTL_VERIFIER_PROVIDER_DESCRIPTOR.ProviderDllUnloadCallback$VH.set(seg, x);
    }
    public static MemoryAddress ProviderDllUnloadCallback$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_PROVIDER_DESCRIPTOR.ProviderDllUnloadCallback$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProviderDllUnloadCallback$set(MemorySegment seg, long index, MemoryAddress x) {
        _RTL_VERIFIER_PROVIDER_DESCRIPTOR.ProviderDllUnloadCallback$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RTL_VERIFIER_DLL_UNLOAD_CALLBACK ProviderDllUnloadCallback (MemorySegment segment) {
        return RTL_VERIFIER_DLL_UNLOAD_CALLBACK.ofAddress(ProviderDllUnloadCallback$get(segment));
    }
    static final VarHandle VerifierImage$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("VerifierImage")));
    public static VarHandle VerifierImage$VH() {
        return _RTL_VERIFIER_PROVIDER_DESCRIPTOR.VerifierImage$VH;
    }
    public static MemoryAddress VerifierImage$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_PROVIDER_DESCRIPTOR.VerifierImage$VH.get(seg);
    }
    public static void VerifierImage$set( MemorySegment seg, MemoryAddress x) {
        _RTL_VERIFIER_PROVIDER_DESCRIPTOR.VerifierImage$VH.set(seg, x);
    }
    public static MemoryAddress VerifierImage$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_PROVIDER_DESCRIPTOR.VerifierImage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void VerifierImage$set(MemorySegment seg, long index, MemoryAddress x) {
        _RTL_VERIFIER_PROVIDER_DESCRIPTOR.VerifierImage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle VerifierFlags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("VerifierFlags"));
    public static VarHandle VerifierFlags$VH() {
        return _RTL_VERIFIER_PROVIDER_DESCRIPTOR.VerifierFlags$VH;
    }
    public static int VerifierFlags$get(MemorySegment seg) {
        return (int)_RTL_VERIFIER_PROVIDER_DESCRIPTOR.VerifierFlags$VH.get(seg);
    }
    public static void VerifierFlags$set( MemorySegment seg, int x) {
        _RTL_VERIFIER_PROVIDER_DESCRIPTOR.VerifierFlags$VH.set(seg, x);
    }
    public static int VerifierFlags$get(MemorySegment seg, long index) {
        return (int)_RTL_VERIFIER_PROVIDER_DESCRIPTOR.VerifierFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void VerifierFlags$set(MemorySegment seg, long index, int x) {
        _RTL_VERIFIER_PROVIDER_DESCRIPTOR.VerifierFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle VerifierDebug$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("VerifierDebug"));
    public static VarHandle VerifierDebug$VH() {
        return _RTL_VERIFIER_PROVIDER_DESCRIPTOR.VerifierDebug$VH;
    }
    public static int VerifierDebug$get(MemorySegment seg) {
        return (int)_RTL_VERIFIER_PROVIDER_DESCRIPTOR.VerifierDebug$VH.get(seg);
    }
    public static void VerifierDebug$set( MemorySegment seg, int x) {
        _RTL_VERIFIER_PROVIDER_DESCRIPTOR.VerifierDebug$VH.set(seg, x);
    }
    public static int VerifierDebug$get(MemorySegment seg, long index) {
        return (int)_RTL_VERIFIER_PROVIDER_DESCRIPTOR.VerifierDebug$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void VerifierDebug$set(MemorySegment seg, long index, int x) {
        _RTL_VERIFIER_PROVIDER_DESCRIPTOR.VerifierDebug$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RtlpGetStackTraceAddress$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("RtlpGetStackTraceAddress")));
    public static VarHandle RtlpGetStackTraceAddress$VH() {
        return _RTL_VERIFIER_PROVIDER_DESCRIPTOR.RtlpGetStackTraceAddress$VH;
    }
    public static MemoryAddress RtlpGetStackTraceAddress$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_PROVIDER_DESCRIPTOR.RtlpGetStackTraceAddress$VH.get(seg);
    }
    public static void RtlpGetStackTraceAddress$set( MemorySegment seg, MemoryAddress x) {
        _RTL_VERIFIER_PROVIDER_DESCRIPTOR.RtlpGetStackTraceAddress$VH.set(seg, x);
    }
    public static MemoryAddress RtlpGetStackTraceAddress$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_PROVIDER_DESCRIPTOR.RtlpGetStackTraceAddress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RtlpGetStackTraceAddress$set(MemorySegment seg, long index, MemoryAddress x) {
        _RTL_VERIFIER_PROVIDER_DESCRIPTOR.RtlpGetStackTraceAddress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RtlpDebugPageHeapCreate$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("RtlpDebugPageHeapCreate")));
    public static VarHandle RtlpDebugPageHeapCreate$VH() {
        return _RTL_VERIFIER_PROVIDER_DESCRIPTOR.RtlpDebugPageHeapCreate$VH;
    }
    public static MemoryAddress RtlpDebugPageHeapCreate$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_PROVIDER_DESCRIPTOR.RtlpDebugPageHeapCreate$VH.get(seg);
    }
    public static void RtlpDebugPageHeapCreate$set( MemorySegment seg, MemoryAddress x) {
        _RTL_VERIFIER_PROVIDER_DESCRIPTOR.RtlpDebugPageHeapCreate$VH.set(seg, x);
    }
    public static MemoryAddress RtlpDebugPageHeapCreate$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_PROVIDER_DESCRIPTOR.RtlpDebugPageHeapCreate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RtlpDebugPageHeapCreate$set(MemorySegment seg, long index, MemoryAddress x) {
        _RTL_VERIFIER_PROVIDER_DESCRIPTOR.RtlpDebugPageHeapCreate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RtlpDebugPageHeapDestroy$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("RtlpDebugPageHeapDestroy")));
    public static VarHandle RtlpDebugPageHeapDestroy$VH() {
        return _RTL_VERIFIER_PROVIDER_DESCRIPTOR.RtlpDebugPageHeapDestroy$VH;
    }
    public static MemoryAddress RtlpDebugPageHeapDestroy$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_PROVIDER_DESCRIPTOR.RtlpDebugPageHeapDestroy$VH.get(seg);
    }
    public static void RtlpDebugPageHeapDestroy$set( MemorySegment seg, MemoryAddress x) {
        _RTL_VERIFIER_PROVIDER_DESCRIPTOR.RtlpDebugPageHeapDestroy$VH.set(seg, x);
    }
    public static MemoryAddress RtlpDebugPageHeapDestroy$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_PROVIDER_DESCRIPTOR.RtlpDebugPageHeapDestroy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RtlpDebugPageHeapDestroy$set(MemorySegment seg, long index, MemoryAddress x) {
        _RTL_VERIFIER_PROVIDER_DESCRIPTOR.RtlpDebugPageHeapDestroy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ProviderNtdllHeapFreeCallback$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ProviderNtdllHeapFreeCallback")));
    public static VarHandle ProviderNtdllHeapFreeCallback$VH() {
        return _RTL_VERIFIER_PROVIDER_DESCRIPTOR.ProviderNtdllHeapFreeCallback$VH;
    }
    public static MemoryAddress ProviderNtdllHeapFreeCallback$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_PROVIDER_DESCRIPTOR.ProviderNtdllHeapFreeCallback$VH.get(seg);
    }
    public static void ProviderNtdllHeapFreeCallback$set( MemorySegment seg, MemoryAddress x) {
        _RTL_VERIFIER_PROVIDER_DESCRIPTOR.ProviderNtdllHeapFreeCallback$VH.set(seg, x);
    }
    public static MemoryAddress ProviderNtdllHeapFreeCallback$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_PROVIDER_DESCRIPTOR.ProviderNtdllHeapFreeCallback$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProviderNtdllHeapFreeCallback$set(MemorySegment seg, long index, MemoryAddress x) {
        _RTL_VERIFIER_PROVIDER_DESCRIPTOR.ProviderNtdllHeapFreeCallback$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK ProviderNtdllHeapFreeCallback (MemorySegment segment) {
        return RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK.ofAddress(ProviderNtdllHeapFreeCallback$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


