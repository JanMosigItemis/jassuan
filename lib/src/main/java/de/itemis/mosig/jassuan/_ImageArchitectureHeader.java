// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _ImageArchitectureHeader {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("AmaskValue"),
            MemoryLayout.valueLayout(7, ByteOrder.nativeOrder()).withName("Adummy1"),
            MemoryLayout.valueLayout(8, ByteOrder.nativeOrder()).withName("AmaskShift"),
            MemoryLayout.valueLayout(16, ByteOrder.nativeOrder()).withName("Adummy2")
        ),
        C_LONG.withName("FirstEntryRVA")
    ).withName("_ImageArchitectureHeader");
    public static MemoryLayout $LAYOUT() {
        return _ImageArchitectureHeader.$struct$LAYOUT;
    }
    static final VarHandle FirstEntryRVA$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("FirstEntryRVA"));
    public static VarHandle FirstEntryRVA$VH() {
        return _ImageArchitectureHeader.FirstEntryRVA$VH;
    }
    public static int FirstEntryRVA$get(MemorySegment seg) {
        return (int)_ImageArchitectureHeader.FirstEntryRVA$VH.get(seg);
    }
    public static void FirstEntryRVA$set( MemorySegment seg, int x) {
        _ImageArchitectureHeader.FirstEntryRVA$VH.set(seg, x);
    }
    public static int FirstEntryRVA$get(MemorySegment seg, long index) {
        return (int)_ImageArchitectureHeader.FirstEntryRVA$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FirstEntryRVA$set(MemorySegment seg, long index, int x) {
        _ImageArchitectureHeader.FirstEntryRVA$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


