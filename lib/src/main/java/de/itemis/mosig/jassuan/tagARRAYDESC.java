// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class tagARRAYDESC {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                C_POINTER.withName("lptdesc"),
                C_POINTER.withName("lpadesc"),
                C_LONG.withName("hreftype")
            ).withName("$anon$0"),
            C_SHORT.withName("vt"),
            MemoryLayout.paddingLayout(48)
        ).withName("tdescElem"),
        C_SHORT.withName("cDims"),
        MemoryLayout.paddingLayout(16),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            C_LONG.withName("cElements"),
            C_LONG.withName("lLbound")
        ).withName("tagSAFEARRAYBOUND")).withName("rgbounds"),
        MemoryLayout.paddingLayout(32)
    ).withName("tagARRAYDESC");
    public static MemoryLayout $LAYOUT() {
        return tagARRAYDESC.$struct$LAYOUT;
    }
    public static MemorySegment tdescElem$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final VarHandle cDims$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("cDims"));
    public static VarHandle cDims$VH() {
        return tagARRAYDESC.cDims$VH;
    }
    public static short cDims$get(MemorySegment seg) {
        return (short)tagARRAYDESC.cDims$VH.get(seg);
    }
    public static void cDims$set( MemorySegment seg, short x) {
        tagARRAYDESC.cDims$VH.set(seg, x);
    }
    public static short cDims$get(MemorySegment seg, long index) {
        return (short)tagARRAYDESC.cDims$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cDims$set(MemorySegment seg, long index, short x) {
        tagARRAYDESC.cDims$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment rgbounds$slice(MemorySegment seg) {
        return seg.asSlice(20, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


