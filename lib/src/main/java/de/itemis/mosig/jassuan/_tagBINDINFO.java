// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _tagBINDINFO {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("cbSize"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("szExtraInfo"),
        MemoryLayout.structLayout(
            C_LONG.withName("tymed"),
            MemoryLayout.paddingLayout(32),
            MemoryLayout.unionLayout(
                C_POINTER.withName("hBitmap"),
                C_POINTER.withName("hMetaFilePict"),
                C_POINTER.withName("hEnhMetaFile"),
                C_POINTER.withName("hGlobal"),
                C_POINTER.withName("lpszFileName"),
                C_POINTER.withName("pstm"),
                C_POINTER.withName("pstg")
            ).withName("$anon$0"),
            C_POINTER.withName("pUnkForRelease")
        ).withName("stgmedData"),
        C_LONG.withName("grfBindInfoF"),
        C_LONG.withName("dwBindVerb"),
        C_POINTER.withName("szCustomVerb"),
        C_LONG.withName("cbstgmedData"),
        C_LONG.withName("dwOptions"),
        C_LONG.withName("dwOptionsFlags"),
        C_LONG.withName("dwCodePage"),
        MemoryLayout.structLayout(
            C_LONG.withName("nLength"),
            MemoryLayout.paddingLayout(32),
            C_POINTER.withName("lpSecurityDescriptor"),
            C_INT.withName("bInheritHandle"),
            MemoryLayout.paddingLayout(32)
        ).withName("securityAttributes"),
        MemoryLayout.structLayout(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
        ).withName("iid"),
        C_POINTER.withName("pUnk"),
        C_LONG.withName("dwReserved"),
        MemoryLayout.paddingLayout(32)
    ).withName("_tagBINDINFO");
    public static MemoryLayout $LAYOUT() {
        return _tagBINDINFO.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return _tagBINDINFO.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)_tagBINDINFO.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        _tagBINDINFO.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)_tagBINDINFO.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        _tagBINDINFO.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle szExtraInfo$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("szExtraInfo")));
    public static VarHandle szExtraInfo$VH() {
        return _tagBINDINFO.szExtraInfo$VH;
    }
    public static MemoryAddress szExtraInfo$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_tagBINDINFO.szExtraInfo$VH.get(seg);
    }
    public static void szExtraInfo$set( MemorySegment seg, MemoryAddress x) {
        _tagBINDINFO.szExtraInfo$VH.set(seg, x);
    }
    public static MemoryAddress szExtraInfo$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_tagBINDINFO.szExtraInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void szExtraInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        _tagBINDINFO.szExtraInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment stgmedData$slice(MemorySegment seg) {
        return seg.asSlice(16, 24);
    }
    static final VarHandle grfBindInfoF$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("grfBindInfoF"));
    public static VarHandle grfBindInfoF$VH() {
        return _tagBINDINFO.grfBindInfoF$VH;
    }
    public static int grfBindInfoF$get(MemorySegment seg) {
        return (int)_tagBINDINFO.grfBindInfoF$VH.get(seg);
    }
    public static void grfBindInfoF$set( MemorySegment seg, int x) {
        _tagBINDINFO.grfBindInfoF$VH.set(seg, x);
    }
    public static int grfBindInfoF$get(MemorySegment seg, long index) {
        return (int)_tagBINDINFO.grfBindInfoF$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void grfBindInfoF$set(MemorySegment seg, long index, int x) {
        _tagBINDINFO.grfBindInfoF$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwBindVerb$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwBindVerb"));
    public static VarHandle dwBindVerb$VH() {
        return _tagBINDINFO.dwBindVerb$VH;
    }
    public static int dwBindVerb$get(MemorySegment seg) {
        return (int)_tagBINDINFO.dwBindVerb$VH.get(seg);
    }
    public static void dwBindVerb$set( MemorySegment seg, int x) {
        _tagBINDINFO.dwBindVerb$VH.set(seg, x);
    }
    public static int dwBindVerb$get(MemorySegment seg, long index) {
        return (int)_tagBINDINFO.dwBindVerb$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwBindVerb$set(MemorySegment seg, long index, int x) {
        _tagBINDINFO.dwBindVerb$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle szCustomVerb$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("szCustomVerb")));
    public static VarHandle szCustomVerb$VH() {
        return _tagBINDINFO.szCustomVerb$VH;
    }
    public static MemoryAddress szCustomVerb$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_tagBINDINFO.szCustomVerb$VH.get(seg);
    }
    public static void szCustomVerb$set( MemorySegment seg, MemoryAddress x) {
        _tagBINDINFO.szCustomVerb$VH.set(seg, x);
    }
    public static MemoryAddress szCustomVerb$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_tagBINDINFO.szCustomVerb$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void szCustomVerb$set(MemorySegment seg, long index, MemoryAddress x) {
        _tagBINDINFO.szCustomVerb$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbstgmedData$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbstgmedData"));
    public static VarHandle cbstgmedData$VH() {
        return _tagBINDINFO.cbstgmedData$VH;
    }
    public static int cbstgmedData$get(MemorySegment seg) {
        return (int)_tagBINDINFO.cbstgmedData$VH.get(seg);
    }
    public static void cbstgmedData$set( MemorySegment seg, int x) {
        _tagBINDINFO.cbstgmedData$VH.set(seg, x);
    }
    public static int cbstgmedData$get(MemorySegment seg, long index) {
        return (int)_tagBINDINFO.cbstgmedData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbstgmedData$set(MemorySegment seg, long index, int x) {
        _tagBINDINFO.cbstgmedData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwOptions$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwOptions"));
    public static VarHandle dwOptions$VH() {
        return _tagBINDINFO.dwOptions$VH;
    }
    public static int dwOptions$get(MemorySegment seg) {
        return (int)_tagBINDINFO.dwOptions$VH.get(seg);
    }
    public static void dwOptions$set( MemorySegment seg, int x) {
        _tagBINDINFO.dwOptions$VH.set(seg, x);
    }
    public static int dwOptions$get(MemorySegment seg, long index) {
        return (int)_tagBINDINFO.dwOptions$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwOptions$set(MemorySegment seg, long index, int x) {
        _tagBINDINFO.dwOptions$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwOptionsFlags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwOptionsFlags"));
    public static VarHandle dwOptionsFlags$VH() {
        return _tagBINDINFO.dwOptionsFlags$VH;
    }
    public static int dwOptionsFlags$get(MemorySegment seg) {
        return (int)_tagBINDINFO.dwOptionsFlags$VH.get(seg);
    }
    public static void dwOptionsFlags$set( MemorySegment seg, int x) {
        _tagBINDINFO.dwOptionsFlags$VH.set(seg, x);
    }
    public static int dwOptionsFlags$get(MemorySegment seg, long index) {
        return (int)_tagBINDINFO.dwOptionsFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwOptionsFlags$set(MemorySegment seg, long index, int x) {
        _tagBINDINFO.dwOptionsFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwCodePage$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCodePage"));
    public static VarHandle dwCodePage$VH() {
        return _tagBINDINFO.dwCodePage$VH;
    }
    public static int dwCodePage$get(MemorySegment seg) {
        return (int)_tagBINDINFO.dwCodePage$VH.get(seg);
    }
    public static void dwCodePage$set( MemorySegment seg, int x) {
        _tagBINDINFO.dwCodePage$VH.set(seg, x);
    }
    public static int dwCodePage$get(MemorySegment seg, long index) {
        return (int)_tagBINDINFO.dwCodePage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwCodePage$set(MemorySegment seg, long index, int x) {
        _tagBINDINFO.dwCodePage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment securityAttributes$slice(MemorySegment seg) {
        return seg.asSlice(72, 24);
    }
    public static MemorySegment iid$slice(MemorySegment seg) {
        return seg.asSlice(96, 16);
    }
    static final VarHandle pUnk$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pUnk")));
    public static VarHandle pUnk$VH() {
        return _tagBINDINFO.pUnk$VH;
    }
    public static MemoryAddress pUnk$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_tagBINDINFO.pUnk$VH.get(seg);
    }
    public static void pUnk$set( MemorySegment seg, MemoryAddress x) {
        _tagBINDINFO.pUnk$VH.set(seg, x);
    }
    public static MemoryAddress pUnk$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_tagBINDINFO.pUnk$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pUnk$set(MemorySegment seg, long index, MemoryAddress x) {
        _tagBINDINFO.pUnk$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwReserved$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwReserved"));
    public static VarHandle dwReserved$VH() {
        return _tagBINDINFO.dwReserved$VH;
    }
    public static int dwReserved$get(MemorySegment seg) {
        return (int)_tagBINDINFO.dwReserved$VH.get(seg);
    }
    public static void dwReserved$set( MemorySegment seg, int x) {
        _tagBINDINFO.dwReserved$VH.set(seg, x);
    }
    public static int dwReserved$get(MemorySegment seg, long index) {
        return (int)_tagBINDINFO.dwReserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwReserved$set(MemorySegment seg, long index, int x) {
        _tagBINDINFO.dwReserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


