// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _MESSAGE_RESOURCE_ENTRY {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_SHORT.withName("Length"),
        C_SHORT.withName("Flags"),
        MemoryLayout.sequenceLayout(1, C_CHAR).withName("Text"),
        MemoryLayout.paddingLayout(8)
    ).withName("_MESSAGE_RESOURCE_ENTRY");
    public static MemoryLayout $LAYOUT() {
        return _MESSAGE_RESOURCE_ENTRY.$struct$LAYOUT;
    }
    static final VarHandle Length$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("Length"));
    public static VarHandle Length$VH() {
        return _MESSAGE_RESOURCE_ENTRY.Length$VH;
    }
    public static short Length$get(MemorySegment seg) {
        return (short)_MESSAGE_RESOURCE_ENTRY.Length$VH.get(seg);
    }
    public static void Length$set( MemorySegment seg, short x) {
        _MESSAGE_RESOURCE_ENTRY.Length$VH.set(seg, x);
    }
    public static short Length$get(MemorySegment seg, long index) {
        return (short)_MESSAGE_RESOURCE_ENTRY.Length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Length$set(MemorySegment seg, long index, short x) {
        _MESSAGE_RESOURCE_ENTRY.Length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _MESSAGE_RESOURCE_ENTRY.Flags$VH;
    }
    public static short Flags$get(MemorySegment seg) {
        return (short)_MESSAGE_RESOURCE_ENTRY.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, short x) {
        _MESSAGE_RESOURCE_ENTRY.Flags$VH.set(seg, x);
    }
    public static short Flags$get(MemorySegment seg, long index) {
        return (short)_MESSAGE_RESOURCE_ENTRY.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, short x) {
        _MESSAGE_RESOURCE_ENTRY.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Text$slice(MemorySegment seg) {
        return seg.asSlice(4, 1);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


