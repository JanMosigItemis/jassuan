// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$1391 {

    static final FunctionDescriptor gpgrt_fpopen_nc$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle gpgrt_fpopen_nc$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "gpgrt_fpopen_nc",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$1391.gpgrt_fpopen_nc$FUNC, false
    );
    static final FunctionDescriptor gpgrt_freopen$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle gpgrt_freopen$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "gpgrt_freopen",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$1391.gpgrt_freopen$FUNC, false
    );
    static final FunctionDescriptor gpgrt_fopencookie$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        MemoryLayout.structLayout(
            C_POINTER.withName("func_read"),
            C_POINTER.withName("func_write"),
            C_POINTER.withName("func_seek"),
            C_POINTER.withName("func_close")
        ).withName("_gpgrt_cookie_io_functions")
    );
    static final MethodHandle gpgrt_fopencookie$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "gpgrt_fopencookie",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$1391.gpgrt_fopencookie$FUNC, false
    );
    static final FunctionDescriptor gpgrt_fclose$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle gpgrt_fclose$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "gpgrt_fclose",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$1391.gpgrt_fclose$FUNC, false
    );
    static final FunctionDescriptor gpgrt_fcancel$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle gpgrt_fcancel$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "gpgrt_fcancel",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$1391.gpgrt_fcancel$FUNC, false
    );
    static final FunctionDescriptor gpgrt_fclose_snatch$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle gpgrt_fclose_snatch$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "gpgrt_fclose_snatch",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$1391.gpgrt_fclose_snatch$FUNC, false
    );
}


