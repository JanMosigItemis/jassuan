// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _CERT_ALT_NAME_ENTRY {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("dwAltNameChoice"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            C_POINTER.withName("pOtherName"),
            C_POINTER.withName("pwszRfc822Name"),
            C_POINTER.withName("pwszDNSName"),
            MemoryLayout.structLayout(
                C_LONG.withName("cbData"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("pbData")
            ).withName("DirectoryName"),
            C_POINTER.withName("pwszURL"),
            MemoryLayout.structLayout(
                C_LONG.withName("cbData"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("pbData")
            ).withName("IPAddress"),
            C_POINTER.withName("pszRegisteredID")
        ).withName("$anon$0")
    ).withName("_CERT_ALT_NAME_ENTRY");
    public static MemoryLayout $LAYOUT() {
        return _CERT_ALT_NAME_ENTRY.$struct$LAYOUT;
    }
    static final VarHandle dwAltNameChoice$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwAltNameChoice"));
    public static VarHandle dwAltNameChoice$VH() {
        return _CERT_ALT_NAME_ENTRY.dwAltNameChoice$VH;
    }
    public static int dwAltNameChoice$get(MemorySegment seg) {
        return (int)_CERT_ALT_NAME_ENTRY.dwAltNameChoice$VH.get(seg);
    }
    public static void dwAltNameChoice$set( MemorySegment seg, int x) {
        _CERT_ALT_NAME_ENTRY.dwAltNameChoice$VH.set(seg, x);
    }
    public static int dwAltNameChoice$get(MemorySegment seg, long index) {
        return (int)_CERT_ALT_NAME_ENTRY.dwAltNameChoice$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwAltNameChoice$set(MemorySegment seg, long index, int x) {
        _CERT_ALT_NAME_ENTRY.dwAltNameChoice$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pOtherName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("pOtherName")));
    public static VarHandle pOtherName$VH() {
        return _CERT_ALT_NAME_ENTRY.pOtherName$VH;
    }
    public static MemoryAddress pOtherName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_ALT_NAME_ENTRY.pOtherName$VH.get(seg);
    }
    public static void pOtherName$set( MemorySegment seg, MemoryAddress x) {
        _CERT_ALT_NAME_ENTRY.pOtherName$VH.set(seg, x);
    }
    public static MemoryAddress pOtherName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_ALT_NAME_ENTRY.pOtherName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pOtherName$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_ALT_NAME_ENTRY.pOtherName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pwszRfc822Name$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("pwszRfc822Name")));
    public static VarHandle pwszRfc822Name$VH() {
        return _CERT_ALT_NAME_ENTRY.pwszRfc822Name$VH;
    }
    public static MemoryAddress pwszRfc822Name$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_ALT_NAME_ENTRY.pwszRfc822Name$VH.get(seg);
    }
    public static void pwszRfc822Name$set( MemorySegment seg, MemoryAddress x) {
        _CERT_ALT_NAME_ENTRY.pwszRfc822Name$VH.set(seg, x);
    }
    public static MemoryAddress pwszRfc822Name$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_ALT_NAME_ENTRY.pwszRfc822Name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pwszRfc822Name$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_ALT_NAME_ENTRY.pwszRfc822Name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pwszDNSName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("pwszDNSName")));
    public static VarHandle pwszDNSName$VH() {
        return _CERT_ALT_NAME_ENTRY.pwszDNSName$VH;
    }
    public static MemoryAddress pwszDNSName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_ALT_NAME_ENTRY.pwszDNSName$VH.get(seg);
    }
    public static void pwszDNSName$set( MemorySegment seg, MemoryAddress x) {
        _CERT_ALT_NAME_ENTRY.pwszDNSName$VH.set(seg, x);
    }
    public static MemoryAddress pwszDNSName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_ALT_NAME_ENTRY.pwszDNSName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pwszDNSName$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_ALT_NAME_ENTRY.pwszDNSName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment DirectoryName$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    static final VarHandle pwszURL$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("pwszURL")));
    public static VarHandle pwszURL$VH() {
        return _CERT_ALT_NAME_ENTRY.pwszURL$VH;
    }
    public static MemoryAddress pwszURL$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_ALT_NAME_ENTRY.pwszURL$VH.get(seg);
    }
    public static void pwszURL$set( MemorySegment seg, MemoryAddress x) {
        _CERT_ALT_NAME_ENTRY.pwszURL$VH.set(seg, x);
    }
    public static MemoryAddress pwszURL$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_ALT_NAME_ENTRY.pwszURL$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pwszURL$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_ALT_NAME_ENTRY.pwszURL$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment IPAddress$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    static final VarHandle pszRegisteredID$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("pszRegisteredID")));
    public static VarHandle pszRegisteredID$VH() {
        return _CERT_ALT_NAME_ENTRY.pszRegisteredID$VH;
    }
    public static MemoryAddress pszRegisteredID$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_ALT_NAME_ENTRY.pszRegisteredID$VH.get(seg);
    }
    public static void pszRegisteredID$set( MemorySegment seg, MemoryAddress x) {
        _CERT_ALT_NAME_ENTRY.pszRegisteredID$VH.set(seg, x);
    }
    public static MemoryAddress pszRegisteredID$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_ALT_NAME_ENTRY.pszRegisteredID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pszRegisteredID$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_ALT_NAME_ENTRY.pszRegisteredID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


