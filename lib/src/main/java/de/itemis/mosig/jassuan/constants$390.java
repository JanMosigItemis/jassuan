// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$390 {

    static final FunctionDescriptor LPFIBER_START_ROUTINE$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle LPFIBER_START_ROUTINE$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$390.LPFIBER_START_ROUTINE$FUNC, false
    );
    static final FunctionDescriptor PFIBER_CALLOUT_ROUTINE$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final MethodHandle PFIBER_CALLOUT_ROUTINE$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$390.PFIBER_CALLOUT_ROUTINE$FUNC, false
    );
    static final FunctionDescriptor _InterlockedAnd$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle _InterlockedAnd$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "_InterlockedAnd",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$390._InterlockedAnd$FUNC, false
    );
    static final FunctionDescriptor _InterlockedOr$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle _InterlockedOr$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "_InterlockedOr",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$390._InterlockedOr$FUNC, false
    );
    static final FunctionDescriptor _InterlockedXor$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle _InterlockedXor$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "_InterlockedXor",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$390._InterlockedXor$FUNC, false
    );
}


