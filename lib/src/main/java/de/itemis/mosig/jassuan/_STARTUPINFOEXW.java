// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _STARTUPINFOEXW {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            C_LONG.withName("cb"),
            MemoryLayout.paddingLayout(32),
            C_POINTER.withName("lpReserved"),
            C_POINTER.withName("lpDesktop"),
            C_POINTER.withName("lpTitle"),
            C_LONG.withName("dwX"),
            C_LONG.withName("dwY"),
            C_LONG.withName("dwXSize"),
            C_LONG.withName("dwYSize"),
            C_LONG.withName("dwXCountChars"),
            C_LONG.withName("dwYCountChars"),
            C_LONG.withName("dwFillAttribute"),
            C_LONG.withName("dwFlags"),
            C_SHORT.withName("wShowWindow"),
            C_SHORT.withName("cbReserved2"),
            MemoryLayout.paddingLayout(32),
            C_POINTER.withName("lpReserved2"),
            C_POINTER.withName("hStdInput"),
            C_POINTER.withName("hStdOutput"),
            C_POINTER.withName("hStdError")
        ).withName("StartupInfo"),
        C_POINTER.withName("lpAttributeList")
    ).withName("_STARTUPINFOEXW");
    public static MemoryLayout $LAYOUT() {
        return _STARTUPINFOEXW.$struct$LAYOUT;
    }
    public static MemorySegment StartupInfo$slice(MemorySegment seg) {
        return seg.asSlice(0, 104);
    }
    static final VarHandle lpAttributeList$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpAttributeList")));
    public static VarHandle lpAttributeList$VH() {
        return _STARTUPINFOEXW.lpAttributeList$VH;
    }
    public static MemoryAddress lpAttributeList$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_STARTUPINFOEXW.lpAttributeList$VH.get(seg);
    }
    public static void lpAttributeList$set( MemorySegment seg, MemoryAddress x) {
        _STARTUPINFOEXW.lpAttributeList$VH.set(seg, x);
    }
    public static MemoryAddress lpAttributeList$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_STARTUPINFOEXW.lpAttributeList$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpAttributeList$set(MemorySegment seg, long index, MemoryAddress x) {
        _STARTUPINFOEXW.lpAttributeList$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


