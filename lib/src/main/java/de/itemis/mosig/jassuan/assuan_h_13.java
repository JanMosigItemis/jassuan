// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
 class assuan_h_13 extends assuan_h_12 {

    public static int WinAccountKeyAdminsSid() {
        return (int)113L;
    }
    public static int WinAccountEnterpriseKeyAdminsSid() {
        return (int)114L;
    }
    public static int WinAuthenticationKeyTrustSid() {
        return (int)115L;
    }
    public static int WinAuthenticationKeyPropertyMFASid() {
        return (int)116L;
    }
    public static int WinAuthenticationKeyPropertyAttestationSid() {
        return (int)117L;
    }
    public static int AclRevisionInformation() {
        return (int)1L;
    }
    public static int AclSizeInformation() {
        return (int)2L;
    }
    public static int AuditEventObjectAccess() {
        return (int)0L;
    }
    public static int AuditEventDirectoryServiceAccess() {
        return (int)1L;
    }
    public static int AccessReasonNone() {
        return (int)0L;
    }
    public static int AccessReasonAllowedAce() {
        return (int)65536L;
    }
    public static int AccessReasonDeniedAce() {
        return (int)131072L;
    }
    public static int AccessReasonAllowedParentAce() {
        return (int)196608L;
    }
    public static int AccessReasonDeniedParentAce() {
        return (int)262144L;
    }
    public static int AccessReasonNotGrantedByCape() {
        return (int)327680L;
    }
    public static int AccessReasonNotGrantedByParentCape() {
        return (int)393216L;
    }
    public static int AccessReasonNotGrantedToAppContainer() {
        return (int)458752L;
    }
    public static int AccessReasonMissingPrivilege() {
        return (int)1048576L;
    }
    public static int AccessReasonFromPrivilege() {
        return (int)2097152L;
    }
    public static int AccessReasonIntegrityLevel() {
        return (int)3145728L;
    }
    public static int AccessReasonOwnership() {
        return (int)4194304L;
    }
    public static int AccessReasonNullDacl() {
        return (int)5242880L;
    }
    public static int AccessReasonEmptyDacl() {
        return (int)6291456L;
    }
    public static int AccessReasonNoSD() {
        return (int)7340032L;
    }
    public static int AccessReasonNoGrant() {
        return (int)8388608L;
    }
    public static int SecurityAnonymous() {
        return (int)0L;
    }
    public static int SecurityIdentification() {
        return (int)1L;
    }
    public static int SecurityImpersonation() {
        return (int)2L;
    }
    public static int SecurityDelegation() {
        return (int)3L;
    }
    public static int TokenPrimary() {
        return (int)1L;
    }
    public static int TokenImpersonation() {
        return (int)2L;
    }
    public static int TokenElevationTypeDefault() {
        return (int)1L;
    }
    public static int TokenElevationTypeFull() {
        return (int)2L;
    }
    public static int TokenElevationTypeLimited() {
        return (int)3L;
    }
    public static int TokenUser() {
        return (int)1L;
    }
    public static int TokenGroups() {
        return (int)2L;
    }
    public static int TokenPrivileges() {
        return (int)3L;
    }
    public static int TokenOwner() {
        return (int)4L;
    }
    public static int TokenPrimaryGroup() {
        return (int)5L;
    }
    public static int TokenDefaultDacl() {
        return (int)6L;
    }
    public static int TokenSource() {
        return (int)7L;
    }
    public static int TokenType() {
        return (int)8L;
    }
    public static int TokenImpersonationLevel() {
        return (int)9L;
    }
    public static int TokenStatistics() {
        return (int)10L;
    }
    public static int TokenRestrictedSids() {
        return (int)11L;
    }
    public static int TokenSessionId() {
        return (int)12L;
    }
    public static int TokenGroupsAndPrivileges() {
        return (int)13L;
    }
    public static int TokenSessionReference() {
        return (int)14L;
    }
    public static int TokenSandBoxInert() {
        return (int)15L;
    }
    public static int TokenAuditPolicy() {
        return (int)16L;
    }
    public static int TokenOrigin() {
        return (int)17L;
    }
    public static int TokenElevationType() {
        return (int)18L;
    }
    public static int TokenLinkedToken() {
        return (int)19L;
    }
    public static int TokenElevation() {
        return (int)20L;
    }
    public static int TokenHasRestrictions() {
        return (int)21L;
    }
    public static int TokenAccessInformation() {
        return (int)22L;
    }
    public static int TokenVirtualizationAllowed() {
        return (int)23L;
    }
    public static int TokenVirtualizationEnabled() {
        return (int)24L;
    }
    public static int TokenIntegrityLevel() {
        return (int)25L;
    }
    public static int TokenUIAccess() {
        return (int)26L;
    }
    public static int TokenMandatoryPolicy() {
        return (int)27L;
    }
    public static int TokenLogonSid() {
        return (int)28L;
    }
    public static int TokenIsAppContainer() {
        return (int)29L;
    }
    public static int TokenCapabilities() {
        return (int)30L;
    }
    public static int TokenAppContainerSid() {
        return (int)31L;
    }
    public static int TokenAppContainerNumber() {
        return (int)32L;
    }
    public static int TokenUserClaimAttributes() {
        return (int)33L;
    }
    public static int TokenDeviceClaimAttributes() {
        return (int)34L;
    }
    public static int TokenRestrictedUserClaimAttributes() {
        return (int)35L;
    }
    public static int TokenRestrictedDeviceClaimAttributes() {
        return (int)36L;
    }
    public static int TokenDeviceGroups() {
        return (int)37L;
    }
    public static int TokenRestrictedDeviceGroups() {
        return (int)38L;
    }
    public static int TokenSecurityAttributes() {
        return (int)39L;
    }
    public static int TokenIsRestricted() {
        return (int)40L;
    }
    public static int MaxTokenInfoClass() {
        return (int)41L;
    }
    public static int MandatoryLevelUntrusted() {
        return (int)0L;
    }
    public static int MandatoryLevelLow() {
        return (int)1L;
    }
    public static int MandatoryLevelMedium() {
        return (int)2L;
    }
    public static int MandatoryLevelHigh() {
        return (int)3L;
    }
    public static int MandatoryLevelSystem() {
        return (int)4L;
    }
    public static int MandatoryLevelSecureProcess() {
        return (int)5L;
    }
    public static int MandatoryLevelCount() {
        return (int)6L;
    }
    public static int SeLearningModeInvalidType() {
        return (int)0L;
    }
    public static int SeLearningModeSettings() {
        return (int)1L;
    }
    public static int SeLearningModeMax() {
        return (int)2L;
    }
    public static int PMCCounter() {
        return (int)0L;
    }
    public static int MaxHardwareCounterType() {
        return (int)1L;
    }
    public static int ProcessDEPPolicy() {
        return (int)0L;
    }
    public static int ProcessASLRPolicy() {
        return (int)1L;
    }
    public static int ProcessDynamicCodePolicy() {
        return (int)2L;
    }
    public static int ProcessStrictHandleCheckPolicy() {
        return (int)3L;
    }
    public static int ProcessSystemCallDisablePolicy() {
        return (int)4L;
    }
    public static int ProcessMitigationOptionsMask() {
        return (int)5L;
    }
    public static int ProcessExtensionPointDisablePolicy() {
        return (int)6L;
    }
    public static int ProcessControlFlowGuardPolicy() {
        return (int)7L;
    }
    public static int ProcessSignaturePolicy() {
        return (int)8L;
    }
    public static int ProcessFontDisablePolicy() {
        return (int)9L;
    }
    public static int ProcessImageLoadPolicy() {
        return (int)10L;
    }
    public static int ProcessSystemCallFilterPolicy() {
        return (int)11L;
    }
    public static int ProcessPayloadRestrictionPolicy() {
        return (int)12L;
    }
    public static int ProcessChildProcessPolicy() {
        return (int)13L;
    }
    public static int ProcessSideChannelIsolationPolicy() {
        return (int)14L;
    }
    public static int MaxProcessMitigationPolicy() {
        return (int)15L;
    }
    public static int ToleranceLow() {
        return (int)1L;
    }
    public static int ToleranceMedium() {
        return (int)2L;
    }
    public static int ToleranceHigh() {
        return (int)3L;
    }
    public static int ToleranceIntervalShort() {
        return (int)1L;
    }
    public static int ToleranceIntervalMedium() {
        return (int)2L;
    }
    public static int ToleranceIntervalLong() {
        return (int)3L;
    }
    public static int JobObjectBasicAccountingInformation() {
        return (int)1L;
    }
    public static int JobObjectBasicLimitInformation() {
        return (int)2L;
    }
    public static int JobObjectBasicProcessIdList() {
        return (int)3L;
    }
    public static int JobObjectBasicUIRestrictions() {
        return (int)4L;
    }
    public static int JobObjectSecurityLimitInformation() {
        return (int)5L;
    }
    public static int JobObjectEndOfJobTimeInformation() {
        return (int)6L;
    }
    public static int JobObjectAssociateCompletionPortInformation() {
        return (int)7L;
    }
    public static int JobObjectBasicAndIoAccountingInformation() {
        return (int)8L;
    }
    public static int JobObjectExtendedLimitInformation() {
        return (int)9L;
    }
    public static int JobObjectJobSetInformation() {
        return (int)10L;
    }
    public static int JobObjectGroupInformation() {
        return (int)11L;
    }
    public static int JobObjectNotificationLimitInformation() {
        return (int)12L;
    }
    public static int JobObjectLimitViolationInformation() {
        return (int)13L;
    }
    public static int JobObjectGroupInformationEx() {
        return (int)14L;
    }
    public static int JobObjectCpuRateControlInformation() {
        return (int)15L;
    }
    public static int JobObjectCompletionFilter() {
        return (int)16L;
    }
    public static int JobObjectCompletionCounter() {
        return (int)17L;
    }
    public static int JobObjectReserved1Information() {
        return (int)18L;
    }
    public static int JobObjectReserved2Information() {
        return (int)19L;
    }
    public static int JobObjectReserved3Information() {
        return (int)20L;
    }
    public static int JobObjectReserved4Information() {
        return (int)21L;
    }
    public static int JobObjectReserved5Information() {
        return (int)22L;
    }
    public static int JobObjectReserved6Information() {
        return (int)23L;
    }
    public static int JobObjectReserved7Information() {
        return (int)24L;
    }
    public static int JobObjectReserved8Information() {
        return (int)25L;
    }
    public static int MaxJobObjectInfoClass() {
        return (int)26L;
    }
    public static int FirmwareTypeUnknown() {
        return (int)0L;
    }
    public static int FirmwareTypeBios() {
        return (int)1L;
    }
    public static int FirmwareTypeUefi() {
        return (int)2L;
    }
    public static int FirmwareTypeMax() {
        return (int)3L;
    }
    public static int RelationProcessorCore() {
        return (int)0L;
    }
    public static int RelationNumaNode() {
        return (int)1L;
    }
    public static int RelationCache() {
        return (int)2L;
    }
    public static int RelationProcessorPackage() {
        return (int)3L;
    }
    public static int RelationGroup() {
        return (int)4L;
    }
    public static int RelationAll() {
        return (int)65535L;
    }
    public static int CacheUnified() {
        return (int)0L;
    }
    public static int CacheInstruction() {
        return (int)1L;
    }
    public static int CacheData() {
        return (int)2L;
    }
    public static int CacheTrace() {
        return (int)3L;
    }
    public static int MemExtendedParameterInvalidType() {
        return (int)0L;
    }
    public static int MemExtendedParameterAddressRequirements() {
        return (int)1L;
    }
    public static int MemExtendedParameterNumaNode() {
        return (int)2L;
    }
    public static int MemExtendedParameterPartitionHandle() {
        return (int)3L;
    }
    public static int MemExtendedParameterUserPhysicalHandle() {
        return (int)4L;
    }
    public static int MemExtendedParameterAttributeFlags() {
        return (int)5L;
    }
    public static int MemExtendedParameterMax() {
        return (int)6L;
    }
    public static int MemSectionExtendedParameterInvalidType() {
        return (int)0L;
    }
    public static int MemSectionExtendedParameterUserPhysicalFlags() {
        return (int)1L;
    }
    public static int MemSectionExtendedParameterNumaNode() {
        return (int)2L;
    }
    public static int MemSectionExtendedParameterMax() {
        return (int)3L;
    }
    public static MemorySegment GUID_MAX_POWER_SAVINGS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$250.GUID_MAX_POWER_SAVINGS$SEGMENT,"GUID_MAX_POWER_SAVINGS");
    }
    public static MemorySegment GUID_MIN_POWER_SAVINGS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$250.GUID_MIN_POWER_SAVINGS$SEGMENT,"GUID_MIN_POWER_SAVINGS");
    }
    public static MemorySegment GUID_TYPICAL_POWER_SAVINGS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$250.GUID_TYPICAL_POWER_SAVINGS$SEGMENT,"GUID_TYPICAL_POWER_SAVINGS");
    }
    public static MemorySegment NO_SUBGROUP_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$250.NO_SUBGROUP_GUID$SEGMENT,"NO_SUBGROUP_GUID");
    }
    public static MemorySegment ALL_POWERSCHEMES_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$251.ALL_POWERSCHEMES_GUID$SEGMENT,"ALL_POWERSCHEMES_GUID");
    }
    public static MemorySegment GUID_POWERSCHEME_PERSONALITY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$251.GUID_POWERSCHEME_PERSONALITY$SEGMENT,"GUID_POWERSCHEME_PERSONALITY");
    }
    public static MemorySegment GUID_ACTIVE_POWERSCHEME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$251.GUID_ACTIVE_POWERSCHEME$SEGMENT,"GUID_ACTIVE_POWERSCHEME");
    }
    public static MemorySegment GUID_IDLE_RESILIENCY_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$251.GUID_IDLE_RESILIENCY_SUBGROUP$SEGMENT,"GUID_IDLE_RESILIENCY_SUBGROUP");
    }
    public static MemorySegment GUID_IDLE_RESILIENCY_PERIOD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$251.GUID_IDLE_RESILIENCY_PERIOD$SEGMENT,"GUID_IDLE_RESILIENCY_PERIOD");
    }
    public static MemorySegment GUID_DISK_COALESCING_POWERDOWN_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$251.GUID_DISK_COALESCING_POWERDOWN_TIMEOUT$SEGMENT,"GUID_DISK_COALESCING_POWERDOWN_TIMEOUT");
    }
    public static MemorySegment GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$252.GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT$SEGMENT,"GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT");
    }
    public static MemorySegment GUID_VIDEO_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$252.GUID_VIDEO_SUBGROUP$SEGMENT,"GUID_VIDEO_SUBGROUP");
    }
    public static MemorySegment GUID_VIDEO_POWERDOWN_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$252.GUID_VIDEO_POWERDOWN_TIMEOUT$SEGMENT,"GUID_VIDEO_POWERDOWN_TIMEOUT");
    }
    public static MemorySegment GUID_VIDEO_ANNOYANCE_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$252.GUID_VIDEO_ANNOYANCE_TIMEOUT$SEGMENT,"GUID_VIDEO_ANNOYANCE_TIMEOUT");
    }
    public static MemorySegment GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$252.GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE$SEGMENT,"GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE");
    }
    public static MemorySegment GUID_VIDEO_DIM_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$252.GUID_VIDEO_DIM_TIMEOUT$SEGMENT,"GUID_VIDEO_DIM_TIMEOUT");
    }
    public static MemorySegment GUID_VIDEO_ADAPTIVE_POWERDOWN$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$253.GUID_VIDEO_ADAPTIVE_POWERDOWN$SEGMENT,"GUID_VIDEO_ADAPTIVE_POWERDOWN");
    }
    public static MemorySegment GUID_MONITOR_POWER_ON$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$253.GUID_MONITOR_POWER_ON$SEGMENT,"GUID_MONITOR_POWER_ON");
    }
    public static MemorySegment GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$253.GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS$SEGMENT,"GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS");
    }
    public static MemorySegment GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$253.GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS$SEGMENT,"GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS");
    }
    public static MemorySegment GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$253.GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS$SEGMENT,"GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS");
    }
    public static MemorySegment GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$253.GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS$SEGMENT,"GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS");
    }
    public static MemorySegment GUID_CONSOLE_DISPLAY_STATE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$254.GUID_CONSOLE_DISPLAY_STATE$SEGMENT,"GUID_CONSOLE_DISPLAY_STATE");
    }
    public static MemorySegment GUID_ALLOW_DISPLAY_REQUIRED$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$254.GUID_ALLOW_DISPLAY_REQUIRED$SEGMENT,"GUID_ALLOW_DISPLAY_REQUIRED");
    }
    public static MemorySegment GUID_VIDEO_CONSOLE_LOCK_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$254.GUID_VIDEO_CONSOLE_LOCK_TIMEOUT$SEGMENT,"GUID_VIDEO_CONSOLE_LOCK_TIMEOUT");
    }
    public static MemorySegment GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$254.GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP$SEGMENT,"GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP");
    }
    public static MemorySegment GUID_NON_ADAPTIVE_INPUT_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$254.GUID_NON_ADAPTIVE_INPUT_TIMEOUT$SEGMENT,"GUID_NON_ADAPTIVE_INPUT_TIMEOUT");
    }
    public static MemorySegment GUID_DISK_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$254.GUID_DISK_SUBGROUP$SEGMENT,"GUID_DISK_SUBGROUP");
    }
    public static MemorySegment GUID_DISK_POWERDOWN_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$255.GUID_DISK_POWERDOWN_TIMEOUT$SEGMENT,"GUID_DISK_POWERDOWN_TIMEOUT");
    }
    public static MemorySegment GUID_DISK_IDLE_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$255.GUID_DISK_IDLE_TIMEOUT$SEGMENT,"GUID_DISK_IDLE_TIMEOUT");
    }
    public static MemorySegment GUID_DISK_BURST_IGNORE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$255.GUID_DISK_BURST_IGNORE_THRESHOLD$SEGMENT,"GUID_DISK_BURST_IGNORE_THRESHOLD");
    }
    public static MemorySegment GUID_DISK_ADAPTIVE_POWERDOWN$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$255.GUID_DISK_ADAPTIVE_POWERDOWN$SEGMENT,"GUID_DISK_ADAPTIVE_POWERDOWN");
    }
    public static MemorySegment GUID_SLEEP_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$255.GUID_SLEEP_SUBGROUP$SEGMENT,"GUID_SLEEP_SUBGROUP");
    }
    public static MemorySegment GUID_SLEEP_IDLE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$255.GUID_SLEEP_IDLE_THRESHOLD$SEGMENT,"GUID_SLEEP_IDLE_THRESHOLD");
    }
    public static MemorySegment GUID_STANDBY_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$256.GUID_STANDBY_TIMEOUT$SEGMENT,"GUID_STANDBY_TIMEOUT");
    }
    public static MemorySegment GUID_UNATTEND_SLEEP_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$256.GUID_UNATTEND_SLEEP_TIMEOUT$SEGMENT,"GUID_UNATTEND_SLEEP_TIMEOUT");
    }
    public static MemorySegment GUID_HIBERNATE_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$256.GUID_HIBERNATE_TIMEOUT$SEGMENT,"GUID_HIBERNATE_TIMEOUT");
    }
    public static MemorySegment GUID_HIBERNATE_FASTS4_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$256.GUID_HIBERNATE_FASTS4_POLICY$SEGMENT,"GUID_HIBERNATE_FASTS4_POLICY");
    }
    public static MemorySegment GUID_CRITICAL_POWER_TRANSITION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$256.GUID_CRITICAL_POWER_TRANSITION$SEGMENT,"GUID_CRITICAL_POWER_TRANSITION");
    }
    public static MemorySegment GUID_SYSTEM_AWAYMODE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$256.GUID_SYSTEM_AWAYMODE$SEGMENT,"GUID_SYSTEM_AWAYMODE");
    }
    public static MemorySegment GUID_ALLOW_AWAYMODE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$257.GUID_ALLOW_AWAYMODE$SEGMENT,"GUID_ALLOW_AWAYMODE");
    }
    public static MemorySegment GUID_ALLOW_STANDBY_STATES$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$257.GUID_ALLOW_STANDBY_STATES$SEGMENT,"GUID_ALLOW_STANDBY_STATES");
    }
    public static MemorySegment GUID_ALLOW_RTC_WAKE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$257.GUID_ALLOW_RTC_WAKE$SEGMENT,"GUID_ALLOW_RTC_WAKE");
    }
    public static MemorySegment GUID_ALLOW_SYSTEM_REQUIRED$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$257.GUID_ALLOW_SYSTEM_REQUIRED$SEGMENT,"GUID_ALLOW_SYSTEM_REQUIRED");
    }
    public static MemorySegment GUID_SYSTEM_BUTTON_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$257.GUID_SYSTEM_BUTTON_SUBGROUP$SEGMENT,"GUID_SYSTEM_BUTTON_SUBGROUP");
    }
    public static MemorySegment GUID_POWERBUTTON_ACTION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$257.GUID_POWERBUTTON_ACTION$SEGMENT,"GUID_POWERBUTTON_ACTION");
    }
    public static MemorySegment GUID_SLEEPBUTTON_ACTION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$258.GUID_SLEEPBUTTON_ACTION$SEGMENT,"GUID_SLEEPBUTTON_ACTION");
    }
    public static MemorySegment GUID_USERINTERFACEBUTTON_ACTION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$258.GUID_USERINTERFACEBUTTON_ACTION$SEGMENT,"GUID_USERINTERFACEBUTTON_ACTION");
    }
    public static MemorySegment GUID_LIDCLOSE_ACTION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$258.GUID_LIDCLOSE_ACTION$SEGMENT,"GUID_LIDCLOSE_ACTION");
    }
    public static MemorySegment GUID_LIDOPEN_POWERSTATE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$258.GUID_LIDOPEN_POWERSTATE$SEGMENT,"GUID_LIDOPEN_POWERSTATE");
    }
    public static MemorySegment GUID_BATTERY_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$258.GUID_BATTERY_SUBGROUP$SEGMENT,"GUID_BATTERY_SUBGROUP");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_ACTION_0$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$258.GUID_BATTERY_DISCHARGE_ACTION_0$SEGMENT,"GUID_BATTERY_DISCHARGE_ACTION_0");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_LEVEL_0$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$259.GUID_BATTERY_DISCHARGE_LEVEL_0$SEGMENT,"GUID_BATTERY_DISCHARGE_LEVEL_0");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_FLAGS_0$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$259.GUID_BATTERY_DISCHARGE_FLAGS_0$SEGMENT,"GUID_BATTERY_DISCHARGE_FLAGS_0");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_ACTION_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$259.GUID_BATTERY_DISCHARGE_ACTION_1$SEGMENT,"GUID_BATTERY_DISCHARGE_ACTION_1");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_LEVEL_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$259.GUID_BATTERY_DISCHARGE_LEVEL_1$SEGMENT,"GUID_BATTERY_DISCHARGE_LEVEL_1");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_FLAGS_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$259.GUID_BATTERY_DISCHARGE_FLAGS_1$SEGMENT,"GUID_BATTERY_DISCHARGE_FLAGS_1");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_ACTION_2$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$259.GUID_BATTERY_DISCHARGE_ACTION_2$SEGMENT,"GUID_BATTERY_DISCHARGE_ACTION_2");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_LEVEL_2$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$260.GUID_BATTERY_DISCHARGE_LEVEL_2$SEGMENT,"GUID_BATTERY_DISCHARGE_LEVEL_2");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_FLAGS_2$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$260.GUID_BATTERY_DISCHARGE_FLAGS_2$SEGMENT,"GUID_BATTERY_DISCHARGE_FLAGS_2");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_ACTION_3$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$260.GUID_BATTERY_DISCHARGE_ACTION_3$SEGMENT,"GUID_BATTERY_DISCHARGE_ACTION_3");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_LEVEL_3$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$260.GUID_BATTERY_DISCHARGE_LEVEL_3$SEGMENT,"GUID_BATTERY_DISCHARGE_LEVEL_3");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_FLAGS_3$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$260.GUID_BATTERY_DISCHARGE_FLAGS_3$SEGMENT,"GUID_BATTERY_DISCHARGE_FLAGS_3");
    }
    public static MemorySegment GUID_PROCESSOR_SETTINGS_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$260.GUID_PROCESSOR_SETTINGS_SUBGROUP$SEGMENT,"GUID_PROCESSOR_SETTINGS_SUBGROUP");
    }
    public static MemorySegment GUID_PROCESSOR_THROTTLE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$261.GUID_PROCESSOR_THROTTLE_POLICY$SEGMENT,"GUID_PROCESSOR_THROTTLE_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_THROTTLE_MAXIMUM$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$261.GUID_PROCESSOR_THROTTLE_MAXIMUM$SEGMENT,"GUID_PROCESSOR_THROTTLE_MAXIMUM");
    }
    public static MemorySegment GUID_PROCESSOR_THROTTLE_MINIMUM$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$261.GUID_PROCESSOR_THROTTLE_MINIMUM$SEGMENT,"GUID_PROCESSOR_THROTTLE_MINIMUM");
    }
    public static MemorySegment GUID_PROCESSOR_ALLOW_THROTTLING$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$261.GUID_PROCESSOR_ALLOW_THROTTLING$SEGMENT,"GUID_PROCESSOR_ALLOW_THROTTLING");
    }
    public static MemorySegment GUID_PROCESSOR_IDLESTATE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$261.GUID_PROCESSOR_IDLESTATE_POLICY$SEGMENT,"GUID_PROCESSOR_IDLESTATE_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_PERFSTATE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$261.GUID_PROCESSOR_PERFSTATE_POLICY$SEGMENT,"GUID_PROCESSOR_PERFSTATE_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_INCREASE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$262.GUID_PROCESSOR_PERF_INCREASE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_PERF_INCREASE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_DECREASE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$262.GUID_PROCESSOR_PERF_DECREASE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_PERF_DECREASE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_INCREASE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$262.GUID_PROCESSOR_PERF_INCREASE_POLICY$SEGMENT,"GUID_PROCESSOR_PERF_INCREASE_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_DECREASE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$262.GUID_PROCESSOR_PERF_DECREASE_POLICY$SEGMENT,"GUID_PROCESSOR_PERF_DECREASE_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_INCREASE_TIME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$262.GUID_PROCESSOR_PERF_INCREASE_TIME$SEGMENT,"GUID_PROCESSOR_PERF_INCREASE_TIME");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_DECREASE_TIME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$262.GUID_PROCESSOR_PERF_DECREASE_TIME$SEGMENT,"GUID_PROCESSOR_PERF_DECREASE_TIME");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_TIME_CHECK$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$263.GUID_PROCESSOR_PERF_TIME_CHECK$SEGMENT,"GUID_PROCESSOR_PERF_TIME_CHECK");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_BOOST_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$263.GUID_PROCESSOR_PERF_BOOST_POLICY$SEGMENT,"GUID_PROCESSOR_PERF_BOOST_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_BOOST_MODE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$263.GUID_PROCESSOR_PERF_BOOST_MODE$SEGMENT,"GUID_PROCESSOR_PERF_BOOST_MODE");
    }
    public static MemorySegment GUID_PROCESSOR_IDLE_ALLOW_SCALING$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$263.GUID_PROCESSOR_IDLE_ALLOW_SCALING$SEGMENT,"GUID_PROCESSOR_IDLE_ALLOW_SCALING");
    }
    public static MemorySegment GUID_PROCESSOR_IDLE_DISABLE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$263.GUID_PROCESSOR_IDLE_DISABLE$SEGMENT,"GUID_PROCESSOR_IDLE_DISABLE");
    }
    public static MemorySegment GUID_PROCESSOR_IDLE_STATE_MAXIMUM$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$263.GUID_PROCESSOR_IDLE_STATE_MAXIMUM$SEGMENT,"GUID_PROCESSOR_IDLE_STATE_MAXIMUM");
    }
    public static MemorySegment GUID_PROCESSOR_IDLE_TIME_CHECK$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$264.GUID_PROCESSOR_IDLE_TIME_CHECK$SEGMENT,"GUID_PROCESSOR_IDLE_TIME_CHECK");
    }
    public static MemorySegment GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$264.GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$264.GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$264.GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$264.GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$264.GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$265.GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_MAX_CORES$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$265.GUID_PROCESSOR_CORE_PARKING_MAX_CORES$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_MAX_CORES");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_MIN_CORES$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$265.GUID_PROCESSOR_CORE_PARKING_MIN_CORES$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_MIN_CORES");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$265.GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$265.GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$265.GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$266.GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$266.GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$266.GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$266.GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$266.GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$266.GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_PARKING_CORE_OVERRIDE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$267.GUID_PROCESSOR_PARKING_CORE_OVERRIDE$SEGMENT,"GUID_PROCESSOR_PARKING_CORE_OVERRIDE");
    }
    public static MemorySegment GUID_PROCESSOR_PARKING_PERF_STATE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$267.GUID_PROCESSOR_PARKING_PERF_STATE$SEGMENT,"GUID_PROCESSOR_PARKING_PERF_STATE");
    }
    public static MemorySegment GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$267.GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$SEGMENT,"GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$267.GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$SEGMENT,"GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_HISTORY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$267.GUID_PROCESSOR_PERF_HISTORY$SEGMENT,"GUID_PROCESSOR_PERF_HISTORY");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_LATENCY_HINT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$267.GUID_PROCESSOR_PERF_LATENCY_HINT$SEGMENT,"GUID_PROCESSOR_PERF_LATENCY_HINT");
    }
    public static MemorySegment GUID_PROCESSOR_DISTRIBUTE_UTILITY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$268.GUID_PROCESSOR_DISTRIBUTE_UTILITY$SEGMENT,"GUID_PROCESSOR_DISTRIBUTE_UTILITY");
    }
    public static MemorySegment GUID_SYSTEM_COOLING_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$268.GUID_SYSTEM_COOLING_POLICY$SEGMENT,"GUID_SYSTEM_COOLING_POLICY");
    }
    public static MemorySegment GUID_LOCK_CONSOLE_ON_WAKE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$268.GUID_LOCK_CONSOLE_ON_WAKE$SEGMENT,"GUID_LOCK_CONSOLE_ON_WAKE");
    }
    public static MemorySegment GUID_DEVICE_IDLE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$268.GUID_DEVICE_IDLE_POLICY$SEGMENT,"GUID_DEVICE_IDLE_POLICY");
    }
    public static MemorySegment GUID_ACDC_POWER_SOURCE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$268.GUID_ACDC_POWER_SOURCE$SEGMENT,"GUID_ACDC_POWER_SOURCE");
    }
    public static MemorySegment GUID_LIDSWITCH_STATE_CHANGE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$268.GUID_LIDSWITCH_STATE_CHANGE$SEGMENT,"GUID_LIDSWITCH_STATE_CHANGE");
    }
    public static MemorySegment GUID_BATTERY_PERCENTAGE_REMAINING$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$269.GUID_BATTERY_PERCENTAGE_REMAINING$SEGMENT,"GUID_BATTERY_PERCENTAGE_REMAINING");
    }
    public static MemorySegment GUID_GLOBAL_USER_PRESENCE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$269.GUID_GLOBAL_USER_PRESENCE$SEGMENT,"GUID_GLOBAL_USER_PRESENCE");
    }
    public static MemorySegment GUID_SESSION_DISPLAY_STATUS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$269.GUID_SESSION_DISPLAY_STATUS$SEGMENT,"GUID_SESSION_DISPLAY_STATUS");
    }
    public static MemorySegment GUID_SESSION_USER_PRESENCE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$269.GUID_SESSION_USER_PRESENCE$SEGMENT,"GUID_SESSION_USER_PRESENCE");
    }
    public static MemorySegment GUID_IDLE_BACKGROUND_TASK$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$269.GUID_IDLE_BACKGROUND_TASK$SEGMENT,"GUID_IDLE_BACKGROUND_TASK");
    }
    public static MemorySegment GUID_BACKGROUND_TASK_NOTIFICATION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$269.GUID_BACKGROUND_TASK_NOTIFICATION$SEGMENT,"GUID_BACKGROUND_TASK_NOTIFICATION");
    }
    public static MemorySegment GUID_APPLAUNCH_BUTTON$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$270.GUID_APPLAUNCH_BUTTON$SEGMENT,"GUID_APPLAUNCH_BUTTON");
    }
    public static MemorySegment GUID_PCIEXPRESS_SETTINGS_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$270.GUID_PCIEXPRESS_SETTINGS_SUBGROUP$SEGMENT,"GUID_PCIEXPRESS_SETTINGS_SUBGROUP");
    }
    public static MemorySegment GUID_PCIEXPRESS_ASPM_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$270.GUID_PCIEXPRESS_ASPM_POLICY$SEGMENT,"GUID_PCIEXPRESS_ASPM_POLICY");
    }
    public static MemorySegment GUID_ENABLE_SWITCH_FORCED_SHUTDOWN$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$270.GUID_ENABLE_SWITCH_FORCED_SHUTDOWN$SEGMENT,"GUID_ENABLE_SWITCH_FORCED_SHUTDOWN");
    }
    public static int PowerSystemUnspecified() {
        return (int)0L;
    }
    public static int PowerSystemWorking() {
        return (int)1L;
    }
    public static int PowerSystemSleeping1() {
        return (int)2L;
    }
    public static int PowerSystemSleeping2() {
        return (int)3L;
    }
    public static int PowerSystemSleeping3() {
        return (int)4L;
    }
    public static int PowerSystemHibernate() {
        return (int)5L;
    }
    public static int PowerSystemShutdown() {
        return (int)6L;
    }
    public static int PowerSystemMaximum() {
        return (int)7L;
    }
    public static int PowerActionNone() {
        return (int)0L;
    }
    public static int PowerActionReserved() {
        return (int)1L;
    }
    public static int PowerActionSleep() {
        return (int)2L;
    }
    public static int PowerActionHibernate() {
        return (int)3L;
    }
    public static int PowerActionShutdown() {
        return (int)4L;
    }
    public static int PowerActionShutdownReset() {
        return (int)5L;
    }
    public static int PowerActionShutdownOff() {
        return (int)6L;
    }
    public static int PowerActionWarmEject() {
        return (int)7L;
    }
    public static int PowerDeviceUnspecified() {
        return (int)0L;
    }
    public static int PowerDeviceD0() {
        return (int)1L;
    }
    public static int PowerDeviceD1() {
        return (int)2L;
    }
    public static int PowerDeviceD2() {
        return (int)3L;
    }
    public static int PowerDeviceD3() {
        return (int)4L;
    }
    public static int PowerDeviceMaximum() {
        return (int)5L;
    }
    public static int PowerMonitorOff() {
        return (int)0L;
    }
    public static int PowerMonitorOn() {
        return (int)1L;
    }
    public static int PowerMonitorDim() {
        return (int)2L;
    }
    public static int PowerUserPresent() {
        return (int)0L;
    }
    public static int PowerUserNotPresent() {
        return (int)1L;
    }
    public static int PowerUserInactive() {
        return (int)2L;
    }
    public static int PowerUserMaximum() {
        return (int)3L;
    }
    public static int PowerUserInvalid() {
        return (int)3L;
    }
    public static int LT_DONT_CARE() {
        return (int)0L;
    }
    public static int LT_LOWEST_LATENCY() {
        return (int)1L;
    }
    public static int PowerRequestDisplayRequired() {
        return (int)0L;
    }
    public static int PowerRequestSystemRequired() {
        return (int)1L;
    }
    public static int PowerRequestAwayModeRequired() {
        return (int)2L;
    }
    public static int PowerRequestExecutionRequired() {
        return (int)3L;
    }
    public static int SystemPowerPolicyAc() {
        return (int)0L;
    }
    public static int SystemPowerPolicyDc() {
        return (int)1L;
    }
    public static int VerifySystemPolicyAc() {
        return (int)2L;
    }
    public static int VerifySystemPolicyDc() {
        return (int)3L;
    }
    public static int SystemPowerCapabilities() {
        return (int)4L;
    }
    public static int SystemBatteryState() {
        return (int)5L;
    }
    public static int SystemPowerStateHandler() {
        return (int)6L;
    }
    public static int ProcessorStateHandler() {
        return (int)7L;
    }
    public static int SystemPowerPolicyCurrent() {
        return (int)8L;
    }
    public static int AdministratorPowerPolicy() {
        return (int)9L;
    }
    public static int SystemReserveHiberFile() {
        return (int)10L;
    }
    public static int ProcessorInformation() {
        return (int)11L;
    }
    public static int SystemPowerInformation() {
        return (int)12L;
    }
    public static int ProcessorStateHandler2() {
        return (int)13L;
    }
    public static int LastWakeTime() {
        return (int)14L;
    }
    public static int LastSleepTime() {
        return (int)15L;
    }
    public static int SystemExecutionState() {
        return (int)16L;
    }
    public static int SystemPowerStateNotifyHandler() {
        return (int)17L;
    }
    public static int ProcessorPowerPolicyAc() {
        return (int)18L;
    }
    public static int ProcessorPowerPolicyDc() {
        return (int)19L;
    }
    public static int VerifyProcessorPowerPolicyAc() {
        return (int)20L;
    }
    public static int VerifyProcessorPowerPolicyDc() {
        return (int)21L;
    }
    public static int ProcessorPowerPolicyCurrent() {
        return (int)22L;
    }
    public static int SystemPowerStateLogging() {
        return (int)23L;
    }
    public static int SystemPowerLoggingEntry() {
        return (int)24L;
    }
    public static int SetPowerSettingValue() {
        return (int)25L;
    }
    public static int NotifyUserPowerSetting() {
        return (int)26L;
    }
    public static int PowerInformationLevelUnused0() {
        return (int)27L;
    }
    public static int SystemMonitorHiberBootPowerOff() {
        return (int)28L;
    }
    public static int SystemVideoState() {
        return (int)29L;
    }
    public static int TraceApplicationPowerMessage() {
        return (int)30L;
    }
    public static int TraceApplicationPowerMessageEnd() {
        return (int)31L;
    }
    public static int ProcessorPerfStates() {
        return (int)32L;
    }
    public static int ProcessorIdleStates() {
        return (int)33L;
    }
    public static int ProcessorCap() {
        return (int)34L;
    }
    public static int SystemWakeSource() {
        return (int)35L;
    }
    public static int SystemHiberFileInformation() {
        return (int)36L;
    }
    public static int TraceServicePowerMessage() {
        return (int)37L;
    }
    public static int ProcessorLoad() {
        return (int)38L;
    }
    public static int PowerShutdownNotification() {
        return (int)39L;
    }
    public static int MonitorCapabilities() {
        return (int)40L;
    }
    public static int SessionPowerInit() {
        return (int)41L;
    }
    public static int SessionDisplayState() {
        return (int)42L;
    }
    public static int PowerRequestCreate() {
        return (int)43L;
    }
    public static int PowerRequestAction() {
        return (int)44L;
    }
    public static int GetPowerRequestList() {
        return (int)45L;
    }
    public static int ProcessorInformationEx() {
        return (int)46L;
    }
    public static int NotifyUserModeLegacyPowerEvent() {
        return (int)47L;
    }
    public static int GroupPark() {
        return (int)48L;
    }
    public static int ProcessorIdleDomains() {
        return (int)49L;
    }
    public static int WakeTimerList() {
        return (int)50L;
    }
    public static int SystemHiberFileSize() {
        return (int)51L;
    }
    public static int ProcessorIdleStatesHv() {
        return (int)52L;
    }
    public static int ProcessorPerfStatesHv() {
        return (int)53L;
    }
    public static int ProcessorPerfCapHv() {
        return (int)54L;
    }
    public static int ProcessorSetIdle() {
        return (int)55L;
    }
    public static int LogicalProcessorIdling() {
        return (int)56L;
    }
    public static int UserPresence() {
        return (int)57L;
    }
    public static int PowerSettingNotificationName() {
        return (int)58L;
    }
    public static int GetPowerSettingValue() {
        return (int)59L;
    }
    public static int IdleResiliency() {
        return (int)60L;
    }
    public static int SessionRITState() {
        return (int)61L;
    }
    public static int SessionConnectNotification() {
        return (int)62L;
    }
    public static int SessionPowerCleanup() {
        return (int)63L;
    }
    public static int SessionLockState() {
        return (int)64L;
    }
    public static int SystemHiberbootState() {
        return (int)65L;
    }
    public static int PlatformInformation() {
        return (int)66L;
    }
    public static int PdcInvocation() {
        return (int)67L;
    }
    public static int MonitorInvocation() {
        return (int)68L;
    }
    public static int FirmwareTableInformationRegistered() {
        return (int)69L;
    }
    public static int SetShutdownSelectedTime() {
        return (int)70L;
    }
    public static int SuspendResumeInvocation() {
        return (int)71L;
    }
    public static int PlmPowerRequestCreate() {
        return (int)72L;
    }
    public static int ScreenOff() {
        return (int)73L;
    }
    public static int CsDeviceNotification() {
        return (int)74L;
    }
    public static int PlatformRole() {
        return (int)75L;
    }
    public static int LastResumePerformance() {
        return (int)76L;
    }
    public static int DisplayBurst() {
        return (int)77L;
    }
    public static int ExitLatencySamplingPercentage() {
        return (int)78L;
    }
    public static int ApplyLowPowerScenarioSettings() {
        return (int)79L;
    }
    public static int PowerInformationLevelMaximum() {
        return (int)80L;
    }
    public static int UserNotPresent() {
        return (int)0L;
    }
    public static int UserPresent() {
        return (int)1L;
    }
    public static int UserUnknown() {
        return (int)255L;
    }
    public static int MonitorRequestReasonUnknown() {
        return (int)0L;
    }
    public static int MonitorRequestReasonPowerButton() {
        return (int)1L;
    }
    public static int MonitorRequestReasonRemoteConnection() {
        return (int)2L;
    }
    public static int MonitorRequestReasonScMonitorpower() {
        return (int)3L;
    }
    public static int MonitorRequestReasonUserInput() {
        return (int)4L;
    }
    public static int MonitorRequestReasonAcDcDisplayBurst() {
        return (int)5L;
    }
    public static int MonitorRequestReasonUserDisplayBurst() {
        return (int)6L;
    }
    public static int MonitorRequestReasonPoSetSystemState() {
        return (int)7L;
    }
    public static int MonitorRequestReasonSetThreadExecutionState() {
        return (int)8L;
    }
    public static int MonitorRequestReasonFullWake() {
        return (int)9L;
    }
    public static int MonitorRequestReasonSessionUnlock() {
        return (int)10L;
    }
    public static int MonitorRequestReasonScreenOffRequest() {
        return (int)11L;
    }
    public static int MonitorRequestReasonIdleTimeout() {
        return (int)12L;
    }
    public static int MonitorRequestReasonPolicyChange() {
        return (int)13L;
    }
    public static int MonitorRequestReasonMax() {
        return (int)14L;
    }
    public static int PoAc() {
        return (int)0L;
    }
    public static int PoDc() {
        return (int)1L;
    }
    public static int PoHot() {
        return (int)2L;
    }
    public static int PoConditionMaximum() {
        return (int)3L;
    }
    public static int PlatformRoleUnspecified() {
        return (int)0L;
    }
    public static int PlatformRoleDesktop() {
        return (int)1L;
    }
    public static int PlatformRoleMobile() {
        return (int)2L;
    }
    public static int PlatformRoleWorkstation() {
        return (int)3L;
    }
    public static int PlatformRoleEnterpriseServer() {
        return (int)4L;
    }
    public static int PlatformRoleSOHOServer() {
        return (int)5L;
    }
    public static int PlatformRoleAppliancePC() {
        return (int)6L;
    }
    public static int PlatformRolePerformanceServer() {
        return (int)7L;
    }
    public static int PlatformRoleSlate() {
        return (int)8L;
    }
    public static int PlatformRoleMaximum() {
        return (int)9L;
    }
    public static MemorySegment PPM_PERFSTATE_CHANGE_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$270.PPM_PERFSTATE_CHANGE_GUID$SEGMENT,"PPM_PERFSTATE_CHANGE_GUID");
    }
    public static MemorySegment PPM_PERFSTATE_DOMAIN_CHANGE_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$270.PPM_PERFSTATE_DOMAIN_CHANGE_GUID$SEGMENT,"PPM_PERFSTATE_DOMAIN_CHANGE_GUID");
    }
    public static MemorySegment PPM_IDLESTATE_CHANGE_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$271.PPM_IDLESTATE_CHANGE_GUID$SEGMENT,"PPM_IDLESTATE_CHANGE_GUID");
    }
    public static MemorySegment PPM_PERFSTATES_DATA_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$271.PPM_PERFSTATES_DATA_GUID$SEGMENT,"PPM_PERFSTATES_DATA_GUID");
    }
    public static MemorySegment PPM_IDLESTATES_DATA_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$271.PPM_IDLESTATES_DATA_GUID$SEGMENT,"PPM_IDLESTATES_DATA_GUID");
    }
    public static MemorySegment PPM_IDLE_ACCOUNTING_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$271.PPM_IDLE_ACCOUNTING_GUID$SEGMENT,"PPM_IDLE_ACCOUNTING_GUID");
    }
    public static MemorySegment PPM_IDLE_ACCOUNTING_EX_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$271.PPM_IDLE_ACCOUNTING_EX_GUID$SEGMENT,"PPM_IDLE_ACCOUNTING_EX_GUID");
    }
    public static MemorySegment PPM_THERMALCONSTRAINT_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$271.PPM_THERMALCONSTRAINT_GUID$SEGMENT,"PPM_THERMALCONSTRAINT_GUID");
    }
    public static MemorySegment PPM_PERFMON_PERFSTATE_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$272.PPM_PERFMON_PERFSTATE_GUID$SEGMENT,"PPM_PERFMON_PERFSTATE_GUID");
    }
    public static MemorySegment PPM_THERMAL_POLICY_CHANGE_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$272.PPM_THERMAL_POLICY_CHANGE_GUID$SEGMENT,"PPM_THERMAL_POLICY_CHANGE_GUID");
    }
    public static int IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF() {
        return (int)1L;
    }
    public static int IMPORT_OBJECT_CODE() {
        return (int)0L;
    }
    public static int IMPORT_OBJECT_DATA() {
        return (int)1L;
    }
    public static int IMPORT_OBJECT_CONST() {
        return (int)2L;
    }
    public static int IMPORT_OBJECT_ORDINAL() {
        return (int)0L;
    }
    public static int IMPORT_OBJECT_NAME() {
        return (int)1L;
    }
    public static int IMPORT_OBJECT_NAME_NO_PREFIX() {
        return (int)2L;
    }
    public static int IMPORT_OBJECT_NAME_UNDECORATE() {
        return (int)3L;
    }
    public static int COMIMAGE_FLAGS_ILONLY() {
        return (int)1L;
    }
    public static int COMIMAGE_FLAGS_32BITREQUIRED() {
        return (int)2L;
    }
    public static int COMIMAGE_FLAGS_IL_LIBRARY() {
        return (int)4L;
    }
    public static int COMIMAGE_FLAGS_STRONGNAMESIGNED() {
        return (int)8L;
    }
    public static int COMIMAGE_FLAGS_TRACKDEBUGDATA() {
        return (int)65536L;
    }
    public static int COR_VERSION_MAJOR_V2() {
        return (int)2L;
    }
    public static int COR_VERSION_MAJOR() {
        return (int)2L;
    }
    public static int COR_VERSION_MINOR() {
        return (int)0L;
    }
    public static int COR_DELETED_NAME_LENGTH() {
        return (int)8L;
    }
    public static int COR_VTABLEGAP_NAME_LENGTH() {
        return (int)8L;
    }
    public static int NATIVE_TYPE_MAX_CB() {
        return (int)1L;
    }
    public static int COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE() {
        return (int)255L;
    }
    public static int IMAGE_COR_MIH_METHODRVA() {
        return (int)1L;
    }
    public static int IMAGE_COR_MIH_EHRVA() {
        return (int)2L;
    }
    public static int IMAGE_COR_MIH_BASICBLOCK() {
        return (int)8L;
    }
    public static int COR_VTABLE_32BIT() {
        return (int)1L;
    }
    public static int COR_VTABLE_64BIT() {
        return (int)2L;
    }
    public static int COR_VTABLE_FROM_UNMANAGED() {
        return (int)4L;
    }
    public static int COR_VTABLE_CALL_MOST_DERIVED() {
        return (int)16L;
    }
    public static int IMAGE_COR_EATJ_THUNK_SIZE() {
        return (int)32L;
    }
    public static int MAX_CLASS_NAME() {
        return (int)1024L;
    }
    public static int MAX_PACKAGE_NAME() {
        return (int)1024L;
    }
    public static MethodHandle RtlCaptureStackBackTrace$MH() {
        return RuntimeHelper.requireNonNull(constants$272.RtlCaptureStackBackTrace$MH,"RtlCaptureStackBackTrace");
    }
    public static short RtlCaptureStackBackTrace ( int FramesToSkip,  int FramesToCapture,  Addressable BackTrace,  Addressable BackTraceHash) {
        var mh$ = RuntimeHelper.requireNonNull(constants$272.RtlCaptureStackBackTrace$MH, "RtlCaptureStackBackTrace");
        try {
            return (short)mh$.invokeExact(FramesToSkip, FramesToCapture, BackTrace.address(), BackTraceHash.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlCaptureContext$MH() {
        return RuntimeHelper.requireNonNull(constants$272.RtlCaptureContext$MH,"RtlCaptureContext");
    }
    public static void RtlCaptureContext ( Addressable ContextRecord) {
        var mh$ = RuntimeHelper.requireNonNull(constants$272.RtlCaptureContext$MH, "RtlCaptureContext");
        try {
            mh$.invokeExact(ContextRecord.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlCompareMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$273.RtlCompareMemory$MH,"RtlCompareMemory");
    }
    public static long RtlCompareMemory ( Addressable Source1,  Addressable Source2,  long Length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$273.RtlCompareMemory$MH, "RtlCompareMemory");
        try {
            return (long)mh$.invokeExact(Source1.address(), Source2.address(), Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlAddFunctionTable$MH() {
        return RuntimeHelper.requireNonNull(constants$273.RtlAddFunctionTable$MH,"RtlAddFunctionTable");
    }
    public static byte RtlAddFunctionTable ( Addressable FunctionTable,  int EntryCount,  long BaseAddress) {
        var mh$ = RuntimeHelper.requireNonNull(constants$273.RtlAddFunctionTable$MH, "RtlAddFunctionTable");
        try {
            return (byte)mh$.invokeExact(FunctionTable.address(), EntryCount, BaseAddress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlDeleteFunctionTable$MH() {
        return RuntimeHelper.requireNonNull(constants$273.RtlDeleteFunctionTable$MH,"RtlDeleteFunctionTable");
    }
    public static byte RtlDeleteFunctionTable ( Addressable FunctionTable) {
        var mh$ = RuntimeHelper.requireNonNull(constants$273.RtlDeleteFunctionTable$MH, "RtlDeleteFunctionTable");
        try {
            return (byte)mh$.invokeExact(FunctionTable.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlInstallFunctionTableCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$273.RtlInstallFunctionTableCallback$MH,"RtlInstallFunctionTableCallback");
    }
    public static byte RtlInstallFunctionTableCallback ( long TableIdentifier,  long BaseAddress,  int Length,  Addressable Callback,  Addressable Context,  Addressable OutOfProcessCallbackDll) {
        var mh$ = RuntimeHelper.requireNonNull(constants$273.RtlInstallFunctionTableCallback$MH, "RtlInstallFunctionTableCallback");
        try {
            return (byte)mh$.invokeExact(TableIdentifier, BaseAddress, Length, Callback.address(), Context.address(), OutOfProcessCallbackDll.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlRestoreContext$MH() {
        return RuntimeHelper.requireNonNull(constants$273.RtlRestoreContext$MH,"RtlRestoreContext");
    }
    public static void RtlRestoreContext ( Addressable ContextRecord,  Addressable ExceptionRecord) {
        var mh$ = RuntimeHelper.requireNonNull(constants$273.RtlRestoreContext$MH, "RtlRestoreContext");
        try {
            mh$.invokeExact(ContextRecord.address(), ExceptionRecord.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlUnwind$MH() {
        return RuntimeHelper.requireNonNull(constants$273.RtlUnwind$MH,"RtlUnwind");
    }
    public static void RtlUnwind ( Addressable TargetFrame,  Addressable TargetIp,  Addressable ExceptionRecord,  Addressable ReturnValue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$273.RtlUnwind$MH, "RtlUnwind");
        try {
            mh$.invokeExact(TargetFrame.address(), TargetIp.address(), ExceptionRecord.address(), ReturnValue.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlPcToFileHeader$MH() {
        return RuntimeHelper.requireNonNull(constants$274.RtlPcToFileHeader$MH,"RtlPcToFileHeader");
    }
    public static MemoryAddress RtlPcToFileHeader ( Addressable PcValue,  Addressable BaseOfImage) {
        var mh$ = RuntimeHelper.requireNonNull(constants$274.RtlPcToFileHeader$MH, "RtlPcToFileHeader");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(PcValue.address(), BaseOfImage.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlLookupFunctionEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$274.RtlLookupFunctionEntry$MH,"RtlLookupFunctionEntry");
    }
    public static MemoryAddress RtlLookupFunctionEntry ( long ControlPc,  Addressable ImageBase,  Addressable HistoryTable) {
        var mh$ = RuntimeHelper.requireNonNull(constants$274.RtlLookupFunctionEntry$MH, "RtlLookupFunctionEntry");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ControlPc, ImageBase.address(), HistoryTable.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlUnwindEx$MH() {
        return RuntimeHelper.requireNonNull(constants$274.RtlUnwindEx$MH,"RtlUnwindEx");
    }
    public static void RtlUnwindEx ( Addressable TargetFrame,  Addressable TargetIp,  Addressable ExceptionRecord,  Addressable ReturnValue,  Addressable ContextRecord,  Addressable HistoryTable) {
        var mh$ = RuntimeHelper.requireNonNull(constants$274.RtlUnwindEx$MH, "RtlUnwindEx");
        try {
            mh$.invokeExact(TargetFrame.address(), TargetIp.address(), ExceptionRecord.address(), ReturnValue.address(), ContextRecord.address(), HistoryTable.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlVirtualUnwind$MH() {
        return RuntimeHelper.requireNonNull(constants$274.RtlVirtualUnwind$MH,"RtlVirtualUnwind");
    }
    public static MemoryAddress RtlVirtualUnwind ( int HandlerType,  long ImageBase,  long ControlPc,  Addressable FunctionEntry,  Addressable ContextRecord,  Addressable HandlerData,  Addressable EstablisherFrame,  Addressable ContextPointers) {
        var mh$ = RuntimeHelper.requireNonNull(constants$274.RtlVirtualUnwind$MH, "RtlVirtualUnwind");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(HandlerType, ImageBase, ControlPc, FunctionEntry.address(), ContextRecord.address(), HandlerData.address(), EstablisherFrame.address(), ContextPointers.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlInitializeSListHead$MH() {
        return RuntimeHelper.requireNonNull(constants$274.RtlInitializeSListHead$MH,"RtlInitializeSListHead");
    }
    public static void RtlInitializeSListHead ( Addressable ListHead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$274.RtlInitializeSListHead$MH, "RtlInitializeSListHead");
        try {
            mh$.invokeExact(ListHead.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlFirstEntrySList$MH() {
        return RuntimeHelper.requireNonNull(constants$274.RtlFirstEntrySList$MH,"RtlFirstEntrySList");
    }
    public static MemoryAddress RtlFirstEntrySList ( Addressable ListHead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$274.RtlFirstEntrySList$MH, "RtlFirstEntrySList");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ListHead.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlInterlockedPopEntrySList$MH() {
        return RuntimeHelper.requireNonNull(constants$275.RtlInterlockedPopEntrySList$MH,"RtlInterlockedPopEntrySList");
    }
    public static MemoryAddress RtlInterlockedPopEntrySList ( Addressable ListHead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$275.RtlInterlockedPopEntrySList$MH, "RtlInterlockedPopEntrySList");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ListHead.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlInterlockedPushEntrySList$MH() {
        return RuntimeHelper.requireNonNull(constants$275.RtlInterlockedPushEntrySList$MH,"RtlInterlockedPushEntrySList");
    }
    public static MemoryAddress RtlInterlockedPushEntrySList ( Addressable ListHead,  Addressable ListEntry) {
        var mh$ = RuntimeHelper.requireNonNull(constants$275.RtlInterlockedPushEntrySList$MH, "RtlInterlockedPushEntrySList");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ListHead.address(), ListEntry.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlInterlockedPushListSListEx$MH() {
        return RuntimeHelper.requireNonNull(constants$275.RtlInterlockedPushListSListEx$MH,"RtlInterlockedPushListSListEx");
    }
    public static MemoryAddress RtlInterlockedPushListSListEx ( Addressable ListHead,  Addressable List,  Addressable ListEnd,  int Count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$275.RtlInterlockedPushListSListEx$MH, "RtlInterlockedPushListSListEx");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ListHead.address(), List.address(), ListEnd.address(), Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlInterlockedFlushSList$MH() {
        return RuntimeHelper.requireNonNull(constants$275.RtlInterlockedFlushSList$MH,"RtlInterlockedFlushSList");
    }
    public static MemoryAddress RtlInterlockedFlushSList ( Addressable ListHead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$275.RtlInterlockedFlushSList$MH, "RtlInterlockedFlushSList");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ListHead.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlQueryDepthSList$MH() {
        return RuntimeHelper.requireNonNull(constants$275.RtlQueryDepthSList$MH,"RtlQueryDepthSList");
    }
    public static short RtlQueryDepthSList ( Addressable ListHead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$275.RtlQueryDepthSList$MH, "RtlQueryDepthSList");
        try {
            return (short)mh$.invokeExact(ListHead.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlSecureZeroMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$276.RtlSecureZeroMemory$MH,"RtlSecureZeroMemory");
    }
    public static MemoryAddress RtlSecureZeroMemory ( Addressable ptr,  long cnt) {
        var mh$ = RuntimeHelper.requireNonNull(constants$276.RtlSecureZeroMemory$MH, "RtlSecureZeroMemory");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ptr.address(), cnt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerSetConditionMask$MH() {
        return RuntimeHelper.requireNonNull(constants$276.VerSetConditionMask$MH,"VerSetConditionMask");
    }
    public static long VerSetConditionMask ( long ConditionMask,  int TypeMask,  byte Condition) {
        var mh$ = RuntimeHelper.requireNonNull(constants$276.VerSetConditionMask$MH, "VerSetConditionMask");
        try {
            return (long)mh$.invokeExact(ConditionMask, TypeMask, Condition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlGetProductInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$276.RtlGetProductInfo$MH,"RtlGetProductInfo");
    }
    public static byte RtlGetProductInfo ( int OSMajorVersion,  int OSMinorVersion,  int SpMajorVersion,  int SpMinorVersion,  Addressable ReturnedProductType) {
        var mh$ = RuntimeHelper.requireNonNull(constants$276.RtlGetProductInfo$MH, "RtlGetProductInfo");
        try {
            return (byte)mh$.invokeExact(OSMajorVersion, OSMinorVersion, SpMajorVersion, SpMinorVersion, ReturnedProductType.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int UmsThreadInvalidInfoClass() {
        return (int)0L;
    }
    public static int UmsThreadUserContext() {
        return (int)1L;
    }
    public static int UmsThreadPriority() {
        return (int)2L;
    }
    public static int UmsThreadAffinity() {
        return (int)3L;
    }
    public static int UmsThreadTeb() {
        return (int)4L;
    }
    public static int UmsThreadIsSuspended() {
        return (int)5L;
    }
    public static int UmsThreadIsTerminated() {
        return (int)6L;
    }
    public static int UmsThreadMaxInfoClass() {
        return (int)7L;
    }
    public static int UmsSchedulerStartup() {
        return (int)0L;
    }
    public static int UmsSchedulerThreadBlocked() {
        return (int)1L;
    }
    public static int UmsSchedulerThreadYield() {
        return (int)2L;
    }
    public static int HeapCompatibilityInformation() {
        return (int)0L;
    }
    public static int HeapEnableTerminationOnCorruption() {
        return (int)1L;
    }
    public static int ActivationContextBasicInformation() {
        return (int)1L;
    }
    public static int ActivationContextDetailedInformation() {
        return (int)2L;
    }
    public static int AssemblyDetailedInformationInActivationContext() {
        return (int)3L;
    }
    public static int FileInformationInAssemblyOfAssemblyInActivationContext() {
        return (int)4L;
    }
    public static int RunlevelInformationInActivationContext() {
        return (int)5L;
    }
    public static int CompatibilityInformationInActivationContext() {
        return (int)6L;
    }
    public static int ActivationContextManifestResourceName() {
        return (int)7L;
    }
    public static int MaxActivationContextInfoClass() {
        return (int)8L;
    }
    public static int AssemblyDetailedInformationInActivationContxt() {
        return (int)3L;
    }
    public static int FileInformationInAssemblyOfAssemblyInActivationContxt() {
        return (int)4L;
    }
    public static int ACTCTX_RUN_LEVEL_UNSPECIFIED() {
        return (int)0L;
    }
    public static int ACTCTX_RUN_LEVEL_AS_INVOKER() {
        return (int)1L;
    }
    public static int ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE() {
        return (int)2L;
    }
    public static int ACTCTX_RUN_LEVEL_REQUIRE_ADMIN() {
        return (int)3L;
    }
    public static int ACTCTX_RUN_LEVEL_NUMBERS() {
        return (int)4L;
    }
    public static int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN() {
        return (int)0L;
    }
    public static int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS() {
        return (int)1L;
    }
    public static int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION() {
        return (int)2L;
    }
    public static MethodHandle RtlApplicationVerifierStop$MH() {
        return RuntimeHelper.requireNonNull(constants$281.RtlApplicationVerifierStop$MH,"RtlApplicationVerifierStop");
    }
    public static void RtlApplicationVerifierStop ( long Code,  Addressable Message,  long Param1,  Addressable Description1,  long Param2,  Addressable Description2,  long Param3,  Addressable Description3,  long Param4,  Addressable Description4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$281.RtlApplicationVerifierStop$MH, "RtlApplicationVerifierStop");
        try {
            mh$.invokeExact(Code, Message.address(), Param1, Description1.address(), Param2, Description2.address(), Param3, Description3.address(), Param4, Description4.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlSetHeapInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$281.RtlSetHeapInformation$MH,"RtlSetHeapInformation");
    }
    public static int RtlSetHeapInformation ( Addressable HeapHandle,  int HeapInformationClass,  Addressable HeapInformation,  long HeapInformationLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$281.RtlSetHeapInformation$MH, "RtlSetHeapInformation");
        try {
            return (int)mh$.invokeExact(HeapHandle.address(), HeapInformationClass, HeapInformation.address(), HeapInformationLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlQueryHeapInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$281.RtlQueryHeapInformation$MH,"RtlQueryHeapInformation");
    }
    public static int RtlQueryHeapInformation ( Addressable HeapHandle,  int HeapInformationClass,  Addressable HeapInformation,  long HeapInformationLength,  Addressable ReturnLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$281.RtlQueryHeapInformation$MH, "RtlQueryHeapInformation");
        try {
            return (int)mh$.invokeExact(HeapHandle.address(), HeapInformationClass, HeapInformation.address(), HeapInformationLength, ReturnLength.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlMultipleAllocateHeap$MH() {
        return RuntimeHelper.requireNonNull(constants$281.RtlMultipleAllocateHeap$MH,"RtlMultipleAllocateHeap");
    }
    public static int RtlMultipleAllocateHeap ( Addressable HeapHandle,  int Flags,  long Size,  int Count,  Addressable Array) {
        var mh$ = RuntimeHelper.requireNonNull(constants$281.RtlMultipleAllocateHeap$MH, "RtlMultipleAllocateHeap");
        try {
            return (int)mh$.invokeExact(HeapHandle.address(), Flags, Size, Count, Array.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlMultipleFreeHeap$MH() {
        return RuntimeHelper.requireNonNull(constants$281.RtlMultipleFreeHeap$MH,"RtlMultipleFreeHeap");
    }
    public static int RtlMultipleFreeHeap ( Addressable HeapHandle,  int Flags,  int Count,  Addressable Array) {
        var mh$ = RuntimeHelper.requireNonNull(constants$281.RtlMultipleFreeHeap$MH, "RtlMultipleFreeHeap");
        try {
            return (int)mh$.invokeExact(HeapHandle.address(), Flags, Count, Array.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int DriverType() {
        return (int)1L;
    }
    public static int FileSystemType() {
        return (int)2L;
    }
    public static int Win32ServiceOwnProcess() {
        return (int)16L;
    }
    public static int Win32ServiceShareProcess() {
        return (int)32L;
    }
    public static int AdapterType() {
        return (int)4L;
    }
    public static int RecognizerType() {
        return (int)8L;
    }
    public static int BootLoad() {
        return (int)0L;
    }
    public static int SystemLoad() {
        return (int)1L;
    }
    public static int AutoLoad() {
        return (int)2L;
    }
    public static int DemandLoad() {
        return (int)3L;
    }
    public static int DisableLoad() {
        return (int)4L;
    }
    public static int IgnoreError() {
        return (int)0L;
    }
    public static int NormalError() {
        return (int)1L;
    }
    public static int SevereError() {
        return (int)2L;
    }
    public static int CriticalError() {
        return (int)3L;
    }
    public static int TapeDriveProblemNone() {
        return (int)0L;
    }
    public static int TapeDriveReadWriteWarning() {
        return (int)1L;
    }
    public static int TapeDriveReadWriteError() {
        return (int)2L;
    }
    public static int TapeDriveReadWarning() {
        return (int)3L;
    }
    public static int TapeDriveWriteWarning() {
        return (int)4L;
    }
    public static int TapeDriveReadError() {
        return (int)5L;
    }
    public static int TapeDriveWriteError() {
        return (int)6L;
    }
    public static int TapeDriveHardwareError() {
        return (int)7L;
    }
    public static int TapeDriveUnsupportedMedia() {
        return (int)8L;
    }
    public static int TapeDriveScsiConnectionError() {
        return (int)9L;
    }
    public static int TapeDriveTimetoClean() {
        return (int)10L;
    }
    public static int TapeDriveCleanDriveNow() {
        return (int)11L;
    }
    public static int TapeDriveMediaLifeExpired() {
        return (int)12L;
    }
    public static int TapeDriveSnappedTape() {
        return (int)13L;
    }
    public static int TP_CALLBACK_PRIORITY_HIGH() {
        return (int)0L;
    }
    public static int TP_CALLBACK_PRIORITY_NORMAL() {
        return (int)1L;
    }
    public static int TP_CALLBACK_PRIORITY_LOW() {
        return (int)2L;
    }
    public static int TP_CALLBACK_PRIORITY_INVALID() {
        return (int)3L;
    }
    public static int TP_CALLBACK_PRIORITY_COUNT() {
        return (int)3L;
    }
    public static MethodHandle TpInitializeCallbackEnviron$MH() {
        return RuntimeHelper.requireNonNull(constants$283.TpInitializeCallbackEnviron$MH,"TpInitializeCallbackEnviron");
    }
    public static void TpInitializeCallbackEnviron ( Addressable cbe) {
        var mh$ = RuntimeHelper.requireNonNull(constants$283.TpInitializeCallbackEnviron$MH, "TpInitializeCallbackEnviron");
        try {
            mh$.invokeExact(cbe.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackThreadpool$MH() {
        return RuntimeHelper.requireNonNull(constants$283.TpSetCallbackThreadpool$MH,"TpSetCallbackThreadpool");
    }
    public static void TpSetCallbackThreadpool ( Addressable cbe,  Addressable pool) {
        var mh$ = RuntimeHelper.requireNonNull(constants$283.TpSetCallbackThreadpool$MH, "TpSetCallbackThreadpool");
        try {
            mh$.invokeExact(cbe.address(), pool.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackCleanupGroup$MH() {
        return RuntimeHelper.requireNonNull(constants$283.TpSetCallbackCleanupGroup$MH,"TpSetCallbackCleanupGroup");
    }
    public static void TpSetCallbackCleanupGroup ( Addressable cbe,  Addressable cleanup_group,  Addressable cleanup_group_cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$283.TpSetCallbackCleanupGroup$MH, "TpSetCallbackCleanupGroup");
        try {
            mh$.invokeExact(cbe.address(), cleanup_group.address(), cleanup_group_cb.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackActivationContext$MH() {
        return RuntimeHelper.requireNonNull(constants$284.TpSetCallbackActivationContext$MH,"TpSetCallbackActivationContext");
    }
    public static void TpSetCallbackActivationContext ( Addressable cbe,  Addressable actx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$284.TpSetCallbackActivationContext$MH, "TpSetCallbackActivationContext");
        try {
            mh$.invokeExact(cbe.address(), actx.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackNoActivationContext$MH() {
        return RuntimeHelper.requireNonNull(constants$284.TpSetCallbackNoActivationContext$MH,"TpSetCallbackNoActivationContext");
    }
    public static void TpSetCallbackNoActivationContext ( Addressable cbe) {
        var mh$ = RuntimeHelper.requireNonNull(constants$284.TpSetCallbackNoActivationContext$MH, "TpSetCallbackNoActivationContext");
        try {
            mh$.invokeExact(cbe.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackLongFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$284.TpSetCallbackLongFunction$MH,"TpSetCallbackLongFunction");
    }
    public static void TpSetCallbackLongFunction ( Addressable cbe) {
        var mh$ = RuntimeHelper.requireNonNull(constants$284.TpSetCallbackLongFunction$MH, "TpSetCallbackLongFunction");
        try {
            mh$.invokeExact(cbe.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackRaceWithDll$MH() {
        return RuntimeHelper.requireNonNull(constants$284.TpSetCallbackRaceWithDll$MH,"TpSetCallbackRaceWithDll");
    }
    public static void TpSetCallbackRaceWithDll ( Addressable cbe,  Addressable h) {
        var mh$ = RuntimeHelper.requireNonNull(constants$284.TpSetCallbackRaceWithDll$MH, "TpSetCallbackRaceWithDll");
        try {
            mh$.invokeExact(cbe.address(), h.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackFinalizationCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$284.TpSetCallbackFinalizationCallback$MH,"TpSetCallbackFinalizationCallback");
    }
    public static void TpSetCallbackFinalizationCallback ( Addressable cbe,  Addressable fini_cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$284.TpSetCallbackFinalizationCallback$MH, "TpSetCallbackFinalizationCallback");
        try {
            mh$.invokeExact(cbe.address(), fini_cb.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackPriority$MH() {
        return RuntimeHelper.requireNonNull(constants$284.TpSetCallbackPriority$MH,"TpSetCallbackPriority");
    }
    public static void TpSetCallbackPriority ( Addressable cbe,  int prio) {
        var mh$ = RuntimeHelper.requireNonNull(constants$284.TpSetCallbackPriority$MH, "TpSetCallbackPriority");
        try {
            mh$.invokeExact(cbe.address(), prio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackPersistent$MH() {
        return RuntimeHelper.requireNonNull(constants$285.TpSetCallbackPersistent$MH,"TpSetCallbackPersistent");
    }
    public static void TpSetCallbackPersistent ( Addressable cbe) {
        var mh$ = RuntimeHelper.requireNonNull(constants$285.TpSetCallbackPersistent$MH, "TpSetCallbackPersistent");
        try {
            mh$.invokeExact(cbe.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpDestroyCallbackEnviron$MH() {
        return RuntimeHelper.requireNonNull(constants$285.TpDestroyCallbackEnviron$MH,"TpDestroyCallbackEnviron");
    }
    public static void TpDestroyCallbackEnviron ( Addressable cbe) {
        var mh$ = RuntimeHelper.requireNonNull(constants$285.TpDestroyCallbackEnviron$MH, "TpDestroyCallbackEnviron");
        try {
            mh$.invokeExact(cbe.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NtCurrentTeb$MH() {
        return RuntimeHelper.requireNonNull(constants$285.NtCurrentTeb$MH,"NtCurrentTeb");
    }
    public static MemoryAddress NtCurrentTeb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$285.NtCurrentTeb$MH, "NtCurrentTeb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentFiber$MH() {
        return RuntimeHelper.requireNonNull(constants$285.GetCurrentFiber$MH,"GetCurrentFiber");
    }
    public static MemoryAddress GetCurrentFiber () {
        var mh$ = RuntimeHelper.requireNonNull(constants$285.GetCurrentFiber$MH, "GetCurrentFiber");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFiberData$MH() {
        return RuntimeHelper.requireNonNull(constants$285.GetFiberData$MH,"GetFiberData");
    }
    public static MemoryAddress GetFiberData () {
        var mh$ = RuntimeHelper.requireNonNull(constants$285.GetFiberData$MH, "GetFiberData");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int TransactionOutcomeUndetermined() {
        return (int)1L;
    }
    public static int TransactionOutcomeCommitted() {
        return (int)2L;
    }
    public static int TransactionOutcomeAborted() {
        return (int)3L;
    }
    public static int TransactionStateNormal() {
        return (int)1L;
    }
    public static int TransactionStateIndoubt() {
        return (int)2L;
    }
    public static int TransactionStateCommittedNotify() {
        return (int)3L;
    }
    public static int TransactionBasicInformation() {
        return (int)0L;
    }
    public static int TransactionPropertiesInformation() {
        return (int)1L;
    }
    public static int TransactionEnlistmentInformation() {
        return (int)2L;
    }
    public static int TransactionSuperiorEnlistmentInformation() {
        return (int)3L;
    }
    public static int TransactionBindInformation() {
        return (int)4L;
    }
    public static int TransactionDTCPrivateInformation() {
        return (int)5L;
    }
    public static int TransactionManagerBasicInformation() {
        return (int)0L;
    }
    public static int TransactionManagerLogInformation() {
        return (int)1L;
    }
    public static int TransactionManagerLogPathInformation() {
        return (int)2L;
    }
    public static int TransactionManagerOnlineProbeInformation() {
        return (int)3L;
    }
    public static int TransactionManagerRecoveryInformation() {
        return (int)4L;
    }
    public static int TransactionManagerOldestTransactionInformation() {
        return (int)5L;
    }
    public static int ResourceManagerBasicInformation() {
        return (int)0L;
    }
    public static int ResourceManagerCompletionInformation() {
        return (int)1L;
    }
    public static int EnlistmentBasicInformation() {
        return (int)0L;
    }
    public static int EnlistmentRecoveryInformation() {
        return (int)1L;
    }
    public static int EnlistmentCrmInformation() {
        return (int)2L;
    }
    public static int KTMOBJECT_TRANSACTION() {
        return (int)0L;
    }
    public static int KTMOBJECT_TRANSACTION_MANAGER() {
        return (int)1L;
    }
    public static int KTMOBJECT_RESOURCE_MANAGER() {
        return (int)2L;
    }
    public static int KTMOBJECT_ENLISTMENT() {
        return (int)3L;
    }
    public static int KTMOBJECT_INVALID() {
        return (int)4L;
    }
    public static ValueLayout LPARAM = C_LONG_LONG;
    public static ValueLayout LRESULT = C_LONG_LONG;
    public static ValueLayout HFILE = C_INT;
    public static int DPI_AWARENESS_INVALID() {
        return (int)-1L;
    }
    public static int DPI_AWARENESS_UNAWARE() {
        return (int)0L;
    }
    public static int DPI_AWARENESS_SYSTEM_AWARE() {
        return (int)1L;
    }
    public static int DPI_AWARENESS_PER_MONITOR_AWARE() {
        return (int)2L;
    }
    public static int DPI_HOSTING_BEHAVIOR_INVALID() {
        return (int)-1L;
    }
    public static int DPI_HOSTING_BEHAVIOR_DEFAULT() {
        return (int)0L;
    }
    public static int DPI_HOSTING_BEHAVIOR_MIXED() {
        return (int)1L;
    }
    public static int FindExInfoStandard() {
        return (int)0L;
    }
    public static int FindExInfoBasic() {
        return (int)1L;
    }
    public static int FindExInfoMaxInfoLevel() {
        return (int)2L;
    }
    public static int FindExSearchNameMatch() {
        return (int)0L;
    }
    public static int FindExSearchLimitToDirectories() {
        return (int)1L;
    }
    public static int FindExSearchLimitToDevices() {
        return (int)2L;
    }
    public static int FindExSearchMaxSearchOp() {
        return (int)3L;
    }
    public static int GetFileExInfoStandard() {
        return (int)0L;
    }
    public static int GetFileExMaxInfoLevel() {
        return (int)1L;
    }
    public static int FileBasicInfo() {
        return (int)0L;
    }
    public static int FileStandardInfo() {
        return (int)1L;
    }
    public static int FileNameInfo() {
        return (int)2L;
    }
    public static int FileRenameInfo() {
        return (int)3L;
    }
    public static int FileDispositionInfo() {
        return (int)4L;
    }
    public static int FileAllocationInfo() {
        return (int)5L;
    }
    public static int FileEndOfFileInfo() {
        return (int)6L;
    }
    public static int FileStreamInfo() {
        return (int)7L;
    }
    public static int FileCompressionInfo() {
        return (int)8L;
    }
    public static int FileAttributeTagInfo() {
        return (int)9L;
    }
    public static int FileIdBothDirectoryInfo() {
        return (int)10L;
    }
    public static int FileIdBothDirectoryRestartInfo() {
        return (int)11L;
    }
    public static int FileIoPriorityHintInfo() {
        return (int)12L;
    }
    public static int FileRemoteProtocolInfo() {
        return (int)13L;
    }
    public static int FileFullDirectoryInfo() {
        return (int)14L;
    }
    public static int FileFullDirectoryRestartInfo() {
        return (int)15L;
    }
    public static int FileCaseSensitiveInfo() {
        return (int)16L;
    }
    public static int FileNormalizedNameInfo() {
        return (int)17L;
    }
    public static int MaximumFileInfoByHandleClass() {
        return (int)18L;
    }
    public static MethodHandle BemCreateReference$MH() {
        return RuntimeHelper.requireNonNull(constants$288.BemCreateReference$MH,"BemCreateReference");
    }
    public static int BemCreateReference ( Addressable iid,  Addressable interfaceInstance,  Addressable freeCallback,  Addressable reference) {
        var mh$ = RuntimeHelper.requireNonNull(constants$288.BemCreateReference$MH, "BemCreateReference");
        try {
            return (int)mh$.invokeExact(iid.address(), interfaceInstance.address(), freeCallback.address(), reference.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BemCreateContractFrom$MH() {
        return RuntimeHelper.requireNonNull(constants$289.BemCreateContractFrom$MH,"BemCreateContractFrom");
    }
    public static int BemCreateContractFrom ( Addressable dllPath,  Addressable extensionId,  Addressable contractDescription,  Addressable hostContract,  Addressable contract) {
        var mh$ = RuntimeHelper.requireNonNull(constants$289.BemCreateContractFrom$MH, "BemCreateContractFrom");
        try {
            return (int)mh$.invokeExact(dllPath.address(), extensionId.address(), contractDescription.address(), hostContract.address(), contract.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BemCopyReference$MH() {
        return RuntimeHelper.requireNonNull(constants$289.BemCopyReference$MH,"BemCopyReference");
    }
    public static int BemCopyReference ( Addressable reference,  Addressable copiedReference) {
        var mh$ = RuntimeHelper.requireNonNull(constants$289.BemCopyReference$MH, "BemCopyReference");
        try {
            return (int)mh$.invokeExact(reference.address(), copiedReference.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BemFreeReference$MH() {
        return RuntimeHelper.requireNonNull(constants$289.BemFreeReference$MH,"BemFreeReference");
    }
    public static void BemFreeReference ( Addressable reference) {
        var mh$ = RuntimeHelper.requireNonNull(constants$289.BemFreeReference$MH, "BemFreeReference");
        try {
            mh$.invokeExact(reference.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BemFreeContract$MH() {
        return RuntimeHelper.requireNonNull(constants$289.BemFreeContract$MH,"BemFreeContract");
    }
    public static void BemFreeContract ( Addressable contract) {
        var mh$ = RuntimeHelper.requireNonNull(constants$289.BemFreeContract$MH, "BemFreeContract");
        try {
            mh$.invokeExact(contract.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DebugBreak$MH() {
        return RuntimeHelper.requireNonNull(constants$289.DebugBreak$MH,"DebugBreak");
    }
    public static void DebugBreak () {
        var mh$ = RuntimeHelper.requireNonNull(constants$289.DebugBreak$MH, "DebugBreak");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsDebuggerPresent$MH() {
        return RuntimeHelper.requireNonNull(constants$289.IsDebuggerPresent$MH,"IsDebuggerPresent");
    }
    public static int IsDebuggerPresent () {
        var mh$ = RuntimeHelper.requireNonNull(constants$289.IsDebuggerPresent$MH, "IsDebuggerPresent");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OutputDebugStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$290.OutputDebugStringA$MH,"OutputDebugStringA");
    }
    public static void OutputDebugStringA ( Addressable lpOutputString) {
        var mh$ = RuntimeHelper.requireNonNull(constants$290.OutputDebugStringA$MH, "OutputDebugStringA");
        try {
            mh$.invokeExact(lpOutputString.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OutputDebugStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$290.OutputDebugStringW$MH,"OutputDebugStringW");
    }
    public static void OutputDebugStringW ( Addressable lpOutputString) {
        var mh$ = RuntimeHelper.requireNonNull(constants$290.OutputDebugStringW$MH, "OutputDebugStringW");
        try {
            mh$.invokeExact(lpOutputString.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ContinueDebugEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$290.ContinueDebugEvent$MH,"ContinueDebugEvent");
    }
    public static int ContinueDebugEvent ( int dwProcessId,  int dwThreadId,  int dwContinueStatus) {
        var mh$ = RuntimeHelper.requireNonNull(constants$290.ContinueDebugEvent$MH, "ContinueDebugEvent");
        try {
            return (int)mh$.invokeExact(dwProcessId, dwThreadId, dwContinueStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForDebugEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$290.WaitForDebugEvent$MH,"WaitForDebugEvent");
    }
    public static int WaitForDebugEvent ( Addressable lpDebugEvent,  int dwMilliseconds) {
        var mh$ = RuntimeHelper.requireNonNull(constants$290.WaitForDebugEvent$MH, "WaitForDebugEvent");
        try {
            return (int)mh$.invokeExact(lpDebugEvent.address(), dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DebugActiveProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$290.DebugActiveProcess$MH,"DebugActiveProcess");
    }
    public static int DebugActiveProcess ( int dwProcessId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$290.DebugActiveProcess$MH, "DebugActiveProcess");
        try {
            return (int)mh$.invokeExact(dwProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DebugActiveProcessStop$MH() {
        return RuntimeHelper.requireNonNull(constants$290.DebugActiveProcessStop$MH,"DebugActiveProcessStop");
    }
    public static int DebugActiveProcessStop ( int dwProcessId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$290.DebugActiveProcessStop$MH, "DebugActiveProcessStop");
        try {
            return (int)mh$.invokeExact(dwProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckRemoteDebuggerPresent$MH() {
        return RuntimeHelper.requireNonNull(constants$291.CheckRemoteDebuggerPresent$MH,"CheckRemoteDebuggerPresent");
    }
    public static int CheckRemoteDebuggerPresent ( Addressable hProcess,  Addressable pbDebuggerPresent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$291.CheckRemoteDebuggerPresent$MH, "CheckRemoteDebuggerPresent");
        try {
            return (int)mh$.invokeExact(hProcess.address(), pbDebuggerPresent.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUnhandledExceptionFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$291.SetUnhandledExceptionFilter$MH,"SetUnhandledExceptionFilter");
    }
    public static MemoryAddress SetUnhandledExceptionFilter ( Addressable lpTopLevelExceptionFilter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$291.SetUnhandledExceptionFilter$MH, "SetUnhandledExceptionFilter");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpTopLevelExceptionFilter.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnhandledExceptionFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$292.UnhandledExceptionFilter$MH,"UnhandledExceptionFilter");
    }
    public static int UnhandledExceptionFilter ( Addressable ExceptionInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$292.UnhandledExceptionFilter$MH, "UnhandledExceptionFilter");
        try {
            return (int)mh$.invokeExact(ExceptionInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddVectoredExceptionHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$292.AddVectoredExceptionHandler$MH,"AddVectoredExceptionHandler");
    }
    public static MemoryAddress AddVectoredExceptionHandler ( int First,  Addressable Handler) {
        var mh$ = RuntimeHelper.requireNonNull(constants$292.AddVectoredExceptionHandler$MH, "AddVectoredExceptionHandler");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(First, Handler.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveVectoredExceptionHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$292.RemoveVectoredExceptionHandler$MH,"RemoveVectoredExceptionHandler");
    }
    public static int RemoveVectoredExceptionHandler ( Addressable Handle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$292.RemoveVectoredExceptionHandler$MH, "RemoveVectoredExceptionHandler");
        try {
            return (int)mh$.invokeExact(Handle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddVectoredContinueHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$292.AddVectoredContinueHandler$MH,"AddVectoredContinueHandler");
    }
    public static MemoryAddress AddVectoredContinueHandler ( int First,  Addressable Handler) {
        var mh$ = RuntimeHelper.requireNonNull(constants$292.AddVectoredContinueHandler$MH, "AddVectoredContinueHandler");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(First, Handler.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveVectoredContinueHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$292.RemoveVectoredContinueHandler$MH,"RemoveVectoredContinueHandler");
    }
    public static int RemoveVectoredContinueHandler ( Addressable Handle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$292.RemoveVectoredContinueHandler$MH, "RemoveVectoredContinueHandler");
        try {
            return (int)mh$.invokeExact(Handle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetErrorMode$MH() {
        return RuntimeHelper.requireNonNull(constants$292.GetErrorMode$MH,"GetErrorMode");
    }
    public static int GetErrorMode () {
        var mh$ = RuntimeHelper.requireNonNull(constants$292.GetErrorMode$MH, "GetErrorMode");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RaiseException$MH() {
        return RuntimeHelper.requireNonNull(constants$293.RaiseException$MH,"RaiseException");
    }
    public static void RaiseException ( int dwExceptionCode,  int dwExceptionFlags,  int nNumberOfArguments,  Addressable lpArguments) {
        var mh$ = RuntimeHelper.requireNonNull(constants$293.RaiseException$MH, "RaiseException");
        try {
            mh$.invokeExact(dwExceptionCode, dwExceptionFlags, nNumberOfArguments, lpArguments.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetErrorMode$MH() {
        return RuntimeHelper.requireNonNull(constants$293.SetErrorMode$MH,"SetErrorMode");
    }
    public static int SetErrorMode ( int uMode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$293.SetErrorMode$MH, "SetErrorMode");
        try {
            return (int)mh$.invokeExact(uMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLastError$MH() {
        return RuntimeHelper.requireNonNull(constants$293.GetLastError$MH,"GetLastError");
    }
    public static int GetLastError () {
        var mh$ = RuntimeHelper.requireNonNull(constants$293.GetLastError$MH, "GetLastError");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLastError$MH() {
        return RuntimeHelper.requireNonNull(constants$293.SetLastError$MH,"SetLastError");
    }
    public static void SetLastError ( int dwErrCode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$293.SetLastError$MH, "SetLastError");
        try {
            mh$.invokeExact(dwErrCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlsAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$293.FlsAlloc$MH,"FlsAlloc");
    }
    public static int FlsAlloc ( Addressable lpCallback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$293.FlsAlloc$MH, "FlsAlloc");
        try {
            return (int)mh$.invokeExact(lpCallback.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlsGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$293.FlsGetValue$MH,"FlsGetValue");
    }
    public static MemoryAddress FlsGetValue ( int dwFlsIndex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$293.FlsGetValue$MH, "FlsGetValue");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dwFlsIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlsSetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$294.FlsSetValue$MH,"FlsSetValue");
    }
    public static int FlsSetValue ( int dwFlsIndex,  Addressable lpFlsData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$294.FlsSetValue$MH, "FlsSetValue");
        try {
            return (int)mh$.invokeExact(dwFlsIndex, lpFlsData.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlsFree$MH() {
        return RuntimeHelper.requireNonNull(constants$294.FlsFree$MH,"FlsFree");
    }
    public static int FlsFree ( int dwFlsIndex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$294.FlsFree$MH, "FlsFree");
        try {
            return (int)mh$.invokeExact(dwFlsIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsThreadAFiber$MH() {
        return RuntimeHelper.requireNonNull(constants$294.IsThreadAFiber$MH,"IsThreadAFiber");
    }
    public static int IsThreadAFiber () {
        var mh$ = RuntimeHelper.requireNonNull(constants$294.IsThreadAFiber$MH, "IsThreadAFiber");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileAttributesW$MH() {
        return RuntimeHelper.requireNonNull(constants$294.GetFileAttributesW$MH,"GetFileAttributesW");
    }
    public static int GetFileAttributesW ( Addressable lpFileName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$294.GetFileAttributesW$MH, "GetFileAttributesW");
        try {
            return (int)mh$.invokeExact(lpFileName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFilePointer$MH() {
        return RuntimeHelper.requireNonNull(constants$294.SetFilePointer$MH,"SetFilePointer");
    }
    public static int SetFilePointer ( Addressable hFile,  int lDistanceToMove,  Addressable lpDistanceToMoveHigh,  int dwMoveMethod) {
        var mh$ = RuntimeHelper.requireNonNull(constants$294.SetFilePointer$MH, "SetFilePointer");
        try {
            return (int)mh$.invokeExact(hFile.address(), lDistanceToMove, lpDistanceToMoveHigh.address(), dwMoveMethod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileInformationByHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$294.GetFileInformationByHandle$MH,"GetFileInformationByHandle");
    }
    public static int GetFileInformationByHandle ( Addressable hFile,  Addressable lpFileInformation) {
        var mh$ = RuntimeHelper.requireNonNull(constants$294.GetFileInformationByHandle$MH, "GetFileInformationByHandle");
        try {
            return (int)mh$.invokeExact(hFile.address(), lpFileInformation.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$295.CreateFileA$MH,"CreateFileA");
    }
    public static MemoryAddress CreateFileA ( Addressable lpFileName,  int dwDesiredAccess,  int dwShareMode,  Addressable lpSecurityAttributes,  int dwCreationDisposition,  int dwFlagsAndAttributes,  Addressable hTemplateFile) {
        var mh$ = RuntimeHelper.requireNonNull(constants$295.CreateFileA$MH, "CreateFileA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpFileName.address(), dwDesiredAccess, dwShareMode, lpSecurityAttributes.address(), dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefineDosDeviceW$MH() {
        return RuntimeHelper.requireNonNull(constants$295.DefineDosDeviceW$MH,"DefineDosDeviceW");
    }
    public static int DefineDosDeviceW ( int dwFlags,  Addressable lpDeviceName,  Addressable lpTargetPath) {
        var mh$ = RuntimeHelper.requireNonNull(constants$295.DefineDosDeviceW$MH, "DefineDosDeviceW");
        try {
            return (int)mh$.invokeExact(dwFlags, lpDeviceName.address(), lpTargetPath.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindCloseChangeNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$295.FindCloseChangeNotification$MH,"FindCloseChangeNotification");
    }
    public static int FindCloseChangeNotification ( Addressable hChangeHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$295.FindCloseChangeNotification$MH, "FindCloseChangeNotification");
        try {
            return (int)mh$.invokeExact(hChangeHandle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstChangeNotificationA$MH() {
        return RuntimeHelper.requireNonNull(constants$295.FindFirstChangeNotificationA$MH,"FindFirstChangeNotificationA");
    }
    public static MemoryAddress FindFirstChangeNotificationA ( Addressable lpPathName,  int bWatchSubtree,  int dwNotifyFilter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$295.FindFirstChangeNotificationA$MH, "FindFirstChangeNotificationA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpPathName.address(), bWatchSubtree, dwNotifyFilter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstChangeNotificationW$MH() {
        return RuntimeHelper.requireNonNull(constants$295.FindFirstChangeNotificationW$MH,"FindFirstChangeNotificationW");
    }
    public static MemoryAddress FindFirstChangeNotificationW ( Addressable lpPathName,  int bWatchSubtree,  int dwNotifyFilter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$295.FindFirstChangeNotificationW$MH, "FindFirstChangeNotificationW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpPathName.address(), bWatchSubtree, dwNotifyFilter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstVolumeW$MH() {
        return RuntimeHelper.requireNonNull(constants$295.FindFirstVolumeW$MH,"FindFirstVolumeW");
    }
    public static MemoryAddress FindFirstVolumeW ( Addressable lpszVolumeName,  int cchBufferLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$295.FindFirstVolumeW$MH, "FindFirstVolumeW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpszVolumeName.address(), cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextChangeNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$296.FindNextChangeNotification$MH,"FindNextChangeNotification");
    }
    public static int FindNextChangeNotification ( Addressable hChangeHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$296.FindNextChangeNotification$MH, "FindNextChangeNotification");
        try {
            return (int)mh$.invokeExact(hChangeHandle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextVolumeW$MH() {
        return RuntimeHelper.requireNonNull(constants$296.FindNextVolumeW$MH,"FindNextVolumeW");
    }
    public static int FindNextVolumeW ( Addressable hFindVolume,  Addressable lpszVolumeName,  int cchBufferLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$296.FindNextVolumeW$MH, "FindNextVolumeW");
        try {
            return (int)mh$.invokeExact(hFindVolume.address(), lpszVolumeName.address(), cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindVolumeClose$MH() {
        return RuntimeHelper.requireNonNull(constants$296.FindVolumeClose$MH,"FindVolumeClose");
    }
    public static int FindVolumeClose ( Addressable hFindVolume) {
        var mh$ = RuntimeHelper.requireNonNull(constants$296.FindVolumeClose$MH, "FindVolumeClose");
        try {
            return (int)mh$.invokeExact(hFindVolume.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$296.CreateFileW$MH,"CreateFileW");
    }
    public static MemoryAddress CreateFileW ( Addressable lpFileName,  int dwDesiredAccess,  int dwShareMode,  Addressable lpSecurityAttributes,  int dwCreationDisposition,  int dwFlagsAndAttributes,  Addressable hTemplateFile) {
        var mh$ = RuntimeHelper.requireNonNull(constants$296.CreateFileW$MH, "CreateFileW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpFileName.address(), dwDesiredAccess, dwShareMode, lpSecurityAttributes.address(), dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileSize$MH() {
        return RuntimeHelper.requireNonNull(constants$296.GetFileSize$MH,"GetFileSize");
    }
    public static int GetFileSize ( Addressable hFile,  Addressable lpFileSizeHigh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$296.GetFileSize$MH, "GetFileSize");
        try {
            return (int)mh$.invokeExact(hFile.address(), lpFileSizeHigh.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CompareFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$296.CompareFileTime$MH,"CompareFileTime");
    }
    public static int CompareFileTime ( Addressable lpFileTime1,  Addressable lpFileTime2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$296.CompareFileTime$MH, "CompareFileTime");
        try {
            return (int)mh$.invokeExact(lpFileTime1.address(), lpFileTime2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteVolumeMountPointW$MH() {
        return RuntimeHelper.requireNonNull(constants$297.DeleteVolumeMountPointW$MH,"DeleteVolumeMountPointW");
    }
    public static int DeleteVolumeMountPointW ( Addressable lpszVolumeMountPoint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$297.DeleteVolumeMountPointW$MH, "DeleteVolumeMountPointW");
        try {
            return (int)mh$.invokeExact(lpszVolumeMountPoint.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FileTimeToLocalFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$297.FileTimeToLocalFileTime$MH,"FileTimeToLocalFileTime");
    }
    public static int FileTimeToLocalFileTime ( Addressable lpFileTime,  Addressable lpLocalFileTime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$297.FileTimeToLocalFileTime$MH, "FileTimeToLocalFileTime");
        try {
            return (int)mh$.invokeExact(lpFileTime.address(), lpLocalFileTime.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$297.FindFirstFileA$MH,"FindFirstFileA");
    }
    public static MemoryAddress FindFirstFileA ( Addressable lpFileName,  Addressable lpFindFileData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$297.FindFirstFileA$MH, "FindFirstFileA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpFileName.address(), lpFindFileData.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$297.FindFirstFileW$MH,"FindFirstFileW");
    }
    public static MemoryAddress FindFirstFileW ( Addressable lpFileName,  Addressable lpFindFileData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$297.FindFirstFileW$MH, "FindFirstFileW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpFileName.address(), lpFindFileData.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDiskFreeSpaceA$MH() {
        return RuntimeHelper.requireNonNull(constants$297.GetDiskFreeSpaceA$MH,"GetDiskFreeSpaceA");
    }
    public static int GetDiskFreeSpaceA ( Addressable lpRootPathName,  Addressable lpSectorsPerCluster,  Addressable lpBytesPerSector,  Addressable lpNumberOfFreeClusters,  Addressable lpTotalNumberOfClusters) {
        var mh$ = RuntimeHelper.requireNonNull(constants$297.GetDiskFreeSpaceA$MH, "GetDiskFreeSpaceA");
        try {
            return (int)mh$.invokeExact(lpRootPathName.address(), lpSectorsPerCluster.address(), lpBytesPerSector.address(), lpNumberOfFreeClusters.address(), lpTotalNumberOfClusters.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDiskFreeSpaceW$MH() {
        return RuntimeHelper.requireNonNull(constants$297.GetDiskFreeSpaceW$MH,"GetDiskFreeSpaceW");
    }
    public static int GetDiskFreeSpaceW ( Addressable lpRootPathName,  Addressable lpSectorsPerCluster,  Addressable lpBytesPerSector,  Addressable lpNumberOfFreeClusters,  Addressable lpTotalNumberOfClusters) {
        var mh$ = RuntimeHelper.requireNonNull(constants$297.GetDiskFreeSpaceW$MH, "GetDiskFreeSpaceW");
        try {
            return (int)mh$.invokeExact(lpRootPathName.address(), lpSectorsPerCluster.address(), lpBytesPerSector.address(), lpNumberOfFreeClusters.address(), lpTotalNumberOfClusters.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDriveTypeA$MH() {
        return RuntimeHelper.requireNonNull(constants$298.GetDriveTypeA$MH,"GetDriveTypeA");
    }
    public static int GetDriveTypeA ( Addressable lpRootPathName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$298.GetDriveTypeA$MH, "GetDriveTypeA");
        try {
            return (int)mh$.invokeExact(lpRootPathName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDriveTypeW$MH() {
        return RuntimeHelper.requireNonNull(constants$298.GetDriveTypeW$MH,"GetDriveTypeW");
    }
    public static int GetDriveTypeW ( Addressable lpRootPathName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$298.GetDriveTypeW$MH, "GetDriveTypeW");
        try {
            return (int)mh$.invokeExact(lpRootPathName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileAttributesA$MH() {
        return RuntimeHelper.requireNonNull(constants$298.GetFileAttributesA$MH,"GetFileAttributesA");
    }
    public static int GetFileAttributesA ( Addressable lpFileName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$298.GetFileAttributesA$MH, "GetFileAttributesA");
        try {
            return (int)mh$.invokeExact(lpFileName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileSizeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$298.GetFileSizeEx$MH,"GetFileSizeEx");
    }
    public static int GetFileSizeEx ( Addressable hFile,  Addressable lpFileSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$298.GetFileSizeEx$MH, "GetFileSizeEx");
        try {
            return (int)mh$.invokeExact(hFile.address(), lpFileSize.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$298.GetFileTime$MH,"GetFileTime");
    }
    public static int GetFileTime ( Addressable hFile,  Addressable lpCreationTime,  Addressable lpLastAccessTime,  Addressable lpLastWriteTime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$298.GetFileTime$MH, "GetFileTime");
        try {
            return (int)mh$.invokeExact(hFile.address(), lpCreationTime.address(), lpLastAccessTime.address(), lpLastWriteTime.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileType$MH() {
        return RuntimeHelper.requireNonNull(constants$298.GetFileType$MH,"GetFileType");
    }
    public static int GetFileType ( Addressable hFile) {
        var mh$ = RuntimeHelper.requireNonNull(constants$298.GetFileType$MH, "GetFileType");
        try {
            return (int)mh$.invokeExact(hFile.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFullPathNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$299.GetFullPathNameA$MH,"GetFullPathNameA");
    }
    public static int GetFullPathNameA ( Addressable lpFileName,  int nBufferLength,  Addressable lpBuffer,  Addressable lpFilePart) {
        var mh$ = RuntimeHelper.requireNonNull(constants$299.GetFullPathNameA$MH, "GetFullPathNameA");
        try {
            return (int)mh$.invokeExact(lpFileName.address(), nBufferLength, lpBuffer.address(), lpFilePart.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFullPathNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$299.GetFullPathNameW$MH,"GetFullPathNameW");
    }
    public static int GetFullPathNameW ( Addressable lpFileName,  int nBufferLength,  Addressable lpBuffer,  Addressable lpFilePart) {
        var mh$ = RuntimeHelper.requireNonNull(constants$299.GetFullPathNameW$MH, "GetFullPathNameW");
        try {
            return (int)mh$.invokeExact(lpFileName.address(), nBufferLength, lpBuffer.address(), lpFilePart.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLogicalDrives$MH() {
        return RuntimeHelper.requireNonNull(constants$299.GetLogicalDrives$MH,"GetLogicalDrives");
    }
    public static int GetLogicalDrives () {
        var mh$ = RuntimeHelper.requireNonNull(constants$299.GetLogicalDrives$MH, "GetLogicalDrives");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLogicalDriveStringsW$MH() {
        return RuntimeHelper.requireNonNull(constants$299.GetLogicalDriveStringsW$MH,"GetLogicalDriveStringsW");
    }
    public static int GetLogicalDriveStringsW ( int nBufferLength,  Addressable lpBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$299.GetLogicalDriveStringsW$MH, "GetLogicalDriveStringsW");
        try {
            return (int)mh$.invokeExact(nBufferLength, lpBuffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetShortPathNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$299.GetShortPathNameW$MH,"GetShortPathNameW");
    }
    public static int GetShortPathNameW ( Addressable lpszLongPath,  Addressable lpszShortPath,  int cchBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$299.GetShortPathNameW$MH, "GetShortPathNameW");
        try {
            return (int)mh$.invokeExact(lpszLongPath.address(), lpszShortPath.address(), cchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumePathNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$299.GetVolumePathNameW$MH,"GetVolumePathNameW");
    }
    public static int GetVolumePathNameW ( Addressable lpszFileName,  Addressable lpszVolumePathName,  int cchBufferLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$299.GetVolumePathNameW$MH, "GetVolumePathNameW");
        try {
            return (int)mh$.invokeExact(lpszFileName.address(), lpszVolumePathName.address(), cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryDosDeviceW$MH() {
        return RuntimeHelper.requireNonNull(constants$300.QueryDosDeviceW$MH,"QueryDosDeviceW");
    }
    public static int QueryDosDeviceW ( Addressable lpDeviceName,  Addressable lpTargetPath,  int ucchMax) {
        var mh$ = RuntimeHelper.requireNonNull(constants$300.QueryDosDeviceW$MH, "QueryDosDeviceW");
        try {
            return (int)mh$.invokeExact(lpDeviceName.address(), lpTargetPath.address(), ucchMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadFileScatter$MH() {
        return RuntimeHelper.requireNonNull(constants$300.ReadFileScatter$MH,"ReadFileScatter");
    }
    public static int ReadFileScatter ( Addressable hFile,  Addressable aSegmentArray,  int nNumberOfBytesToRead,  Addressable lpReserved,  Addressable lpOverlapped) {
        var mh$ = RuntimeHelper.requireNonNull(constants$300.ReadFileScatter$MH, "ReadFileScatter");
        try {
            return (int)mh$.invokeExact(hFile.address(), aSegmentArray.address(), nNumberOfBytesToRead, lpReserved.address(), lpOverlapped.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileValidData$MH() {
        return RuntimeHelper.requireNonNull(constants$300.SetFileValidData$MH,"SetFileValidData");
    }
    public static int SetFileValidData ( Addressable hFile,  long ValidDataLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$300.SetFileValidData$MH, "SetFileValidData");
        try {
            return (int)mh$.invokeExact(hFile.address(), ValidDataLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteFileGather$MH() {
        return RuntimeHelper.requireNonNull(constants$300.WriteFileGather$MH,"WriteFileGather");
    }
    public static int WriteFileGather ( Addressable hFile,  Addressable aSegmentArray,  int nNumberOfBytesToWrite,  Addressable lpReserved,  Addressable lpOverlapped) {
        var mh$ = RuntimeHelper.requireNonNull(constants$300.WriteFileGather$MH, "WriteFileGather");
        try {
            return (int)mh$.invokeExact(hFile.address(), aSegmentArray.address(), nNumberOfBytesToWrite, lpReserved.address(), lpOverlapped.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumeNameForVolumeMountPointW$MH() {
        return RuntimeHelper.requireNonNull(constants$300.GetVolumeNameForVolumeMountPointW$MH,"GetVolumeNameForVolumeMountPointW");
    }
    public static int GetVolumeNameForVolumeMountPointW ( Addressable lpszVolumeMountPoint,  Addressable lpszVolumeName,  int cchBufferLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$300.GetVolumeNameForVolumeMountPointW$MH, "GetVolumeNameForVolumeMountPointW");
        try {
            return (int)mh$.invokeExact(lpszVolumeMountPoint.address(), lpszVolumeName.address(), cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumePathNamesForVolumeNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$300.GetVolumePathNamesForVolumeNameW$MH,"GetVolumePathNamesForVolumeNameW");
    }
    public static int GetVolumePathNamesForVolumeNameW ( Addressable lpszVolumeName,  Addressable lpszVolumePathNames,  int cchBufferLength,  Addressable lpcchReturnLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$300.GetVolumePathNamesForVolumeNameW$MH, "GetVolumePathNamesForVolumeNameW");
        try {
            return (int)mh$.invokeExact(lpszVolumeName.address(), lpszVolumePathNames.address(), cchBufferLength, lpcchReturnLength.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumeInformationByHandleW$MH() {
        return RuntimeHelper.requireNonNull(constants$301.GetVolumeInformationByHandleW$MH,"GetVolumeInformationByHandleW");
    }
    public static int GetVolumeInformationByHandleW ( Addressable hFile,  Addressable lpVolumeNameBuffer,  int nVolumeNameSize,  Addressable lpVolumeSerialNumber,  Addressable lpMaximumComponentLength,  Addressable lpFileSystemFlags,  Addressable lpFileSystemNameBuffer,  int nFileSystemNameSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$301.GetVolumeInformationByHandleW$MH, "GetVolumeInformationByHandleW");
        try {
            return (int)mh$.invokeExact(hFile.address(), lpVolumeNameBuffer.address(), nVolumeNameSize, lpVolumeSerialNumber.address(), lpMaximumComponentLength.address(), lpFileSystemFlags.address(), lpFileSystemNameBuffer.address(), nFileSystemNameSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLongPathNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$301.GetLongPathNameA$MH,"GetLongPathNameA");
    }
    public static int GetLongPathNameA ( Addressable lpszShortPath,  Addressable lpszLongPath,  int cchBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$301.GetLongPathNameA$MH, "GetLongPathNameA");
        try {
            return (int)mh$.invokeExact(lpszShortPath.address(), lpszLongPath.address(), cchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLongPathNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$301.GetLongPathNameW$MH,"GetLongPathNameW");
    }
    public static int GetLongPathNameW ( Addressable lpszShortPath,  Addressable lpszLongPath,  int cchBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$301.GetLongPathNameW$MH, "GetLongPathNameW");
        try {
            return (int)mh$.invokeExact(lpszShortPath.address(), lpszLongPath.address(), cchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTempFileNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$301.GetTempFileNameA$MH,"GetTempFileNameA");
    }
    public static int GetTempFileNameA ( Addressable lpPathName,  Addressable lpPrefixString,  int uUnique,  Addressable lpTempFileName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$301.GetTempFileNameA$MH, "GetTempFileNameA");
        try {
            return (int)mh$.invokeExact(lpPathName.address(), lpPrefixString.address(), uUnique, lpTempFileName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTempFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$301.GetTempFileNameW$MH,"GetTempFileNameW");
    }
    public static int GetTempFileNameW ( Addressable lpPathName,  Addressable lpPrefixString,  int uUnique,  Addressable lpTempFileName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$301.GetTempFileNameW$MH, "GetTempFileNameW");
        try {
            return (int)mh$.invokeExact(lpPathName.address(), lpPrefixString.address(), uUnique, lpTempFileName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumeInformationW$MH() {
        return RuntimeHelper.requireNonNull(constants$301.GetVolumeInformationW$MH,"GetVolumeInformationW");
    }
    public static int GetVolumeInformationW ( Addressable lpRootPathName,  Addressable lpVolumeNameBuffer,  int nVolumeNameSize,  Addressable lpVolumeSerialNumber,  Addressable lpMaximumComponentLength,  Addressable lpFileSystemFlags,  Addressable lpFileSystemNameBuffer,  int nFileSystemNameSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$301.GetVolumeInformationW$MH, "GetVolumeInformationW");
        try {
            return (int)mh$.invokeExact(lpRootPathName.address(), lpVolumeNameBuffer.address(), nVolumeNameSize, lpVolumeSerialNumber.address(), lpMaximumComponentLength.address(), lpFileSystemFlags.address(), lpFileSystemNameBuffer.address(), nFileSystemNameSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LocalFileTimeToFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$302.LocalFileTimeToFileTime$MH,"LocalFileTimeToFileTime");
    }
    public static int LocalFileTimeToFileTime ( Addressable lpLocalFileTime,  Addressable lpFileTime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$302.LocalFileTimeToFileTime$MH, "LocalFileTimeToFileTime");
        try {
            return (int)mh$.invokeExact(lpLocalFileTime.address(), lpFileTime.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LockFile$MH() {
        return RuntimeHelper.requireNonNull(constants$302.LockFile$MH,"LockFile");
    }
    public static int LockFile ( Addressable hFile,  int dwFileOffsetLow,  int dwFileOffsetHigh,  int nNumberOfBytesToLockLow,  int nNumberOfBytesToLockHigh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$302.LockFile$MH, "LockFile");
        try {
            return (int)mh$.invokeExact(hFile.address(), dwFileOffsetLow, dwFileOffsetHigh, nNumberOfBytesToLockLow, nNumberOfBytesToLockHigh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$302.ReadFileEx$MH,"ReadFileEx");
    }
    public static int ReadFileEx ( Addressable hFile,  Addressable lpBuffer,  int nNumberOfBytesToRead,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = RuntimeHelper.requireNonNull(constants$302.ReadFileEx$MH, "ReadFileEx");
        try {
            return (int)mh$.invokeExact(hFile.address(), lpBuffer.address(), nNumberOfBytesToRead, lpOverlapped.address(), lpCompletionRoutine.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$302.SetFileTime$MH,"SetFileTime");
    }
    public static int SetFileTime ( Addressable hFile,  Addressable lpCreationTime,  Addressable lpLastAccessTime,  Addressable lpLastWriteTime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$302.SetFileTime$MH, "SetFileTime");
        try {
            return (int)mh$.invokeExact(hFile.address(), lpCreationTime.address(), lpLastAccessTime.address(), lpLastWriteTime.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnlockFile$MH() {
        return RuntimeHelper.requireNonNull(constants$302.UnlockFile$MH,"UnlockFile");
    }
    public static int UnlockFile ( Addressable hFile,  int dwFileOffsetLow,  int dwFileOffsetHigh,  int nNumberOfBytesToUnlockLow,  int nNumberOfBytesToUnlockHigh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$302.UnlockFile$MH, "UnlockFile");
        try {
            return (int)mh$.invokeExact(hFile.address(), dwFileOffsetLow, dwFileOffsetHigh, nNumberOfBytesToUnlockLow, nNumberOfBytesToUnlockHigh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$302.WriteFileEx$MH,"WriteFileEx");
    }
    public static int WriteFileEx ( Addressable hFile,  Addressable lpBuffer,  int nNumberOfBytesToWrite,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = RuntimeHelper.requireNonNull(constants$302.WriteFileEx$MH, "WriteFileEx");
        try {
            return (int)mh$.invokeExact(hFile.address(), lpBuffer.address(), nNumberOfBytesToWrite, lpOverlapped.address(), lpCompletionRoutine.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFinalPathNameByHandleA$MH() {
        return RuntimeHelper.requireNonNull(constants$303.GetFinalPathNameByHandleA$MH,"GetFinalPathNameByHandleA");
    }
    public static int GetFinalPathNameByHandleA ( Addressable hFile,  Addressable lpszFilePath,  int cchFilePath,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$303.GetFinalPathNameByHandleA$MH, "GetFinalPathNameByHandleA");
        try {
            return (int)mh$.invokeExact(hFile.address(), lpszFilePath.address(), cchFilePath, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFinalPathNameByHandleW$MH() {
        return RuntimeHelper.requireNonNull(constants$303.GetFinalPathNameByHandleW$MH,"GetFinalPathNameByHandleW");
    }
    public static int GetFinalPathNameByHandleW ( Addressable hFile,  Addressable lpszFilePath,  int cchFilePath,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$303.GetFinalPathNameByHandleW$MH, "GetFinalPathNameByHandleW");
        try {
            return (int)mh$.invokeExact(hFile.address(), lpszFilePath.address(), cchFilePath, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$303.CreateDirectoryA$MH,"CreateDirectoryA");
    }
    public static int CreateDirectoryA ( Addressable lpPathName,  Addressable lpSecurityAttributes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$303.CreateDirectoryA$MH, "CreateDirectoryA");
        try {
            return (int)mh$.invokeExact(lpPathName.address(), lpSecurityAttributes.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$303.CreateDirectoryW$MH,"CreateDirectoryW");
    }
    public static int CreateDirectoryW ( Addressable lpPathName,  Addressable lpSecurityAttributes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$303.CreateDirectoryW$MH, "CreateDirectoryW");
        try {
            return (int)mh$.invokeExact(lpPathName.address(), lpSecurityAttributes.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$303.DeleteFileA$MH,"DeleteFileA");
    }
    public static int DeleteFileA ( Addressable lpFileName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$303.DeleteFileA$MH, "DeleteFileA");
        try {
            return (int)mh$.invokeExact(lpFileName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$303.DeleteFileW$MH,"DeleteFileW");
    }
    public static int DeleteFileW ( Addressable lpFileName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$303.DeleteFileW$MH, "DeleteFileW");
        try {
            return (int)mh$.invokeExact(lpFileName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindClose$MH() {
        return RuntimeHelper.requireNonNull(constants$304.FindClose$MH,"FindClose");
    }
    public static int FindClose ( Addressable hFindFile) {
        var mh$ = RuntimeHelper.requireNonNull(constants$304.FindClose$MH, "FindClose");
        try {
            return (int)mh$.invokeExact(hFindFile.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileExA$MH() {
        return RuntimeHelper.requireNonNull(constants$304.FindFirstFileExA$MH,"FindFirstFileExA");
    }
    public static MemoryAddress FindFirstFileExA ( Addressable lpFileName,  int fInfoLevelId,  Addressable lpFindFileData,  int fSearchOp,  Addressable lpSearchFilter,  int dwAdditionalFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$304.FindFirstFileExA$MH, "FindFirstFileExA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpFileName.address(), fInfoLevelId, lpFindFileData.address(), fSearchOp, lpSearchFilter.address(), dwAdditionalFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileExW$MH() {
        return RuntimeHelper.requireNonNull(constants$304.FindFirstFileExW$MH,"FindFirstFileExW");
    }
    public static MemoryAddress FindFirstFileExW ( Addressable lpFileName,  int fInfoLevelId,  Addressable lpFindFileData,  int fSearchOp,  Addressable lpSearchFilter,  int dwAdditionalFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$304.FindFirstFileExW$MH, "FindFirstFileExW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpFileName.address(), fInfoLevelId, lpFindFileData.address(), fSearchOp, lpSearchFilter.address(), dwAdditionalFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$304.FindNextFileA$MH,"FindNextFileA");
    }
    public static int FindNextFileA ( Addressable hFindFile,  Addressable lpFindFileData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$304.FindNextFileA$MH, "FindNextFileA");
        try {
            return (int)mh$.invokeExact(hFindFile.address(), lpFindFileData.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$304.FindNextFileW$MH,"FindNextFileW");
    }
    public static int FindNextFileW ( Addressable hFindFile,  Addressable lpFindFileData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$304.FindNextFileW$MH, "FindNextFileW");
        try {
            return (int)mh$.invokeExact(hFindFile.address(), lpFindFileData.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlushFileBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$304.FlushFileBuffers$MH,"FlushFileBuffers");
    }
    public static int FlushFileBuffers ( Addressable hFile) {
        var mh$ = RuntimeHelper.requireNonNull(constants$304.FlushFileBuffers$MH, "FlushFileBuffers");
        try {
            return (int)mh$.invokeExact(hFile.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDiskFreeSpaceExA$MH() {
        return RuntimeHelper.requireNonNull(constants$305.GetDiskFreeSpaceExA$MH,"GetDiskFreeSpaceExA");
    }
    public static int GetDiskFreeSpaceExA ( Addressable lpDirectoryName,  Addressable lpFreeBytesAvailableToCaller,  Addressable lpTotalNumberOfBytes,  Addressable lpTotalNumberOfFreeBytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$305.GetDiskFreeSpaceExA$MH, "GetDiskFreeSpaceExA");
        try {
            return (int)mh$.invokeExact(lpDirectoryName.address(), lpFreeBytesAvailableToCaller.address(), lpTotalNumberOfBytes.address(), lpTotalNumberOfFreeBytes.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDiskFreeSpaceExW$MH() {
        return RuntimeHelper.requireNonNull(constants$305.GetDiskFreeSpaceExW$MH,"GetDiskFreeSpaceExW");
    }
    public static int GetDiskFreeSpaceExW ( Addressable lpDirectoryName,  Addressable lpFreeBytesAvailableToCaller,  Addressable lpTotalNumberOfBytes,  Addressable lpTotalNumberOfFreeBytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$305.GetDiskFreeSpaceExW$MH, "GetDiskFreeSpaceExW");
        try {
            return (int)mh$.invokeExact(lpDirectoryName.address(), lpFreeBytesAvailableToCaller.address(), lpTotalNumberOfBytes.address(), lpTotalNumberOfFreeBytes.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileAttributesExA$MH() {
        return RuntimeHelper.requireNonNull(constants$305.GetFileAttributesExA$MH,"GetFileAttributesExA");
    }
    public static int GetFileAttributesExA ( Addressable lpFileName,  int fInfoLevelId,  Addressable lpFileInformation) {
        var mh$ = RuntimeHelper.requireNonNull(constants$305.GetFileAttributesExA$MH, "GetFileAttributesExA");
        try {
            return (int)mh$.invokeExact(lpFileName.address(), fInfoLevelId, lpFileInformation.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileAttributesExW$MH() {
        return RuntimeHelper.requireNonNull(constants$305.GetFileAttributesExW$MH,"GetFileAttributesExW");
    }
    public static int GetFileAttributesExW ( Addressable lpFileName,  int fInfoLevelId,  Addressable lpFileInformation) {
        var mh$ = RuntimeHelper.requireNonNull(constants$305.GetFileAttributesExW$MH, "GetFileAttributesExW");
        try {
            return (int)mh$.invokeExact(lpFileName.address(), fInfoLevelId, lpFileInformation.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LockFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$305.LockFileEx$MH,"LockFileEx");
    }
    public static int LockFileEx ( Addressable hFile,  int dwFlags,  int dwReserved,  int nNumberOfBytesToLockLow,  int nNumberOfBytesToLockHigh,  Addressable lpOverlapped) {
        var mh$ = RuntimeHelper.requireNonNull(constants$305.LockFileEx$MH, "LockFileEx");
        try {
            return (int)mh$.invokeExact(hFile.address(), dwFlags, dwReserved, nNumberOfBytesToLockLow, nNumberOfBytesToLockHigh, lpOverlapped.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadFile$MH() {
        return RuntimeHelper.requireNonNull(constants$305.ReadFile$MH,"ReadFile");
    }
    public static int ReadFile ( Addressable hFile,  Addressable lpBuffer,  int nNumberOfBytesToRead,  Addressable lpNumberOfBytesRead,  Addressable lpOverlapped) {
        var mh$ = RuntimeHelper.requireNonNull(constants$305.ReadFile$MH, "ReadFile");
        try {
            return (int)mh$.invokeExact(hFile.address(), lpBuffer.address(), nNumberOfBytesToRead, lpNumberOfBytesRead.address(), lpOverlapped.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$306.RemoveDirectoryA$MH,"RemoveDirectoryA");
    }
    public static int RemoveDirectoryA ( Addressable lpPathName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$306.RemoveDirectoryA$MH, "RemoveDirectoryA");
        try {
            return (int)mh$.invokeExact(lpPathName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$306.RemoveDirectoryW$MH,"RemoveDirectoryW");
    }
    public static int RemoveDirectoryW ( Addressable lpPathName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$306.RemoveDirectoryW$MH, "RemoveDirectoryW");
        try {
            return (int)mh$.invokeExact(lpPathName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEndOfFile$MH() {
        return RuntimeHelper.requireNonNull(constants$306.SetEndOfFile$MH,"SetEndOfFile");
    }
    public static int SetEndOfFile ( Addressable hFile) {
        var mh$ = RuntimeHelper.requireNonNull(constants$306.SetEndOfFile$MH, "SetEndOfFile");
        try {
            return (int)mh$.invokeExact(hFile.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileAttributesA$MH() {
        return RuntimeHelper.requireNonNull(constants$306.SetFileAttributesA$MH,"SetFileAttributesA");
    }
    public static int SetFileAttributesA ( Addressable lpFileName,  int dwFileAttributes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$306.SetFileAttributesA$MH, "SetFileAttributesA");
        try {
            return (int)mh$.invokeExact(lpFileName.address(), dwFileAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileAttributesW$MH() {
        return RuntimeHelper.requireNonNull(constants$306.SetFileAttributesW$MH,"SetFileAttributesW");
    }
    public static int SetFileAttributesW ( Addressable lpFileName,  int dwFileAttributes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$306.SetFileAttributesW$MH, "SetFileAttributesW");
        try {
            return (int)mh$.invokeExact(lpFileName.address(), dwFileAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFilePointerEx$MH() {
        return RuntimeHelper.requireNonNull(constants$306.SetFilePointerEx$MH,"SetFilePointerEx");
    }
    public static int SetFilePointerEx ( Addressable hFile,  MemorySegment liDistanceToMove,  Addressable lpNewFilePointer,  int dwMoveMethod) {
        var mh$ = RuntimeHelper.requireNonNull(constants$306.SetFilePointerEx$MH, "SetFilePointerEx");
        try {
            return (int)mh$.invokeExact(hFile.address(), liDistanceToMove, lpNewFilePointer.address(), dwMoveMethod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnlockFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$307.UnlockFileEx$MH,"UnlockFileEx");
    }
    public static int UnlockFileEx ( Addressable hFile,  int dwReserved,  int nNumberOfBytesToUnlockLow,  int nNumberOfBytesToUnlockHigh,  Addressable lpOverlapped) {
        var mh$ = RuntimeHelper.requireNonNull(constants$307.UnlockFileEx$MH, "UnlockFileEx");
        try {
            return (int)mh$.invokeExact(hFile.address(), dwReserved, nNumberOfBytesToUnlockLow, nNumberOfBytesToUnlockHigh, lpOverlapped.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteFile$MH() {
        return RuntimeHelper.requireNonNull(constants$307.WriteFile$MH,"WriteFile");
    }
    public static int WriteFile ( Addressable hFile,  Addressable lpBuffer,  int nNumberOfBytesToWrite,  Addressable lpNumberOfBytesWritten,  Addressable lpOverlapped) {
        var mh$ = RuntimeHelper.requireNonNull(constants$307.WriteFile$MH, "WriteFile");
        try {
            return (int)mh$.invokeExact(hFile.address(), lpBuffer.address(), nNumberOfBytesToWrite, lpNumberOfBytesWritten.address(), lpOverlapped.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTempPathA$MH() {
        return RuntimeHelper.requireNonNull(constants$307.GetTempPathA$MH,"GetTempPathA");
    }
    public static int GetTempPathA ( int nBufferLength,  Addressable lpBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$307.GetTempPathA$MH, "GetTempPathA");
        try {
            return (int)mh$.invokeExact(nBufferLength, lpBuffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTempPathW$MH() {
        return RuntimeHelper.requireNonNull(constants$307.GetTempPathW$MH,"GetTempPathW");
    }
    public static int GetTempPathW ( int nBufferLength,  Addressable lpBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$307.GetTempPathW$MH, "GetTempPathW");
        try {
            return (int)mh$.invokeExact(nBufferLength, lpBuffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileInformationByHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$307.SetFileInformationByHandle$MH,"SetFileInformationByHandle");
    }
    public static int SetFileInformationByHandle ( Addressable hFile,  int FileInformationClass,  Addressable lpFileInformation,  int dwBufferSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$307.SetFileInformationByHandle$MH, "SetFileInformationByHandle");
        try {
            return (int)mh$.invokeExact(hFile.address(), FileInformationClass, lpFileInformation.address(), dwBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$307.CloseHandle$MH,"CloseHandle");
    }
    public static int CloseHandle ( Addressable hObject) {
        var mh$ = RuntimeHelper.requireNonNull(constants$307.CloseHandle$MH, "CloseHandle");
        try {
            return (int)mh$.invokeExact(hObject.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DuplicateHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$308.DuplicateHandle$MH,"DuplicateHandle");
    }
    public static int DuplicateHandle ( Addressable hSourceProcessHandle,  Addressable hSourceHandle,  Addressable hTargetProcessHandle,  Addressable lpTargetHandle,  int dwDesiredAccess,  int bInheritHandle,  int dwOptions) {
        var mh$ = RuntimeHelper.requireNonNull(constants$308.DuplicateHandle$MH, "DuplicateHandle");
        try {
            return (int)mh$.invokeExact(hSourceProcessHandle.address(), hSourceHandle.address(), hTargetProcessHandle.address(), lpTargetHandle.address(), dwDesiredAccess, bInheritHandle, dwOptions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetHandleInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$308.GetHandleInformation$MH,"GetHandleInformation");
    }
    public static int GetHandleInformation ( Addressable hObject,  Addressable lpdwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$308.GetHandleInformation$MH, "GetHandleInformation");
        try {
            return (int)mh$.invokeExact(hObject.address(), lpdwFlags.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetHandleInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$308.SetHandleInformation$MH,"SetHandleInformation");
    }
    public static int SetHandleInformation ( Addressable hObject,  int dwMask,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$308.SetHandleInformation$MH, "SetHandleInformation");
        try {
            return (int)mh$.invokeExact(hObject.address(), dwMask, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapValidate$MH() {
        return RuntimeHelper.requireNonNull(constants$308.HeapValidate$MH,"HeapValidate");
    }
    public static int HeapValidate ( Addressable hHeap,  int dwFlags,  Addressable lpMem) {
        var mh$ = RuntimeHelper.requireNonNull(constants$308.HeapValidate$MH, "HeapValidate");
        try {
            return (int)mh$.invokeExact(hHeap.address(), dwFlags, lpMem.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapSummary$MH() {
        return RuntimeHelper.requireNonNull(constants$308.HeapSummary$MH,"HeapSummary");
    }
    public static int HeapSummary ( Addressable hHeap,  int dwFlags,  Addressable lpSummary) {
        var mh$ = RuntimeHelper.requireNonNull(constants$308.HeapSummary$MH, "HeapSummary");
        try {
            return (int)mh$.invokeExact(hHeap.address(), dwFlags, lpSummary.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessHeaps$MH() {
        return RuntimeHelper.requireNonNull(constants$308.GetProcessHeaps$MH,"GetProcessHeaps");
    }
    public static int GetProcessHeaps ( int NumberOfHeaps,  Addressable ProcessHeaps) {
        var mh$ = RuntimeHelper.requireNonNull(constants$308.GetProcessHeaps$MH, "GetProcessHeaps");
        try {
            return (int)mh$.invokeExact(NumberOfHeaps, ProcessHeaps.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapLock$MH() {
        return RuntimeHelper.requireNonNull(constants$309.HeapLock$MH,"HeapLock");
    }
    public static int HeapLock ( Addressable hHeap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$309.HeapLock$MH, "HeapLock");
        try {
            return (int)mh$.invokeExact(hHeap.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapUnlock$MH() {
        return RuntimeHelper.requireNonNull(constants$309.HeapUnlock$MH,"HeapUnlock");
    }
    public static int HeapUnlock ( Addressable hHeap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$309.HeapUnlock$MH, "HeapUnlock");
        try {
            return (int)mh$.invokeExact(hHeap.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapWalk$MH() {
        return RuntimeHelper.requireNonNull(constants$309.HeapWalk$MH,"HeapWalk");
    }
    public static int HeapWalk ( Addressable hHeap,  Addressable lpEntry) {
        var mh$ = RuntimeHelper.requireNonNull(constants$309.HeapWalk$MH, "HeapWalk");
        try {
            return (int)mh$.invokeExact(hHeap.address(), lpEntry.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapQueryInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$309.HeapQueryInformation$MH,"HeapQueryInformation");
    }
    public static int HeapQueryInformation ( Addressable HeapHandle,  int HeapInformationClass,  Addressable HeapInformation,  long HeapInformationLength,  Addressable ReturnLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$309.HeapQueryInformation$MH, "HeapQueryInformation");
        try {
            return (int)mh$.invokeExact(HeapHandle.address(), HeapInformationClass, HeapInformation.address(), HeapInformationLength, ReturnLength.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$309.HeapCreate$MH,"HeapCreate");
    }
    public static MemoryAddress HeapCreate ( int flOptions,  long dwInitialSize,  long dwMaximumSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$309.HeapCreate$MH, "HeapCreate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(flOptions, dwInitialSize, dwMaximumSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapCompact$MH() {
        return RuntimeHelper.requireNonNull(constants$309.HeapCompact$MH,"HeapCompact");
    }
    public static long HeapCompact ( Addressable hHeap,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$309.HeapCompact$MH, "HeapCompact");
        try {
            return (long)mh$.invokeExact(hHeap.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$310.HeapDestroy$MH,"HeapDestroy");
    }
    public static int HeapDestroy ( Addressable hHeap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$310.HeapDestroy$MH, "HeapDestroy");
        try {
            return (int)mh$.invokeExact(hHeap.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$310.HeapAlloc$MH,"HeapAlloc");
    }
    public static MemoryAddress HeapAlloc ( Addressable hHeap,  int dwFlags,  long dwBytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$310.HeapAlloc$MH, "HeapAlloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hHeap.address(), dwFlags, dwBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapReAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$310.HeapReAlloc$MH,"HeapReAlloc");
    }
    public static MemoryAddress HeapReAlloc ( Addressable hHeap,  int dwFlags,  Addressable lpMem,  long dwBytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$310.HeapReAlloc$MH, "HeapReAlloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hHeap.address(), dwFlags, lpMem.address(), dwBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapFree$MH() {
        return RuntimeHelper.requireNonNull(constants$310.HeapFree$MH,"HeapFree");
    }
    public static int HeapFree ( Addressable hHeap,  int dwFlags,  Addressable lpMem) {
        var mh$ = RuntimeHelper.requireNonNull(constants$310.HeapFree$MH, "HeapFree");
        try {
            return (int)mh$.invokeExact(hHeap.address(), dwFlags, lpMem.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapSize$MH() {
        return RuntimeHelper.requireNonNull(constants$310.HeapSize$MH,"HeapSize");
    }
    public static long HeapSize ( Addressable hHeap,  int dwFlags,  Addressable lpMem) {
        var mh$ = RuntimeHelper.requireNonNull(constants$310.HeapSize$MH, "HeapSize");
        try {
            return (long)mh$.invokeExact(hHeap.address(), dwFlags, lpMem.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessHeap$MH() {
        return RuntimeHelper.requireNonNull(constants$310.GetProcessHeap$MH,"GetProcessHeap");
    }
    public static MemoryAddress GetProcessHeap () {
        var mh$ = RuntimeHelper.requireNonNull(constants$310.GetProcessHeap$MH, "GetProcessHeap");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapSetInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$311.HeapSetInformation$MH,"HeapSetInformation");
    }
    public static int HeapSetInformation ( Addressable HeapHandle,  int HeapInformationClass,  Addressable HeapInformation,  long HeapInformationLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$311.HeapSetInformation$MH, "HeapSetInformation");
        try {
            return (int)mh$.invokeExact(HeapHandle.address(), HeapInformationClass, HeapInformation.address(), HeapInformationLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOverlappedResult$MH() {
        return RuntimeHelper.requireNonNull(constants$311.GetOverlappedResult$MH,"GetOverlappedResult");
    }
    public static int GetOverlappedResult ( Addressable hFile,  Addressable lpOverlapped,  Addressable lpNumberOfBytesTransferred,  int bWait) {
        var mh$ = RuntimeHelper.requireNonNull(constants$311.GetOverlappedResult$MH, "GetOverlappedResult");
        try {
            return (int)mh$.invokeExact(hFile.address(), lpOverlapped.address(), lpNumberOfBytesTransferred.address(), bWait);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateIoCompletionPort$MH() {
        return RuntimeHelper.requireNonNull(constants$311.CreateIoCompletionPort$MH,"CreateIoCompletionPort");
    }
    public static MemoryAddress CreateIoCompletionPort ( Addressable FileHandle,  Addressable ExistingCompletionPort,  long CompletionKey,  int NumberOfConcurrentThreads) {
        var mh$ = RuntimeHelper.requireNonNull(constants$311.CreateIoCompletionPort$MH, "CreateIoCompletionPort");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(FileHandle.address(), ExistingCompletionPort.address(), CompletionKey, NumberOfConcurrentThreads);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetQueuedCompletionStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$311.GetQueuedCompletionStatus$MH,"GetQueuedCompletionStatus");
    }
    public static int GetQueuedCompletionStatus ( Addressable CompletionPort,  Addressable lpNumberOfBytesTransferred,  Addressable lpCompletionKey,  Addressable lpOverlapped,  int dwMilliseconds) {
        var mh$ = RuntimeHelper.requireNonNull(constants$311.GetQueuedCompletionStatus$MH, "GetQueuedCompletionStatus");
        try {
            return (int)mh$.invokeExact(CompletionPort.address(), lpNumberOfBytesTransferred.address(), lpCompletionKey.address(), lpOverlapped.address(), dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PostQueuedCompletionStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$311.PostQueuedCompletionStatus$MH,"PostQueuedCompletionStatus");
    }
    public static int PostQueuedCompletionStatus ( Addressable CompletionPort,  int dwNumberOfBytesTransferred,  long dwCompletionKey,  Addressable lpOverlapped) {
        var mh$ = RuntimeHelper.requireNonNull(constants$311.PostQueuedCompletionStatus$MH, "PostQueuedCompletionStatus");
        try {
            return (int)mh$.invokeExact(CompletionPort.address(), dwNumberOfBytesTransferred, dwCompletionKey, lpOverlapped.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceIoControl$MH() {
        return RuntimeHelper.requireNonNull(constants$311.DeviceIoControl$MH,"DeviceIoControl");
    }
    public static int DeviceIoControl ( Addressable hDevice,  int dwIoControlCode,  Addressable lpInBuffer,  int nInBufferSize,  Addressable lpOutBuffer,  int nOutBufferSize,  Addressable lpBytesReturned,  Addressable lpOverlapped) {
        var mh$ = RuntimeHelper.requireNonNull(constants$311.DeviceIoControl$MH, "DeviceIoControl");
        try {
            return (int)mh$.invokeExact(hDevice.address(), dwIoControlCode, lpInBuffer.address(), nInBufferSize, lpOutBuffer.address(), nOutBufferSize, lpBytesReturned.address(), lpOverlapped.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CancelIo$MH() {
        return RuntimeHelper.requireNonNull(constants$312.CancelIo$MH,"CancelIo");
    }
    public static int CancelIo ( Addressable hFile) {
        var mh$ = RuntimeHelper.requireNonNull(constants$312.CancelIo$MH, "CancelIo");
        try {
            return (int)mh$.invokeExact(hFile.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOverlappedResultEx$MH() {
        return RuntimeHelper.requireNonNull(constants$312.GetOverlappedResultEx$MH,"GetOverlappedResultEx");
    }
    public static int GetOverlappedResultEx ( Addressable hFile,  Addressable lpOverlapped,  Addressable lpNumberOfBytesTransferred,  int dwMilliseconds,  int bAlertable) {
        var mh$ = RuntimeHelper.requireNonNull(constants$312.GetOverlappedResultEx$MH, "GetOverlappedResultEx");
        try {
            return (int)mh$.invokeExact(hFile.address(), lpOverlapped.address(), lpNumberOfBytesTransferred.address(), dwMilliseconds, bAlertable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetQueuedCompletionStatusEx$MH() {
        return RuntimeHelper.requireNonNull(constants$312.GetQueuedCompletionStatusEx$MH,"GetQueuedCompletionStatusEx");
    }
    public static int GetQueuedCompletionStatusEx ( Addressable CompletionPort,  Addressable lpCompletionPortEntries,  int ulCount,  Addressable ulNumEntriesRemoved,  int dwMilliseconds,  int fAlertable) {
        var mh$ = RuntimeHelper.requireNonNull(constants$312.GetQueuedCompletionStatusEx$MH, "GetQueuedCompletionStatusEx");
        try {
            return (int)mh$.invokeExact(CompletionPort.address(), lpCompletionPortEntries.address(), ulCount, ulNumEntriesRemoved.address(), dwMilliseconds, fAlertable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CancelIoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$312.CancelIoEx$MH,"CancelIoEx");
    }
    public static int CancelIoEx ( Addressable hFile,  Addressable lpOverlapped) {
        var mh$ = RuntimeHelper.requireNonNull(constants$312.CancelIoEx$MH, "CancelIoEx");
        try {
            return (int)mh$.invokeExact(hFile.address(), lpOverlapped.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CancelSynchronousIo$MH() {
        return RuntimeHelper.requireNonNull(constants$312.CancelSynchronousIo$MH,"CancelSynchronousIo");
    }
    public static int CancelSynchronousIo ( Addressable hThread) {
        var mh$ = RuntimeHelper.requireNonNull(constants$312.CancelSynchronousIo$MH, "CancelSynchronousIo");
        try {
            return (int)mh$.invokeExact(hThread.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeSListHead$MH() {
        return RuntimeHelper.requireNonNull(constants$312.InitializeSListHead$MH,"InitializeSListHead");
    }
    public static void InitializeSListHead ( Addressable ListHead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$312.InitializeSListHead$MH, "InitializeSListHead");
        try {
            mh$.invokeExact(ListHead.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InterlockedPopEntrySList$MH() {
        return RuntimeHelper.requireNonNull(constants$313.InterlockedPopEntrySList$MH,"InterlockedPopEntrySList");
    }
    public static MemoryAddress InterlockedPopEntrySList ( Addressable ListHead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$313.InterlockedPopEntrySList$MH, "InterlockedPopEntrySList");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ListHead.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InterlockedPushEntrySList$MH() {
        return RuntimeHelper.requireNonNull(constants$313.InterlockedPushEntrySList$MH,"InterlockedPushEntrySList");
    }
    public static MemoryAddress InterlockedPushEntrySList ( Addressable ListHead,  Addressable ListEntry) {
        var mh$ = RuntimeHelper.requireNonNull(constants$313.InterlockedPushEntrySList$MH, "InterlockedPushEntrySList");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ListHead.address(), ListEntry.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InterlockedFlushSList$MH() {
        return RuntimeHelper.requireNonNull(constants$313.InterlockedFlushSList$MH,"InterlockedFlushSList");
    }
    public static MemoryAddress InterlockedFlushSList ( Addressable ListHead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$313.InterlockedFlushSList$MH, "InterlockedFlushSList");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ListHead.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryDepthSList$MH() {
        return RuntimeHelper.requireNonNull(constants$313.QueryDepthSList$MH,"QueryDepthSList");
    }
    public static short QueryDepthSList ( Addressable ListHead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$313.QueryDepthSList$MH, "QueryDepthSList");
        try {
            return (short)mh$.invokeExact(ListHead.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsProcessInJob$MH() {
        return RuntimeHelper.requireNonNull(constants$313.IsProcessInJob$MH,"IsProcessInJob");
    }
    public static int IsProcessInJob ( Addressable ProcessHandle,  Addressable JobHandle,  Addressable Result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$313.IsProcessInJob$MH, "IsProcessInJob");
        try {
            return (int)mh$.invokeExact(ProcessHandle.address(), JobHandle.address(), Result.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceNamesW$MH() {
        return RuntimeHelper.requireNonNull(constants$316.EnumResourceNamesW$MH,"EnumResourceNamesW");
    }
    public static int EnumResourceNamesW ( Addressable hModule,  Addressable lpType,  Addressable lpEnumFunc,  long lParam) {
        var mh$ = RuntimeHelper.requireNonNull(constants$316.EnumResourceNamesW$MH, "EnumResourceNamesW");
        try {
            return (int)mh$.invokeExact(hModule.address(), lpType.address(), lpEnumFunc.address(), lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindResourceW$MH() {
        return RuntimeHelper.requireNonNull(constants$316.FindResourceW$MH,"FindResourceW");
    }
    public static MemoryAddress FindResourceW ( Addressable hModule,  Addressable lpName,  Addressable lpType) {
        var mh$ = RuntimeHelper.requireNonNull(constants$316.FindResourceW$MH, "FindResourceW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hModule.address(), lpName.address(), lpType.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindResourceExW$MH() {
        return RuntimeHelper.requireNonNull(constants$316.FindResourceExW$MH,"FindResourceExW");
    }
    public static MemoryAddress FindResourceExW ( Addressable hModule,  Addressable lpType,  Addressable lpName,  short wLanguage) {
        var mh$ = RuntimeHelper.requireNonNull(constants$316.FindResourceExW$MH, "FindResourceExW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hModule.address(), lpType.address(), lpName.address(), wLanguage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeResource$MH() {
        return RuntimeHelper.requireNonNull(constants$317.FreeResource$MH,"FreeResource");
    }
    public static int FreeResource ( Addressable hResData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$317.FreeResource$MH, "FreeResource");
        try {
            return (int)mh$.invokeExact(hResData.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadLibraryExA$MH() {
        return RuntimeHelper.requireNonNull(constants$317.LoadLibraryExA$MH,"LoadLibraryExA");
    }
    public static MemoryAddress LoadLibraryExA ( Addressable lpLibFileName,  Addressable hFile,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$317.LoadLibraryExA$MH, "LoadLibraryExA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpLibFileName.address(), hFile.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadLibraryExW$MH() {
        return RuntimeHelper.requireNonNull(constants$317.LoadLibraryExW$MH,"LoadLibraryExW");
    }
    public static MemoryAddress LoadLibraryExW ( Addressable lpLibFileName,  Addressable hFile,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$317.LoadLibraryExW$MH, "LoadLibraryExW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpLibFileName.address(), hFile.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadResource$MH() {
        return RuntimeHelper.requireNonNull(constants$317.LoadResource$MH,"LoadResource");
    }
    public static MemoryAddress LoadResource ( Addressable hModule,  Addressable hResInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$317.LoadResource$MH, "LoadResource");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hModule.address(), hResInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$317.LoadStringA$MH,"LoadStringA");
    }
    public static int LoadStringA ( Addressable hInstance,  int uID,  Addressable lpBuffer,  int cchBufferMax) {
        var mh$ = RuntimeHelper.requireNonNull(constants$317.LoadStringA$MH, "LoadStringA");
        try {
            return (int)mh$.invokeExact(hInstance.address(), uID, lpBuffer.address(), cchBufferMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$317.LoadStringW$MH,"LoadStringW");
    }
    public static int LoadStringW ( Addressable hInstance,  int uID,  Addressable lpBuffer,  int cchBufferMax) {
        var mh$ = RuntimeHelper.requireNonNull(constants$317.LoadStringW$MH, "LoadStringW");
        try {
            return (int)mh$.invokeExact(hInstance.address(), uID, lpBuffer.address(), cchBufferMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LockResource$MH() {
        return RuntimeHelper.requireNonNull(constants$318.LockResource$MH,"LockResource");
    }
    public static MemoryAddress LockResource ( Addressable hResData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$318.LockResource$MH, "LockResource");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hResData.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SizeofResource$MH() {
        return RuntimeHelper.requireNonNull(constants$318.SizeofResource$MH,"SizeofResource");
    }
    public static int SizeofResource ( Addressable hModule,  Addressable hResInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$318.SizeofResource$MH, "SizeofResource");
        try {
            return (int)mh$.invokeExact(hModule.address(), hResInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddDllDirectory$MH() {
        return RuntimeHelper.requireNonNull(constants$318.AddDllDirectory$MH,"AddDllDirectory");
    }
    public static MemoryAddress AddDllDirectory ( Addressable NewDirectory) {
        var mh$ = RuntimeHelper.requireNonNull(constants$318.AddDllDirectory$MH, "AddDllDirectory");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(NewDirectory.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveDllDirectory$MH() {
        return RuntimeHelper.requireNonNull(constants$318.RemoveDllDirectory$MH,"RemoveDllDirectory");
    }
    public static int RemoveDllDirectory ( Addressable Cookie) {
        var mh$ = RuntimeHelper.requireNonNull(constants$318.RemoveDllDirectory$MH, "RemoveDllDirectory");
        try {
            return (int)mh$.invokeExact(Cookie.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDefaultDllDirectories$MH() {
        return RuntimeHelper.requireNonNull(constants$318.SetDefaultDllDirectories$MH,"SetDefaultDllDirectories");
    }
    public static int SetDefaultDllDirectories ( int DirectoryFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$318.SetDefaultDllDirectories$MH, "SetDefaultDllDirectories");
        try {
            return (int)mh$.invokeExact(DirectoryFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetModuleHandleExA$MH() {
        return RuntimeHelper.requireNonNull(constants$318.GetModuleHandleExA$MH,"GetModuleHandleExA");
    }
    public static int GetModuleHandleExA ( int dwFlags,  Addressable lpModuleName,  Addressable phModule) {
        var mh$ = RuntimeHelper.requireNonNull(constants$318.GetModuleHandleExA$MH, "GetModuleHandleExA");
        try {
            return (int)mh$.invokeExact(dwFlags, lpModuleName.address(), phModule.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetModuleHandleExW$MH() {
        return RuntimeHelper.requireNonNull(constants$319.GetModuleHandleExW$MH,"GetModuleHandleExW");
    }
    public static int GetModuleHandleExW ( int dwFlags,  Addressable lpModuleName,  Addressable phModule) {
        var mh$ = RuntimeHelper.requireNonNull(constants$319.GetModuleHandleExW$MH, "GetModuleHandleExW");
        try {
            return (int)mh$.invokeExact(dwFlags, lpModuleName.address(), phModule.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceLanguagesA$MH() {
        return RuntimeHelper.requireNonNull(constants$319.EnumResourceLanguagesA$MH,"EnumResourceLanguagesA");
    }
    public static int EnumResourceLanguagesA ( Addressable hModule,  Addressable lpType,  Addressable lpName,  Addressable lpEnumFunc,  long lParam) {
        var mh$ = RuntimeHelper.requireNonNull(constants$319.EnumResourceLanguagesA$MH, "EnumResourceLanguagesA");
        try {
            return (int)mh$.invokeExact(hModule.address(), lpType.address(), lpName.address(), lpEnumFunc.address(), lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceLanguagesW$MH() {
        return RuntimeHelper.requireNonNull(constants$319.EnumResourceLanguagesW$MH,"EnumResourceLanguagesW");
    }
    public static int EnumResourceLanguagesW ( Addressable hModule,  Addressable lpType,  Addressable lpName,  Addressable lpEnumFunc,  long lParam) {
        var mh$ = RuntimeHelper.requireNonNull(constants$319.EnumResourceLanguagesW$MH, "EnumResourceLanguagesW");
        try {
            return (int)mh$.invokeExact(hModule.address(), lpType.address(), lpName.address(), lpEnumFunc.address(), lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceLanguagesExA$MH() {
        return RuntimeHelper.requireNonNull(constants$319.EnumResourceLanguagesExA$MH,"EnumResourceLanguagesExA");
    }
    public static int EnumResourceLanguagesExA ( Addressable hModule,  Addressable lpType,  Addressable lpName,  Addressable lpEnumFunc,  long lParam,  int dwFlags,  short LangId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$319.EnumResourceLanguagesExA$MH, "EnumResourceLanguagesExA");
        try {
            return (int)mh$.invokeExact(hModule.address(), lpType.address(), lpName.address(), lpEnumFunc.address(), lParam, dwFlags, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceLanguagesExW$MH() {
        return RuntimeHelper.requireNonNull(constants$319.EnumResourceLanguagesExW$MH,"EnumResourceLanguagesExW");
    }
    public static int EnumResourceLanguagesExW ( Addressable hModule,  Addressable lpType,  Addressable lpName,  Addressable lpEnumFunc,  long lParam,  int dwFlags,  short LangId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$319.EnumResourceLanguagesExW$MH, "EnumResourceLanguagesExW");
        try {
            return (int)mh$.invokeExact(hModule.address(), lpType.address(), lpName.address(), lpEnumFunc.address(), lParam, dwFlags, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceNamesExA$MH() {
        return RuntimeHelper.requireNonNull(constants$319.EnumResourceNamesExA$MH,"EnumResourceNamesExA");
    }
    public static int EnumResourceNamesExA ( Addressable hModule,  Addressable lpType,  Addressable lpEnumFunc,  long lParam,  int dwFlags,  short LangId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$319.EnumResourceNamesExA$MH, "EnumResourceNamesExA");
        try {
            return (int)mh$.invokeExact(hModule.address(), lpType.address(), lpEnumFunc.address(), lParam, dwFlags, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceNamesExW$MH() {
        return RuntimeHelper.requireNonNull(constants$320.EnumResourceNamesExW$MH,"EnumResourceNamesExW");
    }
    public static int EnumResourceNamesExW ( Addressable hModule,  Addressable lpType,  Addressable lpEnumFunc,  long lParam,  int dwFlags,  short LangId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$320.EnumResourceNamesExW$MH, "EnumResourceNamesExW");
        try {
            return (int)mh$.invokeExact(hModule.address(), lpType.address(), lpEnumFunc.address(), lParam, dwFlags, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceTypesExA$MH() {
        return RuntimeHelper.requireNonNull(constants$320.EnumResourceTypesExA$MH,"EnumResourceTypesExA");
    }
    public static int EnumResourceTypesExA ( Addressable hModule,  Addressable lpEnumFunc,  long lParam,  int dwFlags,  short LangId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$320.EnumResourceTypesExA$MH, "EnumResourceTypesExA");
        try {
            return (int)mh$.invokeExact(hModule.address(), lpEnumFunc.address(), lParam, dwFlags, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceTypesExW$MH() {
        return RuntimeHelper.requireNonNull(constants$320.EnumResourceTypesExW$MH,"EnumResourceTypesExW");
    }
    public static int EnumResourceTypesExW ( Addressable hModule,  Addressable lpEnumFunc,  long lParam,  int dwFlags,  short LangId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$320.EnumResourceTypesExW$MH, "EnumResourceTypesExW");
        try {
            return (int)mh$.invokeExact(hModule.address(), lpEnumFunc.address(), lParam, dwFlags, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryOptionalDelayLoadedAPI$MH() {
        return RuntimeHelper.requireNonNull(constants$320.QueryOptionalDelayLoadedAPI$MH,"QueryOptionalDelayLoadedAPI");
    }
    public static int QueryOptionalDelayLoadedAPI ( Addressable CallerModule,  Addressable lpDllName,  Addressable lpProcName,  int Reserved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$320.QueryOptionalDelayLoadedAPI$MH, "QueryOptionalDelayLoadedAPI");
        try {
            return (int)mh$.invokeExact(CallerModule.address(), lpDllName.address(), lpProcName.address(), Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetModuleHandleA$MH() {
        return RuntimeHelper.requireNonNull(constants$320.GetModuleHandleA$MH,"GetModuleHandleA");
    }
    public static MemoryAddress GetModuleHandleA ( Addressable lpModuleName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$320.GetModuleHandleA$MH, "GetModuleHandleA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpModuleName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetModuleHandleW$MH() {
        return RuntimeHelper.requireNonNull(constants$320.GetModuleHandleW$MH,"GetModuleHandleW");
    }
    public static MemoryAddress GetModuleHandleW ( Addressable lpModuleName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$320.GetModuleHandleW$MH, "GetModuleHandleW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpModuleName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadLibraryA$MH() {
        return RuntimeHelper.requireNonNull(constants$321.LoadLibraryA$MH,"LoadLibraryA");
    }
    public static MemoryAddress LoadLibraryA ( Addressable lpLibFileName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$321.LoadLibraryA$MH, "LoadLibraryA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpLibFileName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadLibraryW$MH() {
        return RuntimeHelper.requireNonNull(constants$321.LoadLibraryW$MH,"LoadLibraryW");
    }
    public static MemoryAddress LoadLibraryW ( Addressable lpLibFileName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$321.LoadLibraryW$MH, "LoadLibraryW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpLibFileName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeLibraryAndExitThread$MH() {
        return RuntimeHelper.requireNonNull(constants$321.FreeLibraryAndExitThread$MH,"FreeLibraryAndExitThread");
    }
    public static void FreeLibraryAndExitThread ( Addressable hLibModule,  int dwExitCode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$321.FreeLibraryAndExitThread$MH, "FreeLibraryAndExitThread");
        try {
            mh$.invokeExact(hLibModule.address(), dwExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DisableThreadLibraryCalls$MH() {
        return RuntimeHelper.requireNonNull(constants$321.DisableThreadLibraryCalls$MH,"DisableThreadLibraryCalls");
    }
    public static int DisableThreadLibraryCalls ( Addressable hLibModule) {
        var mh$ = RuntimeHelper.requireNonNull(constants$321.DisableThreadLibraryCalls$MH, "DisableThreadLibraryCalls");
        try {
            return (int)mh$.invokeExact(hLibModule.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeLibrary$MH() {
        return RuntimeHelper.requireNonNull(constants$321.FreeLibrary$MH,"FreeLibrary");
    }
    public static int FreeLibrary ( Addressable hLibModule) {
        var mh$ = RuntimeHelper.requireNonNull(constants$321.FreeLibrary$MH, "FreeLibrary");
        try {
            return (int)mh$.invokeExact(hLibModule.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$321.GetProcAddress$MH,"GetProcAddress");
    }
    public static MemoryAddress GetProcAddress ( Addressable hModule,  Addressable lpProcName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$321.GetProcAddress$MH, "GetProcAddress");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hModule.address(), lpProcName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetModuleFileNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$322.GetModuleFileNameA$MH,"GetModuleFileNameA");
    }
    public static int GetModuleFileNameA ( Addressable hModule,  Addressable lpFilename,  int nSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$322.GetModuleFileNameA$MH, "GetModuleFileNameA");
        try {
            return (int)mh$.invokeExact(hModule.address(), lpFilename.address(), nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetModuleFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$322.GetModuleFileNameW$MH,"GetModuleFileNameW");
    }
    public static int GetModuleFileNameW ( Addressable hModule,  Addressable lpFilename,  int nSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$322.GetModuleFileNameW$MH, "GetModuleFileNameW");
        try {
            return (int)mh$.invokeExact(hModule.address(), lpFilename.address(), nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindStringOrdinal$MH() {
        return RuntimeHelper.requireNonNull(constants$322.FindStringOrdinal$MH,"FindStringOrdinal");
    }
    public static int FindStringOrdinal ( int dwFindStringOrdinalFlags,  Addressable lpStringSource,  int cchSource,  Addressable lpStringValue,  int cchValue,  int bIgnoreCase) {
        var mh$ = RuntimeHelper.requireNonNull(constants$322.FindStringOrdinal$MH, "FindStringOrdinal");
        try {
            return (int)mh$.invokeExact(dwFindStringOrdinalFlags, lpStringSource.address(), cchSource, lpStringValue.address(), cchValue, bIgnoreCase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int LowMemoryResourceNotification() {
        return (int)0L;
    }
    public static int HighMemoryResourceNotification() {
        return (int)1L;
    }
    public static MethodHandle VirtualFree$MH() {
        return RuntimeHelper.requireNonNull(constants$322.VirtualFree$MH,"VirtualFree");
    }
    public static int VirtualFree ( Addressable lpAddress,  long dwSize,  int dwFreeType) {
        var mh$ = RuntimeHelper.requireNonNull(constants$322.VirtualFree$MH, "VirtualFree");
        try {
            return (int)mh$.invokeExact(lpAddress.address(), dwSize, dwFreeType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualQuery$MH() {
        return RuntimeHelper.requireNonNull(constants$322.VirtualQuery$MH,"VirtualQuery");
    }
    public static long VirtualQuery ( Addressable lpAddress,  Addressable lpBuffer,  long dwLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$322.VirtualQuery$MH, "VirtualQuery");
        try {
            return (long)mh$.invokeExact(lpAddress.address(), lpBuffer.address(), dwLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlushViewOfFile$MH() {
        return RuntimeHelper.requireNonNull(constants$322.FlushViewOfFile$MH,"FlushViewOfFile");
    }
    public static int FlushViewOfFile ( Addressable lpBaseAddress,  long dwNumberOfBytesToFlush) {
        var mh$ = RuntimeHelper.requireNonNull(constants$322.FlushViewOfFile$MH, "FlushViewOfFile");
        try {
            return (int)mh$.invokeExact(lpBaseAddress.address(), dwNumberOfBytesToFlush);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnmapViewOfFile$MH() {
        return RuntimeHelper.requireNonNull(constants$323.UnmapViewOfFile$MH,"UnmapViewOfFile");
    }
    public static int UnmapViewOfFile ( Addressable lpBaseAddress) {
        var mh$ = RuntimeHelper.requireNonNull(constants$323.UnmapViewOfFile$MH, "UnmapViewOfFile");
        try {
            return (int)mh$.invokeExact(lpBaseAddress.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnmapViewOfFile2$MH() {
        return RuntimeHelper.requireNonNull(constants$323.UnmapViewOfFile2$MH,"UnmapViewOfFile2");
    }
    public static int UnmapViewOfFile2 ( Addressable Process,  Addressable BaseAddress,  int UnmapFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$323.UnmapViewOfFile2$MH, "UnmapViewOfFile2");
        try {
            return (int)mh$.invokeExact(Process.address(), BaseAddress.address(), UnmapFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileMappingFromApp$MH() {
        return RuntimeHelper.requireNonNull(constants$323.CreateFileMappingFromApp$MH,"CreateFileMappingFromApp");
    }
    public static MemoryAddress CreateFileMappingFromApp ( Addressable hFile,  Addressable SecurityAttributes,  int PageProtection,  long MaximumSize,  Addressable Name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$323.CreateFileMappingFromApp$MH, "CreateFileMappingFromApp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hFile.address(), SecurityAttributes.address(), PageProtection, MaximumSize, Name.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapViewOfFileFromApp$MH() {
        return RuntimeHelper.requireNonNull(constants$323.MapViewOfFileFromApp$MH,"MapViewOfFileFromApp");
    }
    public static MemoryAddress MapViewOfFileFromApp ( Addressable hFileMappingObject,  int DesiredAccess,  long FileOffset,  long NumberOfBytesToMap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$323.MapViewOfFileFromApp$MH, "MapViewOfFileFromApp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hFileMappingObject.address(), DesiredAccess, FileOffset, NumberOfBytesToMap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualUnlockEx$MH() {
        return RuntimeHelper.requireNonNull(constants$323.VirtualUnlockEx$MH,"VirtualUnlockEx");
    }
    public static int VirtualUnlockEx ( Addressable Process,  Addressable Address,  long Size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$323.VirtualUnlockEx$MH, "VirtualUnlockEx");
        try {
            return (int)mh$.invokeExact(Process.address(), Address.address(), Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualProtect$MH() {
        return RuntimeHelper.requireNonNull(constants$323.VirtualProtect$MH,"VirtualProtect");
    }
    public static int VirtualProtect ( Addressable lpAddress,  long dwSize,  int flNewProtect,  Addressable lpflOldProtect) {
        var mh$ = RuntimeHelper.requireNonNull(constants$323.VirtualProtect$MH, "VirtualProtect");
        try {
            return (int)mh$.invokeExact(lpAddress.address(), dwSize, flNewProtect, lpflOldProtect.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$324.VirtualAlloc$MH,"VirtualAlloc");
    }
    public static MemoryAddress VirtualAlloc ( Addressable lpAddress,  long dwSize,  int flAllocationType,  int flProtect) {
        var mh$ = RuntimeHelper.requireNonNull(constants$324.VirtualAlloc$MH, "VirtualAlloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpAddress.address(), dwSize, flAllocationType, flProtect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualAllocEx$MH() {
        return RuntimeHelper.requireNonNull(constants$324.VirtualAllocEx$MH,"VirtualAllocEx");
    }
    public static MemoryAddress VirtualAllocEx ( Addressable hProcess,  Addressable lpAddress,  long dwSize,  int flAllocationType,  int flProtect) {
        var mh$ = RuntimeHelper.requireNonNull(constants$324.VirtualAllocEx$MH, "VirtualAllocEx");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hProcess.address(), lpAddress.address(), dwSize, flAllocationType, flProtect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualProtectEx$MH() {
        return RuntimeHelper.requireNonNull(constants$324.VirtualProtectEx$MH,"VirtualProtectEx");
    }
    public static int VirtualProtectEx ( Addressable hProcess,  Addressable lpAddress,  long dwSize,  int flNewProtect,  Addressable lpflOldProtect) {
        var mh$ = RuntimeHelper.requireNonNull(constants$324.VirtualProtectEx$MH, "VirtualProtectEx");
        try {
            return (int)mh$.invokeExact(hProcess.address(), lpAddress.address(), dwSize, flNewProtect, lpflOldProtect.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualQueryEx$MH() {
        return RuntimeHelper.requireNonNull(constants$324.VirtualQueryEx$MH,"VirtualQueryEx");
    }
    public static long VirtualQueryEx ( Addressable hProcess,  Addressable lpAddress,  Addressable lpBuffer,  long dwLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$324.VirtualQueryEx$MH, "VirtualQueryEx");
        try {
            return (long)mh$.invokeExact(hProcess.address(), lpAddress.address(), lpBuffer.address(), dwLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadProcessMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$324.ReadProcessMemory$MH,"ReadProcessMemory");
    }
    public static int ReadProcessMemory ( Addressable hProcess,  Addressable lpBaseAddress,  Addressable lpBuffer,  long nSize,  Addressable lpNumberOfBytesRead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$324.ReadProcessMemory$MH, "ReadProcessMemory");
        try {
            return (int)mh$.invokeExact(hProcess.address(), lpBaseAddress.address(), lpBuffer.address(), nSize, lpNumberOfBytesRead.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteProcessMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$324.WriteProcessMemory$MH,"WriteProcessMemory");
    }
    public static int WriteProcessMemory ( Addressable hProcess,  Addressable lpBaseAddress,  Addressable lpBuffer,  long nSize,  Addressable lpNumberOfBytesWritten) {
        var mh$ = RuntimeHelper.requireNonNull(constants$324.WriteProcessMemory$MH, "WriteProcessMemory");
        try {
            return (int)mh$.invokeExact(hProcess.address(), lpBaseAddress.address(), lpBuffer.address(), nSize, lpNumberOfBytesWritten.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileMappingW$MH() {
        return RuntimeHelper.requireNonNull(constants$325.CreateFileMappingW$MH,"CreateFileMappingW");
    }
    public static MemoryAddress CreateFileMappingW ( Addressable hFile,  Addressable lpFileMappingAttributes,  int flProtect,  int dwMaximumSizeHigh,  int dwMaximumSizeLow,  Addressable lpName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$325.CreateFileMappingW$MH, "CreateFileMappingW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hFile.address(), lpFileMappingAttributes.address(), flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenFileMappingW$MH() {
        return RuntimeHelper.requireNonNull(constants$325.OpenFileMappingW$MH,"OpenFileMappingW");
    }
    public static MemoryAddress OpenFileMappingW ( int dwDesiredAccess,  int bInheritHandle,  Addressable lpName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$325.OpenFileMappingW$MH, "OpenFileMappingW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapViewOfFile$MH() {
        return RuntimeHelper.requireNonNull(constants$325.MapViewOfFile$MH,"MapViewOfFile");
    }
    public static MemoryAddress MapViewOfFile ( Addressable hFileMappingObject,  int dwDesiredAccess,  int dwFileOffsetHigh,  int dwFileOffsetLow,  long dwNumberOfBytesToMap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$325.MapViewOfFile$MH, "MapViewOfFile");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hFileMappingObject.address(), dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapViewOfFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$325.MapViewOfFileEx$MH,"MapViewOfFileEx");
    }
    public static MemoryAddress MapViewOfFileEx ( Addressable hFileMappingObject,  int dwDesiredAccess,  int dwFileOffsetHigh,  int dwFileOffsetLow,  long dwNumberOfBytesToMap,  Addressable lpBaseAddress) {
        var mh$ = RuntimeHelper.requireNonNull(constants$325.MapViewOfFileEx$MH, "MapViewOfFileEx");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hFileMappingObject.address(), dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap, lpBaseAddress.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualLock$MH() {
        return RuntimeHelper.requireNonNull(constants$325.VirtualLock$MH,"VirtualLock");
    }
    public static int VirtualLock ( Addressable lpAddress,  long dwSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$325.VirtualLock$MH, "VirtualLock");
        try {
            return (int)mh$.invokeExact(lpAddress.address(), dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualUnlock$MH() {
        return RuntimeHelper.requireNonNull(constants$325.VirtualUnlock$MH,"VirtualUnlock");
    }
    public static int VirtualUnlock ( Addressable lpAddress,  long dwSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$325.VirtualUnlock$MH, "VirtualUnlock");
        try {
            return (int)mh$.invokeExact(lpAddress.address(), dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMemoryResourceNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$326.CreateMemoryResourceNotification$MH,"CreateMemoryResourceNotification");
    }
    public static MemoryAddress CreateMemoryResourceNotification ( int NotificationType) {
        var mh$ = RuntimeHelper.requireNonNull(constants$326.CreateMemoryResourceNotification$MH, "CreateMemoryResourceNotification");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(NotificationType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryMemoryResourceNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$326.QueryMemoryResourceNotification$MH,"QueryMemoryResourceNotification");
    }
    public static int QueryMemoryResourceNotification ( Addressable ResourceNotificationHandle,  Addressable ResourceState) {
        var mh$ = RuntimeHelper.requireNonNull(constants$326.QueryMemoryResourceNotification$MH, "QueryMemoryResourceNotification");
        try {
            return (int)mh$.invokeExact(ResourceNotificationHandle.address(), ResourceState.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemFileCacheSize$MH() {
        return RuntimeHelper.requireNonNull(constants$326.GetSystemFileCacheSize$MH,"GetSystemFileCacheSize");
    }
    public static int GetSystemFileCacheSize ( Addressable lpMinimumFileCacheSize,  Addressable lpMaximumFileCacheSize,  Addressable lpFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$326.GetSystemFileCacheSize$MH, "GetSystemFileCacheSize");
        try {
            return (int)mh$.invokeExact(lpMinimumFileCacheSize.address(), lpMaximumFileCacheSize.address(), lpFlags.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSystemFileCacheSize$MH() {
        return RuntimeHelper.requireNonNull(constants$326.SetSystemFileCacheSize$MH,"SetSystemFileCacheSize");
    }
    public static int SetSystemFileCacheSize ( long MinimumFileCacheSize,  long MaximumFileCacheSize,  int Flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$326.SetSystemFileCacheSize$MH, "SetSystemFileCacheSize");
        try {
            return (int)mh$.invokeExact(MinimumFileCacheSize, MaximumFileCacheSize, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AllocateUserPhysicalPages$MH() {
        return RuntimeHelper.requireNonNull(constants$326.AllocateUserPhysicalPages$MH,"AllocateUserPhysicalPages");
    }
    public static int AllocateUserPhysicalPages ( Addressable hProcess,  Addressable NumberOfPages,  Addressable PageArray) {
        var mh$ = RuntimeHelper.requireNonNull(constants$326.AllocateUserPhysicalPages$MH, "AllocateUserPhysicalPages");
        try {
            return (int)mh$.invokeExact(hProcess.address(), NumberOfPages.address(), PageArray.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeUserPhysicalPages$MH() {
        return RuntimeHelper.requireNonNull(constants$326.FreeUserPhysicalPages$MH,"FreeUserPhysicalPages");
    }
    public static int FreeUserPhysicalPages ( Addressable hProcess,  Addressable NumberOfPages,  Addressable PageArray) {
        var mh$ = RuntimeHelper.requireNonNull(constants$326.FreeUserPhysicalPages$MH, "FreeUserPhysicalPages");
        try {
            return (int)mh$.invokeExact(hProcess.address(), NumberOfPages.address(), PageArray.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapUserPhysicalPages$MH() {
        return RuntimeHelper.requireNonNull(constants$327.MapUserPhysicalPages$MH,"MapUserPhysicalPages");
    }
    public static int MapUserPhysicalPages ( Addressable VirtualAddress,  long NumberOfPages,  Addressable PageArray) {
        var mh$ = RuntimeHelper.requireNonNull(constants$327.MapUserPhysicalPages$MH, "MapUserPhysicalPages");
        try {
            return (int)mh$.invokeExact(VirtualAddress.address(), NumberOfPages, PageArray.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AllocateUserPhysicalPagesNuma$MH() {
        return RuntimeHelper.requireNonNull(constants$327.AllocateUserPhysicalPagesNuma$MH,"AllocateUserPhysicalPagesNuma");
    }
    public static int AllocateUserPhysicalPagesNuma ( Addressable hProcess,  Addressable NumberOfPages,  Addressable PageArray,  int nndPreferred) {
        var mh$ = RuntimeHelper.requireNonNull(constants$327.AllocateUserPhysicalPagesNuma$MH, "AllocateUserPhysicalPagesNuma");
        try {
            return (int)mh$.invokeExact(hProcess.address(), NumberOfPages.address(), PageArray.address(), nndPreferred);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileMappingNumaW$MH() {
        return RuntimeHelper.requireNonNull(constants$327.CreateFileMappingNumaW$MH,"CreateFileMappingNumaW");
    }
    public static MemoryAddress CreateFileMappingNumaW ( Addressable hFile,  Addressable lpFileMappingAttributes,  int flProtect,  int dwMaximumSizeHigh,  int dwMaximumSizeLow,  Addressable lpName,  int nndPreferred) {
        var mh$ = RuntimeHelper.requireNonNull(constants$327.CreateFileMappingNumaW$MH, "CreateFileMappingNumaW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hFile.address(), lpFileMappingAttributes.address(), flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName.address(), nndPreferred);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualAllocExNuma$MH() {
        return RuntimeHelper.requireNonNull(constants$327.VirtualAllocExNuma$MH,"VirtualAllocExNuma");
    }
    public static MemoryAddress VirtualAllocExNuma ( Addressable hProcess,  Addressable lpAddress,  long dwSize,  int flAllocationType,  int flProtect,  int nndPreferred) {
        var mh$ = RuntimeHelper.requireNonNull(constants$327.VirtualAllocExNuma$MH, "VirtualAllocExNuma");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hProcess.address(), lpAddress.address(), dwSize, flAllocationType, flProtect, nndPreferred);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLargePageMinimum$MH() {
        return RuntimeHelper.requireNonNull(constants$327.GetLargePageMinimum$MH,"GetLargePageMinimum");
    }
    public static long GetLargePageMinimum () {
        var mh$ = RuntimeHelper.requireNonNull(constants$327.GetLargePageMinimum$MH, "GetLargePageMinimum");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessWorkingSetSizeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$327.GetProcessWorkingSetSizeEx$MH,"GetProcessWorkingSetSizeEx");
    }
    public static int GetProcessWorkingSetSizeEx ( Addressable hProcess,  Addressable lpMinimumWorkingSetSize,  Addressable lpMaximumWorkingSetSize,  Addressable Flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$327.GetProcessWorkingSetSizeEx$MH, "GetProcessWorkingSetSizeEx");
        try {
            return (int)mh$.invokeExact(hProcess.address(), lpMinimumWorkingSetSize.address(), lpMaximumWorkingSetSize.address(), Flags.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessWorkingSetSizeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$328.SetProcessWorkingSetSizeEx$MH,"SetProcessWorkingSetSizeEx");
    }
    public static int SetProcessWorkingSetSizeEx ( Addressable hProcess,  long dwMinimumWorkingSetSize,  long dwMaximumWorkingSetSize,  int Flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$328.SetProcessWorkingSetSizeEx$MH, "SetProcessWorkingSetSizeEx");
        try {
            return (int)mh$.invokeExact(hProcess.address(), dwMinimumWorkingSetSize, dwMaximumWorkingSetSize, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWriteWatch$MH() {
        return RuntimeHelper.requireNonNull(constants$328.GetWriteWatch$MH,"GetWriteWatch");
    }
    public static int GetWriteWatch ( int dwFlags,  Addressable lpBaseAddress,  long dwRegionSize,  Addressable lpAddresses,  Addressable lpdwCount,  Addressable lpdwGranularity) {
        var mh$ = RuntimeHelper.requireNonNull(constants$328.GetWriteWatch$MH, "GetWriteWatch");
        try {
            return (int)mh$.invokeExact(dwFlags, lpBaseAddress.address(), dwRegionSize, lpAddresses.address(), lpdwCount.address(), lpdwGranularity.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResetWriteWatch$MH() {
        return RuntimeHelper.requireNonNull(constants$328.ResetWriteWatch$MH,"ResetWriteWatch");
    }
    public static int ResetWriteWatch ( Addressable lpBaseAddress,  long dwRegionSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$328.ResetWriteWatch$MH, "ResetWriteWatch");
        try {
            return (int)mh$.invokeExact(lpBaseAddress.address(), dwRegionSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualFreeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$328.VirtualFreeEx$MH,"VirtualFreeEx");
    }
    public static int VirtualFreeEx ( Addressable hProcess,  Addressable lpAddress,  long dwSize,  int dwFreeType) {
        var mh$ = RuntimeHelper.requireNonNull(constants$328.VirtualFreeEx$MH, "VirtualFreeEx");
        try {
            return (int)mh$.invokeExact(hProcess.address(), lpAddress.address(), dwSize, dwFreeType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImpersonateNamedPipeClient$MH() {
        return RuntimeHelper.requireNonNull(constants$328.ImpersonateNamedPipeClient$MH,"ImpersonateNamedPipeClient");
    }
    public static int ImpersonateNamedPipeClient ( Addressable hNamedPipe) {
        var mh$ = RuntimeHelper.requireNonNull(constants$328.ImpersonateNamedPipeClient$MH, "ImpersonateNamedPipeClient");
        try {
            return (int)mh$.invokeExact(hNamedPipe.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePipe$MH() {
        return RuntimeHelper.requireNonNull(constants$328.CreatePipe$MH,"CreatePipe");
    }
    public static int CreatePipe ( Addressable hReadPipe,  Addressable hWritePipe,  Addressable lpPipeAttributes,  int nSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$328.CreatePipe$MH, "CreatePipe");
        try {
            return (int)mh$.invokeExact(hReadPipe.address(), hWritePipe.address(), lpPipeAttributes.address(), nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ConnectNamedPipe$MH() {
        return RuntimeHelper.requireNonNull(constants$329.ConnectNamedPipe$MH,"ConnectNamedPipe");
    }
    public static int ConnectNamedPipe ( Addressable hNamedPipe,  Addressable lpOverlapped) {
        var mh$ = RuntimeHelper.requireNonNull(constants$329.ConnectNamedPipe$MH, "ConnectNamedPipe");
        try {
            return (int)mh$.invokeExact(hNamedPipe.address(), lpOverlapped.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DisconnectNamedPipe$MH() {
        return RuntimeHelper.requireNonNull(constants$329.DisconnectNamedPipe$MH,"DisconnectNamedPipe");
    }
    public static int DisconnectNamedPipe ( Addressable hNamedPipe) {
        var mh$ = RuntimeHelper.requireNonNull(constants$329.DisconnectNamedPipe$MH, "DisconnectNamedPipe");
        try {
            return (int)mh$.invokeExact(hNamedPipe.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetNamedPipeHandleState$MH() {
        return RuntimeHelper.requireNonNull(constants$329.SetNamedPipeHandleState$MH,"SetNamedPipeHandleState");
    }
    public static int SetNamedPipeHandleState ( Addressable hNamedPipe,  Addressable lpMode,  Addressable lpMaxCollectionCount,  Addressable lpCollectDataTimeout) {
        var mh$ = RuntimeHelper.requireNonNull(constants$329.SetNamedPipeHandleState$MH, "SetNamedPipeHandleState");
        try {
            return (int)mh$.invokeExact(hNamedPipe.address(), lpMode.address(), lpMaxCollectionCount.address(), lpCollectDataTimeout.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PeekNamedPipe$MH() {
        return RuntimeHelper.requireNonNull(constants$329.PeekNamedPipe$MH,"PeekNamedPipe");
    }
    public static int PeekNamedPipe ( Addressable hNamedPipe,  Addressable lpBuffer,  int nBufferSize,  Addressable lpBytesRead,  Addressable lpTotalBytesAvail,  Addressable lpBytesLeftThisMessage) {
        var mh$ = RuntimeHelper.requireNonNull(constants$329.PeekNamedPipe$MH, "PeekNamedPipe");
        try {
            return (int)mh$.invokeExact(hNamedPipe.address(), lpBuffer.address(), nBufferSize, lpBytesRead.address(), lpTotalBytesAvail.address(), lpBytesLeftThisMessage.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TransactNamedPipe$MH() {
        return RuntimeHelper.requireNonNull(constants$329.TransactNamedPipe$MH,"TransactNamedPipe");
    }
    public static int TransactNamedPipe ( Addressable hNamedPipe,  Addressable lpInBuffer,  int nInBufferSize,  Addressable lpOutBuffer,  int nOutBufferSize,  Addressable lpBytesRead,  Addressable lpOverlapped) {
        var mh$ = RuntimeHelper.requireNonNull(constants$329.TransactNamedPipe$MH, "TransactNamedPipe");
        try {
            return (int)mh$.invokeExact(hNamedPipe.address(), lpInBuffer.address(), nInBufferSize, lpOutBuffer.address(), nOutBufferSize, lpBytesRead.address(), lpOverlapped.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateNamedPipeW$MH() {
        return RuntimeHelper.requireNonNull(constants$329.CreateNamedPipeW$MH,"CreateNamedPipeW");
    }
    public static MemoryAddress CreateNamedPipeW ( Addressable lpName,  int dwOpenMode,  int dwPipeMode,  int nMaxInstances,  int nOutBufferSize,  int nInBufferSize,  int nDefaultTimeOut,  Addressable lpSecurityAttributes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$329.CreateNamedPipeW$MH, "CreateNamedPipeW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpName.address(), dwOpenMode, dwPipeMode, nMaxInstances, nOutBufferSize, nInBufferSize, nDefaultTimeOut, lpSecurityAttributes.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitNamedPipeW$MH() {
        return RuntimeHelper.requireNonNull(constants$330.WaitNamedPipeW$MH,"WaitNamedPipeW");
    }
    public static int WaitNamedPipeW ( Addressable lpNamedPipeName,  int nTimeOut) {
        var mh$ = RuntimeHelper.requireNonNull(constants$330.WaitNamedPipeW$MH, "WaitNamedPipeW");
        try {
            return (int)mh$.invokeExact(lpNamedPipeName.address(), nTimeOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNamedPipeClientComputerNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$330.GetNamedPipeClientComputerNameW$MH,"GetNamedPipeClientComputerNameW");
    }
    public static int GetNamedPipeClientComputerNameW ( Addressable Pipe,  Addressable ClientComputerName,  int ClientComputerNameLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$330.GetNamedPipeClientComputerNameW$MH, "GetNamedPipeClientComputerNameW");
        try {
            return (int)mh$.invokeExact(Pipe.address(), ClientComputerName.address(), ClientComputerNameLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePrivateNamespaceW$MH() {
        return RuntimeHelper.requireNonNull(constants$330.CreatePrivateNamespaceW$MH,"CreatePrivateNamespaceW");
    }
    public static MemoryAddress CreatePrivateNamespaceW ( Addressable lpPrivateNamespaceAttributes,  Addressable lpBoundaryDescriptor,  Addressable lpAliasPrefix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$330.CreatePrivateNamespaceW$MH, "CreatePrivateNamespaceW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpPrivateNamespaceAttributes.address(), lpBoundaryDescriptor.address(), lpAliasPrefix.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenPrivateNamespaceW$MH() {
        return RuntimeHelper.requireNonNull(constants$330.OpenPrivateNamespaceW$MH,"OpenPrivateNamespaceW");
    }
    public static MemoryAddress OpenPrivateNamespaceW ( Addressable lpBoundaryDescriptor,  Addressable lpAliasPrefix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$330.OpenPrivateNamespaceW$MH, "OpenPrivateNamespaceW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpBoundaryDescriptor.address(), lpAliasPrefix.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ClosePrivateNamespace$MH() {
        return RuntimeHelper.requireNonNull(constants$330.ClosePrivateNamespace$MH,"ClosePrivateNamespace");
    }
    public static byte ClosePrivateNamespace ( Addressable Handle,  int Flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$330.ClosePrivateNamespace$MH, "ClosePrivateNamespace");
        try {
            return (byte)mh$.invokeExact(Handle.address(), Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateBoundaryDescriptorW$MH() {
        return RuntimeHelper.requireNonNull(constants$330.CreateBoundaryDescriptorW$MH,"CreateBoundaryDescriptorW");
    }
    public static MemoryAddress CreateBoundaryDescriptorW ( Addressable Name,  int Flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$330.CreateBoundaryDescriptorW$MH, "CreateBoundaryDescriptorW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Name.address(), Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddSIDToBoundaryDescriptor$MH() {
        return RuntimeHelper.requireNonNull(constants$331.AddSIDToBoundaryDescriptor$MH,"AddSIDToBoundaryDescriptor");
    }
    public static int AddSIDToBoundaryDescriptor ( Addressable BoundaryDescriptor,  Addressable RequiredSid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$331.AddSIDToBoundaryDescriptor$MH, "AddSIDToBoundaryDescriptor");
        try {
            return (int)mh$.invokeExact(BoundaryDescriptor.address(), RequiredSid.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteBoundaryDescriptor$MH() {
        return RuntimeHelper.requireNonNull(constants$331.DeleteBoundaryDescriptor$MH,"DeleteBoundaryDescriptor");
    }
    public static void DeleteBoundaryDescriptor ( Addressable BoundaryDescriptor) {
        var mh$ = RuntimeHelper.requireNonNull(constants$331.DeleteBoundaryDescriptor$MH, "DeleteBoundaryDescriptor");
        try {
            mh$.invokeExact(BoundaryDescriptor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCommandLineA$MH() {
        return RuntimeHelper.requireNonNull(constants$331.GetCommandLineA$MH,"GetCommandLineA");
    }
    public static MemoryAddress GetCommandLineA () {
        var mh$ = RuntimeHelper.requireNonNull(constants$331.GetCommandLineA$MH, "GetCommandLineA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCommandLineW$MH() {
        return RuntimeHelper.requireNonNull(constants$331.GetCommandLineW$MH,"GetCommandLineW");
    }
    public static MemoryAddress GetCommandLineW () {
        var mh$ = RuntimeHelper.requireNonNull(constants$331.GetCommandLineW$MH, "GetCommandLineW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCurrentDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$331.SetCurrentDirectoryA$MH,"SetCurrentDirectoryA");
    }
    public static int SetCurrentDirectoryA ( Addressable lpPathName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$331.SetCurrentDirectoryA$MH, "SetCurrentDirectoryA");
        try {
            return (int)mh$.invokeExact(lpPathName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCurrentDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$331.SetCurrentDirectoryW$MH,"SetCurrentDirectoryW");
    }
    public static int SetCurrentDirectoryW ( Addressable lpPathName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$331.SetCurrentDirectoryW$MH, "SetCurrentDirectoryW");
        try {
            return (int)mh$.invokeExact(lpPathName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$332.GetCurrentDirectoryA$MH,"GetCurrentDirectoryA");
    }
    public static int GetCurrentDirectoryA ( int nBufferLength,  Addressable lpBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$332.GetCurrentDirectoryA$MH, "GetCurrentDirectoryA");
        try {
            return (int)mh$.invokeExact(nBufferLength, lpBuffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$332.GetCurrentDirectoryW$MH,"GetCurrentDirectoryW");
    }
    public static int GetCurrentDirectoryW ( int nBufferLength,  Addressable lpBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$332.GetCurrentDirectoryW$MH, "GetCurrentDirectoryW");
        try {
            return (int)mh$.invokeExact(nBufferLength, lpBuffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEnvironmentStringsW$MH() {
        return RuntimeHelper.requireNonNull(constants$332.SetEnvironmentStringsW$MH,"SetEnvironmentStringsW");
    }
    public static int SetEnvironmentStringsW ( Addressable NewEnvironment) {
        var mh$ = RuntimeHelper.requireNonNull(constants$332.SetEnvironmentStringsW$MH, "SetEnvironmentStringsW");
        try {
            return (int)mh$.invokeExact(NewEnvironment.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SearchPathW$MH() {
        return RuntimeHelper.requireNonNull(constants$332.SearchPathW$MH,"SearchPathW");
    }
    public static int SearchPathW ( Addressable lpPath,  Addressable lpFileName,  Addressable lpExtension,  int nBufferLength,  Addressable lpBuffer,  Addressable lpFilePart) {
        var mh$ = RuntimeHelper.requireNonNull(constants$332.SearchPathW$MH, "SearchPathW");
        try {
            return (int)mh$.invokeExact(lpPath.address(), lpFileName.address(), lpExtension.address(), nBufferLength, lpBuffer.address(), lpFilePart.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SearchPathA$MH() {
        return RuntimeHelper.requireNonNull(constants$332.SearchPathA$MH,"SearchPathA");
    }
    public static int SearchPathA ( Addressable lpPath,  Addressable lpFileName,  Addressable lpExtension,  int nBufferLength,  Addressable lpBuffer,  Addressable lpFilePart) {
        var mh$ = RuntimeHelper.requireNonNull(constants$332.SearchPathA$MH, "SearchPathA");
        try {
            return (int)mh$.invokeExact(lpPath.address(), lpFileName.address(), lpExtension.address(), nBufferLength, lpBuffer.address(), lpFilePart.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NeedCurrentDirectoryForExePathA$MH() {
        return RuntimeHelper.requireNonNull(constants$332.NeedCurrentDirectoryForExePathA$MH,"NeedCurrentDirectoryForExePathA");
    }
    public static int NeedCurrentDirectoryForExePathA ( Addressable ExeName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$332.NeedCurrentDirectoryForExePathA$MH, "NeedCurrentDirectoryForExePathA");
        try {
            return (int)mh$.invokeExact(ExeName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NeedCurrentDirectoryForExePathW$MH() {
        return RuntimeHelper.requireNonNull(constants$333.NeedCurrentDirectoryForExePathW$MH,"NeedCurrentDirectoryForExePathW");
    }
    public static int NeedCurrentDirectoryForExePathW ( Addressable ExeName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$333.NeedCurrentDirectoryForExePathW$MH, "NeedCurrentDirectoryForExePathW");
        try {
            return (int)mh$.invokeExact(ExeName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnvironmentStrings$MH() {
        return RuntimeHelper.requireNonNull(constants$333.GetEnvironmentStrings$MH,"GetEnvironmentStrings");
    }
    public static MemoryAddress GetEnvironmentStrings () {
        var mh$ = RuntimeHelper.requireNonNull(constants$333.GetEnvironmentStrings$MH, "GetEnvironmentStrings");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnvironmentStringsW$MH() {
        return RuntimeHelper.requireNonNull(constants$333.GetEnvironmentStringsW$MH,"GetEnvironmentStringsW");
    }
    public static MemoryAddress GetEnvironmentStringsW () {
        var mh$ = RuntimeHelper.requireNonNull(constants$333.GetEnvironmentStringsW$MH, "GetEnvironmentStringsW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStdHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$333.GetStdHandle$MH,"GetStdHandle");
    }
    public static MemoryAddress GetStdHandle ( int nStdHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$333.GetStdHandle$MH, "GetStdHandle");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(nStdHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExpandEnvironmentStringsA$MH() {
        return RuntimeHelper.requireNonNull(constants$333.ExpandEnvironmentStringsA$MH,"ExpandEnvironmentStringsA");
    }
    public static int ExpandEnvironmentStringsA ( Addressable lpSrc,  Addressable lpDst,  int nSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$333.ExpandEnvironmentStringsA$MH, "ExpandEnvironmentStringsA");
        try {
            return (int)mh$.invokeExact(lpSrc.address(), lpDst.address(), nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExpandEnvironmentStringsW$MH() {
        return RuntimeHelper.requireNonNull(constants$333.ExpandEnvironmentStringsW$MH,"ExpandEnvironmentStringsW");
    }
    public static int ExpandEnvironmentStringsW ( Addressable lpSrc,  Addressable lpDst,  int nSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$333.ExpandEnvironmentStringsW$MH, "ExpandEnvironmentStringsW");
        try {
            return (int)mh$.invokeExact(lpSrc.address(), lpDst.address(), nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeEnvironmentStringsA$MH() {
        return RuntimeHelper.requireNonNull(constants$334.FreeEnvironmentStringsA$MH,"FreeEnvironmentStringsA");
    }
    public static int FreeEnvironmentStringsA ( Addressable penv) {
        var mh$ = RuntimeHelper.requireNonNull(constants$334.FreeEnvironmentStringsA$MH, "FreeEnvironmentStringsA");
        try {
            return (int)mh$.invokeExact(penv.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeEnvironmentStringsW$MH() {
        return RuntimeHelper.requireNonNull(constants$334.FreeEnvironmentStringsW$MH,"FreeEnvironmentStringsW");
    }
    public static int FreeEnvironmentStringsW ( Addressable penv) {
        var mh$ = RuntimeHelper.requireNonNull(constants$334.FreeEnvironmentStringsW$MH, "FreeEnvironmentStringsW");
        try {
            return (int)mh$.invokeExact(penv.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnvironmentVariableA$MH() {
        return RuntimeHelper.requireNonNull(constants$334.GetEnvironmentVariableA$MH,"GetEnvironmentVariableA");
    }
    public static int GetEnvironmentVariableA ( Addressable lpName,  Addressable lpBuffer,  int nSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$334.GetEnvironmentVariableA$MH, "GetEnvironmentVariableA");
        try {
            return (int)mh$.invokeExact(lpName.address(), lpBuffer.address(), nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnvironmentVariableW$MH() {
        return RuntimeHelper.requireNonNull(constants$334.GetEnvironmentVariableW$MH,"GetEnvironmentVariableW");
    }
    public static int GetEnvironmentVariableW ( Addressable lpName,  Addressable lpBuffer,  int nSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$334.GetEnvironmentVariableW$MH, "GetEnvironmentVariableW");
        try {
            return (int)mh$.invokeExact(lpName.address(), lpBuffer.address(), nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEnvironmentVariableA$MH() {
        return RuntimeHelper.requireNonNull(constants$334.SetEnvironmentVariableA$MH,"SetEnvironmentVariableA");
    }
    public static int SetEnvironmentVariableA ( Addressable lpName,  Addressable lpValue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$334.SetEnvironmentVariableA$MH, "SetEnvironmentVariableA");
        try {
            return (int)mh$.invokeExact(lpName.address(), lpValue.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEnvironmentVariableW$MH() {
        return RuntimeHelper.requireNonNull(constants$334.SetEnvironmentVariableW$MH,"SetEnvironmentVariableW");
    }
    public static int SetEnvironmentVariableW ( Addressable lpName,  Addressable lpValue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$334.SetEnvironmentVariableW$MH, "SetEnvironmentVariableW");
        try {
            return (int)mh$.invokeExact(lpName.address(), lpValue.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetStdHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$335.SetStdHandle$MH,"SetStdHandle");
    }
    public static int SetStdHandle ( int nStdHandle,  Addressable hHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$335.SetStdHandle$MH, "SetStdHandle");
        try {
            return (int)mh$.invokeExact(nStdHandle, hHandle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetStdHandleEx$MH() {
        return RuntimeHelper.requireNonNull(constants$335.SetStdHandleEx$MH,"SetStdHandleEx");
    }
    public static int SetStdHandleEx ( int nStdHandle,  Addressable hHandle,  Addressable phPrevValue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$335.SetStdHandleEx$MH, "SetStdHandleEx");
        try {
            return (int)mh$.invokeExact(nStdHandle, hHandle.address(), phPrevValue.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$335.OpenProcess$MH,"OpenProcess");
    }
    public static MemoryAddress OpenProcess ( int dwDesiredAccess,  int bInheritHandle,  int dwProcessId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$335.OpenProcess$MH, "OpenProcess");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, bInheritHandle, dwProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueueUserAPC$MH() {
        return RuntimeHelper.requireNonNull(constants$335.QueueUserAPC$MH,"QueueUserAPC");
    }
    public static int QueueUserAPC ( Addressable pfnAPC,  Addressable hThread,  long dwData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$335.QueueUserAPC$MH, "QueueUserAPC");
        try {
            return (int)mh$.invokeExact(pfnAPC.address(), hThread.address(), dwData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessTimes$MH() {
        return RuntimeHelper.requireNonNull(constants$335.GetProcessTimes$MH,"GetProcessTimes");
    }
    public static int GetProcessTimes ( Addressable hProcess,  Addressable lpCreationTime,  Addressable lpExitTime,  Addressable lpKernelTime,  Addressable lpUserTime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$335.GetProcessTimes$MH, "GetProcessTimes");
        try {
            return (int)mh$.invokeExact(hProcess.address(), lpCreationTime.address(), lpExitTime.address(), lpKernelTime.address(), lpUserTime.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExitProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$335.ExitProcess$MH,"ExitProcess");
    }
    public static void ExitProcess ( int uExitCode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$335.ExitProcess$MH, "ExitProcess");
        try {
            mh$.invokeExact(uExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetExitCodeProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$336.GetExitCodeProcess$MH,"GetExitCodeProcess");
    }
    public static int GetExitCodeProcess ( Addressable hProcess,  Addressable lpExitCode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$336.GetExitCodeProcess$MH, "GetExitCodeProcess");
        try {
            return (int)mh$.invokeExact(hProcess.address(), lpExitCode.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SwitchToThread$MH() {
        return RuntimeHelper.requireNonNull(constants$336.SwitchToThread$MH,"SwitchToThread");
    }
    public static int SwitchToThread () {
        var mh$ = RuntimeHelper.requireNonNull(constants$336.SwitchToThread$MH, "SwitchToThread");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenThread$MH() {
        return RuntimeHelper.requireNonNull(constants$336.OpenThread$MH,"OpenThread");
    }
    public static MemoryAddress OpenThread ( int dwDesiredAccess,  int bInheritHandle,  int dwThreadId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$336.OpenThread$MH, "OpenThread");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, bInheritHandle, dwThreadId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadPriorityBoost$MH() {
        return RuntimeHelper.requireNonNull(constants$336.SetThreadPriorityBoost$MH,"SetThreadPriorityBoost");
    }
    public static int SetThreadPriorityBoost ( Addressable hThread,  int bDisablePriorityBoost) {
        var mh$ = RuntimeHelper.requireNonNull(constants$336.SetThreadPriorityBoost$MH, "SetThreadPriorityBoost");
        try {
            return (int)mh$.invokeExact(hThread.address(), bDisablePriorityBoost);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadPriorityBoost$MH() {
        return RuntimeHelper.requireNonNull(constants$336.GetThreadPriorityBoost$MH,"GetThreadPriorityBoost");
    }
    public static int GetThreadPriorityBoost ( Addressable hThread,  Addressable pDisablePriorityBoost) {
        var mh$ = RuntimeHelper.requireNonNull(constants$336.GetThreadPriorityBoost$MH, "GetThreadPriorityBoost");
        try {
            return (int)mh$.invokeExact(hThread.address(), pDisablePriorityBoost.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadToken$MH() {
        return RuntimeHelper.requireNonNull(constants$336.SetThreadToken$MH,"SetThreadToken");
    }
    public static int SetThreadToken ( Addressable Thread,  Addressable Token) {
        var mh$ = RuntimeHelper.requireNonNull(constants$336.SetThreadToken$MH, "SetThreadToken");
        try {
            return (int)mh$.invokeExact(Thread.address(), Token.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenProcessToken$MH() {
        return RuntimeHelper.requireNonNull(constants$337.OpenProcessToken$MH,"OpenProcessToken");
    }
    public static int OpenProcessToken ( Addressable ProcessHandle,  int DesiredAccess,  Addressable TokenHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$337.OpenProcessToken$MH, "OpenProcessToken");
        try {
            return (int)mh$.invokeExact(ProcessHandle.address(), DesiredAccess, TokenHandle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenThreadToken$MH() {
        return RuntimeHelper.requireNonNull(constants$337.OpenThreadToken$MH,"OpenThreadToken");
    }
    public static int OpenThreadToken ( Addressable ThreadHandle,  int DesiredAccess,  int OpenAsSelf,  Addressable TokenHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$337.OpenThreadToken$MH, "OpenThreadToken");
        try {
            return (int)mh$.invokeExact(ThreadHandle.address(), DesiredAccess, OpenAsSelf, TokenHandle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPriorityClass$MH() {
        return RuntimeHelper.requireNonNull(constants$337.SetPriorityClass$MH,"SetPriorityClass");
    }
    public static int SetPriorityClass ( Addressable hProcess,  int dwPriorityClass) {
        var mh$ = RuntimeHelper.requireNonNull(constants$337.SetPriorityClass$MH, "SetPriorityClass");
        try {
            return (int)mh$.invokeExact(hProcess.address(), dwPriorityClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPriorityClass$MH() {
        return RuntimeHelper.requireNonNull(constants$337.GetPriorityClass$MH,"GetPriorityClass");
    }
    public static int GetPriorityClass ( Addressable hProcess) {
        var mh$ = RuntimeHelper.requireNonNull(constants$337.GetPriorityClass$MH, "GetPriorityClass");
        try {
            return (int)mh$.invokeExact(hProcess.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessId$MH() {
        return RuntimeHelper.requireNonNull(constants$337.GetProcessId$MH,"GetProcessId");
    }
    public static int GetProcessId ( Addressable Process) {
        var mh$ = RuntimeHelper.requireNonNull(constants$337.GetProcessId$MH, "GetProcessId");
        try {
            return (int)mh$.invokeExact(Process.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadId$MH() {
        return RuntimeHelper.requireNonNull(constants$337.GetThreadId$MH,"GetThreadId");
    }
    public static int GetThreadId ( Addressable Thread) {
        var mh$ = RuntimeHelper.requireNonNull(constants$337.GetThreadId$MH, "GetThreadId");
        try {
            return (int)mh$.invokeExact(Thread.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadContext$MH() {
        return RuntimeHelper.requireNonNull(constants$338.GetThreadContext$MH,"GetThreadContext");
    }
    public static int GetThreadContext ( Addressable hThread,  Addressable lpContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$338.GetThreadContext$MH, "GetThreadContext");
        try {
            return (int)mh$.invokeExact(hThread.address(), lpContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlushInstructionCache$MH() {
        return RuntimeHelper.requireNonNull(constants$338.FlushInstructionCache$MH,"FlushInstructionCache");
    }
    public static int FlushInstructionCache ( Addressable hProcess,  Addressable lpBaseAddress,  long dwSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$338.FlushInstructionCache$MH, "FlushInstructionCache");
        try {
            return (int)mh$.invokeExact(hProcess.address(), lpBaseAddress.address(), dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadTimes$MH() {
        return RuntimeHelper.requireNonNull(constants$338.GetThreadTimes$MH,"GetThreadTimes");
    }
    public static int GetThreadTimes ( Addressable hThread,  Addressable lpCreationTime,  Addressable lpExitTime,  Addressable lpKernelTime,  Addressable lpUserTime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$338.GetThreadTimes$MH, "GetThreadTimes");
        try {
            return (int)mh$.invokeExact(hThread.address(), lpCreationTime.address(), lpExitTime.address(), lpKernelTime.address(), lpUserTime.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentProcessorNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$338.GetCurrentProcessorNumber$MH,"GetCurrentProcessorNumber");
    }
    public static int GetCurrentProcessorNumber () {
        var mh$ = RuntimeHelper.requireNonNull(constants$338.GetCurrentProcessorNumber$MH, "GetCurrentProcessorNumber");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TerminateProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$338.TerminateProcess$MH,"TerminateProcess");
    }
    public static int TerminateProcess ( Addressable hProcess,  int uExitCode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$338.TerminateProcess$MH, "TerminateProcess");
        try {
            return (int)mh$.invokeExact(hProcess.address(), uExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateRemoteThread$MH() {
        return RuntimeHelper.requireNonNull(constants$338.CreateRemoteThread$MH,"CreateRemoteThread");
    }
    public static MemoryAddress CreateRemoteThread ( Addressable hProcess,  Addressable lpThreadAttributes,  long dwStackSize,  Addressable lpStartAddress,  Addressable lpParameter,  int dwCreationFlags,  Addressable lpThreadId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$338.CreateRemoteThread$MH, "CreateRemoteThread");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hProcess.address(), lpThreadAttributes.address(), dwStackSize, lpStartAddress.address(), lpParameter.address(), dwCreationFlags, lpThreadId.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TerminateThread$MH() {
        return RuntimeHelper.requireNonNull(constants$339.TerminateThread$MH,"TerminateThread");
    }
    public static int TerminateThread ( Addressable hThread,  int dwExitCode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$339.TerminateThread$MH, "TerminateThread");
        try {
            return (int)mh$.invokeExact(hThread.address(), dwExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessShutdownParameters$MH() {
        return RuntimeHelper.requireNonNull(constants$339.SetProcessShutdownParameters$MH,"SetProcessShutdownParameters");
    }
    public static int SetProcessShutdownParameters ( int dwLevel,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$339.SetProcessShutdownParameters$MH, "SetProcessShutdownParameters");
        try {
            return (int)mh$.invokeExact(dwLevel, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$339.GetProcessVersion$MH,"GetProcessVersion");
    }
    public static int GetProcessVersion ( int ProcessId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$339.GetProcessVersion$MH, "GetProcessVersion");
        try {
            return (int)mh$.invokeExact(ProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStartupInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$339.GetStartupInfoW$MH,"GetStartupInfoW");
    }
    public static void GetStartupInfoW ( Addressable lpStartupInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$339.GetStartupInfoW$MH, "GetStartupInfoW");
        try {
            mh$.invokeExact(lpStartupInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadStackGuarantee$MH() {
        return RuntimeHelper.requireNonNull(constants$339.SetThreadStackGuarantee$MH,"SetThreadStackGuarantee");
    }
    public static int SetThreadStackGuarantee ( Addressable StackSizeInBytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$339.SetThreadStackGuarantee$MH, "SetThreadStackGuarantee");
        try {
            return (int)mh$.invokeExact(StackSizeInBytes.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ProcessIdToSessionId$MH() {
        return RuntimeHelper.requireNonNull(constants$339.ProcessIdToSessionId$MH,"ProcessIdToSessionId");
    }
    public static int ProcessIdToSessionId ( int dwProcessId,  Addressable pSessionId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$339.ProcessIdToSessionId$MH, "ProcessIdToSessionId");
        try {
            return (int)mh$.invokeExact(dwProcessId, pSessionId.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateRemoteThreadEx$MH() {
        return RuntimeHelper.requireNonNull(constants$340.CreateRemoteThreadEx$MH,"CreateRemoteThreadEx");
    }
    public static MemoryAddress CreateRemoteThreadEx ( Addressable hProcess,  Addressable lpThreadAttributes,  long dwStackSize,  Addressable lpStartAddress,  Addressable lpParameter,  int dwCreationFlags,  Addressable lpAttributeList,  Addressable lpThreadId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$340.CreateRemoteThreadEx$MH, "CreateRemoteThreadEx");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hProcess.address(), lpThreadAttributes.address(), dwStackSize, lpStartAddress.address(), lpParameter.address(), dwCreationFlags, lpAttributeList.address(), lpThreadId.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadContext$MH() {
        return RuntimeHelper.requireNonNull(constants$340.SetThreadContext$MH,"SetThreadContext");
    }
    public static int SetThreadContext ( Addressable hThread,  Addressable lpContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$340.SetThreadContext$MH, "SetThreadContext");
        try {
            return (int)mh$.invokeExact(hThread.address(), lpContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessHandleCount$MH() {
        return RuntimeHelper.requireNonNull(constants$340.GetProcessHandleCount$MH,"GetProcessHandleCount");
    }
    public static int GetProcessHandleCount ( Addressable hProcess,  Addressable pdwHandleCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$340.GetProcessHandleCount$MH, "GetProcessHandleCount");
        try {
            return (int)mh$.invokeExact(hProcess.address(), pdwHandleCount.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateProcessAsUserW$MH() {
        return RuntimeHelper.requireNonNull(constants$340.CreateProcessAsUserW$MH,"CreateProcessAsUserW");
    }
    public static int CreateProcessAsUserW ( Addressable hToken,  Addressable lpApplicationName,  Addressable lpCommandLine,  Addressable lpProcessAttributes,  Addressable lpThreadAttributes,  int bInheritHandles,  int dwCreationFlags,  Addressable lpEnvironment,  Addressable lpCurrentDirectory,  Addressable lpStartupInfo,  Addressable lpProcessInformation) {
        var mh$ = RuntimeHelper.requireNonNull(constants$340.CreateProcessAsUserW$MH, "CreateProcessAsUserW");
        try {
            return (int)mh$.invokeExact(hToken.address(), lpApplicationName.address(), lpCommandLine.address(), lpProcessAttributes.address(), lpThreadAttributes.address(), bInheritHandles, dwCreationFlags, lpEnvironment.address(), lpCurrentDirectory.address(), lpStartupInfo.address(), lpProcessInformation.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessIdOfThread$MH() {
        return RuntimeHelper.requireNonNull(constants$340.GetProcessIdOfThread$MH,"GetProcessIdOfThread");
    }
    public static int GetProcessIdOfThread ( Addressable Thread) {
        var mh$ = RuntimeHelper.requireNonNull(constants$340.GetProcessIdOfThread$MH, "GetProcessIdOfThread");
        try {
            return (int)mh$.invokeExact(Thread.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeProcThreadAttributeList$MH() {
        return RuntimeHelper.requireNonNull(constants$340.InitializeProcThreadAttributeList$MH,"InitializeProcThreadAttributeList");
    }
    public static int InitializeProcThreadAttributeList ( Addressable lpAttributeList,  int dwAttributeCount,  int dwFlags,  Addressable lpSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$340.InitializeProcThreadAttributeList$MH, "InitializeProcThreadAttributeList");
        try {
            return (int)mh$.invokeExact(lpAttributeList.address(), dwAttributeCount, dwFlags, lpSize.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteProcThreadAttributeList$MH() {
        return RuntimeHelper.requireNonNull(constants$341.DeleteProcThreadAttributeList$MH,"DeleteProcThreadAttributeList");
    }
    public static void DeleteProcThreadAttributeList ( Addressable lpAttributeList) {
        var mh$ = RuntimeHelper.requireNonNull(constants$341.DeleteProcThreadAttributeList$MH, "DeleteProcThreadAttributeList");
        try {
            mh$.invokeExact(lpAttributeList.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessAffinityUpdateMode$MH() {
        return RuntimeHelper.requireNonNull(constants$341.SetProcessAffinityUpdateMode$MH,"SetProcessAffinityUpdateMode");
    }
    public static int SetProcessAffinityUpdateMode ( Addressable hProcess,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$341.SetProcessAffinityUpdateMode$MH, "SetProcessAffinityUpdateMode");
        try {
            return (int)mh$.invokeExact(hProcess.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryProcessAffinityUpdateMode$MH() {
        return RuntimeHelper.requireNonNull(constants$341.QueryProcessAffinityUpdateMode$MH,"QueryProcessAffinityUpdateMode");
    }
    public static int QueryProcessAffinityUpdateMode ( Addressable hProcess,  Addressable lpdwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$341.QueryProcessAffinityUpdateMode$MH, "QueryProcessAffinityUpdateMode");
        try {
            return (int)mh$.invokeExact(hProcess.address(), lpdwFlags.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateProcThreadAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$341.UpdateProcThreadAttribute$MH,"UpdateProcThreadAttribute");
    }
    public static int UpdateProcThreadAttribute ( Addressable lpAttributeList,  int dwFlags,  long Attribute,  Addressable lpValue,  long cbSize,  Addressable lpPreviousValue,  Addressable lpReturnSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$341.UpdateProcThreadAttribute$MH, "UpdateProcThreadAttribute");
        try {
            return (int)mh$.invokeExact(lpAttributeList.address(), dwFlags, Attribute, lpValue.address(), cbSize, lpPreviousValue.address(), lpReturnSize.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateProcessA$MH() {
        return RuntimeHelper.requireNonNull(constants$341.CreateProcessA$MH,"CreateProcessA");
    }
    public static int CreateProcessA ( Addressable lpApplicationName,  Addressable lpCommandLine,  Addressable lpProcessAttributes,  Addressable lpThreadAttributes,  int bInheritHandles,  int dwCreationFlags,  Addressable lpEnvironment,  Addressable lpCurrentDirectory,  Addressable lpStartupInfo,  Addressable lpProcessInformation) {
        var mh$ = RuntimeHelper.requireNonNull(constants$341.CreateProcessA$MH, "CreateProcessA");
        try {
            return (int)mh$.invokeExact(lpApplicationName.address(), lpCommandLine.address(), lpProcessAttributes.address(), lpThreadAttributes.address(), bInheritHandles, dwCreationFlags, lpEnvironment.address(), lpCurrentDirectory.address(), lpStartupInfo.address(), lpProcessInformation.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateProcessW$MH() {
        return RuntimeHelper.requireNonNull(constants$341.CreateProcessW$MH,"CreateProcessW");
    }
    public static int CreateProcessW ( Addressable lpApplicationName,  Addressable lpCommandLine,  Addressable lpProcessAttributes,  Addressable lpThreadAttributes,  int bInheritHandles,  int dwCreationFlags,  Addressable lpEnvironment,  Addressable lpCurrentDirectory,  Addressable lpStartupInfo,  Addressable lpProcessInformation) {
        var mh$ = RuntimeHelper.requireNonNull(constants$341.CreateProcessW$MH, "CreateProcessW");
        try {
            return (int)mh$.invokeExact(lpApplicationName.address(), lpCommandLine.address(), lpProcessAttributes.address(), lpThreadAttributes.address(), bInheritHandles, dwCreationFlags, lpEnvironment.address(), lpCurrentDirectory.address(), lpStartupInfo.address(), lpProcessInformation.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadIdealProcessorEx$MH() {
        return RuntimeHelper.requireNonNull(constants$342.GetThreadIdealProcessorEx$MH,"GetThreadIdealProcessorEx");
    }
    public static int GetThreadIdealProcessorEx ( Addressable hThread,  Addressable lpIdealProcessor) {
        var mh$ = RuntimeHelper.requireNonNull(constants$342.GetThreadIdealProcessorEx$MH, "GetThreadIdealProcessorEx");
        try {
            return (int)mh$.invokeExact(hThread.address(), lpIdealProcessor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentProcessorNumberEx$MH() {
        return RuntimeHelper.requireNonNull(constants$342.GetCurrentProcessorNumberEx$MH,"GetCurrentProcessorNumberEx");
    }
    public static void GetCurrentProcessorNumberEx ( Addressable ProcNumber) {
        var mh$ = RuntimeHelper.requireNonNull(constants$342.GetCurrentProcessorNumberEx$MH, "GetCurrentProcessorNumberEx");
        try {
            mh$.invokeExact(ProcNumber.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$342.GetCurrentProcess$MH,"GetCurrentProcess");
    }
    public static MemoryAddress GetCurrentProcess () {
        var mh$ = RuntimeHelper.requireNonNull(constants$342.GetCurrentProcess$MH, "GetCurrentProcess");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentProcessId$MH() {
        return RuntimeHelper.requireNonNull(constants$342.GetCurrentProcessId$MH,"GetCurrentProcessId");
    }
    public static int GetCurrentProcessId () {
        var mh$ = RuntimeHelper.requireNonNull(constants$342.GetCurrentProcessId$MH, "GetCurrentProcessId");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentThread$MH() {
        return RuntimeHelper.requireNonNull(constants$342.GetCurrentThread$MH,"GetCurrentThread");
    }
    public static MemoryAddress GetCurrentThread () {
        var mh$ = RuntimeHelper.requireNonNull(constants$342.GetCurrentThread$MH, "GetCurrentThread");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentThreadId$MH() {
        return RuntimeHelper.requireNonNull(constants$342.GetCurrentThreadId$MH,"GetCurrentThreadId");
    }
    public static int GetCurrentThreadId () {
        var mh$ = RuntimeHelper.requireNonNull(constants$342.GetCurrentThreadId$MH, "GetCurrentThreadId");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsProcessorFeaturePresent$MH() {
        return RuntimeHelper.requireNonNull(constants$343.IsProcessorFeaturePresent$MH,"IsProcessorFeaturePresent");
    }
    public static int IsProcessorFeaturePresent ( int ProcessorFeature) {
        var mh$ = RuntimeHelper.requireNonNull(constants$343.IsProcessorFeaturePresent$MH, "IsProcessorFeaturePresent");
        try {
            return (int)mh$.invokeExact(ProcessorFeature);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlushProcessWriteBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$343.FlushProcessWriteBuffers$MH,"FlushProcessWriteBuffers");
    }
    public static void FlushProcessWriteBuffers () {
        var mh$ = RuntimeHelper.requireNonNull(constants$343.FlushProcessWriteBuffers$MH, "FlushProcessWriteBuffers");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateThread$MH() {
        return RuntimeHelper.requireNonNull(constants$343.CreateThread$MH,"CreateThread");
    }
    public static MemoryAddress CreateThread ( Addressable lpThreadAttributes,  long dwStackSize,  Addressable lpStartAddress,  Addressable lpParameter,  int dwCreationFlags,  Addressable lpThreadId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$343.CreateThread$MH, "CreateThread");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpThreadAttributes.address(), dwStackSize, lpStartAddress.address(), lpParameter.address(), dwCreationFlags, lpThreadId.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadPriority$MH() {
        return RuntimeHelper.requireNonNull(constants$343.SetThreadPriority$MH,"SetThreadPriority");
    }
    public static int SetThreadPriority ( Addressable hThread,  int nPriority) {
        var mh$ = RuntimeHelper.requireNonNull(constants$343.SetThreadPriority$MH, "SetThreadPriority");
        try {
            return (int)mh$.invokeExact(hThread.address(), nPriority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadPriority$MH() {
        return RuntimeHelper.requireNonNull(constants$343.GetThreadPriority$MH,"GetThreadPriority");
    }
    public static int GetThreadPriority ( Addressable hThread) {
        var mh$ = RuntimeHelper.requireNonNull(constants$343.GetThreadPriority$MH, "GetThreadPriority");
        try {
            return (int)mh$.invokeExact(hThread.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExitThread$MH() {
        return RuntimeHelper.requireNonNull(constants$343.ExitThread$MH,"ExitThread");
    }
    public static void ExitThread ( int dwExitCode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$343.ExitThread$MH, "ExitThread");
        try {
            mh$.invokeExact(dwExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetExitCodeThread$MH() {
        return RuntimeHelper.requireNonNull(constants$344.GetExitCodeThread$MH,"GetExitCodeThread");
    }
    public static int GetExitCodeThread ( Addressable hThread,  Addressable lpExitCode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$344.GetExitCodeThread$MH, "GetExitCodeThread");
        try {
            return (int)mh$.invokeExact(hThread.address(), lpExitCode.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SuspendThread$MH() {
        return RuntimeHelper.requireNonNull(constants$344.SuspendThread$MH,"SuspendThread");
    }
    public static int SuspendThread ( Addressable hThread) {
        var mh$ = RuntimeHelper.requireNonNull(constants$344.SuspendThread$MH, "SuspendThread");
        try {
            return (int)mh$.invokeExact(hThread.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResumeThread$MH() {
        return RuntimeHelper.requireNonNull(constants$344.ResumeThread$MH,"ResumeThread");
    }
    public static int ResumeThread ( Addressable hThread) {
        var mh$ = RuntimeHelper.requireNonNull(constants$344.ResumeThread$MH, "ResumeThread");
        try {
            return (int)mh$.invokeExact(hThread.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TlsAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$344.TlsAlloc$MH,"TlsAlloc");
    }
    public static int TlsAlloc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$344.TlsAlloc$MH, "TlsAlloc");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TlsGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$344.TlsGetValue$MH,"TlsGetValue");
    }
    public static MemoryAddress TlsGetValue ( int dwTlsIndex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$344.TlsGetValue$MH, "TlsGetValue");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dwTlsIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TlsSetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$344.TlsSetValue$MH,"TlsSetValue");
    }
    public static int TlsSetValue ( int dwTlsIndex,  Addressable lpTlsValue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$344.TlsSetValue$MH, "TlsSetValue");
        try {
            return (int)mh$.invokeExact(dwTlsIndex, lpTlsValue.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TlsFree$MH() {
        return RuntimeHelper.requireNonNull(constants$345.TlsFree$MH,"TlsFree");
    }
    public static int TlsFree ( int dwTlsIndex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$345.TlsFree$MH, "TlsFree");
        try {
            return (int)mh$.invokeExact(dwTlsIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadIdealProcessorEx$MH() {
        return RuntimeHelper.requireNonNull(constants$345.SetThreadIdealProcessorEx$MH,"SetThreadIdealProcessorEx");
    }
    public static int SetThreadIdealProcessorEx ( Addressable hThread,  Addressable lpIdealProcessor,  Addressable lpPreviousIdealProcessor) {
        var mh$ = RuntimeHelper.requireNonNull(constants$345.SetThreadIdealProcessorEx$MH, "SetThreadIdealProcessorEx");
        try {
            return (int)mh$.invokeExact(hThread.address(), lpIdealProcessor.address(), lpPreviousIdealProcessor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessGroupAffinity$MH() {
        return RuntimeHelper.requireNonNull(constants$345.GetProcessGroupAffinity$MH,"GetProcessGroupAffinity");
    }
    public static int GetProcessGroupAffinity ( Addressable hProcess,  Addressable GroupCount,  Addressable GroupArray) {
        var mh$ = RuntimeHelper.requireNonNull(constants$345.GetProcessGroupAffinity$MH, "GetProcessGroupAffinity");
        try {
            return (int)mh$.invokeExact(hProcess.address(), GroupCount.address(), GroupArray.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessGroupAffinity$MH() {
        return RuntimeHelper.requireNonNull(constants$345.SetProcessGroupAffinity$MH,"SetProcessGroupAffinity");
    }
    public static int SetProcessGroupAffinity ( Addressable hProcess,  Addressable GroupAffinity,  Addressable PreviousGroupAffinity) {
        var mh$ = RuntimeHelper.requireNonNull(constants$345.SetProcessGroupAffinity$MH, "SetProcessGroupAffinity");
        try {
            return (int)mh$.invokeExact(hProcess.address(), GroupAffinity.address(), PreviousGroupAffinity.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadGroupAffinity$MH() {
        return RuntimeHelper.requireNonNull(constants$345.GetThreadGroupAffinity$MH,"GetThreadGroupAffinity");
    }
    public static int GetThreadGroupAffinity ( Addressable hThread,  Addressable GroupAffinity) {
        var mh$ = RuntimeHelper.requireNonNull(constants$345.GetThreadGroupAffinity$MH, "GetThreadGroupAffinity");
        try {
            return (int)mh$.invokeExact(hThread.address(), GroupAffinity.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadGroupAffinity$MH() {
        return RuntimeHelper.requireNonNull(constants$345.SetThreadGroupAffinity$MH,"SetThreadGroupAffinity");
    }
    public static int SetThreadGroupAffinity ( Addressable hThread,  Addressable GroupAffinity,  Addressable PreviousGroupAffinity) {
        var mh$ = RuntimeHelper.requireNonNull(constants$345.SetThreadGroupAffinity$MH, "SetThreadGroupAffinity");
        try {
            return (int)mh$.invokeExact(hThread.address(), GroupAffinity.address(), PreviousGroupAffinity.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryPerformanceCounter$MH() {
        return RuntimeHelper.requireNonNull(constants$346.QueryPerformanceCounter$MH,"QueryPerformanceCounter");
    }
    public static int QueryPerformanceCounter ( Addressable lpPerformanceCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$346.QueryPerformanceCounter$MH, "QueryPerformanceCounter");
        try {
            return (int)mh$.invokeExact(lpPerformanceCount.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryPerformanceFrequency$MH() {
        return RuntimeHelper.requireNonNull(constants$346.QueryPerformanceFrequency$MH,"QueryPerformanceFrequency");
    }
    public static int QueryPerformanceFrequency ( Addressable lpFrequency) {
        var mh$ = RuntimeHelper.requireNonNull(constants$346.QueryPerformanceFrequency$MH, "QueryPerformanceFrequency");
        try {
            return (int)mh$.invokeExact(lpFrequency.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryThreadCycleTime$MH() {
        return RuntimeHelper.requireNonNull(constants$346.QueryThreadCycleTime$MH,"QueryThreadCycleTime");
    }
    public static int QueryThreadCycleTime ( Addressable ThreadHandle,  Addressable CycleTime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$346.QueryThreadCycleTime$MH, "QueryThreadCycleTime");
        try {
            return (int)mh$.invokeExact(ThreadHandle.address(), CycleTime.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryProcessCycleTime$MH() {
        return RuntimeHelper.requireNonNull(constants$346.QueryProcessCycleTime$MH,"QueryProcessCycleTime");
    }
    public static int QueryProcessCycleTime ( Addressable ProcessHandle,  Addressable CycleTime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$346.QueryProcessCycleTime$MH, "QueryProcessCycleTime");
        try {
            return (int)mh$.invokeExact(ProcessHandle.address(), CycleTime.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryIdleProcessorCycleTime$MH() {
        return RuntimeHelper.requireNonNull(constants$346.QueryIdleProcessorCycleTime$MH,"QueryIdleProcessorCycleTime");
    }
    public static int QueryIdleProcessorCycleTime ( Addressable BufferLength,  Addressable ProcessorIdleCycleTime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$346.QueryIdleProcessorCycleTime$MH, "QueryIdleProcessorCycleTime");
        try {
            return (int)mh$.invokeExact(BufferLength.address(), ProcessorIdleCycleTime.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryIdleProcessorCycleTimeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$346.QueryIdleProcessorCycleTimeEx$MH,"QueryIdleProcessorCycleTimeEx");
    }
    public static int QueryIdleProcessorCycleTimeEx ( short Group,  Addressable BufferLength,  Addressable ProcessorIdleCycleTime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$346.QueryIdleProcessorCycleTimeEx$MH, "QueryIdleProcessorCycleTimeEx");
        try {
            return (int)mh$.invokeExact(Group, BufferLength.address(), ProcessorIdleCycleTime.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryInterruptTimePrecise$MH() {
        return RuntimeHelper.requireNonNull(constants$347.QueryInterruptTimePrecise$MH,"QueryInterruptTimePrecise");
    }
    public static void QueryInterruptTimePrecise ( Addressable lpInterruptTimePrecise) {
        var mh$ = RuntimeHelper.requireNonNull(constants$347.QueryInterruptTimePrecise$MH, "QueryInterruptTimePrecise");
        try {
            mh$.invokeExact(lpInterruptTimePrecise.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryUnbiasedInterruptTimePrecise$MH() {
        return RuntimeHelper.requireNonNull(constants$347.QueryUnbiasedInterruptTimePrecise$MH,"QueryUnbiasedInterruptTimePrecise");
    }
    public static void QueryUnbiasedInterruptTimePrecise ( Addressable lpUnbiasedInterruptTimePrecise) {
        var mh$ = RuntimeHelper.requireNonNull(constants$347.QueryUnbiasedInterruptTimePrecise$MH, "QueryUnbiasedInterruptTimePrecise");
        try {
            mh$.invokeExact(lpUnbiasedInterruptTimePrecise.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryInterruptTime$MH() {
        return RuntimeHelper.requireNonNull(constants$347.QueryInterruptTime$MH,"QueryInterruptTime");
    }
    public static void QueryInterruptTime ( Addressable lpInterruptTime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$347.QueryInterruptTime$MH, "QueryInterruptTime");
        try {
            mh$.invokeExact(lpInterruptTime.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryUnbiasedInterruptTime$MH() {
        return RuntimeHelper.requireNonNull(constants$347.QueryUnbiasedInterruptTime$MH,"QueryUnbiasedInterruptTime");
    }
    public static int QueryUnbiasedInterruptTime ( Addressable UnbiasedTime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$347.QueryUnbiasedInterruptTime$MH, "QueryUnbiasedInterruptTime");
        try {
            return (int)mh$.invokeExact(UnbiasedTime.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryAuxiliaryCounterFrequency$MH() {
        return RuntimeHelper.requireNonNull(constants$347.QueryAuxiliaryCounterFrequency$MH,"QueryAuxiliaryCounterFrequency");
    }
    public static int QueryAuxiliaryCounterFrequency ( Addressable lpAuxiliaryCounterFrequency) {
        var mh$ = RuntimeHelper.requireNonNull(constants$347.QueryAuxiliaryCounterFrequency$MH, "QueryAuxiliaryCounterFrequency");
        try {
            return (int)mh$.invokeExact(lpAuxiliaryCounterFrequency.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ConvertAuxiliaryCounterToPerformanceCounter$MH() {
        return RuntimeHelper.requireNonNull(constants$347.ConvertAuxiliaryCounterToPerformanceCounter$MH,"ConvertAuxiliaryCounterToPerformanceCounter");
    }
    public static int ConvertAuxiliaryCounterToPerformanceCounter ( long ullAuxiliaryCounterValue,  Addressable lpPerformanceCounterValue,  Addressable lpConversionError) {
        var mh$ = RuntimeHelper.requireNonNull(constants$347.ConvertAuxiliaryCounterToPerformanceCounter$MH, "ConvertAuxiliaryCounterToPerformanceCounter");
        try {
            return (int)mh$.invokeExact(ullAuxiliaryCounterValue, lpPerformanceCounterValue.address(), lpConversionError.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ConvertPerformanceCounterToAuxiliaryCounter$MH() {
        return RuntimeHelper.requireNonNull(constants$348.ConvertPerformanceCounterToAuxiliaryCounter$MH,"ConvertPerformanceCounterToAuxiliaryCounter");
    }
    public static int ConvertPerformanceCounterToAuxiliaryCounter ( long ullPerformanceCounterValue,  Addressable lpAuxiliaryCounterValue,  Addressable lpConversionError) {
        var mh$ = RuntimeHelper.requireNonNull(constants$348.ConvertPerformanceCounterToAuxiliaryCounter$MH, "ConvertPerformanceCounterToAuxiliaryCounter");
        try {
            return (int)mh$.invokeExact(ullPerformanceCounterValue, lpAuxiliaryCounterValue.address(), lpConversionError.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheck$MH() {
        return RuntimeHelper.requireNonNull(constants$348.AccessCheck$MH,"AccessCheck");
    }
    public static int AccessCheck ( Addressable pSecurityDescriptor,  Addressable ClientToken,  int DesiredAccess,  Addressable GenericMapping,  Addressable PrivilegeSet,  Addressable PrivilegeSetLength,  Addressable GrantedAccess,  Addressable AccessStatus) {
        var mh$ = RuntimeHelper.requireNonNull(constants$348.AccessCheck$MH, "AccessCheck");
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor.address(), ClientToken.address(), DesiredAccess, GenericMapping.address(), PrivilegeSet.address(), PrivilegeSetLength.address(), GrantedAccess.address(), AccessStatus.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckAndAuditAlarmW$MH() {
        return RuntimeHelper.requireNonNull(constants$348.AccessCheckAndAuditAlarmW$MH,"AccessCheckAndAuditAlarmW");
    }
    public static int AccessCheckAndAuditAlarmW ( Addressable SubsystemName,  Addressable HandleId,  Addressable ObjectTypeName,  Addressable ObjectName,  Addressable SecurityDescriptor,  int DesiredAccess,  Addressable GenericMapping,  int ObjectCreation,  Addressable GrantedAccess,  Addressable AccessStatus,  Addressable pfGenerateOnClose) {
        var mh$ = RuntimeHelper.requireNonNull(constants$348.AccessCheckAndAuditAlarmW$MH, "AccessCheckAndAuditAlarmW");
        try {
            return (int)mh$.invokeExact(SubsystemName.address(), HandleId.address(), ObjectTypeName.address(), ObjectName.address(), SecurityDescriptor.address(), DesiredAccess, GenericMapping.address(), ObjectCreation, GrantedAccess.address(), AccessStatus.address(), pfGenerateOnClose.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckByType$MH() {
        return RuntimeHelper.requireNonNull(constants$348.AccessCheckByType$MH,"AccessCheckByType");
    }
    public static int AccessCheckByType ( Addressable pSecurityDescriptor,  Addressable PrincipalSelfSid,  Addressable ClientToken,  int DesiredAccess,  Addressable ObjectTypeList,  int ObjectTypeListLength,  Addressable GenericMapping,  Addressable PrivilegeSet,  Addressable PrivilegeSetLength,  Addressable GrantedAccess,  Addressable AccessStatus) {
        var mh$ = RuntimeHelper.requireNonNull(constants$348.AccessCheckByType$MH, "AccessCheckByType");
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor.address(), PrincipalSelfSid.address(), ClientToken.address(), DesiredAccess, ObjectTypeList.address(), ObjectTypeListLength, GenericMapping.address(), PrivilegeSet.address(), PrivilegeSetLength.address(), GrantedAccess.address(), AccessStatus.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckByTypeResultList$MH() {
        return RuntimeHelper.requireNonNull(constants$348.AccessCheckByTypeResultList$MH,"AccessCheckByTypeResultList");
    }
    public static int AccessCheckByTypeResultList ( Addressable pSecurityDescriptor,  Addressable PrincipalSelfSid,  Addressable ClientToken,  int DesiredAccess,  Addressable ObjectTypeList,  int ObjectTypeListLength,  Addressable GenericMapping,  Addressable PrivilegeSet,  Addressable PrivilegeSetLength,  Addressable GrantedAccessList,  Addressable AccessStatusList) {
        var mh$ = RuntimeHelper.requireNonNull(constants$348.AccessCheckByTypeResultList$MH, "AccessCheckByTypeResultList");
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor.address(), PrincipalSelfSid.address(), ClientToken.address(), DesiredAccess, ObjectTypeList.address(), ObjectTypeListLength, GenericMapping.address(), PrivilegeSet.address(), PrivilegeSetLength.address(), GrantedAccessList.address(), AccessStatusList.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckByTypeAndAuditAlarmW$MH() {
        return RuntimeHelper.requireNonNull(constants$348.AccessCheckByTypeAndAuditAlarmW$MH,"AccessCheckByTypeAndAuditAlarmW");
    }
    public static int AccessCheckByTypeAndAuditAlarmW ( Addressable SubsystemName,  Addressable HandleId,  Addressable ObjectTypeName,  Addressable ObjectName,  Addressable SecurityDescriptor,  Addressable PrincipalSelfSid,  int DesiredAccess,  int AuditType,  int Flags,  Addressable ObjectTypeList,  int ObjectTypeListLength,  Addressable GenericMapping,  int ObjectCreation,  Addressable GrantedAccess,  Addressable AccessStatus,  Addressable pfGenerateOnClose) {
        var mh$ = RuntimeHelper.requireNonNull(constants$348.AccessCheckByTypeAndAuditAlarmW$MH, "AccessCheckByTypeAndAuditAlarmW");
        try {
            return (int)mh$.invokeExact(SubsystemName.address(), HandleId.address(), ObjectTypeName.address(), ObjectName.address(), SecurityDescriptor.address(), PrincipalSelfSid.address(), DesiredAccess, AuditType, Flags, ObjectTypeList.address(), ObjectTypeListLength, GenericMapping.address(), ObjectCreation, GrantedAccess.address(), AccessStatus.address(), pfGenerateOnClose.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckByTypeResultListAndAuditAlarmW$MH() {
        return RuntimeHelper.requireNonNull(constants$349.AccessCheckByTypeResultListAndAuditAlarmW$MH,"AccessCheckByTypeResultListAndAuditAlarmW");
    }
    public static int AccessCheckByTypeResultListAndAuditAlarmW ( Addressable SubsystemName,  Addressable HandleId,  Addressable ObjectTypeName,  Addressable ObjectName,  Addressable SecurityDescriptor,  Addressable PrincipalSelfSid,  int DesiredAccess,  int AuditType,  int Flags,  Addressable ObjectTypeList,  int ObjectTypeListLength,  Addressable GenericMapping,  int ObjectCreation,  Addressable GrantedAccessList,  Addressable AccessStatusList,  Addressable pfGenerateOnClose) {
        var mh$ = RuntimeHelper.requireNonNull(constants$349.AccessCheckByTypeResultListAndAuditAlarmW$MH, "AccessCheckByTypeResultListAndAuditAlarmW");
        try {
            return (int)mh$.invokeExact(SubsystemName.address(), HandleId.address(), ObjectTypeName.address(), ObjectName.address(), SecurityDescriptor.address(), PrincipalSelfSid.address(), DesiredAccess, AuditType, Flags, ObjectTypeList.address(), ObjectTypeListLength, GenericMapping.address(), ObjectCreation, GrantedAccessList.address(), AccessStatusList.address(), pfGenerateOnClose.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckByTypeResultListAndAuditAlarmByHandleW$MH() {
        return RuntimeHelper.requireNonNull(constants$349.AccessCheckByTypeResultListAndAuditAlarmByHandleW$MH,"AccessCheckByTypeResultListAndAuditAlarmByHandleW");
    }
    public static int AccessCheckByTypeResultListAndAuditAlarmByHandleW ( Addressable SubsystemName,  Addressable HandleId,  Addressable ClientToken,  Addressable ObjectTypeName,  Addressable ObjectName,  Addressable SecurityDescriptor,  Addressable PrincipalSelfSid,  int DesiredAccess,  int AuditType,  int Flags,  Addressable ObjectTypeList,  int ObjectTypeListLength,  Addressable GenericMapping,  int ObjectCreation,  Addressable GrantedAccessList,  Addressable AccessStatusList,  Addressable pfGenerateOnClose) {
        var mh$ = RuntimeHelper.requireNonNull(constants$349.AccessCheckByTypeResultListAndAuditAlarmByHandleW$MH, "AccessCheckByTypeResultListAndAuditAlarmByHandleW");
        try {
            return (int)mh$.invokeExact(SubsystemName.address(), HandleId.address(), ClientToken.address(), ObjectTypeName.address(), ObjectName.address(), SecurityDescriptor.address(), PrincipalSelfSid.address(), DesiredAccess, AuditType, Flags, ObjectTypeList.address(), ObjectTypeListLength, GenericMapping.address(), ObjectCreation, GrantedAccessList.address(), AccessStatusList.address(), pfGenerateOnClose.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAccessAllowedObjectAce$MH() {
        return RuntimeHelper.requireNonNull(constants$349.AddAccessAllowedObjectAce$MH,"AddAccessAllowedObjectAce");
    }
    public static int AddAccessAllowedObjectAce ( Addressable pAcl,  int dwAceRevision,  int AceFlags,  int AccessMask,  Addressable ObjectTypeGuid,  Addressable InheritedObjectTypeGuid,  Addressable pSid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$349.AddAccessAllowedObjectAce$MH, "AddAccessAllowedObjectAce");
        try {
            return (int)mh$.invokeExact(pAcl.address(), dwAceRevision, AceFlags, AccessMask, ObjectTypeGuid.address(), InheritedObjectTypeGuid.address(), pSid.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAccessDeniedAce$MH() {
        return RuntimeHelper.requireNonNull(constants$349.AddAccessDeniedAce$MH,"AddAccessDeniedAce");
    }
    public static int AddAccessDeniedAce ( Addressable pAcl,  int dwAceRevision,  int AccessMask,  Addressable pSid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$349.AddAccessDeniedAce$MH, "AddAccessDeniedAce");
        try {
            return (int)mh$.invokeExact(pAcl.address(), dwAceRevision, AccessMask, pSid.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAccessDeniedAceEx$MH() {
        return RuntimeHelper.requireNonNull(constants$349.AddAccessDeniedAceEx$MH,"AddAccessDeniedAceEx");
    }
    public static int AddAccessDeniedAceEx ( Addressable pAcl,  int dwAceRevision,  int AceFlags,  int AccessMask,  Addressable pSid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$349.AddAccessDeniedAceEx$MH, "AddAccessDeniedAceEx");
        try {
            return (int)mh$.invokeExact(pAcl.address(), dwAceRevision, AceFlags, AccessMask, pSid.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAccessDeniedObjectAce$MH() {
        return RuntimeHelper.requireNonNull(constants$349.AddAccessDeniedObjectAce$MH,"AddAccessDeniedObjectAce");
    }
    public static int AddAccessDeniedObjectAce ( Addressable pAcl,  int dwAceRevision,  int AceFlags,  int AccessMask,  Addressable ObjectTypeGuid,  Addressable InheritedObjectTypeGuid,  Addressable pSid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$349.AddAccessDeniedObjectAce$MH, "AddAccessDeniedObjectAce");
        try {
            return (int)mh$.invokeExact(pAcl.address(), dwAceRevision, AceFlags, AccessMask, ObjectTypeGuid.address(), InheritedObjectTypeGuid.address(), pSid.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAuditAccessAce$MH() {
        return RuntimeHelper.requireNonNull(constants$350.AddAuditAccessAce$MH,"AddAuditAccessAce");
    }
    public static int AddAuditAccessAce ( Addressable pAcl,  int dwAceRevision,  int dwAccessMask,  Addressable pSid,  int bAuditSuccess,  int bAuditFailure) {
        var mh$ = RuntimeHelper.requireNonNull(constants$350.AddAuditAccessAce$MH, "AddAuditAccessAce");
        try {
            return (int)mh$.invokeExact(pAcl.address(), dwAceRevision, dwAccessMask, pSid.address(), bAuditSuccess, bAuditFailure);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAuditAccessAceEx$MH() {
        return RuntimeHelper.requireNonNull(constants$350.AddAuditAccessAceEx$MH,"AddAuditAccessAceEx");
    }
    public static int AddAuditAccessAceEx ( Addressable pAcl,  int dwAceRevision,  int AceFlags,  int dwAccessMask,  Addressable pSid,  int bAuditSuccess,  int bAuditFailure) {
        var mh$ = RuntimeHelper.requireNonNull(constants$350.AddAuditAccessAceEx$MH, "AddAuditAccessAceEx");
        try {
            return (int)mh$.invokeExact(pAcl.address(), dwAceRevision, AceFlags, dwAccessMask, pSid.address(), bAuditSuccess, bAuditFailure);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAuditAccessObjectAce$MH() {
        return RuntimeHelper.requireNonNull(constants$350.AddAuditAccessObjectAce$MH,"AddAuditAccessObjectAce");
    }
    public static int AddAuditAccessObjectAce ( Addressable pAcl,  int dwAceRevision,  int AceFlags,  int AccessMask,  Addressable ObjectTypeGuid,  Addressable InheritedObjectTypeGuid,  Addressable pSid,  int bAuditSuccess,  int bAuditFailure) {
        var mh$ = RuntimeHelper.requireNonNull(constants$350.AddAuditAccessObjectAce$MH, "AddAuditAccessObjectAce");
        try {
            return (int)mh$.invokeExact(pAcl.address(), dwAceRevision, AceFlags, AccessMask, ObjectTypeGuid.address(), InheritedObjectTypeGuid.address(), pSid.address(), bAuditSuccess, bAuditFailure);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AreAllAccessesGranted$MH() {
        return RuntimeHelper.requireNonNull(constants$350.AreAllAccessesGranted$MH,"AreAllAccessesGranted");
    }
    public static int AreAllAccessesGranted ( int GrantedAccess,  int DesiredAccess) {
        var mh$ = RuntimeHelper.requireNonNull(constants$350.AreAllAccessesGranted$MH, "AreAllAccessesGranted");
        try {
            return (int)mh$.invokeExact(GrantedAccess, DesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AreAnyAccessesGranted$MH() {
        return RuntimeHelper.requireNonNull(constants$350.AreAnyAccessesGranted$MH,"AreAnyAccessesGranted");
    }
    public static int AreAnyAccessesGranted ( int GrantedAccess,  int DesiredAccess) {
        var mh$ = RuntimeHelper.requireNonNull(constants$350.AreAnyAccessesGranted$MH, "AreAnyAccessesGranted");
        try {
            return (int)mh$.invokeExact(GrantedAccess, DesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ConvertToAutoInheritPrivateObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$350.ConvertToAutoInheritPrivateObjectSecurity$MH,"ConvertToAutoInheritPrivateObjectSecurity");
    }
    public static int ConvertToAutoInheritPrivateObjectSecurity ( Addressable ParentDescriptor,  Addressable CurrentSecurityDescriptor,  Addressable NewSecurityDescriptor,  Addressable ObjectType,  byte IsDirectoryObject,  Addressable GenericMapping) {
        var mh$ = RuntimeHelper.requireNonNull(constants$350.ConvertToAutoInheritPrivateObjectSecurity$MH, "ConvertToAutoInheritPrivateObjectSecurity");
        try {
            return (int)mh$.invokeExact(ParentDescriptor.address(), CurrentSecurityDescriptor.address(), NewSecurityDescriptor.address(), ObjectType.address(), IsDirectoryObject, GenericMapping.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePrivateObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$351.CreatePrivateObjectSecurity$MH,"CreatePrivateObjectSecurity");
    }
    public static int CreatePrivateObjectSecurity ( Addressable ParentDescriptor,  Addressable CreatorDescriptor,  Addressable NewDescriptor,  int IsDirectoryObject,  Addressable Token,  Addressable GenericMapping) {
        var mh$ = RuntimeHelper.requireNonNull(constants$351.CreatePrivateObjectSecurity$MH, "CreatePrivateObjectSecurity");
        try {
            return (int)mh$.invokeExact(ParentDescriptor.address(), CreatorDescriptor.address(), NewDescriptor.address(), IsDirectoryObject, Token.address(), GenericMapping.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePrivateObjectSecurityEx$MH() {
        return RuntimeHelper.requireNonNull(constants$351.CreatePrivateObjectSecurityEx$MH,"CreatePrivateObjectSecurityEx");
    }
    public static int CreatePrivateObjectSecurityEx ( Addressable ParentDescriptor,  Addressable CreatorDescriptor,  Addressable NewDescriptor,  Addressable ObjectType,  int IsContainerObject,  int AutoInheritFlags,  Addressable Token,  Addressable GenericMapping) {
        var mh$ = RuntimeHelper.requireNonNull(constants$351.CreatePrivateObjectSecurityEx$MH, "CreatePrivateObjectSecurityEx");
        try {
            return (int)mh$.invokeExact(ParentDescriptor.address(), CreatorDescriptor.address(), NewDescriptor.address(), ObjectType.address(), IsContainerObject, AutoInheritFlags, Token.address(), GenericMapping.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


