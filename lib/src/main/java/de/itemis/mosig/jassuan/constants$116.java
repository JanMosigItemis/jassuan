// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$116 {

    static final FunctionDescriptor isalnum$FUNC = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final MethodHandle isalnum$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "isalnum",
        "(I)I",
        constants$116.isalnum$FUNC, false
    );
    static final FunctionDescriptor _isalnum_l$FUNC = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final MethodHandle _isalnum_l$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "_isalnum_l",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        constants$116._isalnum_l$FUNC, false
    );
    static final FunctionDescriptor isprint$FUNC = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final MethodHandle isprint$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "isprint",
        "(I)I",
        constants$116.isprint$FUNC, false
    );
    static final FunctionDescriptor _isprint_l$FUNC = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final MethodHandle _isprint_l$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "_isprint_l",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        constants$116._isprint_l$FUNC, false
    );
    static final FunctionDescriptor isgraph$FUNC = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final MethodHandle isgraph$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "isgraph",
        "(I)I",
        constants$116.isgraph$FUNC, false
    );
    static final FunctionDescriptor _isgraph_l$FUNC = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final MethodHandle _isgraph_l$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "_isgraph_l",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        constants$116._isgraph_l$FUNC, false
    );
}


