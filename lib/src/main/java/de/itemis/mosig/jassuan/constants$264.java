// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$264 {

    static final MemoryLayout GUID_PROCESSOR_IDLE_TIME_CHECK$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_IDLE_TIME_CHECK$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "GUID_PROCESSOR_IDLE_TIME_CHECK", constants$264.GUID_PROCESSOR_IDLE_TIME_CHECK$LAYOUT);
    static final MemoryLayout GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD", constants$264.GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD$LAYOUT);
    static final MemoryLayout GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD", constants$264.GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD$LAYOUT);
    static final MemoryLayout GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD", constants$264.GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD$LAYOUT);
    static final MemoryLayout GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD", constants$264.GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD$LAYOUT);
    static final MemoryLayout GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY", constants$264.GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY$LAYOUT);
}


