// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class tagEMRPOLYDRAW16 {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr"),
        MemoryLayout.structLayout(
            C_LONG.withName("left"),
            C_LONG.withName("top"),
            C_LONG.withName("right"),
            C_LONG.withName("bottom")
        ).withName("rclBounds"),
        C_LONG.withName("cpts"),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            C_SHORT.withName("x"),
            C_SHORT.withName("y")
        ).withName("tagPOINTS")).withName("apts"),
        MemoryLayout.sequenceLayout(1, C_CHAR).withName("abTypes"),
        MemoryLayout.paddingLayout(24)
    ).withName("tagEMRPOLYDRAW16");
    public static MemoryLayout $LAYOUT() {
        return tagEMRPOLYDRAW16.$struct$LAYOUT;
    }
    public static MemorySegment emr$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment rclBounds$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    static final VarHandle cpts$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cpts"));
    public static VarHandle cpts$VH() {
        return tagEMRPOLYDRAW16.cpts$VH;
    }
    public static int cpts$get(MemorySegment seg) {
        return (int)tagEMRPOLYDRAW16.cpts$VH.get(seg);
    }
    public static void cpts$set( MemorySegment seg, int x) {
        tagEMRPOLYDRAW16.cpts$VH.set(seg, x);
    }
    public static int cpts$get(MemorySegment seg, long index) {
        return (int)tagEMRPOLYDRAW16.cpts$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cpts$set(MemorySegment seg, long index, int x) {
        tagEMRPOLYDRAW16.cpts$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment apts$slice(MemorySegment seg) {
        return seg.asSlice(28, 4);
    }
    public static MemorySegment abTypes$slice(MemorySegment seg) {
        return seg.asSlice(32, 1);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


