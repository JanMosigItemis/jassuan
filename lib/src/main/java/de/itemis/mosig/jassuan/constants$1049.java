// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$1049 {

    static final FunctionDescriptor CreatePointerMoniker$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle CreatePointerMoniker$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CreatePointerMoniker",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$1049.CreatePointerMoniker$FUNC, false
    );
    static final FunctionDescriptor CreateObjrefMoniker$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle CreateObjrefMoniker$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CreateObjrefMoniker",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$1049.CreateObjrefMoniker$FUNC, false
    );
    static final FunctionDescriptor CoInstall$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle CoInstall$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CoInstall",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$1049.CoInstall$FUNC, false
    );
    static final FunctionDescriptor GetRunningObjectTable$FUNC = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle GetRunningObjectTable$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "GetRunningObjectTable",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        constants$1049.GetRunningObjectTable$FUNC, false
    );
    static final MemoryLayout IID_IOleAdviseHolder$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment IID_IOleAdviseHolder$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "IID_IOleAdviseHolder", constants$1049.IID_IOleAdviseHolder$LAYOUT);
    static final MemoryLayout IID_IOleCache$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment IID_IOleCache$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "IID_IOleCache", constants$1049.IID_IOleCache$LAYOUT);
}


