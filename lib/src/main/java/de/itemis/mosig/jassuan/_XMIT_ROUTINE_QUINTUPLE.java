// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _XMIT_ROUTINE_QUINTUPLE {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("pfnTranslateToXmit"),
        C_POINTER.withName("pfnTranslateFromXmit"),
        C_POINTER.withName("pfnFreeXmit"),
        C_POINTER.withName("pfnFreeInst")
    ).withName("_XMIT_ROUTINE_QUINTUPLE");
    public static MemoryLayout $LAYOUT() {
        return _XMIT_ROUTINE_QUINTUPLE.$struct$LAYOUT;
    }
    static final VarHandle pfnTranslateToXmit$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnTranslateToXmit")));
    public static VarHandle pfnTranslateToXmit$VH() {
        return _XMIT_ROUTINE_QUINTUPLE.pfnTranslateToXmit$VH;
    }
    public static MemoryAddress pfnTranslateToXmit$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_XMIT_ROUTINE_QUINTUPLE.pfnTranslateToXmit$VH.get(seg);
    }
    public static void pfnTranslateToXmit$set( MemorySegment seg, MemoryAddress x) {
        _XMIT_ROUTINE_QUINTUPLE.pfnTranslateToXmit$VH.set(seg, x);
    }
    public static MemoryAddress pfnTranslateToXmit$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_XMIT_ROUTINE_QUINTUPLE.pfnTranslateToXmit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnTranslateToXmit$set(MemorySegment seg, long index, MemoryAddress x) {
        _XMIT_ROUTINE_QUINTUPLE.pfnTranslateToXmit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static XMIT_HELPER_ROUTINE pfnTranslateToXmit (MemorySegment segment) {
        return XMIT_HELPER_ROUTINE.ofAddress(pfnTranslateToXmit$get(segment));
    }
    static final VarHandle pfnTranslateFromXmit$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnTranslateFromXmit")));
    public static VarHandle pfnTranslateFromXmit$VH() {
        return _XMIT_ROUTINE_QUINTUPLE.pfnTranslateFromXmit$VH;
    }
    public static MemoryAddress pfnTranslateFromXmit$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_XMIT_ROUTINE_QUINTUPLE.pfnTranslateFromXmit$VH.get(seg);
    }
    public static void pfnTranslateFromXmit$set( MemorySegment seg, MemoryAddress x) {
        _XMIT_ROUTINE_QUINTUPLE.pfnTranslateFromXmit$VH.set(seg, x);
    }
    public static MemoryAddress pfnTranslateFromXmit$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_XMIT_ROUTINE_QUINTUPLE.pfnTranslateFromXmit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnTranslateFromXmit$set(MemorySegment seg, long index, MemoryAddress x) {
        _XMIT_ROUTINE_QUINTUPLE.pfnTranslateFromXmit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static XMIT_HELPER_ROUTINE pfnTranslateFromXmit (MemorySegment segment) {
        return XMIT_HELPER_ROUTINE.ofAddress(pfnTranslateFromXmit$get(segment));
    }
    static final VarHandle pfnFreeXmit$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnFreeXmit")));
    public static VarHandle pfnFreeXmit$VH() {
        return _XMIT_ROUTINE_QUINTUPLE.pfnFreeXmit$VH;
    }
    public static MemoryAddress pfnFreeXmit$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_XMIT_ROUTINE_QUINTUPLE.pfnFreeXmit$VH.get(seg);
    }
    public static void pfnFreeXmit$set( MemorySegment seg, MemoryAddress x) {
        _XMIT_ROUTINE_QUINTUPLE.pfnFreeXmit$VH.set(seg, x);
    }
    public static MemoryAddress pfnFreeXmit$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_XMIT_ROUTINE_QUINTUPLE.pfnFreeXmit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnFreeXmit$set(MemorySegment seg, long index, MemoryAddress x) {
        _XMIT_ROUTINE_QUINTUPLE.pfnFreeXmit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static XMIT_HELPER_ROUTINE pfnFreeXmit (MemorySegment segment) {
        return XMIT_HELPER_ROUTINE.ofAddress(pfnFreeXmit$get(segment));
    }
    static final VarHandle pfnFreeInst$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnFreeInst")));
    public static VarHandle pfnFreeInst$VH() {
        return _XMIT_ROUTINE_QUINTUPLE.pfnFreeInst$VH;
    }
    public static MemoryAddress pfnFreeInst$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_XMIT_ROUTINE_QUINTUPLE.pfnFreeInst$VH.get(seg);
    }
    public static void pfnFreeInst$set( MemorySegment seg, MemoryAddress x) {
        _XMIT_ROUTINE_QUINTUPLE.pfnFreeInst$VH.set(seg, x);
    }
    public static MemoryAddress pfnFreeInst$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_XMIT_ROUTINE_QUINTUPLE.pfnFreeInst$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnFreeInst$set(MemorySegment seg, long index, MemoryAddress x) {
        _XMIT_ROUTINE_QUINTUPLE.pfnFreeInst$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static XMIT_HELPER_ROUTINE pfnFreeInst (MemorySegment segment) {
        return XMIT_HELPER_ROUTINE.ofAddress(pfnFreeInst$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


