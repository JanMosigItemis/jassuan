// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class ILayoutStorageVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("LayoutScript"),
        C_POINTER.withName("BeginMonitor"),
        C_POINTER.withName("EndMonitor"),
        C_POINTER.withName("ReLayoutDocfile"),
        C_POINTER.withName("ReLayoutDocfileOnILockBytes")
    ).withName("ILayoutStorageVtbl");
    public static MemoryLayout $LAYOUT() {
        return ILayoutStorageVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ILayoutStorageVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, ILayoutStorageVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, ILayoutStorageVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ILayoutStorageVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return ILayoutStorageVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ILayoutStorageVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        ILayoutStorageVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ILayoutStorageVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        ILayoutStorageVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ILayoutStorageVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, ILayoutStorageVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, ILayoutStorageVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)ILayoutStorageVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return ILayoutStorageVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ILayoutStorageVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        ILayoutStorageVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ILayoutStorageVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        ILayoutStorageVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ILayoutStorageVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, ILayoutStorageVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, ILayoutStorageVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)ILayoutStorageVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return ILayoutStorageVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ILayoutStorageVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        ILayoutStorageVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ILayoutStorageVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        ILayoutStorageVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor LayoutScript$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final MethodHandle LayoutScript$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        ILayoutStorageVtbl.LayoutScript$FUNC, false
    );
    public interface LayoutScript {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, int x3);
        static MemoryAddress allocate(LayoutScript fi) {
            return RuntimeHelper.upcallStub(LayoutScript.class, fi, ILayoutStorageVtbl.LayoutScript$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I");
        }
        static MemoryAddress allocate(LayoutScript fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(LayoutScript.class, fi, ILayoutStorageVtbl.LayoutScript$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I", scope);
        }
        static LayoutScript ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, int x3) -> {
                try {
                    return (int)ILayoutStorageVtbl.LayoutScript$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle LayoutScript$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("LayoutScript")));
    public static VarHandle LayoutScript$VH() {
        return ILayoutStorageVtbl.LayoutScript$VH;
    }
    public static MemoryAddress LayoutScript$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ILayoutStorageVtbl.LayoutScript$VH.get(seg);
    }
    public static void LayoutScript$set( MemorySegment seg, MemoryAddress x) {
        ILayoutStorageVtbl.LayoutScript$VH.set(seg, x);
    }
    public static MemoryAddress LayoutScript$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ILayoutStorageVtbl.LayoutScript$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LayoutScript$set(MemorySegment seg, long index, MemoryAddress x) {
        ILayoutStorageVtbl.LayoutScript$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static LayoutScript LayoutScript (MemorySegment segment) {
        return LayoutScript.ofAddress(LayoutScript$get(segment));
    }
    static final FunctionDescriptor BeginMonitor$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle BeginMonitor$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ILayoutStorageVtbl.BeginMonitor$FUNC, false
    );
    public interface BeginMonitor {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(BeginMonitor fi) {
            return RuntimeHelper.upcallStub(BeginMonitor.class, fi, ILayoutStorageVtbl.BeginMonitor$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(BeginMonitor fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(BeginMonitor.class, fi, ILayoutStorageVtbl.BeginMonitor$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static BeginMonitor ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)ILayoutStorageVtbl.BeginMonitor$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle BeginMonitor$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("BeginMonitor")));
    public static VarHandle BeginMonitor$VH() {
        return ILayoutStorageVtbl.BeginMonitor$VH;
    }
    public static MemoryAddress BeginMonitor$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ILayoutStorageVtbl.BeginMonitor$VH.get(seg);
    }
    public static void BeginMonitor$set( MemorySegment seg, MemoryAddress x) {
        ILayoutStorageVtbl.BeginMonitor$VH.set(seg, x);
    }
    public static MemoryAddress BeginMonitor$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ILayoutStorageVtbl.BeginMonitor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BeginMonitor$set(MemorySegment seg, long index, MemoryAddress x) {
        ILayoutStorageVtbl.BeginMonitor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static BeginMonitor BeginMonitor (MemorySegment segment) {
        return BeginMonitor.ofAddress(BeginMonitor$get(segment));
    }
    static final FunctionDescriptor EndMonitor$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle EndMonitor$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ILayoutStorageVtbl.EndMonitor$FUNC, false
    );
    public interface EndMonitor {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(EndMonitor fi) {
            return RuntimeHelper.upcallStub(EndMonitor.class, fi, ILayoutStorageVtbl.EndMonitor$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(EndMonitor fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(EndMonitor.class, fi, ILayoutStorageVtbl.EndMonitor$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static EndMonitor ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)ILayoutStorageVtbl.EndMonitor$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle EndMonitor$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("EndMonitor")));
    public static VarHandle EndMonitor$VH() {
        return ILayoutStorageVtbl.EndMonitor$VH;
    }
    public static MemoryAddress EndMonitor$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ILayoutStorageVtbl.EndMonitor$VH.get(seg);
    }
    public static void EndMonitor$set( MemorySegment seg, MemoryAddress x) {
        ILayoutStorageVtbl.EndMonitor$VH.set(seg, x);
    }
    public static MemoryAddress EndMonitor$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ILayoutStorageVtbl.EndMonitor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EndMonitor$set(MemorySegment seg, long index, MemoryAddress x) {
        ILayoutStorageVtbl.EndMonitor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static EndMonitor EndMonitor (MemorySegment segment) {
        return EndMonitor.ofAddress(EndMonitor$get(segment));
    }
    static final FunctionDescriptor ReLayoutDocfile$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle ReLayoutDocfile$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ILayoutStorageVtbl.ReLayoutDocfile$FUNC, false
    );
    public interface ReLayoutDocfile {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(ReLayoutDocfile fi) {
            return RuntimeHelper.upcallStub(ReLayoutDocfile.class, fi, ILayoutStorageVtbl.ReLayoutDocfile$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(ReLayoutDocfile fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(ReLayoutDocfile.class, fi, ILayoutStorageVtbl.ReLayoutDocfile$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static ReLayoutDocfile ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)ILayoutStorageVtbl.ReLayoutDocfile$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReLayoutDocfile$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReLayoutDocfile")));
    public static VarHandle ReLayoutDocfile$VH() {
        return ILayoutStorageVtbl.ReLayoutDocfile$VH;
    }
    public static MemoryAddress ReLayoutDocfile$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ILayoutStorageVtbl.ReLayoutDocfile$VH.get(seg);
    }
    public static void ReLayoutDocfile$set( MemorySegment seg, MemoryAddress x) {
        ILayoutStorageVtbl.ReLayoutDocfile$VH.set(seg, x);
    }
    public static MemoryAddress ReLayoutDocfile$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ILayoutStorageVtbl.ReLayoutDocfile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReLayoutDocfile$set(MemorySegment seg, long index, MemoryAddress x) {
        ILayoutStorageVtbl.ReLayoutDocfile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReLayoutDocfile ReLayoutDocfile (MemorySegment segment) {
        return ReLayoutDocfile.ofAddress(ReLayoutDocfile$get(segment));
    }
    static final FunctionDescriptor ReLayoutDocfileOnILockBytes$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle ReLayoutDocfileOnILockBytes$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ILayoutStorageVtbl.ReLayoutDocfileOnILockBytes$FUNC, false
    );
    public interface ReLayoutDocfileOnILockBytes {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(ReLayoutDocfileOnILockBytes fi) {
            return RuntimeHelper.upcallStub(ReLayoutDocfileOnILockBytes.class, fi, ILayoutStorageVtbl.ReLayoutDocfileOnILockBytes$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(ReLayoutDocfileOnILockBytes fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(ReLayoutDocfileOnILockBytes.class, fi, ILayoutStorageVtbl.ReLayoutDocfileOnILockBytes$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static ReLayoutDocfileOnILockBytes ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)ILayoutStorageVtbl.ReLayoutDocfileOnILockBytes$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReLayoutDocfileOnILockBytes$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReLayoutDocfileOnILockBytes")));
    public static VarHandle ReLayoutDocfileOnILockBytes$VH() {
        return ILayoutStorageVtbl.ReLayoutDocfileOnILockBytes$VH;
    }
    public static MemoryAddress ReLayoutDocfileOnILockBytes$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ILayoutStorageVtbl.ReLayoutDocfileOnILockBytes$VH.get(seg);
    }
    public static void ReLayoutDocfileOnILockBytes$set( MemorySegment seg, MemoryAddress x) {
        ILayoutStorageVtbl.ReLayoutDocfileOnILockBytes$VH.set(seg, x);
    }
    public static MemoryAddress ReLayoutDocfileOnILockBytes$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ILayoutStorageVtbl.ReLayoutDocfileOnILockBytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReLayoutDocfileOnILockBytes$set(MemorySegment seg, long index, MemoryAddress x) {
        ILayoutStorageVtbl.ReLayoutDocfileOnILockBytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReLayoutDocfileOnILockBytes ReLayoutDocfileOnILockBytes (MemorySegment segment) {
        return ReLayoutDocfileOnILockBytes.ofAddress(ReLayoutDocfileOnILockBytes$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


