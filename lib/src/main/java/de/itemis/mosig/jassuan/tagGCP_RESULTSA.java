// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class tagGCP_RESULTSA {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("lStructSize"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("lpOutString"),
        C_POINTER.withName("lpOrder"),
        C_POINTER.withName("lpDx"),
        C_POINTER.withName("lpCaretPos"),
        C_POINTER.withName("lpClass"),
        C_POINTER.withName("lpGlyphs"),
        C_INT.withName("nGlyphs"),
        C_INT.withName("nMaxFit")
    ).withName("tagGCP_RESULTSA");
    public static MemoryLayout $LAYOUT() {
        return tagGCP_RESULTSA.$struct$LAYOUT;
    }
    static final VarHandle lStructSize$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("lStructSize"));
    public static VarHandle lStructSize$VH() {
        return tagGCP_RESULTSA.lStructSize$VH;
    }
    public static int lStructSize$get(MemorySegment seg) {
        return (int)tagGCP_RESULTSA.lStructSize$VH.get(seg);
    }
    public static void lStructSize$set( MemorySegment seg, int x) {
        tagGCP_RESULTSA.lStructSize$VH.set(seg, x);
    }
    public static int lStructSize$get(MemorySegment seg, long index) {
        return (int)tagGCP_RESULTSA.lStructSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lStructSize$set(MemorySegment seg, long index, int x) {
        tagGCP_RESULTSA.lStructSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpOutString$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpOutString")));
    public static VarHandle lpOutString$VH() {
        return tagGCP_RESULTSA.lpOutString$VH;
    }
    public static MemoryAddress lpOutString$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagGCP_RESULTSA.lpOutString$VH.get(seg);
    }
    public static void lpOutString$set( MemorySegment seg, MemoryAddress x) {
        tagGCP_RESULTSA.lpOutString$VH.set(seg, x);
    }
    public static MemoryAddress lpOutString$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagGCP_RESULTSA.lpOutString$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpOutString$set(MemorySegment seg, long index, MemoryAddress x) {
        tagGCP_RESULTSA.lpOutString$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpOrder$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpOrder")));
    public static VarHandle lpOrder$VH() {
        return tagGCP_RESULTSA.lpOrder$VH;
    }
    public static MemoryAddress lpOrder$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagGCP_RESULTSA.lpOrder$VH.get(seg);
    }
    public static void lpOrder$set( MemorySegment seg, MemoryAddress x) {
        tagGCP_RESULTSA.lpOrder$VH.set(seg, x);
    }
    public static MemoryAddress lpOrder$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagGCP_RESULTSA.lpOrder$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpOrder$set(MemorySegment seg, long index, MemoryAddress x) {
        tagGCP_RESULTSA.lpOrder$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpDx$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpDx")));
    public static VarHandle lpDx$VH() {
        return tagGCP_RESULTSA.lpDx$VH;
    }
    public static MemoryAddress lpDx$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagGCP_RESULTSA.lpDx$VH.get(seg);
    }
    public static void lpDx$set( MemorySegment seg, MemoryAddress x) {
        tagGCP_RESULTSA.lpDx$VH.set(seg, x);
    }
    public static MemoryAddress lpDx$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagGCP_RESULTSA.lpDx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpDx$set(MemorySegment seg, long index, MemoryAddress x) {
        tagGCP_RESULTSA.lpDx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpCaretPos$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpCaretPos")));
    public static VarHandle lpCaretPos$VH() {
        return tagGCP_RESULTSA.lpCaretPos$VH;
    }
    public static MemoryAddress lpCaretPos$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagGCP_RESULTSA.lpCaretPos$VH.get(seg);
    }
    public static void lpCaretPos$set( MemorySegment seg, MemoryAddress x) {
        tagGCP_RESULTSA.lpCaretPos$VH.set(seg, x);
    }
    public static MemoryAddress lpCaretPos$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagGCP_RESULTSA.lpCaretPos$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpCaretPos$set(MemorySegment seg, long index, MemoryAddress x) {
        tagGCP_RESULTSA.lpCaretPos$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpClass$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpClass")));
    public static VarHandle lpClass$VH() {
        return tagGCP_RESULTSA.lpClass$VH;
    }
    public static MemoryAddress lpClass$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagGCP_RESULTSA.lpClass$VH.get(seg);
    }
    public static void lpClass$set( MemorySegment seg, MemoryAddress x) {
        tagGCP_RESULTSA.lpClass$VH.set(seg, x);
    }
    public static MemoryAddress lpClass$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagGCP_RESULTSA.lpClass$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpClass$set(MemorySegment seg, long index, MemoryAddress x) {
        tagGCP_RESULTSA.lpClass$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpGlyphs$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpGlyphs")));
    public static VarHandle lpGlyphs$VH() {
        return tagGCP_RESULTSA.lpGlyphs$VH;
    }
    public static MemoryAddress lpGlyphs$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagGCP_RESULTSA.lpGlyphs$VH.get(seg);
    }
    public static void lpGlyphs$set( MemorySegment seg, MemoryAddress x) {
        tagGCP_RESULTSA.lpGlyphs$VH.set(seg, x);
    }
    public static MemoryAddress lpGlyphs$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagGCP_RESULTSA.lpGlyphs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpGlyphs$set(MemorySegment seg, long index, MemoryAddress x) {
        tagGCP_RESULTSA.lpGlyphs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nGlyphs$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("nGlyphs"));
    public static VarHandle nGlyphs$VH() {
        return tagGCP_RESULTSA.nGlyphs$VH;
    }
    public static int nGlyphs$get(MemorySegment seg) {
        return (int)tagGCP_RESULTSA.nGlyphs$VH.get(seg);
    }
    public static void nGlyphs$set( MemorySegment seg, int x) {
        tagGCP_RESULTSA.nGlyphs$VH.set(seg, x);
    }
    public static int nGlyphs$get(MemorySegment seg, long index) {
        return (int)tagGCP_RESULTSA.nGlyphs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nGlyphs$set(MemorySegment seg, long index, int x) {
        tagGCP_RESULTSA.nGlyphs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nMaxFit$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("nMaxFit"));
    public static VarHandle nMaxFit$VH() {
        return tagGCP_RESULTSA.nMaxFit$VH;
    }
    public static int nMaxFit$get(MemorySegment seg) {
        return (int)tagGCP_RESULTSA.nMaxFit$VH.get(seg);
    }
    public static void nMaxFit$set( MemorySegment seg, int x) {
        tagGCP_RESULTSA.nMaxFit$VH.set(seg, x);
    }
    public static int nMaxFit$get(MemorySegment seg, long index) {
        return (int)tagGCP_RESULTSA.nMaxFit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nMaxFit$set(MemorySegment seg, long index, int x) {
        tagGCP_RESULTSA.nMaxFit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


