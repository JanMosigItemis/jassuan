// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class tagBinaryParam {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("Buffer"),
        C_SHORT.withName("Size"),
        MemoryLayout.paddingLayout(48)
    ).withName("tagBinaryParam");
    public static MemoryLayout $LAYOUT() {
        return tagBinaryParam.$struct$LAYOUT;
    }
    static final VarHandle Buffer$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Buffer")));
    public static VarHandle Buffer$VH() {
        return tagBinaryParam.Buffer$VH;
    }
    public static MemoryAddress Buffer$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagBinaryParam.Buffer$VH.get(seg);
    }
    public static void Buffer$set( MemorySegment seg, MemoryAddress x) {
        tagBinaryParam.Buffer$VH.set(seg, x);
    }
    public static MemoryAddress Buffer$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagBinaryParam.Buffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Buffer$set(MemorySegment seg, long index, MemoryAddress x) {
        tagBinaryParam.Buffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return tagBinaryParam.Size$VH;
    }
    public static short Size$get(MemorySegment seg) {
        return (short)tagBinaryParam.Size$VH.get(seg);
    }
    public static void Size$set( MemorySegment seg, short x) {
        tagBinaryParam.Size$VH.set(seg, x);
    }
    public static short Size$get(MemorySegment seg, long index) {
        return (short)tagBinaryParam.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, short x) {
        tagBinaryParam.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


