// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _MIDL_STUB_DESC {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("RpcInterfaceInformation"),
        C_POINTER.withName("pfnAllocate"),
        C_POINTER.withName("pfnFree"),
        MemoryLayout.unionLayout(
            C_POINTER.withName("pAutoHandle"),
            C_POINTER.withName("pPrimitiveHandle"),
            C_POINTER.withName("pGenericBindingInfo")
        ).withName("IMPLICIT_HANDLE_INFO"),
        C_POINTER.withName("apfnNdrRundownRoutines"),
        C_POINTER.withName("aGenericBindingRoutinePairs"),
        C_POINTER.withName("apfnExprEval"),
        C_POINTER.withName("aXmitQuintuple"),
        C_POINTER.withName("pFormatTypes"),
        C_INT.withName("fCheckBounds"),
        C_LONG.withName("Version"),
        C_POINTER.withName("pMallocFreeStruct"),
        C_LONG.withName("MIDLVersion"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("CommFaultOffsets"),
        C_POINTER.withName("aUserMarshalQuadruple"),
        C_POINTER.withName("NotifyRoutineTable"),
        C_LONG_LONG.withName("mFlags"),
        C_POINTER.withName("CsRoutineTables"),
        C_POINTER.withName("Reserved4"),
        C_LONG_LONG.withName("Reserved5")
    ).withName("_MIDL_STUB_DESC");
    public static MemoryLayout $LAYOUT() {
        return _MIDL_STUB_DESC.$struct$LAYOUT;
    }
    static final VarHandle RpcInterfaceInformation$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("RpcInterfaceInformation")));
    public static VarHandle RpcInterfaceInformation$VH() {
        return _MIDL_STUB_DESC.RpcInterfaceInformation$VH;
    }
    public static MemoryAddress RpcInterfaceInformation$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.RpcInterfaceInformation$VH.get(seg);
    }
    public static void RpcInterfaceInformation$set( MemorySegment seg, MemoryAddress x) {
        _MIDL_STUB_DESC.RpcInterfaceInformation$VH.set(seg, x);
    }
    public static MemoryAddress RpcInterfaceInformation$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.RpcInterfaceInformation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RpcInterfaceInformation$set(MemorySegment seg, long index, MemoryAddress x) {
        _MIDL_STUB_DESC.RpcInterfaceInformation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor pfnAllocate$FUNC = FunctionDescriptor.of(C_POINTER,
        C_LONG_LONG
    );
    static final MethodHandle pfnAllocate$MH = RuntimeHelper.downcallHandle(
        "(J)Ljdk/incubator/foreign/MemoryAddress;",
        _MIDL_STUB_DESC.pfnAllocate$FUNC, false
    );
    public interface pfnAllocate {

        jdk.incubator.foreign.MemoryAddress apply(long x0);
        static MemoryAddress allocate(pfnAllocate fi) {
            return RuntimeHelper.upcallStub(pfnAllocate.class, fi, _MIDL_STUB_DESC.pfnAllocate$FUNC, "(J)Ljdk/incubator/foreign/MemoryAddress;");
        }
        static MemoryAddress allocate(pfnAllocate fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(pfnAllocate.class, fi, _MIDL_STUB_DESC.pfnAllocate$FUNC, "(J)Ljdk/incubator/foreign/MemoryAddress;", scope);
        }
        static pfnAllocate ofAddress(MemoryAddress addr) {
            return (long x0) -> {
                try {
                    return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.pfnAllocate$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle pfnAllocate$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnAllocate")));
    public static VarHandle pfnAllocate$VH() {
        return _MIDL_STUB_DESC.pfnAllocate$VH;
    }
    public static MemoryAddress pfnAllocate$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.pfnAllocate$VH.get(seg);
    }
    public static void pfnAllocate$set( MemorySegment seg, MemoryAddress x) {
        _MIDL_STUB_DESC.pfnAllocate$VH.set(seg, x);
    }
    public static MemoryAddress pfnAllocate$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.pfnAllocate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnAllocate$set(MemorySegment seg, long index, MemoryAddress x) {
        _MIDL_STUB_DESC.pfnAllocate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static pfnAllocate pfnAllocate (MemorySegment segment) {
        return pfnAllocate.ofAddress(pfnAllocate$get(segment));
    }
    static final FunctionDescriptor pfnFree$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle pfnFree$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        _MIDL_STUB_DESC.pfnFree$FUNC, false
    );
    public interface pfnFree {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(pfnFree fi) {
            return RuntimeHelper.upcallStub(pfnFree.class, fi, _MIDL_STUB_DESC.pfnFree$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        static MemoryAddress allocate(pfnFree fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(pfnFree.class, fi, _MIDL_STUB_DESC.pfnFree$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static pfnFree ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    _MIDL_STUB_DESC.pfnFree$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle pfnFree$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnFree")));
    public static VarHandle pfnFree$VH() {
        return _MIDL_STUB_DESC.pfnFree$VH;
    }
    public static MemoryAddress pfnFree$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.pfnFree$VH.get(seg);
    }
    public static void pfnFree$set( MemorySegment seg, MemoryAddress x) {
        _MIDL_STUB_DESC.pfnFree$VH.set(seg, x);
    }
    public static MemoryAddress pfnFree$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.pfnFree$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnFree$set(MemorySegment seg, long index, MemoryAddress x) {
        _MIDL_STUB_DESC.pfnFree$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static pfnFree pfnFree (MemorySegment segment) {
        return pfnFree.ofAddress(pfnFree$get(segment));
    }
    public static class IMPLICIT_HANDLE_INFO {

        static final MemoryLayout IMPLICIT_HANDLE_INFO$union$LAYOUT = MemoryLayout.unionLayout(
            C_POINTER.withName("pAutoHandle"),
            C_POINTER.withName("pPrimitiveHandle"),
            C_POINTER.withName("pGenericBindingInfo")
        );
        public static MemoryLayout $LAYOUT() {
            return IMPLICIT_HANDLE_INFO.IMPLICIT_HANDLE_INFO$union$LAYOUT;
        }
        static final VarHandle pAutoHandle$VH = MemoryHandles.asAddressVarHandle(IMPLICIT_HANDLE_INFO$union$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pAutoHandle")));
        public static VarHandle pAutoHandle$VH() {
            return IMPLICIT_HANDLE_INFO.pAutoHandle$VH;
        }
        public static MemoryAddress pAutoHandle$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)IMPLICIT_HANDLE_INFO.pAutoHandle$VH.get(seg);
        }
        public static void pAutoHandle$set( MemorySegment seg, MemoryAddress x) {
            IMPLICIT_HANDLE_INFO.pAutoHandle$VH.set(seg, x);
        }
        public static MemoryAddress pAutoHandle$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)IMPLICIT_HANDLE_INFO.pAutoHandle$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void pAutoHandle$set(MemorySegment seg, long index, MemoryAddress x) {
            IMPLICIT_HANDLE_INFO.pAutoHandle$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle pPrimitiveHandle$VH = MemoryHandles.asAddressVarHandle(IMPLICIT_HANDLE_INFO$union$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pPrimitiveHandle")));
        public static VarHandle pPrimitiveHandle$VH() {
            return IMPLICIT_HANDLE_INFO.pPrimitiveHandle$VH;
        }
        public static MemoryAddress pPrimitiveHandle$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)IMPLICIT_HANDLE_INFO.pPrimitiveHandle$VH.get(seg);
        }
        public static void pPrimitiveHandle$set( MemorySegment seg, MemoryAddress x) {
            IMPLICIT_HANDLE_INFO.pPrimitiveHandle$VH.set(seg, x);
        }
        public static MemoryAddress pPrimitiveHandle$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)IMPLICIT_HANDLE_INFO.pPrimitiveHandle$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void pPrimitiveHandle$set(MemorySegment seg, long index, MemoryAddress x) {
            IMPLICIT_HANDLE_INFO.pPrimitiveHandle$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle pGenericBindingInfo$VH = MemoryHandles.asAddressVarHandle(IMPLICIT_HANDLE_INFO$union$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pGenericBindingInfo")));
        public static VarHandle pGenericBindingInfo$VH() {
            return IMPLICIT_HANDLE_INFO.pGenericBindingInfo$VH;
        }
        public static MemoryAddress pGenericBindingInfo$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)IMPLICIT_HANDLE_INFO.pGenericBindingInfo$VH.get(seg);
        }
        public static void pGenericBindingInfo$set( MemorySegment seg, MemoryAddress x) {
            IMPLICIT_HANDLE_INFO.pGenericBindingInfo$VH.set(seg, x);
        }
        public static MemoryAddress pGenericBindingInfo$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)IMPLICIT_HANDLE_INFO.pGenericBindingInfo$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void pGenericBindingInfo$set(MemorySegment seg, long index, MemoryAddress x) {
            IMPLICIT_HANDLE_INFO.pGenericBindingInfo$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.ofScope(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment IMPLICIT_HANDLE_INFO$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    static final VarHandle apfnNdrRundownRoutines$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("apfnNdrRundownRoutines")));
    public static VarHandle apfnNdrRundownRoutines$VH() {
        return _MIDL_STUB_DESC.apfnNdrRundownRoutines$VH;
    }
    public static MemoryAddress apfnNdrRundownRoutines$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.apfnNdrRundownRoutines$VH.get(seg);
    }
    public static void apfnNdrRundownRoutines$set( MemorySegment seg, MemoryAddress x) {
        _MIDL_STUB_DESC.apfnNdrRundownRoutines$VH.set(seg, x);
    }
    public static MemoryAddress apfnNdrRundownRoutines$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.apfnNdrRundownRoutines$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void apfnNdrRundownRoutines$set(MemorySegment seg, long index, MemoryAddress x) {
        _MIDL_STUB_DESC.apfnNdrRundownRoutines$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle aGenericBindingRoutinePairs$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("aGenericBindingRoutinePairs")));
    public static VarHandle aGenericBindingRoutinePairs$VH() {
        return _MIDL_STUB_DESC.aGenericBindingRoutinePairs$VH;
    }
    public static MemoryAddress aGenericBindingRoutinePairs$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.aGenericBindingRoutinePairs$VH.get(seg);
    }
    public static void aGenericBindingRoutinePairs$set( MemorySegment seg, MemoryAddress x) {
        _MIDL_STUB_DESC.aGenericBindingRoutinePairs$VH.set(seg, x);
    }
    public static MemoryAddress aGenericBindingRoutinePairs$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.aGenericBindingRoutinePairs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void aGenericBindingRoutinePairs$set(MemorySegment seg, long index, MemoryAddress x) {
        _MIDL_STUB_DESC.aGenericBindingRoutinePairs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle apfnExprEval$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("apfnExprEval")));
    public static VarHandle apfnExprEval$VH() {
        return _MIDL_STUB_DESC.apfnExprEval$VH;
    }
    public static MemoryAddress apfnExprEval$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.apfnExprEval$VH.get(seg);
    }
    public static void apfnExprEval$set( MemorySegment seg, MemoryAddress x) {
        _MIDL_STUB_DESC.apfnExprEval$VH.set(seg, x);
    }
    public static MemoryAddress apfnExprEval$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.apfnExprEval$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void apfnExprEval$set(MemorySegment seg, long index, MemoryAddress x) {
        _MIDL_STUB_DESC.apfnExprEval$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle aXmitQuintuple$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("aXmitQuintuple")));
    public static VarHandle aXmitQuintuple$VH() {
        return _MIDL_STUB_DESC.aXmitQuintuple$VH;
    }
    public static MemoryAddress aXmitQuintuple$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.aXmitQuintuple$VH.get(seg);
    }
    public static void aXmitQuintuple$set( MemorySegment seg, MemoryAddress x) {
        _MIDL_STUB_DESC.aXmitQuintuple$VH.set(seg, x);
    }
    public static MemoryAddress aXmitQuintuple$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.aXmitQuintuple$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void aXmitQuintuple$set(MemorySegment seg, long index, MemoryAddress x) {
        _MIDL_STUB_DESC.aXmitQuintuple$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pFormatTypes$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pFormatTypes")));
    public static VarHandle pFormatTypes$VH() {
        return _MIDL_STUB_DESC.pFormatTypes$VH;
    }
    public static MemoryAddress pFormatTypes$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.pFormatTypes$VH.get(seg);
    }
    public static void pFormatTypes$set( MemorySegment seg, MemoryAddress x) {
        _MIDL_STUB_DESC.pFormatTypes$VH.set(seg, x);
    }
    public static MemoryAddress pFormatTypes$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.pFormatTypes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pFormatTypes$set(MemorySegment seg, long index, MemoryAddress x) {
        _MIDL_STUB_DESC.pFormatTypes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fCheckBounds$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("fCheckBounds"));
    public static VarHandle fCheckBounds$VH() {
        return _MIDL_STUB_DESC.fCheckBounds$VH;
    }
    public static int fCheckBounds$get(MemorySegment seg) {
        return (int)_MIDL_STUB_DESC.fCheckBounds$VH.get(seg);
    }
    public static void fCheckBounds$set( MemorySegment seg, int x) {
        _MIDL_STUB_DESC.fCheckBounds$VH.set(seg, x);
    }
    public static int fCheckBounds$get(MemorySegment seg, long index) {
        return (int)_MIDL_STUB_DESC.fCheckBounds$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fCheckBounds$set(MemorySegment seg, long index, int x) {
        _MIDL_STUB_DESC.fCheckBounds$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _MIDL_STUB_DESC.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)_MIDL_STUB_DESC.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        _MIDL_STUB_DESC.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_MIDL_STUB_DESC.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _MIDL_STUB_DESC.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pMallocFreeStruct$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pMallocFreeStruct")));
    public static VarHandle pMallocFreeStruct$VH() {
        return _MIDL_STUB_DESC.pMallocFreeStruct$VH;
    }
    public static MemoryAddress pMallocFreeStruct$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.pMallocFreeStruct$VH.get(seg);
    }
    public static void pMallocFreeStruct$set( MemorySegment seg, MemoryAddress x) {
        _MIDL_STUB_DESC.pMallocFreeStruct$VH.set(seg, x);
    }
    public static MemoryAddress pMallocFreeStruct$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.pMallocFreeStruct$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pMallocFreeStruct$set(MemorySegment seg, long index, MemoryAddress x) {
        _MIDL_STUB_DESC.pMallocFreeStruct$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MIDLVersion$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("MIDLVersion"));
    public static VarHandle MIDLVersion$VH() {
        return _MIDL_STUB_DESC.MIDLVersion$VH;
    }
    public static int MIDLVersion$get(MemorySegment seg) {
        return (int)_MIDL_STUB_DESC.MIDLVersion$VH.get(seg);
    }
    public static void MIDLVersion$set( MemorySegment seg, int x) {
        _MIDL_STUB_DESC.MIDLVersion$VH.set(seg, x);
    }
    public static int MIDLVersion$get(MemorySegment seg, long index) {
        return (int)_MIDL_STUB_DESC.MIDLVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MIDLVersion$set(MemorySegment seg, long index, int x) {
        _MIDL_STUB_DESC.MIDLVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CommFaultOffsets$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("CommFaultOffsets")));
    public static VarHandle CommFaultOffsets$VH() {
        return _MIDL_STUB_DESC.CommFaultOffsets$VH;
    }
    public static MemoryAddress CommFaultOffsets$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.CommFaultOffsets$VH.get(seg);
    }
    public static void CommFaultOffsets$set( MemorySegment seg, MemoryAddress x) {
        _MIDL_STUB_DESC.CommFaultOffsets$VH.set(seg, x);
    }
    public static MemoryAddress CommFaultOffsets$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.CommFaultOffsets$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CommFaultOffsets$set(MemorySegment seg, long index, MemoryAddress x) {
        _MIDL_STUB_DESC.CommFaultOffsets$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle aUserMarshalQuadruple$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("aUserMarshalQuadruple")));
    public static VarHandle aUserMarshalQuadruple$VH() {
        return _MIDL_STUB_DESC.aUserMarshalQuadruple$VH;
    }
    public static MemoryAddress aUserMarshalQuadruple$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.aUserMarshalQuadruple$VH.get(seg);
    }
    public static void aUserMarshalQuadruple$set( MemorySegment seg, MemoryAddress x) {
        _MIDL_STUB_DESC.aUserMarshalQuadruple$VH.set(seg, x);
    }
    public static MemoryAddress aUserMarshalQuadruple$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.aUserMarshalQuadruple$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void aUserMarshalQuadruple$set(MemorySegment seg, long index, MemoryAddress x) {
        _MIDL_STUB_DESC.aUserMarshalQuadruple$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NotifyRoutineTable$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("NotifyRoutineTable")));
    public static VarHandle NotifyRoutineTable$VH() {
        return _MIDL_STUB_DESC.NotifyRoutineTable$VH;
    }
    public static MemoryAddress NotifyRoutineTable$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.NotifyRoutineTable$VH.get(seg);
    }
    public static void NotifyRoutineTable$set( MemorySegment seg, MemoryAddress x) {
        _MIDL_STUB_DESC.NotifyRoutineTable$VH.set(seg, x);
    }
    public static MemoryAddress NotifyRoutineTable$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.NotifyRoutineTable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NotifyRoutineTable$set(MemorySegment seg, long index, MemoryAddress x) {
        _MIDL_STUB_DESC.NotifyRoutineTable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mFlags$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("mFlags"));
    public static VarHandle mFlags$VH() {
        return _MIDL_STUB_DESC.mFlags$VH;
    }
    public static long mFlags$get(MemorySegment seg) {
        return (long)_MIDL_STUB_DESC.mFlags$VH.get(seg);
    }
    public static void mFlags$set( MemorySegment seg, long x) {
        _MIDL_STUB_DESC.mFlags$VH.set(seg, x);
    }
    public static long mFlags$get(MemorySegment seg, long index) {
        return (long)_MIDL_STUB_DESC.mFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mFlags$set(MemorySegment seg, long index, long x) {
        _MIDL_STUB_DESC.mFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CsRoutineTables$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("CsRoutineTables")));
    public static VarHandle CsRoutineTables$VH() {
        return _MIDL_STUB_DESC.CsRoutineTables$VH;
    }
    public static MemoryAddress CsRoutineTables$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.CsRoutineTables$VH.get(seg);
    }
    public static void CsRoutineTables$set( MemorySegment seg, MemoryAddress x) {
        _MIDL_STUB_DESC.CsRoutineTables$VH.set(seg, x);
    }
    public static MemoryAddress CsRoutineTables$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.CsRoutineTables$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CsRoutineTables$set(MemorySegment seg, long index, MemoryAddress x) {
        _MIDL_STUB_DESC.CsRoutineTables$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Reserved4$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Reserved4")));
    public static VarHandle Reserved4$VH() {
        return _MIDL_STUB_DESC.Reserved4$VH;
    }
    public static MemoryAddress Reserved4$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.Reserved4$VH.get(seg);
    }
    public static void Reserved4$set( MemorySegment seg, MemoryAddress x) {
        _MIDL_STUB_DESC.Reserved4$VH.set(seg, x);
    }
    public static MemoryAddress Reserved4$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_MIDL_STUB_DESC.Reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved4$set(MemorySegment seg, long index, MemoryAddress x) {
        _MIDL_STUB_DESC.Reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Reserved5$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Reserved5"));
    public static VarHandle Reserved5$VH() {
        return _MIDL_STUB_DESC.Reserved5$VH;
    }
    public static long Reserved5$get(MemorySegment seg) {
        return (long)_MIDL_STUB_DESC.Reserved5$VH.get(seg);
    }
    public static void Reserved5$set( MemorySegment seg, long x) {
        _MIDL_STUB_DESC.Reserved5$VH.set(seg, x);
    }
    public static long Reserved5$get(MemorySegment seg, long index) {
        return (long)_MIDL_STUB_DESC.Reserved5$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved5$set(MemorySegment seg, long index, long x) {
        _MIDL_STUB_DESC.Reserved5$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


