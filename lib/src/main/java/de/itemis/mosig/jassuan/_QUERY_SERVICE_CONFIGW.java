// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _QUERY_SERVICE_CONFIGW {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("dwServiceType"),
        C_LONG.withName("dwStartType"),
        C_LONG.withName("dwErrorControl"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("lpBinaryPathName"),
        C_POINTER.withName("lpLoadOrderGroup"),
        C_LONG.withName("dwTagId"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("lpDependencies"),
        C_POINTER.withName("lpServiceStartName"),
        C_POINTER.withName("lpDisplayName")
    ).withName("_QUERY_SERVICE_CONFIGW");
    public static MemoryLayout $LAYOUT() {
        return _QUERY_SERVICE_CONFIGW.$struct$LAYOUT;
    }
    static final VarHandle dwServiceType$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwServiceType"));
    public static VarHandle dwServiceType$VH() {
        return _QUERY_SERVICE_CONFIGW.dwServiceType$VH;
    }
    public static int dwServiceType$get(MemorySegment seg) {
        return (int)_QUERY_SERVICE_CONFIGW.dwServiceType$VH.get(seg);
    }
    public static void dwServiceType$set( MemorySegment seg, int x) {
        _QUERY_SERVICE_CONFIGW.dwServiceType$VH.set(seg, x);
    }
    public static int dwServiceType$get(MemorySegment seg, long index) {
        return (int)_QUERY_SERVICE_CONFIGW.dwServiceType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwServiceType$set(MemorySegment seg, long index, int x) {
        _QUERY_SERVICE_CONFIGW.dwServiceType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwStartType$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwStartType"));
    public static VarHandle dwStartType$VH() {
        return _QUERY_SERVICE_CONFIGW.dwStartType$VH;
    }
    public static int dwStartType$get(MemorySegment seg) {
        return (int)_QUERY_SERVICE_CONFIGW.dwStartType$VH.get(seg);
    }
    public static void dwStartType$set( MemorySegment seg, int x) {
        _QUERY_SERVICE_CONFIGW.dwStartType$VH.set(seg, x);
    }
    public static int dwStartType$get(MemorySegment seg, long index) {
        return (int)_QUERY_SERVICE_CONFIGW.dwStartType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwStartType$set(MemorySegment seg, long index, int x) {
        _QUERY_SERVICE_CONFIGW.dwStartType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwErrorControl$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwErrorControl"));
    public static VarHandle dwErrorControl$VH() {
        return _QUERY_SERVICE_CONFIGW.dwErrorControl$VH;
    }
    public static int dwErrorControl$get(MemorySegment seg) {
        return (int)_QUERY_SERVICE_CONFIGW.dwErrorControl$VH.get(seg);
    }
    public static void dwErrorControl$set( MemorySegment seg, int x) {
        _QUERY_SERVICE_CONFIGW.dwErrorControl$VH.set(seg, x);
    }
    public static int dwErrorControl$get(MemorySegment seg, long index) {
        return (int)_QUERY_SERVICE_CONFIGW.dwErrorControl$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwErrorControl$set(MemorySegment seg, long index, int x) {
        _QUERY_SERVICE_CONFIGW.dwErrorControl$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpBinaryPathName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpBinaryPathName")));
    public static VarHandle lpBinaryPathName$VH() {
        return _QUERY_SERVICE_CONFIGW.lpBinaryPathName$VH;
    }
    public static MemoryAddress lpBinaryPathName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_QUERY_SERVICE_CONFIGW.lpBinaryPathName$VH.get(seg);
    }
    public static void lpBinaryPathName$set( MemorySegment seg, MemoryAddress x) {
        _QUERY_SERVICE_CONFIGW.lpBinaryPathName$VH.set(seg, x);
    }
    public static MemoryAddress lpBinaryPathName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_QUERY_SERVICE_CONFIGW.lpBinaryPathName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpBinaryPathName$set(MemorySegment seg, long index, MemoryAddress x) {
        _QUERY_SERVICE_CONFIGW.lpBinaryPathName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpLoadOrderGroup$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpLoadOrderGroup")));
    public static VarHandle lpLoadOrderGroup$VH() {
        return _QUERY_SERVICE_CONFIGW.lpLoadOrderGroup$VH;
    }
    public static MemoryAddress lpLoadOrderGroup$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_QUERY_SERVICE_CONFIGW.lpLoadOrderGroup$VH.get(seg);
    }
    public static void lpLoadOrderGroup$set( MemorySegment seg, MemoryAddress x) {
        _QUERY_SERVICE_CONFIGW.lpLoadOrderGroup$VH.set(seg, x);
    }
    public static MemoryAddress lpLoadOrderGroup$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_QUERY_SERVICE_CONFIGW.lpLoadOrderGroup$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpLoadOrderGroup$set(MemorySegment seg, long index, MemoryAddress x) {
        _QUERY_SERVICE_CONFIGW.lpLoadOrderGroup$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwTagId$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwTagId"));
    public static VarHandle dwTagId$VH() {
        return _QUERY_SERVICE_CONFIGW.dwTagId$VH;
    }
    public static int dwTagId$get(MemorySegment seg) {
        return (int)_QUERY_SERVICE_CONFIGW.dwTagId$VH.get(seg);
    }
    public static void dwTagId$set( MemorySegment seg, int x) {
        _QUERY_SERVICE_CONFIGW.dwTagId$VH.set(seg, x);
    }
    public static int dwTagId$get(MemorySegment seg, long index) {
        return (int)_QUERY_SERVICE_CONFIGW.dwTagId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwTagId$set(MemorySegment seg, long index, int x) {
        _QUERY_SERVICE_CONFIGW.dwTagId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpDependencies$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpDependencies")));
    public static VarHandle lpDependencies$VH() {
        return _QUERY_SERVICE_CONFIGW.lpDependencies$VH;
    }
    public static MemoryAddress lpDependencies$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_QUERY_SERVICE_CONFIGW.lpDependencies$VH.get(seg);
    }
    public static void lpDependencies$set( MemorySegment seg, MemoryAddress x) {
        _QUERY_SERVICE_CONFIGW.lpDependencies$VH.set(seg, x);
    }
    public static MemoryAddress lpDependencies$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_QUERY_SERVICE_CONFIGW.lpDependencies$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpDependencies$set(MemorySegment seg, long index, MemoryAddress x) {
        _QUERY_SERVICE_CONFIGW.lpDependencies$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpServiceStartName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpServiceStartName")));
    public static VarHandle lpServiceStartName$VH() {
        return _QUERY_SERVICE_CONFIGW.lpServiceStartName$VH;
    }
    public static MemoryAddress lpServiceStartName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_QUERY_SERVICE_CONFIGW.lpServiceStartName$VH.get(seg);
    }
    public static void lpServiceStartName$set( MemorySegment seg, MemoryAddress x) {
        _QUERY_SERVICE_CONFIGW.lpServiceStartName$VH.set(seg, x);
    }
    public static MemoryAddress lpServiceStartName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_QUERY_SERVICE_CONFIGW.lpServiceStartName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpServiceStartName$set(MemorySegment seg, long index, MemoryAddress x) {
        _QUERY_SERVICE_CONFIGW.lpServiceStartName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpDisplayName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpDisplayName")));
    public static VarHandle lpDisplayName$VH() {
        return _QUERY_SERVICE_CONFIGW.lpDisplayName$VH;
    }
    public static MemoryAddress lpDisplayName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_QUERY_SERVICE_CONFIGW.lpDisplayName$VH.get(seg);
    }
    public static void lpDisplayName$set( MemorySegment seg, MemoryAddress x) {
        _QUERY_SERVICE_CONFIGW.lpDisplayName$VH.set(seg, x);
    }
    public static MemoryAddress lpDisplayName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_QUERY_SERVICE_CONFIGW.lpDisplayName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpDisplayName$set(MemorySegment seg, long index, MemoryAddress x) {
        _QUERY_SERVICE_CONFIGW.lpDisplayName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


