// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public interface USER_MARSHAL_FREEING_ROUTINE {

    void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
    static MemoryAddress allocate(USER_MARSHAL_FREEING_ROUTINE fi) {
        return RuntimeHelper.upcallStub(USER_MARSHAL_FREEING_ROUTINE.class, fi, constants$930.USER_MARSHAL_FREEING_ROUTINE$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
    }
    static MemoryAddress allocate(USER_MARSHAL_FREEING_ROUTINE fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(USER_MARSHAL_FREEING_ROUTINE.class, fi, constants$930.USER_MARSHAL_FREEING_ROUTINE$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
    }
    static USER_MARSHAL_FREEING_ROUTINE ofAddress(MemoryAddress addr) {
        return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
            try {
                constants$930.USER_MARSHAL_FREEING_ROUTINE$MH.invokeExact((Addressable)addr, x0, x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


