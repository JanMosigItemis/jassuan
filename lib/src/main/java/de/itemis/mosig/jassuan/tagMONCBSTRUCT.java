// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class tagMONCBSTRUCT {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("cb"),
        C_LONG.withName("dwTime"),
        C_POINTER.withName("hTask"),
        C_LONG.withName("dwRet"),
        C_INT.withName("wType"),
        C_INT.withName("wFmt"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("hConv"),
        C_POINTER.withName("hsz1"),
        C_POINTER.withName("hsz2"),
        C_POINTER.withName("hData"),
        C_LONG_LONG.withName("dwData1"),
        C_LONG_LONG.withName("dwData2"),
        MemoryLayout.structLayout(
            C_INT.withName("cb"),
            C_INT.withName("wFlags"),
            C_INT.withName("wCountryID"),
            C_INT.withName("iCodePage"),
            C_LONG.withName("dwLangID"),
            C_LONG.withName("dwSecurity"),
            MemoryLayout.structLayout(
                C_LONG.withName("Length"),
                C_INT.withName("ImpersonationLevel"),
                C_CHAR.withName("ContextTrackingMode"),
                C_CHAR.withName("EffectiveOnly"),
                MemoryLayout.paddingLayout(16)
            ).withName("qos")
        ).withName("cc"),
        C_LONG.withName("cbData"),
        MemoryLayout.sequenceLayout(8, C_LONG).withName("Data")
    ).withName("tagMONCBSTRUCT");
    public static MemoryLayout $LAYOUT() {
        return tagMONCBSTRUCT.$struct$LAYOUT;
    }
    static final VarHandle cb$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cb"));
    public static VarHandle cb$VH() {
        return tagMONCBSTRUCT.cb$VH;
    }
    public static int cb$get(MemorySegment seg) {
        return (int)tagMONCBSTRUCT.cb$VH.get(seg);
    }
    public static void cb$set( MemorySegment seg, int x) {
        tagMONCBSTRUCT.cb$VH.set(seg, x);
    }
    public static int cb$get(MemorySegment seg, long index) {
        return (int)tagMONCBSTRUCT.cb$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cb$set(MemorySegment seg, long index, int x) {
        tagMONCBSTRUCT.cb$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwTime$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwTime"));
    public static VarHandle dwTime$VH() {
        return tagMONCBSTRUCT.dwTime$VH;
    }
    public static int dwTime$get(MemorySegment seg) {
        return (int)tagMONCBSTRUCT.dwTime$VH.get(seg);
    }
    public static void dwTime$set( MemorySegment seg, int x) {
        tagMONCBSTRUCT.dwTime$VH.set(seg, x);
    }
    public static int dwTime$get(MemorySegment seg, long index) {
        return (int)tagMONCBSTRUCT.dwTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwTime$set(MemorySegment seg, long index, int x) {
        tagMONCBSTRUCT.dwTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hTask$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hTask")));
    public static VarHandle hTask$VH() {
        return tagMONCBSTRUCT.hTask$VH;
    }
    public static MemoryAddress hTask$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagMONCBSTRUCT.hTask$VH.get(seg);
    }
    public static void hTask$set( MemorySegment seg, MemoryAddress x) {
        tagMONCBSTRUCT.hTask$VH.set(seg, x);
    }
    public static MemoryAddress hTask$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagMONCBSTRUCT.hTask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hTask$set(MemorySegment seg, long index, MemoryAddress x) {
        tagMONCBSTRUCT.hTask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwRet$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwRet"));
    public static VarHandle dwRet$VH() {
        return tagMONCBSTRUCT.dwRet$VH;
    }
    public static int dwRet$get(MemorySegment seg) {
        return (int)tagMONCBSTRUCT.dwRet$VH.get(seg);
    }
    public static void dwRet$set( MemorySegment seg, int x) {
        tagMONCBSTRUCT.dwRet$VH.set(seg, x);
    }
    public static int dwRet$get(MemorySegment seg, long index) {
        return (int)tagMONCBSTRUCT.dwRet$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwRet$set(MemorySegment seg, long index, int x) {
        tagMONCBSTRUCT.dwRet$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wType$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("wType"));
    public static VarHandle wType$VH() {
        return tagMONCBSTRUCT.wType$VH;
    }
    public static int wType$get(MemorySegment seg) {
        return (int)tagMONCBSTRUCT.wType$VH.get(seg);
    }
    public static void wType$set( MemorySegment seg, int x) {
        tagMONCBSTRUCT.wType$VH.set(seg, x);
    }
    public static int wType$get(MemorySegment seg, long index) {
        return (int)tagMONCBSTRUCT.wType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wType$set(MemorySegment seg, long index, int x) {
        tagMONCBSTRUCT.wType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wFmt$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("wFmt"));
    public static VarHandle wFmt$VH() {
        return tagMONCBSTRUCT.wFmt$VH;
    }
    public static int wFmt$get(MemorySegment seg) {
        return (int)tagMONCBSTRUCT.wFmt$VH.get(seg);
    }
    public static void wFmt$set( MemorySegment seg, int x) {
        tagMONCBSTRUCT.wFmt$VH.set(seg, x);
    }
    public static int wFmt$get(MemorySegment seg, long index) {
        return (int)tagMONCBSTRUCT.wFmt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wFmt$set(MemorySegment seg, long index, int x) {
        tagMONCBSTRUCT.wFmt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hConv$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hConv")));
    public static VarHandle hConv$VH() {
        return tagMONCBSTRUCT.hConv$VH;
    }
    public static MemoryAddress hConv$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagMONCBSTRUCT.hConv$VH.get(seg);
    }
    public static void hConv$set( MemorySegment seg, MemoryAddress x) {
        tagMONCBSTRUCT.hConv$VH.set(seg, x);
    }
    public static MemoryAddress hConv$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagMONCBSTRUCT.hConv$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hConv$set(MemorySegment seg, long index, MemoryAddress x) {
        tagMONCBSTRUCT.hConv$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hsz1$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hsz1")));
    public static VarHandle hsz1$VH() {
        return tagMONCBSTRUCT.hsz1$VH;
    }
    public static MemoryAddress hsz1$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagMONCBSTRUCT.hsz1$VH.get(seg);
    }
    public static void hsz1$set( MemorySegment seg, MemoryAddress x) {
        tagMONCBSTRUCT.hsz1$VH.set(seg, x);
    }
    public static MemoryAddress hsz1$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagMONCBSTRUCT.hsz1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hsz1$set(MemorySegment seg, long index, MemoryAddress x) {
        tagMONCBSTRUCT.hsz1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hsz2$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hsz2")));
    public static VarHandle hsz2$VH() {
        return tagMONCBSTRUCT.hsz2$VH;
    }
    public static MemoryAddress hsz2$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagMONCBSTRUCT.hsz2$VH.get(seg);
    }
    public static void hsz2$set( MemorySegment seg, MemoryAddress x) {
        tagMONCBSTRUCT.hsz2$VH.set(seg, x);
    }
    public static MemoryAddress hsz2$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagMONCBSTRUCT.hsz2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hsz2$set(MemorySegment seg, long index, MemoryAddress x) {
        tagMONCBSTRUCT.hsz2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hData$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hData")));
    public static VarHandle hData$VH() {
        return tagMONCBSTRUCT.hData$VH;
    }
    public static MemoryAddress hData$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagMONCBSTRUCT.hData$VH.get(seg);
    }
    public static void hData$set( MemorySegment seg, MemoryAddress x) {
        tagMONCBSTRUCT.hData$VH.set(seg, x);
    }
    public static MemoryAddress hData$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagMONCBSTRUCT.hData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hData$set(MemorySegment seg, long index, MemoryAddress x) {
        tagMONCBSTRUCT.hData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwData1$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwData1"));
    public static VarHandle dwData1$VH() {
        return tagMONCBSTRUCT.dwData1$VH;
    }
    public static long dwData1$get(MemorySegment seg) {
        return (long)tagMONCBSTRUCT.dwData1$VH.get(seg);
    }
    public static void dwData1$set( MemorySegment seg, long x) {
        tagMONCBSTRUCT.dwData1$VH.set(seg, x);
    }
    public static long dwData1$get(MemorySegment seg, long index) {
        return (long)tagMONCBSTRUCT.dwData1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwData1$set(MemorySegment seg, long index, long x) {
        tagMONCBSTRUCT.dwData1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwData2$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwData2"));
    public static VarHandle dwData2$VH() {
        return tagMONCBSTRUCT.dwData2$VH;
    }
    public static long dwData2$get(MemorySegment seg) {
        return (long)tagMONCBSTRUCT.dwData2$VH.get(seg);
    }
    public static void dwData2$set( MemorySegment seg, long x) {
        tagMONCBSTRUCT.dwData2$VH.set(seg, x);
    }
    public static long dwData2$get(MemorySegment seg, long index) {
        return (long)tagMONCBSTRUCT.dwData2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwData2$set(MemorySegment seg, long index, long x) {
        tagMONCBSTRUCT.dwData2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment cc$slice(MemorySegment seg) {
        return seg.asSlice(80, 36);
    }
    static final VarHandle cbData$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbData"));
    public static VarHandle cbData$VH() {
        return tagMONCBSTRUCT.cbData$VH;
    }
    public static int cbData$get(MemorySegment seg) {
        return (int)tagMONCBSTRUCT.cbData$VH.get(seg);
    }
    public static void cbData$set( MemorySegment seg, int x) {
        tagMONCBSTRUCT.cbData$VH.set(seg, x);
    }
    public static int cbData$get(MemorySegment seg, long index) {
        return (int)tagMONCBSTRUCT.cbData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbData$set(MemorySegment seg, long index, int x) {
        tagMONCBSTRUCT.cbData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Data$slice(MemorySegment seg) {
        return seg.asSlice(120, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


