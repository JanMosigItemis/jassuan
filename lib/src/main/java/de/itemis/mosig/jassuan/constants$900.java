// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$900 {

    static final FunctionDescriptor CryptHashCertificate2$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle CryptHashCertificate2$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CryptHashCertificate2",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$900.CryptHashCertificate2$FUNC, false
    );
    static final FunctionDescriptor CryptSignCertificate$FUNC = FunctionDescriptor.of(C_INT,
        C_LONG_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle CryptSignCertificate$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CryptSignCertificate",
        "(JIILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$900.CryptSignCertificate$FUNC, false
    );
    static final FunctionDescriptor CryptSignAndEncodeCertificate$FUNC = FunctionDescriptor.of(C_INT,
        C_LONG_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle CryptSignAndEncodeCertificate$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CryptSignAndEncodeCertificate",
        "(JIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$900.CryptSignAndEncodeCertificate$FUNC, false
    );
    static final FunctionDescriptor CertVerifyTimeValidity$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle CertVerifyTimeValidity$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CertVerifyTimeValidity",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$900.CertVerifyTimeValidity$FUNC, false
    );
    static final FunctionDescriptor CertVerifyCRLTimeValidity$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle CertVerifyCRLTimeValidity$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CertVerifyCRLTimeValidity",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$900.CertVerifyCRLTimeValidity$FUNC, false
    );
    static final FunctionDescriptor CertVerifyValidityNesting$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle CertVerifyValidityNesting$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CertVerifyValidityNesting",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$900.CertVerifyValidityNesting$FUNC, false
    );
}


