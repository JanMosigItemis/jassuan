// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class DISPLAYCONFIG_TARGET_DEVICE_NAME {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            C_INT.withName("type"),
            C_INT.withName("size"),
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("adapterId"),
            C_INT.withName("id")
        ).withName("header"),
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    MemoryLayout.structLayout(
                        MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("friendlyNameFromEdid"),
                        MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("friendlyNameForced"),
                        MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("edidIdsValid"),
                        MemoryLayout.valueLayout(29, ByteOrder.nativeOrder()).withName("reserved")
                    )
                ).withName("$anon$0"),
                C_INT.withName("value")
            ).withName("$anon$0")
        ).withName("flags"),
        C_INT.withName("outputTechnology"),
        C_SHORT.withName("edidManufactureId"),
        C_SHORT.withName("edidProductCodeId"),
        C_INT.withName("connectorInstance"),
        MemoryLayout.sequenceLayout(64, C_SHORT).withName("monitorFriendlyDeviceName"),
        MemoryLayout.sequenceLayout(128, C_SHORT).withName("monitorDevicePath")
    ).withName("DISPLAYCONFIG_TARGET_DEVICE_NAME");
    public static MemoryLayout $LAYOUT() {
        return DISPLAYCONFIG_TARGET_DEVICE_NAME.$struct$LAYOUT;
    }
    public static MemorySegment header$slice(MemorySegment seg) {
        return seg.asSlice(0, 20);
    }
    public static MemorySegment flags$slice(MemorySegment seg) {
        return seg.asSlice(20, 4);
    }
    static final VarHandle outputTechnology$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("outputTechnology"));
    public static VarHandle outputTechnology$VH() {
        return DISPLAYCONFIG_TARGET_DEVICE_NAME.outputTechnology$VH;
    }
    public static int outputTechnology$get(MemorySegment seg) {
        return (int)DISPLAYCONFIG_TARGET_DEVICE_NAME.outputTechnology$VH.get(seg);
    }
    public static void outputTechnology$set( MemorySegment seg, int x) {
        DISPLAYCONFIG_TARGET_DEVICE_NAME.outputTechnology$VH.set(seg, x);
    }
    public static int outputTechnology$get(MemorySegment seg, long index) {
        return (int)DISPLAYCONFIG_TARGET_DEVICE_NAME.outputTechnology$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void outputTechnology$set(MemorySegment seg, long index, int x) {
        DISPLAYCONFIG_TARGET_DEVICE_NAME.outputTechnology$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle edidManufactureId$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("edidManufactureId"));
    public static VarHandle edidManufactureId$VH() {
        return DISPLAYCONFIG_TARGET_DEVICE_NAME.edidManufactureId$VH;
    }
    public static short edidManufactureId$get(MemorySegment seg) {
        return (short)DISPLAYCONFIG_TARGET_DEVICE_NAME.edidManufactureId$VH.get(seg);
    }
    public static void edidManufactureId$set( MemorySegment seg, short x) {
        DISPLAYCONFIG_TARGET_DEVICE_NAME.edidManufactureId$VH.set(seg, x);
    }
    public static short edidManufactureId$get(MemorySegment seg, long index) {
        return (short)DISPLAYCONFIG_TARGET_DEVICE_NAME.edidManufactureId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void edidManufactureId$set(MemorySegment seg, long index, short x) {
        DISPLAYCONFIG_TARGET_DEVICE_NAME.edidManufactureId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle edidProductCodeId$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("edidProductCodeId"));
    public static VarHandle edidProductCodeId$VH() {
        return DISPLAYCONFIG_TARGET_DEVICE_NAME.edidProductCodeId$VH;
    }
    public static short edidProductCodeId$get(MemorySegment seg) {
        return (short)DISPLAYCONFIG_TARGET_DEVICE_NAME.edidProductCodeId$VH.get(seg);
    }
    public static void edidProductCodeId$set( MemorySegment seg, short x) {
        DISPLAYCONFIG_TARGET_DEVICE_NAME.edidProductCodeId$VH.set(seg, x);
    }
    public static short edidProductCodeId$get(MemorySegment seg, long index) {
        return (short)DISPLAYCONFIG_TARGET_DEVICE_NAME.edidProductCodeId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void edidProductCodeId$set(MemorySegment seg, long index, short x) {
        DISPLAYCONFIG_TARGET_DEVICE_NAME.edidProductCodeId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle connectorInstance$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("connectorInstance"));
    public static VarHandle connectorInstance$VH() {
        return DISPLAYCONFIG_TARGET_DEVICE_NAME.connectorInstance$VH;
    }
    public static int connectorInstance$get(MemorySegment seg) {
        return (int)DISPLAYCONFIG_TARGET_DEVICE_NAME.connectorInstance$VH.get(seg);
    }
    public static void connectorInstance$set( MemorySegment seg, int x) {
        DISPLAYCONFIG_TARGET_DEVICE_NAME.connectorInstance$VH.set(seg, x);
    }
    public static int connectorInstance$get(MemorySegment seg, long index) {
        return (int)DISPLAYCONFIG_TARGET_DEVICE_NAME.connectorInstance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void connectorInstance$set(MemorySegment seg, long index, int x) {
        DISPLAYCONFIG_TARGET_DEVICE_NAME.connectorInstance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment monitorFriendlyDeviceName$slice(MemorySegment seg) {
        return seg.asSlice(36, 128);
    }
    public static MemorySegment monitorDevicePath$slice(MemorySegment seg) {
        return seg.asSlice(164, 256);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


