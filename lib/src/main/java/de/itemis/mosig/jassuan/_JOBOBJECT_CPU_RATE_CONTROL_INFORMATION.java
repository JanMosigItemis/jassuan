// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("ControlFlags"),
        MemoryLayout.unionLayout(
            C_LONG.withName("CpuRate"),
            C_LONG.withName("Weight")
        ).withName("$anon$0")
    ).withName("_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION");
    public static MemoryLayout $LAYOUT() {
        return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION.$struct$LAYOUT;
    }
    static final VarHandle ControlFlags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ControlFlags"));
    public static VarHandle ControlFlags$VH() {
        return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION.ControlFlags$VH;
    }
    public static int ControlFlags$get(MemorySegment seg) {
        return (int)_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION.ControlFlags$VH.get(seg);
    }
    public static void ControlFlags$set( MemorySegment seg, int x) {
        _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION.ControlFlags$VH.set(seg, x);
    }
    public static int ControlFlags$get(MemorySegment seg, long index) {
        return (int)_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION.ControlFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ControlFlags$set(MemorySegment seg, long index, int x) {
        _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION.ControlFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CpuRate$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("CpuRate"));
    public static VarHandle CpuRate$VH() {
        return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION.CpuRate$VH;
    }
    public static int CpuRate$get(MemorySegment seg) {
        return (int)_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION.CpuRate$VH.get(seg);
    }
    public static void CpuRate$set( MemorySegment seg, int x) {
        _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION.CpuRate$VH.set(seg, x);
    }
    public static int CpuRate$get(MemorySegment seg, long index) {
        return (int)_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION.CpuRate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CpuRate$set(MemorySegment seg, long index, int x) {
        _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION.CpuRate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Weight$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("Weight"));
    public static VarHandle Weight$VH() {
        return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION.Weight$VH;
    }
    public static int Weight$get(MemorySegment seg) {
        return (int)_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION.Weight$VH.get(seg);
    }
    public static void Weight$set( MemorySegment seg, int x) {
        _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION.Weight$VH.set(seg, x);
    }
    public static int Weight$get(MemorySegment seg, long index) {
        return (int)_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION.Weight$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Weight$set(MemorySegment seg, long index, int x) {
        _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION.Weight$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


