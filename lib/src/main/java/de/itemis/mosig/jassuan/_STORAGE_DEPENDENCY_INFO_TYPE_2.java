// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _STORAGE_DEPENDENCY_INFO_TYPE_2 {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("DependencyTypeFlags"),
        C_LONG.withName("ProviderSpecificFlags"),
        MemoryLayout.structLayout(
            C_LONG.withName("DeviceId"),
            MemoryLayout.structLayout(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
            ).withName("VendorId")
        ).withName("VirtualStorageType"),
        C_LONG.withName("AncestorLevel"),
        C_POINTER.withName("DependencyDeviceName"),
        C_POINTER.withName("HostVolumeName"),
        C_POINTER.withName("DependentVolumeName"),
        C_POINTER.withName("DependentVolumeRelativePath")
    ).withName("_STORAGE_DEPENDENCY_INFO_TYPE_2");
    public static MemoryLayout $LAYOUT() {
        return _STORAGE_DEPENDENCY_INFO_TYPE_2.$struct$LAYOUT;
    }
    static final VarHandle DependencyTypeFlags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("DependencyTypeFlags"));
    public static VarHandle DependencyTypeFlags$VH() {
        return _STORAGE_DEPENDENCY_INFO_TYPE_2.DependencyTypeFlags$VH;
    }
    public static int DependencyTypeFlags$get(MemorySegment seg) {
        return (int)_STORAGE_DEPENDENCY_INFO_TYPE_2.DependencyTypeFlags$VH.get(seg);
    }
    public static void DependencyTypeFlags$set( MemorySegment seg, int x) {
        _STORAGE_DEPENDENCY_INFO_TYPE_2.DependencyTypeFlags$VH.set(seg, x);
    }
    public static int DependencyTypeFlags$get(MemorySegment seg, long index) {
        return (int)_STORAGE_DEPENDENCY_INFO_TYPE_2.DependencyTypeFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DependencyTypeFlags$set(MemorySegment seg, long index, int x) {
        _STORAGE_DEPENDENCY_INFO_TYPE_2.DependencyTypeFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ProviderSpecificFlags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ProviderSpecificFlags"));
    public static VarHandle ProviderSpecificFlags$VH() {
        return _STORAGE_DEPENDENCY_INFO_TYPE_2.ProviderSpecificFlags$VH;
    }
    public static int ProviderSpecificFlags$get(MemorySegment seg) {
        return (int)_STORAGE_DEPENDENCY_INFO_TYPE_2.ProviderSpecificFlags$VH.get(seg);
    }
    public static void ProviderSpecificFlags$set( MemorySegment seg, int x) {
        _STORAGE_DEPENDENCY_INFO_TYPE_2.ProviderSpecificFlags$VH.set(seg, x);
    }
    public static int ProviderSpecificFlags$get(MemorySegment seg, long index) {
        return (int)_STORAGE_DEPENDENCY_INFO_TYPE_2.ProviderSpecificFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProviderSpecificFlags$set(MemorySegment seg, long index, int x) {
        _STORAGE_DEPENDENCY_INFO_TYPE_2.ProviderSpecificFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment VirtualStorageType$slice(MemorySegment seg) {
        return seg.asSlice(8, 20);
    }
    static final VarHandle AncestorLevel$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("AncestorLevel"));
    public static VarHandle AncestorLevel$VH() {
        return _STORAGE_DEPENDENCY_INFO_TYPE_2.AncestorLevel$VH;
    }
    public static int AncestorLevel$get(MemorySegment seg) {
        return (int)_STORAGE_DEPENDENCY_INFO_TYPE_2.AncestorLevel$VH.get(seg);
    }
    public static void AncestorLevel$set( MemorySegment seg, int x) {
        _STORAGE_DEPENDENCY_INFO_TYPE_2.AncestorLevel$VH.set(seg, x);
    }
    public static int AncestorLevel$get(MemorySegment seg, long index) {
        return (int)_STORAGE_DEPENDENCY_INFO_TYPE_2.AncestorLevel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AncestorLevel$set(MemorySegment seg, long index, int x) {
        _STORAGE_DEPENDENCY_INFO_TYPE_2.AncestorLevel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DependencyDeviceName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("DependencyDeviceName")));
    public static VarHandle DependencyDeviceName$VH() {
        return _STORAGE_DEPENDENCY_INFO_TYPE_2.DependencyDeviceName$VH;
    }
    public static MemoryAddress DependencyDeviceName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_STORAGE_DEPENDENCY_INFO_TYPE_2.DependencyDeviceName$VH.get(seg);
    }
    public static void DependencyDeviceName$set( MemorySegment seg, MemoryAddress x) {
        _STORAGE_DEPENDENCY_INFO_TYPE_2.DependencyDeviceName$VH.set(seg, x);
    }
    public static MemoryAddress DependencyDeviceName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_STORAGE_DEPENDENCY_INFO_TYPE_2.DependencyDeviceName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DependencyDeviceName$set(MemorySegment seg, long index, MemoryAddress x) {
        _STORAGE_DEPENDENCY_INFO_TYPE_2.DependencyDeviceName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle HostVolumeName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("HostVolumeName")));
    public static VarHandle HostVolumeName$VH() {
        return _STORAGE_DEPENDENCY_INFO_TYPE_2.HostVolumeName$VH;
    }
    public static MemoryAddress HostVolumeName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_STORAGE_DEPENDENCY_INFO_TYPE_2.HostVolumeName$VH.get(seg);
    }
    public static void HostVolumeName$set( MemorySegment seg, MemoryAddress x) {
        _STORAGE_DEPENDENCY_INFO_TYPE_2.HostVolumeName$VH.set(seg, x);
    }
    public static MemoryAddress HostVolumeName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_STORAGE_DEPENDENCY_INFO_TYPE_2.HostVolumeName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void HostVolumeName$set(MemorySegment seg, long index, MemoryAddress x) {
        _STORAGE_DEPENDENCY_INFO_TYPE_2.HostVolumeName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DependentVolumeName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("DependentVolumeName")));
    public static VarHandle DependentVolumeName$VH() {
        return _STORAGE_DEPENDENCY_INFO_TYPE_2.DependentVolumeName$VH;
    }
    public static MemoryAddress DependentVolumeName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_STORAGE_DEPENDENCY_INFO_TYPE_2.DependentVolumeName$VH.get(seg);
    }
    public static void DependentVolumeName$set( MemorySegment seg, MemoryAddress x) {
        _STORAGE_DEPENDENCY_INFO_TYPE_2.DependentVolumeName$VH.set(seg, x);
    }
    public static MemoryAddress DependentVolumeName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_STORAGE_DEPENDENCY_INFO_TYPE_2.DependentVolumeName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DependentVolumeName$set(MemorySegment seg, long index, MemoryAddress x) {
        _STORAGE_DEPENDENCY_INFO_TYPE_2.DependentVolumeName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DependentVolumeRelativePath$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("DependentVolumeRelativePath")));
    public static VarHandle DependentVolumeRelativePath$VH() {
        return _STORAGE_DEPENDENCY_INFO_TYPE_2.DependentVolumeRelativePath$VH;
    }
    public static MemoryAddress DependentVolumeRelativePath$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_STORAGE_DEPENDENCY_INFO_TYPE_2.DependentVolumeRelativePath$VH.get(seg);
    }
    public static void DependentVolumeRelativePath$set( MemorySegment seg, MemoryAddress x) {
        _STORAGE_DEPENDENCY_INFO_TYPE_2.DependentVolumeRelativePath$VH.set(seg, x);
    }
    public static MemoryAddress DependentVolumeRelativePath$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_STORAGE_DEPENDENCY_INFO_TYPE_2.DependentVolumeRelativePath$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DependentVolumeRelativePath$set(MemorySegment seg, long index, MemoryAddress x) {
        _STORAGE_DEPENDENCY_INFO_TYPE_2.DependentVolumeRelativePath$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


