// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IDataObjectVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetData"),
        C_POINTER.withName("GetDataHere"),
        C_POINTER.withName("QueryGetData"),
        C_POINTER.withName("GetCanonicalFormatEtc"),
        C_POINTER.withName("SetData"),
        C_POINTER.withName("EnumFormatEtc"),
        C_POINTER.withName("DAdvise"),
        C_POINTER.withName("DUnadvise"),
        C_POINTER.withName("EnumDAdvise")
    ).withName("IDataObjectVtbl");
    public static MemoryLayout $LAYOUT() {
        return IDataObjectVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IDataObjectVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IDataObjectVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IDataObjectVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IDataObjectVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IDataObjectVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IDataObjectVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IDataObjectVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IDataObjectVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IDataObjectVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IDataObjectVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IDataObjectVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IDataObjectVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IDataObjectVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IDataObjectVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IDataObjectVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IDataObjectVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IDataObjectVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IDataObjectVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IDataObjectVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IDataObjectVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IDataObjectVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IDataObjectVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IDataObjectVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IDataObjectVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IDataObjectVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IDataObjectVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IDataObjectVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor GetData$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetData$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IDataObjectVtbl.GetData$FUNC, false
    );
    public interface GetData {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetData fi) {
            return RuntimeHelper.upcallStub(GetData.class, fi, IDataObjectVtbl.GetData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetData fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetData.class, fi, IDataObjectVtbl.GetData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetData ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IDataObjectVtbl.GetData$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetData$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetData")));
    public static VarHandle GetData$VH() {
        return IDataObjectVtbl.GetData$VH;
    }
    public static MemoryAddress GetData$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IDataObjectVtbl.GetData$VH.get(seg);
    }
    public static void GetData$set( MemorySegment seg, MemoryAddress x) {
        IDataObjectVtbl.GetData$VH.set(seg, x);
    }
    public static MemoryAddress GetData$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IDataObjectVtbl.GetData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetData$set(MemorySegment seg, long index, MemoryAddress x) {
        IDataObjectVtbl.GetData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetData GetData (MemorySegment segment) {
        return GetData.ofAddress(GetData$get(segment));
    }
    static final FunctionDescriptor GetDataHere$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetDataHere$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IDataObjectVtbl.GetDataHere$FUNC, false
    );
    public interface GetDataHere {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetDataHere fi) {
            return RuntimeHelper.upcallStub(GetDataHere.class, fi, IDataObjectVtbl.GetDataHere$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetDataHere fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetDataHere.class, fi, IDataObjectVtbl.GetDataHere$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetDataHere ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IDataObjectVtbl.GetDataHere$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDataHere$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetDataHere")));
    public static VarHandle GetDataHere$VH() {
        return IDataObjectVtbl.GetDataHere$VH;
    }
    public static MemoryAddress GetDataHere$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IDataObjectVtbl.GetDataHere$VH.get(seg);
    }
    public static void GetDataHere$set( MemorySegment seg, MemoryAddress x) {
        IDataObjectVtbl.GetDataHere$VH.set(seg, x);
    }
    public static MemoryAddress GetDataHere$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IDataObjectVtbl.GetDataHere$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDataHere$set(MemorySegment seg, long index, MemoryAddress x) {
        IDataObjectVtbl.GetDataHere$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDataHere GetDataHere (MemorySegment segment) {
        return GetDataHere.ofAddress(GetDataHere$get(segment));
    }
    static final FunctionDescriptor QueryGetData$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryGetData$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IDataObjectVtbl.QueryGetData$FUNC, false
    );
    public interface QueryGetData {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(QueryGetData fi) {
            return RuntimeHelper.upcallStub(QueryGetData.class, fi, IDataObjectVtbl.QueryGetData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryGetData fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryGetData.class, fi, IDataObjectVtbl.QueryGetData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryGetData ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IDataObjectVtbl.QueryGetData$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryGetData$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryGetData")));
    public static VarHandle QueryGetData$VH() {
        return IDataObjectVtbl.QueryGetData$VH;
    }
    public static MemoryAddress QueryGetData$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IDataObjectVtbl.QueryGetData$VH.get(seg);
    }
    public static void QueryGetData$set( MemorySegment seg, MemoryAddress x) {
        IDataObjectVtbl.QueryGetData$VH.set(seg, x);
    }
    public static MemoryAddress QueryGetData$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IDataObjectVtbl.QueryGetData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryGetData$set(MemorySegment seg, long index, MemoryAddress x) {
        IDataObjectVtbl.QueryGetData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryGetData QueryGetData (MemorySegment segment) {
        return QueryGetData.ofAddress(QueryGetData$get(segment));
    }
    static final FunctionDescriptor GetCanonicalFormatEtc$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetCanonicalFormatEtc$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IDataObjectVtbl.GetCanonicalFormatEtc$FUNC, false
    );
    public interface GetCanonicalFormatEtc {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetCanonicalFormatEtc fi) {
            return RuntimeHelper.upcallStub(GetCanonicalFormatEtc.class, fi, IDataObjectVtbl.GetCanonicalFormatEtc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetCanonicalFormatEtc fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetCanonicalFormatEtc.class, fi, IDataObjectVtbl.GetCanonicalFormatEtc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetCanonicalFormatEtc ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IDataObjectVtbl.GetCanonicalFormatEtc$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetCanonicalFormatEtc$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetCanonicalFormatEtc")));
    public static VarHandle GetCanonicalFormatEtc$VH() {
        return IDataObjectVtbl.GetCanonicalFormatEtc$VH;
    }
    public static MemoryAddress GetCanonicalFormatEtc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IDataObjectVtbl.GetCanonicalFormatEtc$VH.get(seg);
    }
    public static void GetCanonicalFormatEtc$set( MemorySegment seg, MemoryAddress x) {
        IDataObjectVtbl.GetCanonicalFormatEtc$VH.set(seg, x);
    }
    public static MemoryAddress GetCanonicalFormatEtc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IDataObjectVtbl.GetCanonicalFormatEtc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetCanonicalFormatEtc$set(MemorySegment seg, long index, MemoryAddress x) {
        IDataObjectVtbl.GetCanonicalFormatEtc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetCanonicalFormatEtc GetCanonicalFormatEtc (MemorySegment segment) {
        return GetCanonicalFormatEtc.ofAddress(GetCanonicalFormatEtc$get(segment));
    }
    static final FunctionDescriptor SetData$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle SetData$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        IDataObjectVtbl.SetData$FUNC, false
    );
    public interface SetData {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3);
        static MemoryAddress allocate(SetData fi) {
            return RuntimeHelper.upcallStub(SetData.class, fi, IDataObjectVtbl.SetData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(SetData fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetData.class, fi, IDataObjectVtbl.SetData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static SetData ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3) -> {
                try {
                    return (int)IDataObjectVtbl.SetData$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetData$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetData")));
    public static VarHandle SetData$VH() {
        return IDataObjectVtbl.SetData$VH;
    }
    public static MemoryAddress SetData$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IDataObjectVtbl.SetData$VH.get(seg);
    }
    public static void SetData$set( MemorySegment seg, MemoryAddress x) {
        IDataObjectVtbl.SetData$VH.set(seg, x);
    }
    public static MemoryAddress SetData$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IDataObjectVtbl.SetData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetData$set(MemorySegment seg, long index, MemoryAddress x) {
        IDataObjectVtbl.SetData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetData SetData (MemorySegment segment) {
        return SetData.ofAddress(SetData$get(segment));
    }
    static final FunctionDescriptor EnumFormatEtc$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle EnumFormatEtc$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        IDataObjectVtbl.EnumFormatEtc$FUNC, false
    );
    public interface EnumFormatEtc {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(EnumFormatEtc fi) {
            return RuntimeHelper.upcallStub(EnumFormatEtc.class, fi, IDataObjectVtbl.EnumFormatEtc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(EnumFormatEtc fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(EnumFormatEtc.class, fi, IDataObjectVtbl.EnumFormatEtc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static EnumFormatEtc ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IDataObjectVtbl.EnumFormatEtc$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle EnumFormatEtc$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnumFormatEtc")));
    public static VarHandle EnumFormatEtc$VH() {
        return IDataObjectVtbl.EnumFormatEtc$VH;
    }
    public static MemoryAddress EnumFormatEtc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IDataObjectVtbl.EnumFormatEtc$VH.get(seg);
    }
    public static void EnumFormatEtc$set( MemorySegment seg, MemoryAddress x) {
        IDataObjectVtbl.EnumFormatEtc$VH.set(seg, x);
    }
    public static MemoryAddress EnumFormatEtc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IDataObjectVtbl.EnumFormatEtc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EnumFormatEtc$set(MemorySegment seg, long index, MemoryAddress x) {
        IDataObjectVtbl.EnumFormatEtc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnumFormatEtc EnumFormatEtc (MemorySegment segment) {
        return EnumFormatEtc.ofAddress(EnumFormatEtc$get(segment));
    }
    static final FunctionDescriptor DAdvise$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle DAdvise$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IDataObjectVtbl.DAdvise$FUNC, false
    );
    public interface DAdvise {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4);
        static MemoryAddress allocate(DAdvise fi) {
            return RuntimeHelper.upcallStub(DAdvise.class, fi, IDataObjectVtbl.DAdvise$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(DAdvise fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(DAdvise.class, fi, IDataObjectVtbl.DAdvise$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static DAdvise ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4) -> {
                try {
                    return (int)IDataObjectVtbl.DAdvise$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DAdvise$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("DAdvise")));
    public static VarHandle DAdvise$VH() {
        return IDataObjectVtbl.DAdvise$VH;
    }
    public static MemoryAddress DAdvise$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IDataObjectVtbl.DAdvise$VH.get(seg);
    }
    public static void DAdvise$set( MemorySegment seg, MemoryAddress x) {
        IDataObjectVtbl.DAdvise$VH.set(seg, x);
    }
    public static MemoryAddress DAdvise$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IDataObjectVtbl.DAdvise$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DAdvise$set(MemorySegment seg, long index, MemoryAddress x) {
        IDataObjectVtbl.DAdvise$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DAdvise DAdvise (MemorySegment segment) {
        return DAdvise.ofAddress(DAdvise$get(segment));
    }
    static final FunctionDescriptor DUnadvise$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle DUnadvise$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        IDataObjectVtbl.DUnadvise$FUNC, false
    );
    public interface DUnadvise {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
        static MemoryAddress allocate(DUnadvise fi) {
            return RuntimeHelper.upcallStub(DUnadvise.class, fi, IDataObjectVtbl.DUnadvise$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(DUnadvise fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(DUnadvise.class, fi, IDataObjectVtbl.DUnadvise$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static DUnadvise ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1) -> {
                try {
                    return (int)IDataObjectVtbl.DUnadvise$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DUnadvise$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("DUnadvise")));
    public static VarHandle DUnadvise$VH() {
        return IDataObjectVtbl.DUnadvise$VH;
    }
    public static MemoryAddress DUnadvise$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IDataObjectVtbl.DUnadvise$VH.get(seg);
    }
    public static void DUnadvise$set( MemorySegment seg, MemoryAddress x) {
        IDataObjectVtbl.DUnadvise$VH.set(seg, x);
    }
    public static MemoryAddress DUnadvise$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IDataObjectVtbl.DUnadvise$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DUnadvise$set(MemorySegment seg, long index, MemoryAddress x) {
        IDataObjectVtbl.DUnadvise$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DUnadvise DUnadvise (MemorySegment segment) {
        return DUnadvise.ofAddress(DUnadvise$get(segment));
    }
    static final FunctionDescriptor EnumDAdvise$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle EnumDAdvise$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IDataObjectVtbl.EnumDAdvise$FUNC, false
    );
    public interface EnumDAdvise {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(EnumDAdvise fi) {
            return RuntimeHelper.upcallStub(EnumDAdvise.class, fi, IDataObjectVtbl.EnumDAdvise$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(EnumDAdvise fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(EnumDAdvise.class, fi, IDataObjectVtbl.EnumDAdvise$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static EnumDAdvise ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IDataObjectVtbl.EnumDAdvise$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle EnumDAdvise$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnumDAdvise")));
    public static VarHandle EnumDAdvise$VH() {
        return IDataObjectVtbl.EnumDAdvise$VH;
    }
    public static MemoryAddress EnumDAdvise$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IDataObjectVtbl.EnumDAdvise$VH.get(seg);
    }
    public static void EnumDAdvise$set( MemorySegment seg, MemoryAddress x) {
        IDataObjectVtbl.EnumDAdvise$VH.set(seg, x);
    }
    public static MemoryAddress EnumDAdvise$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IDataObjectVtbl.EnumDAdvise$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EnumDAdvise$set(MemorySegment seg, long index, MemoryAddress x) {
        IDataObjectVtbl.EnumDAdvise$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnumDAdvise EnumDAdvise (MemorySegment segment) {
        return EnumDAdvise.ofAddress(EnumDAdvise$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


