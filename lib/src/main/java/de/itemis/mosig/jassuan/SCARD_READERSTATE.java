// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class SCARD_READERSTATE {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("szReader"),
        C_POINTER.withName("pvUserData"),
        C_LONG.withName("dwCurrentState"),
        C_LONG.withName("dwEventState"),
        C_LONG.withName("cbAtr"),
        MemoryLayout.sequenceLayout(36, C_CHAR).withName("rgbAtr")
    );
    public static MemoryLayout $LAYOUT() {
        return SCARD_READERSTATE.$struct$LAYOUT;
    }
    static final VarHandle szReader$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("szReader")));
    public static VarHandle szReader$VH() {
        return SCARD_READERSTATE.szReader$VH;
    }
    public static MemoryAddress szReader$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)SCARD_READERSTATE.szReader$VH.get(seg);
    }
    public static void szReader$set( MemorySegment seg, MemoryAddress x) {
        SCARD_READERSTATE.szReader$VH.set(seg, x);
    }
    public static MemoryAddress szReader$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)SCARD_READERSTATE.szReader$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void szReader$set(MemorySegment seg, long index, MemoryAddress x) {
        SCARD_READERSTATE.szReader$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pvUserData$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pvUserData")));
    public static VarHandle pvUserData$VH() {
        return SCARD_READERSTATE.pvUserData$VH;
    }
    public static MemoryAddress pvUserData$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)SCARD_READERSTATE.pvUserData$VH.get(seg);
    }
    public static void pvUserData$set( MemorySegment seg, MemoryAddress x) {
        SCARD_READERSTATE.pvUserData$VH.set(seg, x);
    }
    public static MemoryAddress pvUserData$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)SCARD_READERSTATE.pvUserData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pvUserData$set(MemorySegment seg, long index, MemoryAddress x) {
        SCARD_READERSTATE.pvUserData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwCurrentState$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCurrentState"));
    public static VarHandle dwCurrentState$VH() {
        return SCARD_READERSTATE.dwCurrentState$VH;
    }
    public static int dwCurrentState$get(MemorySegment seg) {
        return (int)SCARD_READERSTATE.dwCurrentState$VH.get(seg);
    }
    public static void dwCurrentState$set( MemorySegment seg, int x) {
        SCARD_READERSTATE.dwCurrentState$VH.set(seg, x);
    }
    public static int dwCurrentState$get(MemorySegment seg, long index) {
        return (int)SCARD_READERSTATE.dwCurrentState$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwCurrentState$set(MemorySegment seg, long index, int x) {
        SCARD_READERSTATE.dwCurrentState$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwEventState$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwEventState"));
    public static VarHandle dwEventState$VH() {
        return SCARD_READERSTATE.dwEventState$VH;
    }
    public static int dwEventState$get(MemorySegment seg) {
        return (int)SCARD_READERSTATE.dwEventState$VH.get(seg);
    }
    public static void dwEventState$set( MemorySegment seg, int x) {
        SCARD_READERSTATE.dwEventState$VH.set(seg, x);
    }
    public static int dwEventState$get(MemorySegment seg, long index) {
        return (int)SCARD_READERSTATE.dwEventState$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwEventState$set(MemorySegment seg, long index, int x) {
        SCARD_READERSTATE.dwEventState$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbAtr$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbAtr"));
    public static VarHandle cbAtr$VH() {
        return SCARD_READERSTATE.cbAtr$VH;
    }
    public static int cbAtr$get(MemorySegment seg) {
        return (int)SCARD_READERSTATE.cbAtr$VH.get(seg);
    }
    public static void cbAtr$set( MemorySegment seg, int x) {
        SCARD_READERSTATE.cbAtr$VH.set(seg, x);
    }
    public static int cbAtr$get(MemorySegment seg, long index) {
        return (int)SCARD_READERSTATE.cbAtr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbAtr$set(MemorySegment seg, long index, int x) {
        SCARD_READERSTATE.cbAtr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment rgbAtr$slice(MemorySegment seg) {
        return seg.asSlice(28, 36);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


