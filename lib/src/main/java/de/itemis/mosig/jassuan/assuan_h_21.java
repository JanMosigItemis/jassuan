// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
 class assuan_h_21 extends assuan_h_20 {

    public static int ScopeLevelOrganization() {
        return (int)8L;
    }
    public static int ScopeLevelGlobal() {
        return (int)14L;
    }
    public static int ScopeLevelCount() {
        return (int)16L;
    }
    public static int NSP_NOTIFY_IMMEDIATELY() {
        return (int)0L;
    }
    public static int NSP_NOTIFY_HWND() {
        return (int)1L;
    }
    public static int NSP_NOTIFY_EVENT() {
        return (int)2L;
    }
    public static int NSP_NOTIFY_PORT() {
        return (int)3L;
    }
    public static int NSP_NOTIFY_APC() {
        return (int)4L;
    }
    public static int COMP_EQUAL() {
        return (int)0L;
    }
    public static int COMP_NOTLESS() {
        return (int)1L;
    }
    public static int RNRSERVICE_REGISTER() {
        return (int)0L;
    }
    public static int RNRSERVICE_DEREGISTER() {
        return (int)1L;
    }
    public static int RNRSERVICE_DELETE() {
        return (int)2L;
    }
    public static MethodHandle accept$MH() {
        return RuntimeHelper.requireNonNull(constants$1348.accept$MH,"accept");
    }
    public static long accept ( long s,  Addressable addr,  Addressable addrlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1348.accept$MH, "accept");
        try {
            return (long)mh$.invokeExact(s, addr.address(), addrlen.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bind$MH() {
        return RuntimeHelper.requireNonNull(constants$1348.bind$MH,"bind");
    }
    public static int bind ( long s,  Addressable name,  int namelen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1348.bind$MH, "bind");
        try {
            return (int)mh$.invokeExact(s, name.address(), namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle closesocket$MH() {
        return RuntimeHelper.requireNonNull(constants$1348.closesocket$MH,"closesocket");
    }
    public static int closesocket ( long s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1348.closesocket$MH, "closesocket");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle connect$MH() {
        return RuntimeHelper.requireNonNull(constants$1349.connect$MH,"connect");
    }
    public static int connect ( long s,  Addressable name,  int namelen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1349.connect$MH, "connect");
        try {
            return (int)mh$.invokeExact(s, name.address(), namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ioctlsocket$MH() {
        return RuntimeHelper.requireNonNull(constants$1349.ioctlsocket$MH,"ioctlsocket");
    }
    public static int ioctlsocket ( long s,  int cmd,  Addressable argp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1349.ioctlsocket$MH, "ioctlsocket");
        try {
            return (int)mh$.invokeExact(s, cmd, argp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpeername$MH() {
        return RuntimeHelper.requireNonNull(constants$1349.getpeername$MH,"getpeername");
    }
    public static int getpeername ( long s,  Addressable name,  Addressable namelen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1349.getpeername$MH, "getpeername");
        try {
            return (int)mh$.invokeExact(s, name.address(), namelen.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsockname$MH() {
        return RuntimeHelper.requireNonNull(constants$1349.getsockname$MH,"getsockname");
    }
    public static int getsockname ( long s,  Addressable name,  Addressable namelen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1349.getsockname$MH, "getsockname");
        try {
            return (int)mh$.invokeExact(s, name.address(), namelen.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsockopt$MH() {
        return RuntimeHelper.requireNonNull(constants$1349.getsockopt$MH,"getsockopt");
    }
    public static int getsockopt ( long s,  int level,  int optname,  Addressable optval,  Addressable optlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1349.getsockopt$MH, "getsockopt");
        try {
            return (int)mh$.invokeExact(s, level, optname, optval.address(), optlen.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle htonl$MH() {
        return RuntimeHelper.requireNonNull(constants$1349.htonl$MH,"htonl");
    }
    public static int htonl ( int hostlong) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1349.htonl$MH, "htonl");
        try {
            return (int)mh$.invokeExact(hostlong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle htons$MH() {
        return RuntimeHelper.requireNonNull(constants$1350.htons$MH,"htons");
    }
    public static short htons ( short hostshort) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1350.htons$MH, "htons");
        try {
            return (short)mh$.invokeExact(hostshort);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_addr$MH() {
        return RuntimeHelper.requireNonNull(constants$1350.inet_addr$MH,"inet_addr");
    }
    public static int inet_addr ( Addressable cp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1350.inet_addr$MH, "inet_addr");
        try {
            return (int)mh$.invokeExact(cp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_ntoa$MH() {
        return RuntimeHelper.requireNonNull(constants$1350.inet_ntoa$MH,"inet_ntoa");
    }
    public static MemoryAddress inet_ntoa ( MemorySegment in) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1350.inet_ntoa$MH, "inet_ntoa");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(in);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle listen$MH() {
        return RuntimeHelper.requireNonNull(constants$1350.listen$MH,"listen");
    }
    public static int listen ( long s,  int backlog) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1350.listen$MH, "listen");
        try {
            return (int)mh$.invokeExact(s, backlog);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ntohl$MH() {
        return RuntimeHelper.requireNonNull(constants$1350.ntohl$MH,"ntohl");
    }
    public static int ntohl ( int netlong) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1350.ntohl$MH, "ntohl");
        try {
            return (int)mh$.invokeExact(netlong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ntohs$MH() {
        return RuntimeHelper.requireNonNull(constants$1350.ntohs$MH,"ntohs");
    }
    public static short ntohs ( short netshort) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1350.ntohs$MH, "ntohs");
        try {
            return (short)mh$.invokeExact(netshort);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recv$MH() {
        return RuntimeHelper.requireNonNull(constants$1351.recv$MH,"recv");
    }
    public static int recv ( long s,  Addressable buf,  int len,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1351.recv$MH, "recv");
        try {
            return (int)mh$.invokeExact(s, buf.address(), len, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recvfrom$MH() {
        return RuntimeHelper.requireNonNull(constants$1351.recvfrom$MH,"recvfrom");
    }
    public static int recvfrom ( long s,  Addressable buf,  int len,  int flags,  Addressable from,  Addressable fromlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1351.recvfrom$MH, "recvfrom");
        try {
            return (int)mh$.invokeExact(s, buf.address(), len, flags, from.address(), fromlen.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$1351.select$MH,"select");
    }
    public static int select ( int nfds,  Addressable readfds,  Addressable writefds,  Addressable exceptfds,  Addressable timeout) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1351.select$MH, "select");
        try {
            return (int)mh$.invokeExact(nfds, readfds.address(), writefds.address(), exceptfds.address(), timeout.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle send$MH() {
        return RuntimeHelper.requireNonNull(constants$1351.send$MH,"send");
    }
    public static int send ( long s,  Addressable buf,  int len,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1351.send$MH, "send");
        try {
            return (int)mh$.invokeExact(s, buf.address(), len, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sendto$MH() {
        return RuntimeHelper.requireNonNull(constants$1351.sendto$MH,"sendto");
    }
    public static int sendto ( long s,  Addressable buf,  int len,  int flags,  Addressable to,  int tolen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1351.sendto$MH, "sendto");
        try {
            return (int)mh$.invokeExact(s, buf.address(), len, flags, to.address(), tolen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setsockopt$MH() {
        return RuntimeHelper.requireNonNull(constants$1351.setsockopt$MH,"setsockopt");
    }
    public static int setsockopt ( long s,  int level,  int optname,  Addressable optval,  int optlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1351.setsockopt$MH, "setsockopt");
        try {
            return (int)mh$.invokeExact(s, level, optname, optval.address(), optlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$1352.shutdown$MH,"shutdown");
    }
    public static int shutdown ( long s,  int how) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1352.shutdown$MH, "shutdown");
        try {
            return (int)mh$.invokeExact(s, how);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle socket$MH() {
        return RuntimeHelper.requireNonNull(constants$1352.socket$MH,"socket");
    }
    public static long socket ( int af,  int type,  int protocol) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1352.socket$MH, "socket");
        try {
            return (long)mh$.invokeExact(af, type, protocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostbyaddr$MH() {
        return RuntimeHelper.requireNonNull(constants$1352.gethostbyaddr$MH,"gethostbyaddr");
    }
    public static MemoryAddress gethostbyaddr ( Addressable addr,  int len,  int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1352.gethostbyaddr$MH, "gethostbyaddr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(addr.address(), len, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostbyname$MH() {
        return RuntimeHelper.requireNonNull(constants$1352.gethostbyname$MH,"gethostbyname");
    }
    public static MemoryAddress gethostbyname ( Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1352.gethostbyname$MH, "gethostbyname");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(name.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostname$MH() {
        return RuntimeHelper.requireNonNull(constants$1352.gethostname$MH,"gethostname");
    }
    public static int gethostname ( Addressable name,  int namelen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1352.gethostname$MH, "gethostname");
        try {
            return (int)mh$.invokeExact(name.address(), namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getservbyport$MH() {
        return RuntimeHelper.requireNonNull(constants$1352.getservbyport$MH,"getservbyport");
    }
    public static MemoryAddress getservbyport ( int port,  Addressable proto) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1352.getservbyport$MH, "getservbyport");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(port, proto.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getservbyname$MH() {
        return RuntimeHelper.requireNonNull(constants$1353.getservbyname$MH,"getservbyname");
    }
    public static MemoryAddress getservbyname ( Addressable name,  Addressable proto) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1353.getservbyname$MH, "getservbyname");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(name.address(), proto.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getprotobynumber$MH() {
        return RuntimeHelper.requireNonNull(constants$1353.getprotobynumber$MH,"getprotobynumber");
    }
    public static MemoryAddress getprotobynumber ( int number) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1353.getprotobynumber$MH, "getprotobynumber");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getprotobyname$MH() {
        return RuntimeHelper.requireNonNull(constants$1353.getprotobyname$MH,"getprotobyname");
    }
    public static MemoryAddress getprotobyname ( Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1353.getprotobyname$MH, "getprotobyname");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(name.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAStartup$MH() {
        return RuntimeHelper.requireNonNull(constants$1353.WSAStartup$MH,"WSAStartup");
    }
    public static int WSAStartup ( short wVersionRequested,  Addressable lpWSAData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1353.WSAStartup$MH, "WSAStartup");
        try {
            return (int)mh$.invokeExact(wVersionRequested, lpWSAData.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSACleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$1353.WSACleanup$MH,"WSACleanup");
    }
    public static int WSACleanup () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1353.WSACleanup$MH, "WSACleanup");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASetLastError$MH() {
        return RuntimeHelper.requireNonNull(constants$1353.WSASetLastError$MH,"WSASetLastError");
    }
    public static void WSASetLastError ( int iError) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1353.WSASetLastError$MH, "WSASetLastError");
        try {
            mh$.invokeExact(iError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetLastError$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.WSAGetLastError$MH,"WSAGetLastError");
    }
    public static int WSAGetLastError () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1354.WSAGetLastError$MH, "WSAGetLastError");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAIsBlocking$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.WSAIsBlocking$MH,"WSAIsBlocking");
    }
    public static int WSAIsBlocking () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1354.WSAIsBlocking$MH, "WSAIsBlocking");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAUnhookBlockingHook$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.WSAUnhookBlockingHook$MH,"WSAUnhookBlockingHook");
    }
    public static int WSAUnhookBlockingHook () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1354.WSAUnhookBlockingHook$MH, "WSAUnhookBlockingHook");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASetBlockingHook$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.WSASetBlockingHook$MH,"WSASetBlockingHook");
    }
    public static MemoryAddress WSASetBlockingHook ( Addressable lpBlockFunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1354.WSASetBlockingHook$MH, "WSASetBlockingHook");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpBlockFunc.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSACancelBlockingCall$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.WSACancelBlockingCall$MH,"WSACancelBlockingCall");
    }
    public static int WSACancelBlockingCall () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1354.WSACancelBlockingCall$MH, "WSACancelBlockingCall");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncGetServByName$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.WSAAsyncGetServByName$MH,"WSAAsyncGetServByName");
    }
    public static MemoryAddress WSAAsyncGetServByName ( Addressable hWnd,  int wMsg,  Addressable name,  Addressable proto,  Addressable buf,  int buflen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1354.WSAAsyncGetServByName$MH, "WSAAsyncGetServByName");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hWnd.address(), wMsg, name.address(), proto.address(), buf.address(), buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncGetServByPort$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.WSAAsyncGetServByPort$MH,"WSAAsyncGetServByPort");
    }
    public static MemoryAddress WSAAsyncGetServByPort ( Addressable hWnd,  int wMsg,  int port,  Addressable proto,  Addressable buf,  int buflen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1355.WSAAsyncGetServByPort$MH, "WSAAsyncGetServByPort");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hWnd.address(), wMsg, port, proto.address(), buf.address(), buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncGetProtoByName$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.WSAAsyncGetProtoByName$MH,"WSAAsyncGetProtoByName");
    }
    public static MemoryAddress WSAAsyncGetProtoByName ( Addressable hWnd,  int wMsg,  Addressable name,  Addressable buf,  int buflen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1355.WSAAsyncGetProtoByName$MH, "WSAAsyncGetProtoByName");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hWnd.address(), wMsg, name.address(), buf.address(), buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncGetProtoByNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.WSAAsyncGetProtoByNumber$MH,"WSAAsyncGetProtoByNumber");
    }
    public static MemoryAddress WSAAsyncGetProtoByNumber ( Addressable hWnd,  int wMsg,  int number,  Addressable buf,  int buflen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1355.WSAAsyncGetProtoByNumber$MH, "WSAAsyncGetProtoByNumber");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hWnd.address(), wMsg, number, buf.address(), buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncGetHostByName$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.WSAAsyncGetHostByName$MH,"WSAAsyncGetHostByName");
    }
    public static MemoryAddress WSAAsyncGetHostByName ( Addressable hWnd,  int wMsg,  Addressable name,  Addressable buf,  int buflen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1355.WSAAsyncGetHostByName$MH, "WSAAsyncGetHostByName");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hWnd.address(), wMsg, name.address(), buf.address(), buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncGetHostByAddr$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.WSAAsyncGetHostByAddr$MH,"WSAAsyncGetHostByAddr");
    }
    public static MemoryAddress WSAAsyncGetHostByAddr ( Addressable hWnd,  int wMsg,  Addressable addr,  int len,  int type,  Addressable buf,  int buflen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1355.WSAAsyncGetHostByAddr$MH, "WSAAsyncGetHostByAddr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hWnd.address(), wMsg, addr.address(), len, type, buf.address(), buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSACancelAsyncRequest$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.WSACancelAsyncRequest$MH,"WSACancelAsyncRequest");
    }
    public static int WSACancelAsyncRequest ( Addressable hAsyncTaskHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1355.WSACancelAsyncRequest$MH, "WSACancelAsyncRequest");
        try {
            return (int)mh$.invokeExact(hAsyncTaskHandle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncSelect$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.WSAAsyncSelect$MH,"WSAAsyncSelect");
    }
    public static int WSAAsyncSelect ( long s,  Addressable hWnd,  int wMsg,  int lEvent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1356.WSAAsyncSelect$MH, "WSAAsyncSelect");
        try {
            return (int)mh$.invokeExact(s, hWnd.address(), wMsg, lEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAccept$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.WSAAccept$MH,"WSAAccept");
    }
    public static long WSAAccept ( long s,  Addressable addr,  Addressable addrlen,  Addressable lpfnCondition,  long dwCallbackData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1356.WSAAccept$MH, "WSAAccept");
        try {
            return (long)mh$.invokeExact(s, addr.address(), addrlen.address(), lpfnCondition.address(), dwCallbackData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSACloseEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.WSACloseEvent$MH,"WSACloseEvent");
    }
    public static int WSACloseEvent ( Addressable hEvent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1356.WSACloseEvent$MH, "WSACloseEvent");
        try {
            return (int)mh$.invokeExact(hEvent.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAConnect$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.WSAConnect$MH,"WSAConnect");
    }
    public static int WSAConnect ( long s,  Addressable name,  int namelen,  Addressable lpCallerData,  Addressable lpCalleeData,  Addressable lpSQOS,  Addressable lpGQOS) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1356.WSAConnect$MH, "WSAConnect");
        try {
            return (int)mh$.invokeExact(s, name.address(), namelen, lpCallerData.address(), lpCalleeData.address(), lpSQOS.address(), lpGQOS.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSACreateEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.WSACreateEvent$MH,"WSACreateEvent");
    }
    public static MemoryAddress WSACreateEvent () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1356.WSACreateEvent$MH, "WSACreateEvent");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSADuplicateSocketA$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.WSADuplicateSocketA$MH,"WSADuplicateSocketA");
    }
    public static int WSADuplicateSocketA ( long s,  int dwProcessId,  Addressable lpProtocolInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1356.WSADuplicateSocketA$MH, "WSADuplicateSocketA");
        try {
            return (int)mh$.invokeExact(s, dwProcessId, lpProtocolInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSADuplicateSocketW$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.WSADuplicateSocketW$MH,"WSADuplicateSocketW");
    }
    public static int WSADuplicateSocketW ( long s,  int dwProcessId,  Addressable lpProtocolInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1357.WSADuplicateSocketW$MH, "WSADuplicateSocketW");
        try {
            return (int)mh$.invokeExact(s, dwProcessId, lpProtocolInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAEnumNetworkEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.WSAEnumNetworkEvents$MH,"WSAEnumNetworkEvents");
    }
    public static int WSAEnumNetworkEvents ( long s,  Addressable hEventObject,  Addressable lpNetworkEvents) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1357.WSAEnumNetworkEvents$MH, "WSAEnumNetworkEvents");
        try {
            return (int)mh$.invokeExact(s, hEventObject.address(), lpNetworkEvents.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAEnumProtocolsA$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.WSAEnumProtocolsA$MH,"WSAEnumProtocolsA");
    }
    public static int WSAEnumProtocolsA ( Addressable lpiProtocols,  Addressable lpProtocolBuffer,  Addressable lpdwBufferLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1357.WSAEnumProtocolsA$MH, "WSAEnumProtocolsA");
        try {
            return (int)mh$.invokeExact(lpiProtocols.address(), lpProtocolBuffer.address(), lpdwBufferLength.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAEnumProtocolsW$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.WSAEnumProtocolsW$MH,"WSAEnumProtocolsW");
    }
    public static int WSAEnumProtocolsW ( Addressable lpiProtocols,  Addressable lpProtocolBuffer,  Addressable lpdwBufferLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1357.WSAEnumProtocolsW$MH, "WSAEnumProtocolsW");
        try {
            return (int)mh$.invokeExact(lpiProtocols.address(), lpProtocolBuffer.address(), lpdwBufferLength.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAEventSelect$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.WSAEventSelect$MH,"WSAEventSelect");
    }
    public static int WSAEventSelect ( long s,  Addressable hEventObject,  int lNetworkEvents) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1357.WSAEventSelect$MH, "WSAEventSelect");
        try {
            return (int)mh$.invokeExact(s, hEventObject.address(), lNetworkEvents);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetOverlappedResult$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.WSAGetOverlappedResult$MH,"WSAGetOverlappedResult");
    }
    public static int WSAGetOverlappedResult ( long s,  Addressable lpOverlapped,  Addressable lpcbTransfer,  int fWait,  Addressable lpdwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1357.WSAGetOverlappedResult$MH, "WSAGetOverlappedResult");
        try {
            return (int)mh$.invokeExact(s, lpOverlapped.address(), lpcbTransfer.address(), fWait, lpdwFlags.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetQOSByName$MH() {
        return RuntimeHelper.requireNonNull(constants$1358.WSAGetQOSByName$MH,"WSAGetQOSByName");
    }
    public static int WSAGetQOSByName ( long s,  Addressable lpQOSName,  Addressable lpQOS) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1358.WSAGetQOSByName$MH, "WSAGetQOSByName");
        try {
            return (int)mh$.invokeExact(s, lpQOSName.address(), lpQOS.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAHtonl$MH() {
        return RuntimeHelper.requireNonNull(constants$1358.WSAHtonl$MH,"WSAHtonl");
    }
    public static int WSAHtonl ( long s,  int hostlong,  Addressable lpnetlong) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1358.WSAHtonl$MH, "WSAHtonl");
        try {
            return (int)mh$.invokeExact(s, hostlong, lpnetlong.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAHtons$MH() {
        return RuntimeHelper.requireNonNull(constants$1358.WSAHtons$MH,"WSAHtons");
    }
    public static int WSAHtons ( long s,  short hostshort,  Addressable lpnetshort) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1358.WSAHtons$MH, "WSAHtons");
        try {
            return (int)mh$.invokeExact(s, hostshort, lpnetshort.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAIoctl$MH() {
        return RuntimeHelper.requireNonNull(constants$1358.WSAIoctl$MH,"WSAIoctl");
    }
    public static int WSAIoctl ( long s,  int dwIoControlCode,  Addressable lpvInBuffer,  int cbInBuffer,  Addressable lpvOutBuffer,  int cbOutBuffer,  Addressable lpcbBytesReturned,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1358.WSAIoctl$MH, "WSAIoctl");
        try {
            return (int)mh$.invokeExact(s, dwIoControlCode, lpvInBuffer.address(), cbInBuffer, lpvOutBuffer.address(), cbOutBuffer, lpcbBytesReturned.address(), lpOverlapped.address(), lpCompletionRoutine.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAJoinLeaf$MH() {
        return RuntimeHelper.requireNonNull(constants$1358.WSAJoinLeaf$MH,"WSAJoinLeaf");
    }
    public static long WSAJoinLeaf ( long s,  Addressable name,  int namelen,  Addressable lpCallerData,  Addressable lpCalleeData,  Addressable lpSQOS,  Addressable lpGQOS,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1358.WSAJoinLeaf$MH, "WSAJoinLeaf");
        try {
            return (long)mh$.invokeExact(s, name.address(), namelen, lpCallerData.address(), lpCalleeData.address(), lpSQOS.address(), lpGQOS.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSANtohl$MH() {
        return RuntimeHelper.requireNonNull(constants$1358.WSANtohl$MH,"WSANtohl");
    }
    public static int WSANtohl ( long s,  int netlong,  Addressable lphostlong) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1358.WSANtohl$MH, "WSANtohl");
        try {
            return (int)mh$.invokeExact(s, netlong, lphostlong.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSANtohs$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.WSANtohs$MH,"WSANtohs");
    }
    public static int WSANtohs ( long s,  short netshort,  Addressable lphostshort) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1359.WSANtohs$MH, "WSANtohs");
        try {
            return (int)mh$.invokeExact(s, netshort, lphostshort.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSARecv$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.WSARecv$MH,"WSARecv");
    }
    public static int WSARecv ( long s,  Addressable lpBuffers,  int dwBufferCount,  Addressable lpNumberOfBytesRecvd,  Addressable lpFlags,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1359.WSARecv$MH, "WSARecv");
        try {
            return (int)mh$.invokeExact(s, lpBuffers.address(), dwBufferCount, lpNumberOfBytesRecvd.address(), lpFlags.address(), lpOverlapped.address(), lpCompletionRoutine.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSARecvDisconnect$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.WSARecvDisconnect$MH,"WSARecvDisconnect");
    }
    public static int WSARecvDisconnect ( long s,  Addressable lpInboundDisconnectData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1359.WSARecvDisconnect$MH, "WSARecvDisconnect");
        try {
            return (int)mh$.invokeExact(s, lpInboundDisconnectData.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSARecvFrom$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.WSARecvFrom$MH,"WSARecvFrom");
    }
    public static int WSARecvFrom ( long s,  Addressable lpBuffers,  int dwBufferCount,  Addressable lpNumberOfBytesRecvd,  Addressable lpFlags,  Addressable lpFrom,  Addressable lpFromlen,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1359.WSARecvFrom$MH, "WSARecvFrom");
        try {
            return (int)mh$.invokeExact(s, lpBuffers.address(), dwBufferCount, lpNumberOfBytesRecvd.address(), lpFlags.address(), lpFrom.address(), lpFromlen.address(), lpOverlapped.address(), lpCompletionRoutine.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAResetEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.WSAResetEvent$MH,"WSAResetEvent");
    }
    public static int WSAResetEvent ( Addressable hEvent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1359.WSAResetEvent$MH, "WSAResetEvent");
        try {
            return (int)mh$.invokeExact(hEvent.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASend$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.WSASend$MH,"WSASend");
    }
    public static int WSASend ( long s,  Addressable lpBuffers,  int dwBufferCount,  Addressable lpNumberOfBytesSent,  int dwFlags,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1359.WSASend$MH, "WSASend");
        try {
            return (int)mh$.invokeExact(s, lpBuffers.address(), dwBufferCount, lpNumberOfBytesSent.address(), dwFlags, lpOverlapped.address(), lpCompletionRoutine.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASendDisconnect$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.WSASendDisconnect$MH,"WSASendDisconnect");
    }
    public static int WSASendDisconnect ( long s,  Addressable lpOutboundDisconnectData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1360.WSASendDisconnect$MH, "WSASendDisconnect");
        try {
            return (int)mh$.invokeExact(s, lpOutboundDisconnectData.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASendTo$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.WSASendTo$MH,"WSASendTo");
    }
    public static int WSASendTo ( long s,  Addressable lpBuffers,  int dwBufferCount,  Addressable lpNumberOfBytesSent,  int dwFlags,  Addressable lpTo,  int iTolen,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1360.WSASendTo$MH, "WSASendTo");
        try {
            return (int)mh$.invokeExact(s, lpBuffers.address(), dwBufferCount, lpNumberOfBytesSent.address(), dwFlags, lpTo.address(), iTolen, lpOverlapped.address(), lpCompletionRoutine.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASetEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.WSASetEvent$MH,"WSASetEvent");
    }
    public static int WSASetEvent ( Addressable hEvent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1360.WSASetEvent$MH, "WSASetEvent");
        try {
            return (int)mh$.invokeExact(hEvent.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASocketA$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.WSASocketA$MH,"WSASocketA");
    }
    public static long WSASocketA ( int af,  int type,  int protocol,  Addressable lpProtocolInfo,  int g,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1360.WSASocketA$MH, "WSASocketA");
        try {
            return (long)mh$.invokeExact(af, type, protocol, lpProtocolInfo.address(), g, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASocketW$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.WSASocketW$MH,"WSASocketW");
    }
    public static long WSASocketW ( int af,  int type,  int protocol,  Addressable lpProtocolInfo,  int g,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1360.WSASocketW$MH, "WSASocketW");
        try {
            return (long)mh$.invokeExact(af, type, protocol, lpProtocolInfo.address(), g, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAWaitForMultipleEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.WSAWaitForMultipleEvents$MH,"WSAWaitForMultipleEvents");
    }
    public static int WSAWaitForMultipleEvents ( int cEvents,  Addressable lphEvents,  int fWaitAll,  int dwTimeout,  int fAlertable) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1360.WSAWaitForMultipleEvents$MH, "WSAWaitForMultipleEvents");
        try {
            return (int)mh$.invokeExact(cEvents, lphEvents.address(), fWaitAll, dwTimeout, fAlertable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAddressToStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.WSAAddressToStringA$MH,"WSAAddressToStringA");
    }
    public static int WSAAddressToStringA ( Addressable lpsaAddress,  int dwAddressLength,  Addressable lpProtocolInfo,  Addressable lpszAddressString,  Addressable lpdwAddressStringLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1361.WSAAddressToStringA$MH, "WSAAddressToStringA");
        try {
            return (int)mh$.invokeExact(lpsaAddress.address(), dwAddressLength, lpProtocolInfo.address(), lpszAddressString.address(), lpdwAddressStringLength.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAddressToStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.WSAAddressToStringW$MH,"WSAAddressToStringW");
    }
    public static int WSAAddressToStringW ( Addressable lpsaAddress,  int dwAddressLength,  Addressable lpProtocolInfo,  Addressable lpszAddressString,  Addressable lpdwAddressStringLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1361.WSAAddressToStringW$MH, "WSAAddressToStringW");
        try {
            return (int)mh$.invokeExact(lpsaAddress.address(), dwAddressLength, lpProtocolInfo.address(), lpszAddressString.address(), lpdwAddressStringLength.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAStringToAddressA$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.WSAStringToAddressA$MH,"WSAStringToAddressA");
    }
    public static int WSAStringToAddressA ( Addressable AddressString,  int AddressFamily,  Addressable lpProtocolInfo,  Addressable lpAddress,  Addressable lpAddressLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1361.WSAStringToAddressA$MH, "WSAStringToAddressA");
        try {
            return (int)mh$.invokeExact(AddressString.address(), AddressFamily, lpProtocolInfo.address(), lpAddress.address(), lpAddressLength.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAStringToAddressW$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.WSAStringToAddressW$MH,"WSAStringToAddressW");
    }
    public static int WSAStringToAddressW ( Addressable AddressString,  int AddressFamily,  Addressable lpProtocolInfo,  Addressable lpAddress,  Addressable lpAddressLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1361.WSAStringToAddressW$MH, "WSAStringToAddressW");
        try {
            return (int)mh$.invokeExact(AddressString.address(), AddressFamily, lpProtocolInfo.address(), lpAddress.address(), lpAddressLength.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSALookupServiceBeginA$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.WSALookupServiceBeginA$MH,"WSALookupServiceBeginA");
    }
    public static int WSALookupServiceBeginA ( Addressable lpqsRestrictions,  int dwControlFlags,  Addressable lphLookup) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1361.WSALookupServiceBeginA$MH, "WSALookupServiceBeginA");
        try {
            return (int)mh$.invokeExact(lpqsRestrictions.address(), dwControlFlags, lphLookup.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSALookupServiceBeginW$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.WSALookupServiceBeginW$MH,"WSALookupServiceBeginW");
    }
    public static int WSALookupServiceBeginW ( Addressable lpqsRestrictions,  int dwControlFlags,  Addressable lphLookup) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1361.WSALookupServiceBeginW$MH, "WSALookupServiceBeginW");
        try {
            return (int)mh$.invokeExact(lpqsRestrictions.address(), dwControlFlags, lphLookup.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSALookupServiceNextA$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.WSALookupServiceNextA$MH,"WSALookupServiceNextA");
    }
    public static int WSALookupServiceNextA ( Addressable hLookup,  int dwControlFlags,  Addressable lpdwBufferLength,  Addressable lpqsResults) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1362.WSALookupServiceNextA$MH, "WSALookupServiceNextA");
        try {
            return (int)mh$.invokeExact(hLookup.address(), dwControlFlags, lpdwBufferLength.address(), lpqsResults.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSALookupServiceNextW$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.WSALookupServiceNextW$MH,"WSALookupServiceNextW");
    }
    public static int WSALookupServiceNextW ( Addressable hLookup,  int dwControlFlags,  Addressable lpdwBufferLength,  Addressable lpqsResults) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1362.WSALookupServiceNextW$MH, "WSALookupServiceNextW");
        try {
            return (int)mh$.invokeExact(hLookup.address(), dwControlFlags, lpdwBufferLength.address(), lpqsResults.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSANSPIoctl$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.WSANSPIoctl$MH,"WSANSPIoctl");
    }
    public static int WSANSPIoctl ( Addressable hLookup,  int dwControlCode,  Addressable lpvInBuffer,  int cbInBuffer,  Addressable lpvOutBuffer,  int cbOutBuffer,  Addressable lpcbBytesReturned,  Addressable lpCompletion) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1362.WSANSPIoctl$MH, "WSANSPIoctl");
        try {
            return (int)mh$.invokeExact(hLookup.address(), dwControlCode, lpvInBuffer.address(), cbInBuffer, lpvOutBuffer.address(), cbOutBuffer, lpcbBytesReturned.address(), lpCompletion.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSALookupServiceEnd$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.WSALookupServiceEnd$MH,"WSALookupServiceEnd");
    }
    public static int WSALookupServiceEnd ( Addressable hLookup) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1362.WSALookupServiceEnd$MH, "WSALookupServiceEnd");
        try {
            return (int)mh$.invokeExact(hLookup.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAInstallServiceClassA$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.WSAInstallServiceClassA$MH,"WSAInstallServiceClassA");
    }
    public static int WSAInstallServiceClassA ( Addressable lpServiceClassInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1362.WSAInstallServiceClassA$MH, "WSAInstallServiceClassA");
        try {
            return (int)mh$.invokeExact(lpServiceClassInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAInstallServiceClassW$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.WSAInstallServiceClassW$MH,"WSAInstallServiceClassW");
    }
    public static int WSAInstallServiceClassW ( Addressable lpServiceClassInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1362.WSAInstallServiceClassW$MH, "WSAInstallServiceClassW");
        try {
            return (int)mh$.invokeExact(lpServiceClassInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSARemoveServiceClass$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.WSARemoveServiceClass$MH,"WSARemoveServiceClass");
    }
    public static int WSARemoveServiceClass ( Addressable lpServiceClassId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1363.WSARemoveServiceClass$MH, "WSARemoveServiceClass");
        try {
            return (int)mh$.invokeExact(lpServiceClassId.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetServiceClassInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.WSAGetServiceClassInfoA$MH,"WSAGetServiceClassInfoA");
    }
    public static int WSAGetServiceClassInfoA ( Addressable lpProviderId,  Addressable lpServiceClassId,  Addressable lpdwBufSize,  Addressable lpServiceClassInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1363.WSAGetServiceClassInfoA$MH, "WSAGetServiceClassInfoA");
        try {
            return (int)mh$.invokeExact(lpProviderId.address(), lpServiceClassId.address(), lpdwBufSize.address(), lpServiceClassInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetServiceClassInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.WSAGetServiceClassInfoW$MH,"WSAGetServiceClassInfoW");
    }
    public static int WSAGetServiceClassInfoW ( Addressable lpProviderId,  Addressable lpServiceClassId,  Addressable lpdwBufSize,  Addressable lpServiceClassInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1363.WSAGetServiceClassInfoW$MH, "WSAGetServiceClassInfoW");
        try {
            return (int)mh$.invokeExact(lpProviderId.address(), lpServiceClassId.address(), lpdwBufSize.address(), lpServiceClassInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAEnumNameSpaceProvidersA$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.WSAEnumNameSpaceProvidersA$MH,"WSAEnumNameSpaceProvidersA");
    }
    public static int WSAEnumNameSpaceProvidersA ( Addressable lpdwBufferLength,  Addressable lpnspBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1363.WSAEnumNameSpaceProvidersA$MH, "WSAEnumNameSpaceProvidersA");
        try {
            return (int)mh$.invokeExact(lpdwBufferLength.address(), lpnspBuffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAEnumNameSpaceProvidersW$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.WSAEnumNameSpaceProvidersW$MH,"WSAEnumNameSpaceProvidersW");
    }
    public static int WSAEnumNameSpaceProvidersW ( Addressable lpdwBufferLength,  Addressable lpnspBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1363.WSAEnumNameSpaceProvidersW$MH, "WSAEnumNameSpaceProvidersW");
        try {
            return (int)mh$.invokeExact(lpdwBufferLength.address(), lpnspBuffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetServiceClassNameByClassIdA$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.WSAGetServiceClassNameByClassIdA$MH,"WSAGetServiceClassNameByClassIdA");
    }
    public static int WSAGetServiceClassNameByClassIdA ( Addressable lpServiceClassId,  Addressable lpszServiceClassName,  Addressable lpdwBufferLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1363.WSAGetServiceClassNameByClassIdA$MH, "WSAGetServiceClassNameByClassIdA");
        try {
            return (int)mh$.invokeExact(lpServiceClassId.address(), lpszServiceClassName.address(), lpdwBufferLength.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetServiceClassNameByClassIdW$MH() {
        return RuntimeHelper.requireNonNull(constants$1364.WSAGetServiceClassNameByClassIdW$MH,"WSAGetServiceClassNameByClassIdW");
    }
    public static int WSAGetServiceClassNameByClassIdW ( Addressable lpServiceClassId,  Addressable lpszServiceClassName,  Addressable lpdwBufferLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1364.WSAGetServiceClassNameByClassIdW$MH, "WSAGetServiceClassNameByClassIdW");
        try {
            return (int)mh$.invokeExact(lpServiceClassId.address(), lpszServiceClassName.address(), lpdwBufferLength.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASetServiceA$MH() {
        return RuntimeHelper.requireNonNull(constants$1364.WSASetServiceA$MH,"WSASetServiceA");
    }
    public static int WSASetServiceA ( Addressable lpqsRegInfo,  int essoperation,  int dwControlFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1364.WSASetServiceA$MH, "WSASetServiceA");
        try {
            return (int)mh$.invokeExact(lpqsRegInfo.address(), essoperation, dwControlFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASetServiceW$MH() {
        return RuntimeHelper.requireNonNull(constants$1364.WSASetServiceW$MH,"WSASetServiceW");
    }
    public static int WSASetServiceW ( Addressable lpqsRegInfo,  int essoperation,  int dwControlFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1364.WSASetServiceW$MH, "WSASetServiceW");
        try {
            return (int)mh$.invokeExact(lpqsRegInfo.address(), essoperation, dwControlFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAProviderConfigChange$MH() {
        return RuntimeHelper.requireNonNull(constants$1364.WSAProviderConfigChange$MH,"WSAProviderConfigChange");
    }
    public static int WSAProviderConfigChange ( Addressable lpNotificationHandle,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1364.WSAProviderConfigChange$MH, "WSAProviderConfigChange");
        try {
            return (int)mh$.invokeExact(lpNotificationHandle.address(), lpOverlapped.address(), lpCompletionRoutine.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAConnectByList$MH() {
        return RuntimeHelper.requireNonNull(constants$1364.WSAConnectByList$MH,"WSAConnectByList");
    }
    public static int WSAConnectByList ( long s,  Addressable SocketAddressList,  Addressable LocalAddressLength,  Addressable LocalAddress,  Addressable RemoteAddressLength,  Addressable RemoteAddress,  Addressable timeout,  Addressable Reserved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1364.WSAConnectByList$MH, "WSAConnectByList");
        try {
            return (int)mh$.invokeExact(s, SocketAddressList.address(), LocalAddressLength.address(), LocalAddress.address(), RemoteAddressLength.address(), RemoteAddress.address(), timeout.address(), Reserved.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAConnectByNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$1364.WSAConnectByNameA$MH,"WSAConnectByNameA");
    }
    public static int WSAConnectByNameA ( long s,  Addressable nodename,  Addressable servicename,  Addressable LocalAddressLength,  Addressable LocalAddress,  Addressable RemoteAddressLength,  Addressable RemoteAddress,  Addressable timeout,  Addressable Reserved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1364.WSAConnectByNameA$MH, "WSAConnectByNameA");
        try {
            return (int)mh$.invokeExact(s, nodename.address(), servicename.address(), LocalAddressLength.address(), LocalAddress.address(), RemoteAddressLength.address(), RemoteAddress.address(), timeout.address(), Reserved.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAConnectByNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$1365.WSAConnectByNameW$MH,"WSAConnectByNameW");
    }
    public static int WSAConnectByNameW ( long s,  Addressable nodename,  Addressable servicename,  Addressable LocalAddressLength,  Addressable LocalAddress,  Addressable RemoteAddressLength,  Addressable RemoteAddress,  Addressable timeout,  Addressable Reserved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1365.WSAConnectByNameW$MH, "WSAConnectByNameW");
        try {
            return (int)mh$.invokeExact(s, nodename.address(), servicename.address(), LocalAddressLength.address(), LocalAddress.address(), RemoteAddressLength.address(), RemoteAddress.address(), timeout.address(), Reserved.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAEnumNameSpaceProvidersExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1365.WSAEnumNameSpaceProvidersExA$MH,"WSAEnumNameSpaceProvidersExA");
    }
    public static int WSAEnumNameSpaceProvidersExA ( Addressable lpdwBufferLength,  Addressable lpnspBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1365.WSAEnumNameSpaceProvidersExA$MH, "WSAEnumNameSpaceProvidersExA");
        try {
            return (int)mh$.invokeExact(lpdwBufferLength.address(), lpnspBuffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAEnumNameSpaceProvidersExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1365.WSAEnumNameSpaceProvidersExW$MH,"WSAEnumNameSpaceProvidersExW");
    }
    public static int WSAEnumNameSpaceProvidersExW ( Addressable lpdwBufferLength,  Addressable lpnspBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1365.WSAEnumNameSpaceProvidersExW$MH, "WSAEnumNameSpaceProvidersExW");
        try {
            return (int)mh$.invokeExact(lpdwBufferLength.address(), lpnspBuffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAPoll$MH() {
        return RuntimeHelper.requireNonNull(constants$1365.WSAPoll$MH,"WSAPoll");
    }
    public static int WSAPoll ( Addressable fdarray,  int nfds,  int timeout) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1365.WSAPoll$MH, "WSAPoll");
        try {
            return (int)mh$.invokeExact(fdarray.address(), nfds, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASendMsg$MH() {
        return RuntimeHelper.requireNonNull(constants$1365.WSASendMsg$MH,"WSASendMsg");
    }
    public static int WSASendMsg ( long s,  Addressable lpMsg,  int dwFlags,  Addressable lpNumberOfBytesSent,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1365.WSASendMsg$MH, "WSASendMsg");
        try {
            return (int)mh$.invokeExact(s, lpMsg.address(), dwFlags, lpNumberOfBytesSent.address(), lpOverlapped.address(), lpCompletionRoutine.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int IP_PMTUDISC_NOT_SET() {
        return (int)0L;
    }
    public static int IP_PMTUDISC_DO() {
        return (int)1L;
    }
    public static int IP_PMTUDISC_DONT() {
        return (int)2L;
    }
    public static int IP_PMTUDISC_PROBE() {
        return (int)3L;
    }
    public static int IP_PMTUDISC_MAX() {
        return (int)4L;
    }
    public static int MCAST_INCLUDE() {
        return (int)0L;
    }
    public static int MCAST_EXCLUDE() {
        return (int)1L;
    }
    public static MethodHandle IN6_ADDR_EQUAL$MH() {
        return RuntimeHelper.requireNonNull(constants$1365.IN6_ADDR_EQUAL$MH,"IN6_ADDR_EQUAL");
    }
    public static int IN6_ADDR_EQUAL ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1365.IN6_ADDR_EQUAL$MH, "IN6_ADDR_EQUAL");
        try {
            return (int)mh$.invokeExact(x0.address(), x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment in6addr_any$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1366.in6addr_any$SEGMENT,"in6addr_any");
    }
    public static MemorySegment in6addr_loopback$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1366.in6addr_loopback$SEGMENT,"in6addr_loopback");
    }
    public static MethodHandle IN6_IS_ADDR_UNSPECIFIED$MH() {
        return RuntimeHelper.requireNonNull(constants$1366.IN6_IS_ADDR_UNSPECIFIED$MH,"IN6_IS_ADDR_UNSPECIFIED");
    }
    public static int IN6_IS_ADDR_UNSPECIFIED ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1366.IN6_IS_ADDR_UNSPECIFIED$MH, "IN6_IS_ADDR_UNSPECIFIED");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_LOOPBACK$MH() {
        return RuntimeHelper.requireNonNull(constants$1366.IN6_IS_ADDR_LOOPBACK$MH,"IN6_IS_ADDR_LOOPBACK");
    }
    public static int IN6_IS_ADDR_LOOPBACK ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1366.IN6_IS_ADDR_LOOPBACK$MH, "IN6_IS_ADDR_LOOPBACK");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_MULTICAST$MH() {
        return RuntimeHelper.requireNonNull(constants$1366.IN6_IS_ADDR_MULTICAST$MH,"IN6_IS_ADDR_MULTICAST");
    }
    public static int IN6_IS_ADDR_MULTICAST ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1366.IN6_IS_ADDR_MULTICAST$MH, "IN6_IS_ADDR_MULTICAST");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_LINKLOCAL$MH() {
        return RuntimeHelper.requireNonNull(constants$1366.IN6_IS_ADDR_LINKLOCAL$MH,"IN6_IS_ADDR_LINKLOCAL");
    }
    public static int IN6_IS_ADDR_LINKLOCAL ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1366.IN6_IS_ADDR_LINKLOCAL$MH, "IN6_IS_ADDR_LINKLOCAL");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_SITELOCAL$MH() {
        return RuntimeHelper.requireNonNull(constants$1367.IN6_IS_ADDR_SITELOCAL$MH,"IN6_IS_ADDR_SITELOCAL");
    }
    public static int IN6_IS_ADDR_SITELOCAL ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1367.IN6_IS_ADDR_SITELOCAL$MH, "IN6_IS_ADDR_SITELOCAL");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_V4MAPPED$MH() {
        return RuntimeHelper.requireNonNull(constants$1367.IN6_IS_ADDR_V4MAPPED$MH,"IN6_IS_ADDR_V4MAPPED");
    }
    public static int IN6_IS_ADDR_V4MAPPED ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1367.IN6_IS_ADDR_V4MAPPED$MH, "IN6_IS_ADDR_V4MAPPED");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_V4COMPAT$MH() {
        return RuntimeHelper.requireNonNull(constants$1367.IN6_IS_ADDR_V4COMPAT$MH,"IN6_IS_ADDR_V4COMPAT");
    }
    public static int IN6_IS_ADDR_V4COMPAT ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1367.IN6_IS_ADDR_V4COMPAT$MH, "IN6_IS_ADDR_V4COMPAT");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_MC_NODELOCAL$MH() {
        return RuntimeHelper.requireNonNull(constants$1367.IN6_IS_ADDR_MC_NODELOCAL$MH,"IN6_IS_ADDR_MC_NODELOCAL");
    }
    public static int IN6_IS_ADDR_MC_NODELOCAL ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1367.IN6_IS_ADDR_MC_NODELOCAL$MH, "IN6_IS_ADDR_MC_NODELOCAL");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_MC_LINKLOCAL$MH() {
        return RuntimeHelper.requireNonNull(constants$1367.IN6_IS_ADDR_MC_LINKLOCAL$MH,"IN6_IS_ADDR_MC_LINKLOCAL");
    }
    public static int IN6_IS_ADDR_MC_LINKLOCAL ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1367.IN6_IS_ADDR_MC_LINKLOCAL$MH, "IN6_IS_ADDR_MC_LINKLOCAL");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_MC_SITELOCAL$MH() {
        return RuntimeHelper.requireNonNull(constants$1367.IN6_IS_ADDR_MC_SITELOCAL$MH,"IN6_IS_ADDR_MC_SITELOCAL");
    }
    public static int IN6_IS_ADDR_MC_SITELOCAL ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1367.IN6_IS_ADDR_MC_SITELOCAL$MH, "IN6_IS_ADDR_MC_SITELOCAL");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_MC_ORGLOCAL$MH() {
        return RuntimeHelper.requireNonNull(constants$1368.IN6_IS_ADDR_MC_ORGLOCAL$MH,"IN6_IS_ADDR_MC_ORGLOCAL");
    }
    public static int IN6_IS_ADDR_MC_ORGLOCAL ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1368.IN6_IS_ADDR_MC_ORGLOCAL$MH, "IN6_IS_ADDR_MC_ORGLOCAL");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_MC_GLOBAL$MH() {
        return RuntimeHelper.requireNonNull(constants$1368.IN6_IS_ADDR_MC_GLOBAL$MH,"IN6_IS_ADDR_MC_GLOBAL");
    }
    public static int IN6_IS_ADDR_MC_GLOBAL ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1368.IN6_IS_ADDR_MC_GLOBAL$MH, "IN6_IS_ADDR_MC_GLOBAL");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6ADDR_ISANY$MH() {
        return RuntimeHelper.requireNonNull(constants$1368.IN6ADDR_ISANY$MH,"IN6ADDR_ISANY");
    }
    public static int IN6ADDR_ISANY ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1368.IN6ADDR_ISANY$MH, "IN6ADDR_ISANY");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6ADDR_ISLOOPBACK$MH() {
        return RuntimeHelper.requireNonNull(constants$1368.IN6ADDR_ISLOOPBACK$MH,"IN6ADDR_ISLOOPBACK");
    }
    public static int IN6ADDR_ISLOOPBACK ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1368.IN6ADDR_ISLOOPBACK$MH, "IN6ADDR_ISLOOPBACK");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_SET_ADDR_UNSPECIFIED$MH() {
        return RuntimeHelper.requireNonNull(constants$1368.IN6_SET_ADDR_UNSPECIFIED$MH,"IN6_SET_ADDR_UNSPECIFIED");
    }
    public static void IN6_SET_ADDR_UNSPECIFIED ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1368.IN6_SET_ADDR_UNSPECIFIED$MH, "IN6_SET_ADDR_UNSPECIFIED");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_SET_ADDR_LOOPBACK$MH() {
        return RuntimeHelper.requireNonNull(constants$1368.IN6_SET_ADDR_LOOPBACK$MH,"IN6_SET_ADDR_LOOPBACK");
    }
    public static void IN6_SET_ADDR_LOOPBACK ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1368.IN6_SET_ADDR_LOOPBACK$MH, "IN6_SET_ADDR_LOOPBACK");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6ADDR_SETANY$MH() {
        return RuntimeHelper.requireNonNull(constants$1369.IN6ADDR_SETANY$MH,"IN6ADDR_SETANY");
    }
    public static void IN6ADDR_SETANY ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1369.IN6ADDR_SETANY$MH, "IN6ADDR_SETANY");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6ADDR_SETLOOPBACK$MH() {
        return RuntimeHelper.requireNonNull(constants$1369.IN6ADDR_SETLOOPBACK$MH,"IN6ADDR_SETLOOPBACK");
    }
    public static void IN6ADDR_SETLOOPBACK ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1369.IN6ADDR_SETLOOPBACK$MH, "IN6ADDR_SETLOOPBACK");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getaddrinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1369.getaddrinfo$MH,"getaddrinfo");
    }
    public static int getaddrinfo ( Addressable nodename,  Addressable servname,  Addressable hints,  Addressable res) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1369.getaddrinfo$MH, "getaddrinfo");
        try {
            return (int)mh$.invokeExact(nodename.address(), servname.address(), hints.address(), res.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAddrInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$1369.GetAddrInfoW$MH,"GetAddrInfoW");
    }
    public static int GetAddrInfoW ( Addressable pNodeName,  Addressable pServiceName,  Addressable pHints,  Addressable ppResult) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1369.GetAddrInfoW$MH, "GetAddrInfoW");
        try {
            return (int)mh$.invokeExact(pNodeName.address(), pServiceName.address(), pHints.address(), ppResult.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle freeaddrinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1369.freeaddrinfo$MH,"freeaddrinfo");
    }
    public static void freeaddrinfo ( Addressable pAddrInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1369.freeaddrinfo$MH, "freeaddrinfo");
        try {
            mh$.invokeExact(pAddrInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeAddrInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$1369.FreeAddrInfoW$MH,"FreeAddrInfoW");
    }
    public static void FreeAddrInfoW ( Addressable pAddrInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1369.FreeAddrInfoW$MH, "FreeAddrInfoW");
        try {
            mh$.invokeExact(pAddrInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout socklen_t = C_INT;
    public static MethodHandle getnameinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1370.getnameinfo$MH,"getnameinfo");
    }
    public static int getnameinfo ( Addressable sa,  int salen,  Addressable host,  int hostlen,  Addressable serv,  int servlen,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1370.getnameinfo$MH, "getnameinfo");
        try {
            return (int)mh$.invokeExact(sa.address(), salen, host.address(), hostlen, serv.address(), servlen, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNameInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$1370.GetNameInfoW$MH,"GetNameInfoW");
    }
    public static int GetNameInfoW ( Addressable pSockaddr,  int SockaddrLength,  Addressable pNodeBuffer,  int NodeBufferSize,  Addressable pServiceBuffer,  int ServiceBufferSize,  int Flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1370.GetNameInfoW$MH, "GetNameInfoW");
        try {
            return (int)mh$.invokeExact(pSockaddr.address(), SockaddrLength, pNodeBuffer.address(), NodeBufferSize, pServiceBuffer.address(), ServiceBufferSize, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gai_strerrorA$MH() {
        return RuntimeHelper.requireNonNull(constants$1370.gai_strerrorA$MH,"gai_strerrorA");
    }
    public static MemoryAddress gai_strerrorA ( int x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1370.gai_strerrorA$MH, "gai_strerrorA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gai_strerrorW$MH() {
        return RuntimeHelper.requireNonNull(constants$1370.gai_strerrorW$MH,"gai_strerrorW");
    }
    public static MemoryAddress gai_strerrorW ( int x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1370.gai_strerrorW$MH, "gai_strerrorW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int SOCKET_SECURITY_PROTOCOL_DEFAULT() {
        return (int)0L;
    }
    public static int SOCKET_SECURITY_PROTOCOL_IPSEC() {
        return (int)1L;
    }
    public static int SOCKET_SECURITY_PROTOCOL_IPSEC2() {
        return (int)2L;
    }
    public static int SOCKET_SECURITY_PROTOCOL_INVALID() {
        return (int)3L;
    }
    public static int SYSTEM_CRITICAL_SOCKET() {
        return (int)1L;
    }
    public static MethodHandle RtlIpv6AddressToStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$1370.RtlIpv6AddressToStringA$MH,"RtlIpv6AddressToStringA");
    }
    public static MemoryAddress RtlIpv6AddressToStringA ( Addressable Addr,  Addressable S) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1370.RtlIpv6AddressToStringA$MH, "RtlIpv6AddressToStringA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Addr.address(), S.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlIpv6AddressToStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$1370.RtlIpv6AddressToStringW$MH,"RtlIpv6AddressToStringW");
    }
    public static MemoryAddress RtlIpv6AddressToStringW ( Addressable Addr,  Addressable S) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1370.RtlIpv6AddressToStringW$MH, "RtlIpv6AddressToStringW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Addr.address(), S.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlIpv6AddressToStringExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1371.RtlIpv6AddressToStringExA$MH,"RtlIpv6AddressToStringExA");
    }
    public static int RtlIpv6AddressToStringExA ( Addressable Address,  int ScopeId,  short Port,  Addressable AddressString,  Addressable AddressStringLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1371.RtlIpv6AddressToStringExA$MH, "RtlIpv6AddressToStringExA");
        try {
            return (int)mh$.invokeExact(Address.address(), ScopeId, Port, AddressString.address(), AddressStringLength.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlIpv6AddressToStringExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1371.RtlIpv6AddressToStringExW$MH,"RtlIpv6AddressToStringExW");
    }
    public static int RtlIpv6AddressToStringExW ( Addressable Address,  int ScopeId,  short Port,  Addressable AddressString,  Addressable AddressStringLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1371.RtlIpv6AddressToStringExW$MH, "RtlIpv6AddressToStringExW");
        try {
            return (int)mh$.invokeExact(Address.address(), ScopeId, Port, AddressString.address(), AddressStringLength.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlIpv4AddressToStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$1371.RtlIpv4AddressToStringA$MH,"RtlIpv4AddressToStringA");
    }
    public static MemoryAddress RtlIpv4AddressToStringA ( Addressable Addr,  Addressable S) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1371.RtlIpv4AddressToStringA$MH, "RtlIpv4AddressToStringA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Addr.address(), S.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlIpv4AddressToStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$1371.RtlIpv4AddressToStringW$MH,"RtlIpv4AddressToStringW");
    }
    public static MemoryAddress RtlIpv4AddressToStringW ( Addressable Addr,  Addressable S) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1371.RtlIpv4AddressToStringW$MH, "RtlIpv4AddressToStringW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Addr.address(), S.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlIpv4AddressToStringExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1371.RtlIpv4AddressToStringExA$MH,"RtlIpv4AddressToStringExA");
    }
    public static int RtlIpv4AddressToStringExA ( Addressable Address,  short Port,  Addressable AddressString,  Addressable AddressStringLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1371.RtlIpv4AddressToStringExA$MH, "RtlIpv4AddressToStringExA");
        try {
            return (int)mh$.invokeExact(Address.address(), Port, AddressString.address(), AddressStringLength.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlIpv4AddressToStringExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1371.RtlIpv4AddressToStringExW$MH,"RtlIpv4AddressToStringExW");
    }
    public static int RtlIpv4AddressToStringExW ( Addressable Address,  short Port,  Addressable AddressString,  Addressable AddressStringLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1371.RtlIpv4AddressToStringExW$MH, "RtlIpv4AddressToStringExW");
        try {
            return (int)mh$.invokeExact(Address.address(), Port, AddressString.address(), AddressStringLength.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlIpv4StringToAddressA$MH() {
        return RuntimeHelper.requireNonNull(constants$1372.RtlIpv4StringToAddressA$MH,"RtlIpv4StringToAddressA");
    }
    public static int RtlIpv4StringToAddressA ( Addressable S,  byte Strict,  Addressable Terminator,  Addressable Addr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1372.RtlIpv4StringToAddressA$MH, "RtlIpv4StringToAddressA");
        try {
            return (int)mh$.invokeExact(S.address(), Strict, Terminator.address(), Addr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlIpv4StringToAddressW$MH() {
        return RuntimeHelper.requireNonNull(constants$1372.RtlIpv4StringToAddressW$MH,"RtlIpv4StringToAddressW");
    }
    public static int RtlIpv4StringToAddressW ( Addressable S,  byte Strict,  Addressable Terminator,  Addressable Addr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1372.RtlIpv4StringToAddressW$MH, "RtlIpv4StringToAddressW");
        try {
            return (int)mh$.invokeExact(S.address(), Strict, Terminator.address(), Addr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlIpv4StringToAddressExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1372.RtlIpv4StringToAddressExA$MH,"RtlIpv4StringToAddressExA");
    }
    public static int RtlIpv4StringToAddressExA ( Addressable AddressString,  byte Strict,  Addressable Address,  Addressable Port) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1372.RtlIpv4StringToAddressExA$MH, "RtlIpv4StringToAddressExA");
        try {
            return (int)mh$.invokeExact(AddressString.address(), Strict, Address.address(), Port.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlIpv4StringToAddressExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1372.RtlIpv4StringToAddressExW$MH,"RtlIpv4StringToAddressExW");
    }
    public static int RtlIpv4StringToAddressExW ( Addressable AddressString,  byte Strict,  Addressable Address,  Addressable Port) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1372.RtlIpv4StringToAddressExW$MH, "RtlIpv4StringToAddressExW");
        try {
            return (int)mh$.invokeExact(AddressString.address(), Strict, Address.address(), Port.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlIpv6StringToAddressExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1372.RtlIpv6StringToAddressExA$MH,"RtlIpv6StringToAddressExA");
    }
    public static int RtlIpv6StringToAddressExA ( Addressable AddressString,  Addressable Address,  Addressable ScopeId,  Addressable Port) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1372.RtlIpv6StringToAddressExA$MH, "RtlIpv6StringToAddressExA");
        try {
            return (int)mh$.invokeExact(AddressString.address(), Address.address(), ScopeId.address(), Port.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlIpv6StringToAddressExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1372.RtlIpv6StringToAddressExW$MH,"RtlIpv6StringToAddressExW");
    }
    public static int RtlIpv6StringToAddressExW ( Addressable AddressString,  Addressable Address,  Addressable ScopeId,  Addressable Port) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1372.RtlIpv6StringToAddressExW$MH, "RtlIpv6StringToAddressExW");
        try {
            return (int)mh$.invokeExact(AddressString.address(), Address.address(), ScopeId.address(), Port.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAddrInfoExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1373.GetAddrInfoExA$MH,"GetAddrInfoExA");
    }
    public static int GetAddrInfoExA ( Addressable pName,  Addressable pServiceName,  int dwNameSpace,  Addressable lpNspId,  Addressable pHints,  Addressable ppResult,  Addressable timeout,  Addressable lpOverlapped,  Addressable lpCompletionRoutine,  Addressable lpNameHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1373.GetAddrInfoExA$MH, "GetAddrInfoExA");
        try {
            return (int)mh$.invokeExact(pName.address(), pServiceName.address(), dwNameSpace, lpNspId.address(), pHints.address(), ppResult.address(), timeout.address(), lpOverlapped.address(), lpCompletionRoutine.address(), lpNameHandle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAddrInfoExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1373.GetAddrInfoExW$MH,"GetAddrInfoExW");
    }
    public static int GetAddrInfoExW ( Addressable pName,  Addressable pServiceName,  int dwNameSpace,  Addressable lpNspId,  Addressable pHints,  Addressable ppResult,  Addressable timeout,  Addressable lpOverlapped,  Addressable lpCompletionRoutine,  Addressable lpNameHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1373.GetAddrInfoExW$MH, "GetAddrInfoExW");
        try {
            return (int)mh$.invokeExact(pName.address(), pServiceName.address(), dwNameSpace, lpNspId.address(), pHints.address(), ppResult.address(), timeout.address(), lpOverlapped.address(), lpCompletionRoutine.address(), lpNameHandle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetAddrInfoExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1373.SetAddrInfoExA$MH,"SetAddrInfoExA");
    }
    public static int SetAddrInfoExA ( Addressable pName,  Addressable pServiceName,  Addressable pAddresses,  int dwAddressCount,  Addressable lpBlob,  int dwFlags,  int dwNameSpace,  Addressable lpNspId,  Addressable timeout,  Addressable lpOverlapped,  Addressable lpCompletionRoutine,  Addressable lpNameHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1373.SetAddrInfoExA$MH, "SetAddrInfoExA");
        try {
            return (int)mh$.invokeExact(pName.address(), pServiceName.address(), pAddresses.address(), dwAddressCount, lpBlob.address(), dwFlags, dwNameSpace, lpNspId.address(), timeout.address(), lpOverlapped.address(), lpCompletionRoutine.address(), lpNameHandle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetAddrInfoExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1373.SetAddrInfoExW$MH,"SetAddrInfoExW");
    }
    public static int SetAddrInfoExW ( Addressable pName,  Addressable pServiceName,  Addressable pAddresses,  int dwAddressCount,  Addressable lpBlob,  int dwFlags,  int dwNameSpace,  Addressable lpNspId,  Addressable timeout,  Addressable lpOverlapped,  Addressable lpCompletionRoutine,  Addressable lpNameHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1373.SetAddrInfoExW$MH, "SetAddrInfoExW");
        try {
            return (int)mh$.invokeExact(pName.address(), pServiceName.address(), pAddresses.address(), dwAddressCount, lpBlob.address(), dwFlags, dwNameSpace, lpNspId.address(), timeout.address(), lpOverlapped.address(), lpCompletionRoutine.address(), lpNameHandle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeAddrInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1373.FreeAddrInfoEx$MH,"FreeAddrInfoEx");
    }
    public static void FreeAddrInfoEx ( Addressable pAddrInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1373.FreeAddrInfoEx$MH, "FreeAddrInfoEx");
        try {
            mh$.invokeExact(pAddrInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeAddrInfoExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1373.FreeAddrInfoExW$MH,"FreeAddrInfoExW");
    }
    public static void FreeAddrInfoExW ( Addressable pAddrInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1373.FreeAddrInfoExW$MH, "FreeAddrInfoExW");
        try {
            mh$.invokeExact(pAddrInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAImpersonateSocketPeer$MH() {
        return RuntimeHelper.requireNonNull(constants$1374.WSAImpersonateSocketPeer$MH,"WSAImpersonateSocketPeer");
    }
    public static int WSAImpersonateSocketPeer ( long Socket,  Addressable PeerAddress,  int peerAddressLen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1374.WSAImpersonateSocketPeer$MH, "WSAImpersonateSocketPeer");
        try {
            return (int)mh$.invokeExact(Socket, PeerAddress.address(), peerAddressLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAQuerySocketSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$1374.WSAQuerySocketSecurity$MH,"WSAQuerySocketSecurity");
    }
    public static int WSAQuerySocketSecurity ( long Socket,  Addressable SecurityQueryTemplate,  int SecurityQueryTemplateLen,  Addressable SecurityQueryInfo,  Addressable SecurityQueryInfoLen,  Addressable Overlapped,  Addressable CompletionRoutine) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1374.WSAQuerySocketSecurity$MH, "WSAQuerySocketSecurity");
        try {
            return (int)mh$.invokeExact(Socket, SecurityQueryTemplate.address(), SecurityQueryTemplateLen, SecurityQueryInfo.address(), SecurityQueryInfoLen.address(), Overlapped.address(), CompletionRoutine.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSARevertImpersonation$MH() {
        return RuntimeHelper.requireNonNull(constants$1374.WSARevertImpersonation$MH,"WSARevertImpersonation");
    }
    public static int WSARevertImpersonation () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1374.WSARevertImpersonation$MH, "WSARevertImpersonation");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASetSocketPeerTargetName$MH() {
        return RuntimeHelper.requireNonNull(constants$1374.WSASetSocketPeerTargetName$MH,"WSASetSocketPeerTargetName");
    }
    public static int WSASetSocketPeerTargetName ( long Socket,  Addressable PeerTargetName,  int PeerTargetNameLen,  Addressable Overlapped,  Addressable CompletionRoutine) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1374.WSASetSocketPeerTargetName$MH, "WSASetSocketPeerTargetName");
        try {
            return (int)mh$.invokeExact(Socket, PeerTargetName.address(), PeerTargetNameLen, Overlapped.address(), CompletionRoutine.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASetSocketSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$1374.WSASetSocketSecurity$MH,"WSASetSocketSecurity");
    }
    public static int WSASetSocketSecurity ( long Socket,  Addressable SecuritySettings,  int SecuritySettingsLen,  Addressable Overlapped,  Addressable CompletionRoutine) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1374.WSASetSocketSecurity$MH, "WSASetSocketSecurity");
        try {
            return (int)mh$.invokeExact(Socket, SecuritySettings.address(), SecuritySettingsLen, Overlapped.address(), CompletionRoutine.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InetNtopW$MH() {
        return RuntimeHelper.requireNonNull(constants$1374.InetNtopW$MH,"InetNtopW");
    }
    public static MemoryAddress InetNtopW ( int Family,  Addressable pAddr,  Addressable pStringBuf,  long StringBufSIze) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1374.InetNtopW$MH, "InetNtopW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Family, pAddr.address(), pStringBuf.address(), StringBufSIze);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_ntop$MH() {
        return RuntimeHelper.requireNonNull(constants$1375.inet_ntop$MH,"inet_ntop");
    }
    public static MemoryAddress inet_ntop ( int Family,  Addressable pAddr,  Addressable pStringBuf,  long StringBufSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1375.inet_ntop$MH, "inet_ntop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Family, pAddr.address(), pStringBuf.address(), StringBufSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InetPtonW$MH() {
        return RuntimeHelper.requireNonNull(constants$1375.InetPtonW$MH,"InetPtonW");
    }
    public static int InetPtonW ( int Family,  Addressable pStringBuf,  Addressable pAddr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1375.InetPtonW$MH, "InetPtonW");
        try {
            return (int)mh$.invokeExact(Family, pStringBuf.address(), pAddr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_pton$MH() {
        return RuntimeHelper.requireNonNull(constants$1375.inet_pton$MH,"inet_pton");
    }
    public static int inet_pton ( int Family,  Addressable pStringBuf,  Addressable pAddr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1375.inet_pton$MH, "inet_pton");
        try {
            return (int)mh$.invokeExact(Family, pStringBuf.address(), pAddr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __threadid$MH() {
        return RuntimeHelper.requireNonNull(constants$1375.__threadid$MH,"__threadid");
    }
    public static int __threadid () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1375.__threadid$MH, "__threadid");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __threadhandle$MH() {
        return RuntimeHelper.requireNonNull(constants$1375.__threadhandle$MH,"__threadhandle");
    }
    public static long __threadhandle () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1375.__threadhandle$MH, "__threadhandle");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int GPG_ERR_SOURCE_UNKNOWN() {
        return (int)0L;
    }
    public static int GPG_ERR_SOURCE_GCRYPT() {
        return (int)1L;
    }
    public static int GPG_ERR_SOURCE_GPG() {
        return (int)2L;
    }
    public static int GPG_ERR_SOURCE_GPGSM() {
        return (int)3L;
    }
    public static int GPG_ERR_SOURCE_GPGAGENT() {
        return (int)4L;
    }
    public static int GPG_ERR_SOURCE_PINENTRY() {
        return (int)5L;
    }
    public static int GPG_ERR_SOURCE_SCD() {
        return (int)6L;
    }
    public static int GPG_ERR_SOURCE_GPGME() {
        return (int)7L;
    }
    public static int GPG_ERR_SOURCE_KEYBOX() {
        return (int)8L;
    }
    public static int GPG_ERR_SOURCE_KSBA() {
        return (int)9L;
    }
    public static int GPG_ERR_SOURCE_DIRMNGR() {
        return (int)10L;
    }
    public static int GPG_ERR_SOURCE_GSTI() {
        return (int)11L;
    }
    public static int GPG_ERR_SOURCE_GPA() {
        return (int)12L;
    }
    public static int GPG_ERR_SOURCE_KLEO() {
        return (int)13L;
    }
    public static int GPG_ERR_SOURCE_G13() {
        return (int)14L;
    }
    public static int GPG_ERR_SOURCE_ASSUAN() {
        return (int)15L;
    }
    public static int GPG_ERR_SOURCE_TLS() {
        return (int)17L;
    }
    public static int GPG_ERR_SOURCE_ANY() {
        return (int)31L;
    }
    public static int GPG_ERR_SOURCE_USER_1() {
        return (int)32L;
    }
    public static int GPG_ERR_SOURCE_USER_2() {
        return (int)33L;
    }
    public static int GPG_ERR_SOURCE_USER_3() {
        return (int)34L;
    }
    public static int GPG_ERR_SOURCE_USER_4() {
        return (int)35L;
    }
    public static int GPG_ERR_SOURCE_DIM() {
        return (int)128L;
    }
    public static int GPG_ERR_NO_ERROR() {
        return (int)0L;
    }
    public static int GPG_ERR_GENERAL() {
        return (int)1L;
    }
    public static int GPG_ERR_UNKNOWN_PACKET() {
        return (int)2L;
    }
    public static int GPG_ERR_UNKNOWN_VERSION() {
        return (int)3L;
    }
    public static int GPG_ERR_PUBKEY_ALGO() {
        return (int)4L;
    }
    public static int GPG_ERR_DIGEST_ALGO() {
        return (int)5L;
    }
    public static int GPG_ERR_BAD_PUBKEY() {
        return (int)6L;
    }
    public static int GPG_ERR_BAD_SECKEY() {
        return (int)7L;
    }
    public static int GPG_ERR_BAD_SIGNATURE() {
        return (int)8L;
    }
    public static int GPG_ERR_NO_PUBKEY() {
        return (int)9L;
    }
    public static int GPG_ERR_CHECKSUM() {
        return (int)10L;
    }
    public static int GPG_ERR_BAD_PASSPHRASE() {
        return (int)11L;
    }
    public static int GPG_ERR_CIPHER_ALGO() {
        return (int)12L;
    }
    public static int GPG_ERR_KEYRING_OPEN() {
        return (int)13L;
    }
    public static int GPG_ERR_INV_PACKET() {
        return (int)14L;
    }
    public static int GPG_ERR_INV_ARMOR() {
        return (int)15L;
    }
    public static int GPG_ERR_NO_USER_ID() {
        return (int)16L;
    }
    public static int GPG_ERR_NO_SECKEY() {
        return (int)17L;
    }
    public static int GPG_ERR_WRONG_SECKEY() {
        return (int)18L;
    }
    public static int GPG_ERR_BAD_KEY() {
        return (int)19L;
    }
    public static int GPG_ERR_COMPR_ALGO() {
        return (int)20L;
    }
    public static int GPG_ERR_NO_PRIME() {
        return (int)21L;
    }
    public static int GPG_ERR_NO_ENCODING_METHOD() {
        return (int)22L;
    }
    public static int GPG_ERR_NO_ENCRYPTION_SCHEME() {
        return (int)23L;
    }
    public static int GPG_ERR_NO_SIGNATURE_SCHEME() {
        return (int)24L;
    }
    public static int GPG_ERR_INV_ATTR() {
        return (int)25L;
    }
    public static int GPG_ERR_NO_VALUE() {
        return (int)26L;
    }
    public static int GPG_ERR_NOT_FOUND() {
        return (int)27L;
    }
    public static int GPG_ERR_VALUE_NOT_FOUND() {
        return (int)28L;
    }
    public static int GPG_ERR_SYNTAX() {
        return (int)29L;
    }
    public static int GPG_ERR_BAD_MPI() {
        return (int)30L;
    }
    public static int GPG_ERR_INV_PASSPHRASE() {
        return (int)31L;
    }
    public static int GPG_ERR_SIG_CLASS() {
        return (int)32L;
    }
    public static int GPG_ERR_RESOURCE_LIMIT() {
        return (int)33L;
    }
    public static int GPG_ERR_INV_KEYRING() {
        return (int)34L;
    }
    public static int GPG_ERR_TRUSTDB() {
        return (int)35L;
    }
    public static int GPG_ERR_BAD_CERT() {
        return (int)36L;
    }
    public static int GPG_ERR_INV_USER_ID() {
        return (int)37L;
    }
    public static int GPG_ERR_UNEXPECTED() {
        return (int)38L;
    }
    public static int GPG_ERR_TIME_CONFLICT() {
        return (int)39L;
    }
    public static int GPG_ERR_KEYSERVER() {
        return (int)40L;
    }
    public static int GPG_ERR_WRONG_PUBKEY_ALGO() {
        return (int)41L;
    }
    public static int GPG_ERR_TRIBUTE_TO_D_A() {
        return (int)42L;
    }
    public static int GPG_ERR_WEAK_KEY() {
        return (int)43L;
    }
    public static int GPG_ERR_INV_KEYLEN() {
        return (int)44L;
    }
    public static int GPG_ERR_INV_ARG() {
        return (int)45L;
    }
    public static int GPG_ERR_BAD_URI() {
        return (int)46L;
    }
    public static int GPG_ERR_INV_URI() {
        return (int)47L;
    }
    public static int GPG_ERR_NETWORK() {
        return (int)48L;
    }
    public static int GPG_ERR_UNKNOWN_HOST() {
        return (int)49L;
    }
    public static int GPG_ERR_SELFTEST_FAILED() {
        return (int)50L;
    }
    public static int GPG_ERR_NOT_ENCRYPTED() {
        return (int)51L;
    }
    public static int GPG_ERR_NOT_PROCESSED() {
        return (int)52L;
    }
    public static int GPG_ERR_UNUSABLE_PUBKEY() {
        return (int)53L;
    }
    public static int GPG_ERR_UNUSABLE_SECKEY() {
        return (int)54L;
    }
    public static int GPG_ERR_INV_VALUE() {
        return (int)55L;
    }
    public static int GPG_ERR_BAD_CERT_CHAIN() {
        return (int)56L;
    }
    public static int GPG_ERR_MISSING_CERT() {
        return (int)57L;
    }
    public static int GPG_ERR_NO_DATA() {
        return (int)58L;
    }
    public static int GPG_ERR_BUG() {
        return (int)59L;
    }
    public static int GPG_ERR_NOT_SUPPORTED() {
        return (int)60L;
    }
    public static int GPG_ERR_INV_OP() {
        return (int)61L;
    }
    public static int GPG_ERR_TIMEOUT() {
        return (int)62L;
    }
    public static int GPG_ERR_INTERNAL() {
        return (int)63L;
    }
    public static int GPG_ERR_EOF_GCRYPT() {
        return (int)64L;
    }
    public static int GPG_ERR_INV_OBJ() {
        return (int)65L;
    }
    public static int GPG_ERR_TOO_SHORT() {
        return (int)66L;
    }
    public static int GPG_ERR_TOO_LARGE() {
        return (int)67L;
    }
    public static int GPG_ERR_NO_OBJ() {
        return (int)68L;
    }
    public static int GPG_ERR_NOT_IMPLEMENTED() {
        return (int)69L;
    }
    public static int GPG_ERR_CONFLICT() {
        return (int)70L;
    }
    public static int GPG_ERR_INV_CIPHER_MODE() {
        return (int)71L;
    }
    public static int GPG_ERR_INV_FLAG() {
        return (int)72L;
    }
    public static int GPG_ERR_INV_HANDLE() {
        return (int)73L;
    }
    public static int GPG_ERR_TRUNCATED() {
        return (int)74L;
    }
    public static int GPG_ERR_INCOMPLETE_LINE() {
        return (int)75L;
    }
    public static int GPG_ERR_INV_RESPONSE() {
        return (int)76L;
    }
    public static int GPG_ERR_NO_AGENT() {
        return (int)77L;
    }
    public static int GPG_ERR_AGENT() {
        return (int)78L;
    }
    public static int GPG_ERR_INV_DATA() {
        return (int)79L;
    }
    public static int GPG_ERR_ASSUAN_SERVER_FAULT() {
        return (int)80L;
    }
    public static int GPG_ERR_ASSUAN() {
        return (int)81L;
    }
    public static int GPG_ERR_INV_SESSION_KEY() {
        return (int)82L;
    }
    public static int GPG_ERR_INV_SEXP() {
        return (int)83L;
    }
    public static int GPG_ERR_UNSUPPORTED_ALGORITHM() {
        return (int)84L;
    }
    public static int GPG_ERR_NO_PIN_ENTRY() {
        return (int)85L;
    }
    public static int GPG_ERR_PIN_ENTRY() {
        return (int)86L;
    }
    public static int GPG_ERR_BAD_PIN() {
        return (int)87L;
    }
    public static int GPG_ERR_INV_NAME() {
        return (int)88L;
    }
    public static int GPG_ERR_BAD_DATA() {
        return (int)89L;
    }
    public static int GPG_ERR_INV_PARAMETER() {
        return (int)90L;
    }
    public static int GPG_ERR_WRONG_CARD() {
        return (int)91L;
    }
    public static int GPG_ERR_NO_DIRMNGR() {
        return (int)92L;
    }
    public static int GPG_ERR_DIRMNGR() {
        return (int)93L;
    }
    public static int GPG_ERR_CERT_REVOKED() {
        return (int)94L;
    }
    public static int GPG_ERR_NO_CRL_KNOWN() {
        return (int)95L;
    }
    public static int GPG_ERR_CRL_TOO_OLD() {
        return (int)96L;
    }
    public static int GPG_ERR_LINE_TOO_LONG() {
        return (int)97L;
    }
    public static int GPG_ERR_NOT_TRUSTED() {
        return (int)98L;
    }
    public static int GPG_ERR_CANCELED() {
        return (int)99L;
    }
    public static int GPG_ERR_BAD_CA_CERT() {
        return (int)100L;
    }
    public static int GPG_ERR_CERT_EXPIRED() {
        return (int)101L;
    }
    public static int GPG_ERR_CERT_TOO_YOUNG() {
        return (int)102L;
    }
    public static int GPG_ERR_UNSUPPORTED_CERT() {
        return (int)103L;
    }
    public static int GPG_ERR_UNKNOWN_SEXP() {
        return (int)104L;
    }
    public static int GPG_ERR_UNSUPPORTED_PROTECTION() {
        return (int)105L;
    }
    public static int GPG_ERR_CORRUPTED_PROTECTION() {
        return (int)106L;
    }
    public static int GPG_ERR_AMBIGUOUS_NAME() {
        return (int)107L;
    }
    public static int GPG_ERR_CARD() {
        return (int)108L;
    }
    public static int GPG_ERR_CARD_RESET() {
        return (int)109L;
    }
    public static int GPG_ERR_CARD_REMOVED() {
        return (int)110L;
    }
    public static int GPG_ERR_INV_CARD() {
        return (int)111L;
    }
    public static int GPG_ERR_CARD_NOT_PRESENT() {
        return (int)112L;
    }
    public static int GPG_ERR_NO_PKCS15_APP() {
        return (int)113L;
    }
    public static int GPG_ERR_NOT_CONFIRMED() {
        return (int)114L;
    }
    public static int GPG_ERR_CONFIGURATION() {
        return (int)115L;
    }
    public static int GPG_ERR_NO_POLICY_MATCH() {
        return (int)116L;
    }
    public static int GPG_ERR_INV_INDEX() {
        return (int)117L;
    }
    public static int GPG_ERR_INV_ID() {
        return (int)118L;
    }
    public static int GPG_ERR_NO_SCDAEMON() {
        return (int)119L;
    }
    public static int GPG_ERR_SCDAEMON() {
        return (int)120L;
    }
    public static int GPG_ERR_UNSUPPORTED_PROTOCOL() {
        return (int)121L;
    }
    public static int GPG_ERR_BAD_PIN_METHOD() {
        return (int)122L;
    }
    public static int GPG_ERR_CARD_NOT_INITIALIZED() {
        return (int)123L;
    }
    public static int GPG_ERR_UNSUPPORTED_OPERATION() {
        return (int)124L;
    }
    public static int GPG_ERR_WRONG_KEY_USAGE() {
        return (int)125L;
    }
    public static int GPG_ERR_NOTHING_FOUND() {
        return (int)126L;
    }
    public static int GPG_ERR_WRONG_BLOB_TYPE() {
        return (int)127L;
    }
    public static int GPG_ERR_MISSING_VALUE() {
        return (int)128L;
    }
    public static int GPG_ERR_HARDWARE() {
        return (int)129L;
    }
    public static int GPG_ERR_PIN_BLOCKED() {
        return (int)130L;
    }
    public static int GPG_ERR_USE_CONDITIONS() {
        return (int)131L;
    }
    public static int GPG_ERR_PIN_NOT_SYNCED() {
        return (int)132L;
    }
    public static int GPG_ERR_INV_CRL() {
        return (int)133L;
    }
    public static int GPG_ERR_BAD_BER() {
        return (int)134L;
    }
    public static int GPG_ERR_INV_BER() {
        return (int)135L;
    }
    public static int GPG_ERR_ELEMENT_NOT_FOUND() {
        return (int)136L;
    }
    public static int GPG_ERR_IDENTIFIER_NOT_FOUND() {
        return (int)137L;
    }
    public static int GPG_ERR_INV_TAG() {
        return (int)138L;
    }
    public static int GPG_ERR_INV_LENGTH() {
        return (int)139L;
    }
    public static int GPG_ERR_INV_KEYINFO() {
        return (int)140L;
    }
    public static int GPG_ERR_UNEXPECTED_TAG() {
        return (int)141L;
    }
    public static int GPG_ERR_NOT_DER_ENCODED() {
        return (int)142L;
    }
    public static int GPG_ERR_NO_CMS_OBJ() {
        return (int)143L;
    }
    public static int GPG_ERR_INV_CMS_OBJ() {
        return (int)144L;
    }
    public static int GPG_ERR_UNKNOWN_CMS_OBJ() {
        return (int)145L;
    }
    public static int GPG_ERR_UNSUPPORTED_CMS_OBJ() {
        return (int)146L;
    }
    public static int GPG_ERR_UNSUPPORTED_ENCODING() {
        return (int)147L;
    }
    public static int GPG_ERR_UNSUPPORTED_CMS_VERSION() {
        return (int)148L;
    }
    public static int GPG_ERR_UNKNOWN_ALGORITHM() {
        return (int)149L;
    }
    public static int GPG_ERR_INV_ENGINE() {
        return (int)150L;
    }
    public static int GPG_ERR_PUBKEY_NOT_TRUSTED() {
        return (int)151L;
    }
    public static int GPG_ERR_DECRYPT_FAILED() {
        return (int)152L;
    }
    public static int GPG_ERR_KEY_EXPIRED() {
        return (int)153L;
    }
    public static int GPG_ERR_SIG_EXPIRED() {
        return (int)154L;
    }
    public static int GPG_ERR_ENCODING_PROBLEM() {
        return (int)155L;
    }
    public static int GPG_ERR_INV_STATE() {
        return (int)156L;
    }
    public static int GPG_ERR_DUP_VALUE() {
        return (int)157L;
    }
    public static int GPG_ERR_MISSING_ACTION() {
        return (int)158L;
    }
    public static int GPG_ERR_MODULE_NOT_FOUND() {
        return (int)159L;
    }
    public static int GPG_ERR_INV_OID_STRING() {
        return (int)160L;
    }
    public static int GPG_ERR_INV_TIME() {
        return (int)161L;
    }
    public static int GPG_ERR_INV_CRL_OBJ() {
        return (int)162L;
    }
    public static int GPG_ERR_UNSUPPORTED_CRL_VERSION() {
        return (int)163L;
    }
    public static int GPG_ERR_INV_CERT_OBJ() {
        return (int)164L;
    }
    public static int GPG_ERR_UNKNOWN_NAME() {
        return (int)165L;
    }
    public static int GPG_ERR_LOCALE_PROBLEM() {
        return (int)166L;
    }
    public static int GPG_ERR_NOT_LOCKED() {
        return (int)167L;
    }
    public static int GPG_ERR_PROTOCOL_VIOLATION() {
        return (int)168L;
    }
    public static int GPG_ERR_INV_MAC() {
        return (int)169L;
    }
    public static int GPG_ERR_INV_REQUEST() {
        return (int)170L;
    }
    public static int GPG_ERR_UNKNOWN_EXTN() {
        return (int)171L;
    }
    public static int GPG_ERR_UNKNOWN_CRIT_EXTN() {
        return (int)172L;
    }
    public static int GPG_ERR_LOCKED() {
        return (int)173L;
    }
    public static int GPG_ERR_UNKNOWN_OPTION() {
        return (int)174L;
    }
    public static int GPG_ERR_UNKNOWN_COMMAND() {
        return (int)175L;
    }
    public static int GPG_ERR_NOT_OPERATIONAL() {
        return (int)176L;
    }
    public static int GPG_ERR_NO_PASSPHRASE() {
        return (int)177L;
    }
    public static int GPG_ERR_NO_PIN() {
        return (int)178L;
    }
    public static int GPG_ERR_NOT_ENABLED() {
        return (int)179L;
    }
    public static int GPG_ERR_NO_ENGINE() {
        return (int)180L;
    }
    public static int GPG_ERR_MISSING_KEY() {
        return (int)181L;
    }
    public static int GPG_ERR_TOO_MANY() {
        return (int)182L;
    }
    public static int GPG_ERR_LIMIT_REACHED() {
        return (int)183L;
    }
    public static int GPG_ERR_NOT_INITIALIZED() {
        return (int)184L;
    }
    public static int GPG_ERR_MISSING_ISSUER_CERT() {
        return (int)185L;
    }
    public static int GPG_ERR_NO_KEYSERVER() {
        return (int)186L;
    }
    public static int GPG_ERR_INV_CURVE() {
        return (int)187L;
    }
    public static int GPG_ERR_UNKNOWN_CURVE() {
        return (int)188L;
    }
    public static int GPG_ERR_DUP_KEY() {
        return (int)189L;
    }
    public static int GPG_ERR_AMBIGUOUS() {
        return (int)190L;
    }
    public static int GPG_ERR_NO_CRYPT_CTX() {
        return (int)191L;
    }
    public static int GPG_ERR_WRONG_CRYPT_CTX() {
        return (int)192L;
    }
    public static int GPG_ERR_BAD_CRYPT_CTX() {
        return (int)193L;
    }
    public static int GPG_ERR_CRYPT_CTX_CONFLICT() {
        return (int)194L;
    }
    public static int GPG_ERR_BROKEN_PUBKEY() {
        return (int)195L;
    }
    public static int GPG_ERR_BROKEN_SECKEY() {
        return (int)196L;
    }
    public static int GPG_ERR_MAC_ALGO() {
        return (int)197L;
    }
    public static int GPG_ERR_FULLY_CANCELED() {
        return (int)198L;
    }
    public static int GPG_ERR_UNFINISHED() {
        return (int)199L;
    }
    public static int GPG_ERR_BUFFER_TOO_SHORT() {
        return (int)200L;
    }
    public static int GPG_ERR_SEXP_INV_LEN_SPEC() {
        return (int)201L;
    }
    public static int GPG_ERR_SEXP_STRING_TOO_LONG() {
        return (int)202L;
    }
    public static int GPG_ERR_SEXP_UNMATCHED_PAREN() {
        return (int)203L;
    }
    public static int GPG_ERR_SEXP_NOT_CANONICAL() {
        return (int)204L;
    }
    public static int GPG_ERR_SEXP_BAD_CHARACTER() {
        return (int)205L;
    }
    public static int GPG_ERR_SEXP_BAD_QUOTATION() {
        return (int)206L;
    }
    public static int GPG_ERR_SEXP_ZERO_PREFIX() {
        return (int)207L;
    }
    public static int GPG_ERR_SEXP_NESTED_DH() {
        return (int)208L;
    }
    public static int GPG_ERR_SEXP_UNMATCHED_DH() {
        return (int)209L;
    }
    public static int GPG_ERR_SEXP_UNEXPECTED_PUNC() {
        return (int)210L;
    }
    public static int GPG_ERR_SEXP_BAD_HEX_CHAR() {
        return (int)211L;
    }
    public static int GPG_ERR_SEXP_ODD_HEX_NUMBERS() {
        return (int)212L;
    }
    public static int GPG_ERR_SEXP_BAD_OCT_CHAR() {
        return (int)213L;
    }
    public static int GPG_ERR_SUBKEYS_EXP_OR_REV() {
        return (int)217L;
    }
    public static int GPG_ERR_DB_CORRUPTED() {
        return (int)218L;
    }
    public static int GPG_ERR_SERVER_FAILED() {
        return (int)219L;
    }
    public static int GPG_ERR_NO_NAME() {
        return (int)220L;
    }
    public static int GPG_ERR_NO_KEY() {
        return (int)221L;
    }
    public static int GPG_ERR_LEGACY_KEY() {
        return (int)222L;
    }
    public static int GPG_ERR_REQUEST_TOO_SHORT() {
        return (int)223L;
    }
    public static int GPG_ERR_REQUEST_TOO_LONG() {
        return (int)224L;
    }
    public static int GPG_ERR_OBJ_TERM_STATE() {
        return (int)225L;
    }
    public static int GPG_ERR_NO_CERT_CHAIN() {
        return (int)226L;
    }
    public static int GPG_ERR_CERT_TOO_LARGE() {
        return (int)227L;
    }
    public static int GPG_ERR_INV_RECORD() {
        return (int)228L;
    }
    public static int GPG_ERR_BAD_MAC() {
        return (int)229L;
    }
    public static int GPG_ERR_UNEXPECTED_MSG() {
        return (int)230L;
    }
    public static int GPG_ERR_COMPR_FAILED() {
        return (int)231L;
    }
    public static int GPG_ERR_WOULD_WRAP() {
        return (int)232L;
    }
    public static int GPG_ERR_FATAL_ALERT() {
        return (int)233L;
    }
    public static int GPG_ERR_NO_CIPHER() {
        return (int)234L;
    }
    public static int GPG_ERR_MISSING_CLIENT_CERT() {
        return (int)235L;
    }
    public static int GPG_ERR_CLOSE_NOTIFY() {
        return (int)236L;
    }
    public static int GPG_ERR_TICKET_EXPIRED() {
        return (int)237L;
    }
    public static int GPG_ERR_BAD_TICKET() {
        return (int)238L;
    }
    public static int GPG_ERR_UNKNOWN_IDENTITY() {
        return (int)239L;
    }
    public static int GPG_ERR_BAD_HS_CERT() {
        return (int)240L;
    }
    public static int GPG_ERR_BAD_HS_CERT_REQ() {
        return (int)241L;
    }
    public static int GPG_ERR_BAD_HS_CERT_VER() {
        return (int)242L;
    }
    public static int GPG_ERR_BAD_HS_CHANGE_CIPHER() {
        return (int)243L;
    }
    public static int GPG_ERR_BAD_HS_CLIENT_HELLO() {
        return (int)244L;
    }
    public static int GPG_ERR_BAD_HS_SERVER_HELLO() {
        return (int)245L;
    }
    public static int GPG_ERR_BAD_HS_SERVER_HELLO_DONE() {
        return (int)246L;
    }
    public static int GPG_ERR_BAD_HS_FINISHED() {
        return (int)247L;
    }
    public static int GPG_ERR_BAD_HS_SERVER_KEX() {
        return (int)248L;
    }
    public static int GPG_ERR_BAD_HS_CLIENT_KEX() {
        return (int)249L;
    }
    public static int GPG_ERR_BOGUS_STRING() {
        return (int)250L;
    }
    public static int GPG_ERR_FORBIDDEN() {
        return (int)251L;
    }
    public static int GPG_ERR_KEY_DISABLED() {
        return (int)252L;
    }
    public static int GPG_ERR_KEY_ON_CARD() {
        return (int)253L;
    }
    public static int GPG_ERR_INV_LOCK_OBJ() {
        return (int)254L;
    }
    public static int GPG_ERR_TRUE() {
        return (int)255L;
    }
    public static int GPG_ERR_FALSE() {
        return (int)256L;
    }
    public static int GPG_ERR_ASS_GENERAL() {
        return (int)257L;
    }
    public static int GPG_ERR_ASS_ACCEPT_FAILED() {
        return (int)258L;
    }
    public static int GPG_ERR_ASS_CONNECT_FAILED() {
        return (int)259L;
    }
    public static int GPG_ERR_ASS_INV_RESPONSE() {
        return (int)260L;
    }
    public static int GPG_ERR_ASS_INV_VALUE() {
        return (int)261L;
    }
    public static int GPG_ERR_ASS_INCOMPLETE_LINE() {
        return (int)262L;
    }
    public static int GPG_ERR_ASS_LINE_TOO_LONG() {
        return (int)263L;
    }
    public static int GPG_ERR_ASS_NESTED_COMMANDS() {
        return (int)264L;
    }
    public static int GPG_ERR_ASS_NO_DATA_CB() {
        return (int)265L;
    }
    public static int GPG_ERR_ASS_NO_INQUIRE_CB() {
        return (int)266L;
    }
    public static int GPG_ERR_ASS_NOT_A_SERVER() {
        return (int)267L;
    }
    public static int GPG_ERR_ASS_NOT_A_CLIENT() {
        return (int)268L;
    }
    public static int GPG_ERR_ASS_SERVER_START() {
        return (int)269L;
    }
    public static int GPG_ERR_ASS_READ_ERROR() {
        return (int)270L;
    }
    public static int GPG_ERR_ASS_WRITE_ERROR() {
        return (int)271L;
    }
    public static int GPG_ERR_ASS_TOO_MUCH_DATA() {
        return (int)273L;
    }
    public static int GPG_ERR_ASS_UNEXPECTED_CMD() {
        return (int)274L;
    }
    public static int GPG_ERR_ASS_UNKNOWN_CMD() {
        return (int)275L;
    }
    public static int GPG_ERR_ASS_SYNTAX() {
        return (int)276L;
    }
    public static int GPG_ERR_ASS_CANCELED() {
        return (int)277L;
    }
    public static int GPG_ERR_ASS_NO_INPUT() {
        return (int)278L;
    }
    public static int GPG_ERR_ASS_NO_OUTPUT() {
        return (int)279L;
    }
    public static int GPG_ERR_ASS_PARAMETER() {
        return (int)280L;
    }
    public static int GPG_ERR_ASS_UNKNOWN_INQUIRE() {
        return (int)281L;
    }
    public static int GPG_ERR_ENGINE_TOO_OLD() {
        return (int)300L;
    }
    public static int GPG_ERR_WINDOW_TOO_SMALL() {
        return (int)301L;
    }
    public static int GPG_ERR_WINDOW_TOO_LARGE() {
        return (int)302L;
    }
    public static int GPG_ERR_MISSING_ENVVAR() {
        return (int)303L;
    }
    public static int GPG_ERR_USER_ID_EXISTS() {
        return (int)304L;
    }
    public static int GPG_ERR_NAME_EXISTS() {
        return (int)305L;
    }
    public static int GPG_ERR_DUP_NAME() {
        return (int)306L;
    }
    public static int GPG_ERR_TOO_YOUNG() {
        return (int)307L;
    }
    public static int GPG_ERR_TOO_OLD() {
        return (int)308L;
    }
    public static int GPG_ERR_UNKNOWN_FLAG() {
        return (int)309L;
    }
    public static int GPG_ERR_INV_ORDER() {
        return (int)310L;
    }
    public static int GPG_ERR_ALREADY_FETCHED() {
        return (int)311L;
    }
    public static int GPG_ERR_TRY_LATER() {
        return (int)312L;
    }
    public static int GPG_ERR_WRONG_NAME() {
        return (int)313L;
    }
    public static int GPG_ERR_NO_AUTH() {
        return (int)314L;
    }
    public static int GPG_ERR_BAD_AUTH() {
        return (int)315L;
    }
    public static int GPG_ERR_NO_KEYBOXD() {
        return (int)316L;
    }
    public static int GPG_ERR_KEYBOXD() {
        return (int)317L;
    }
    public static int GPG_ERR_NO_SERVICE() {
        return (int)318L;
    }
    public static int GPG_ERR_SERVICE() {
        return (int)319L;
    }
    public static int GPG_ERR_SYSTEM_BUG() {
        return (int)666L;
    }
    public static int GPG_ERR_DNS_UNKNOWN() {
        return (int)711L;
    }
    public static int GPG_ERR_DNS_SECTION() {
        return (int)712L;
    }
    public static int GPG_ERR_DNS_ADDRESS() {
        return (int)713L;
    }
    public static int GPG_ERR_DNS_NO_QUERY() {
        return (int)714L;
    }
    public static int GPG_ERR_DNS_NO_ANSWER() {
        return (int)715L;
    }
    public static int GPG_ERR_DNS_CLOSED() {
        return (int)716L;
    }
    public static int GPG_ERR_DNS_VERIFY() {
        return (int)717L;
    }
    public static int GPG_ERR_DNS_TIMEOUT() {
        return (int)718L;
    }
    public static int GPG_ERR_LDAP_GENERAL() {
        return (int)721L;
    }
    public static int GPG_ERR_LDAP_ATTR_GENERAL() {
        return (int)722L;
    }
    public static int GPG_ERR_LDAP_NAME_GENERAL() {
        return (int)723L;
    }
    public static int GPG_ERR_LDAP_SECURITY_GENERAL() {
        return (int)724L;
    }
    public static int GPG_ERR_LDAP_SERVICE_GENERAL() {
        return (int)725L;
    }
    public static int GPG_ERR_LDAP_UPDATE_GENERAL() {
        return (int)726L;
    }
    public static int GPG_ERR_LDAP_E_GENERAL() {
        return (int)727L;
    }
    public static int GPG_ERR_LDAP_X_GENERAL() {
        return (int)728L;
    }
    public static int GPG_ERR_LDAP_OTHER_GENERAL() {
        return (int)729L;
    }
    public static int GPG_ERR_LDAP_X_CONNECTING() {
        return (int)750L;
    }
    public static int GPG_ERR_LDAP_REFERRAL_LIMIT() {
        return (int)751L;
    }
    public static int GPG_ERR_LDAP_CLIENT_LOOP() {
        return (int)752L;
    }
    public static int GPG_ERR_LDAP_NO_RESULTS() {
        return (int)754L;
    }
    public static int GPG_ERR_LDAP_CONTROL_NOT_FOUND() {
        return (int)755L;
    }
    public static int GPG_ERR_LDAP_NOT_SUPPORTED() {
        return (int)756L;
    }
    public static int GPG_ERR_LDAP_CONNECT() {
        return (int)757L;
    }
    public static int GPG_ERR_LDAP_NO_MEMORY() {
        return (int)758L;
    }
    public static int GPG_ERR_LDAP_PARAM() {
        return (int)759L;
    }
    public static int GPG_ERR_LDAP_USER_CANCELLED() {
        return (int)760L;
    }
    public static int GPG_ERR_LDAP_FILTER() {
        return (int)761L;
    }
    public static int GPG_ERR_LDAP_AUTH_UNKNOWN() {
        return (int)762L;
    }
    public static int GPG_ERR_LDAP_TIMEOUT() {
        return (int)763L;
    }
    public static int GPG_ERR_LDAP_DECODING() {
        return (int)764L;
    }
    public static int GPG_ERR_LDAP_ENCODING() {
        return (int)765L;
    }
    public static int GPG_ERR_LDAP_LOCAL() {
        return (int)766L;
    }
    public static int GPG_ERR_LDAP_SERVER_DOWN() {
        return (int)767L;
    }
    public static int GPG_ERR_LDAP_SUCCESS() {
        return (int)768L;
    }
    public static int GPG_ERR_LDAP_OPERATIONS() {
        return (int)769L;
    }
    public static int GPG_ERR_LDAP_PROTOCOL() {
        return (int)770L;
    }
    public static int GPG_ERR_LDAP_TIMELIMIT() {
        return (int)771L;
    }
    public static int GPG_ERR_LDAP_SIZELIMIT() {
        return (int)772L;
    }
    public static int GPG_ERR_LDAP_COMPARE_FALSE() {
        return (int)773L;
    }
    public static int GPG_ERR_LDAP_COMPARE_TRUE() {
        return (int)774L;
    }
    public static int GPG_ERR_LDAP_UNSUPPORTED_AUTH() {
        return (int)775L;
    }
    public static int GPG_ERR_LDAP_STRONG_AUTH_RQRD() {
        return (int)776L;
    }
    public static int GPG_ERR_LDAP_PARTIAL_RESULTS() {
        return (int)777L;
    }
    public static int GPG_ERR_LDAP_REFERRAL() {
        return (int)778L;
    }
    public static int GPG_ERR_LDAP_ADMINLIMIT() {
        return (int)779L;
    }
    public static int GPG_ERR_LDAP_UNAVAIL_CRIT_EXTN() {
        return (int)780L;
    }
    public static int GPG_ERR_LDAP_CONFIDENT_RQRD() {
        return (int)781L;
    }
    public static int GPG_ERR_LDAP_SASL_BIND_INPROG() {
        return (int)782L;
    }
    public static int GPG_ERR_LDAP_NO_SUCH_ATTRIBUTE() {
        return (int)784L;
    }
    public static int GPG_ERR_LDAP_UNDEFINED_TYPE() {
        return (int)785L;
    }
    public static int GPG_ERR_LDAP_BAD_MATCHING() {
        return (int)786L;
    }
    public static int GPG_ERR_LDAP_CONST_VIOLATION() {
        return (int)787L;
    }
    public static int GPG_ERR_LDAP_TYPE_VALUE_EXISTS() {
        return (int)788L;
    }
    public static int GPG_ERR_LDAP_INV_SYNTAX() {
        return (int)789L;
    }
    public static int GPG_ERR_LDAP_NO_SUCH_OBJ() {
        return (int)800L;
    }
    public static int GPG_ERR_LDAP_ALIAS_PROBLEM() {
        return (int)801L;
    }
    public static int GPG_ERR_LDAP_INV_DN_SYNTAX() {
        return (int)802L;
    }
    public static int GPG_ERR_LDAP_IS_LEAF() {
        return (int)803L;
    }
    public static int GPG_ERR_LDAP_ALIAS_DEREF() {
        return (int)804L;
    }
    public static int GPG_ERR_LDAP_X_PROXY_AUTH_FAIL() {
        return (int)815L;
    }
    public static int GPG_ERR_LDAP_BAD_AUTH() {
        return (int)816L;
    }
    public static int GPG_ERR_LDAP_INV_CREDENTIALS() {
        return (int)817L;
    }
    public static int GPG_ERR_LDAP_INSUFFICIENT_ACC() {
        return (int)818L;
    }
    public static int GPG_ERR_LDAP_BUSY() {
        return (int)819L;
    }
    public static int GPG_ERR_LDAP_UNAVAILABLE() {
        return (int)820L;
    }
    public static int GPG_ERR_LDAP_UNWILL_TO_PERFORM() {
        return (int)821L;
    }
    public static int GPG_ERR_LDAP_LOOP_DETECT() {
        return (int)822L;
    }
    public static int GPG_ERR_LDAP_NAMING_VIOLATION() {
        return (int)832L;
    }
    public static int GPG_ERR_LDAP_OBJ_CLS_VIOLATION() {
        return (int)833L;
    }
    public static int GPG_ERR_LDAP_NOT_ALLOW_NONLEAF() {
        return (int)834L;
    }
    public static int GPG_ERR_LDAP_NOT_ALLOW_ON_RDN() {
        return (int)835L;
    }
    public static int GPG_ERR_LDAP_ALREADY_EXISTS() {
        return (int)836L;
    }
    public static int GPG_ERR_LDAP_NO_OBJ_CLASS_MODS() {
        return (int)837L;
    }
    public static int GPG_ERR_LDAP_RESULTS_TOO_LARGE() {
        return (int)838L;
    }
    public static int GPG_ERR_LDAP_AFFECTS_MULT_DSAS() {
        return (int)839L;
    }
    public static int GPG_ERR_LDAP_VLV() {
        return (int)844L;
    }
    public static int GPG_ERR_LDAP_OTHER() {
        return (int)848L;
    }
    public static int GPG_ERR_LDAP_CUP_RESOURCE_LIMIT() {
        return (int)881L;
    }
    public static int GPG_ERR_LDAP_CUP_SEC_VIOLATION() {
        return (int)882L;
    }
    public static int GPG_ERR_LDAP_CUP_INV_DATA() {
        return (int)883L;
    }
    public static int GPG_ERR_LDAP_CUP_UNSUP_SCHEME() {
        return (int)884L;
    }
    public static int GPG_ERR_LDAP_CUP_RELOAD() {
        return (int)885L;
    }
    public static int GPG_ERR_LDAP_CANCELLED() {
        return (int)886L;
    }
    public static int GPG_ERR_LDAP_NO_SUCH_OPERATION() {
        return (int)887L;
    }
    public static int GPG_ERR_LDAP_TOO_LATE() {
        return (int)888L;
    }
    public static int GPG_ERR_LDAP_CANNOT_CANCEL() {
        return (int)889L;
    }
    public static int GPG_ERR_LDAP_ASSERTION_FAILED() {
        return (int)890L;
    }
    public static int GPG_ERR_LDAP_PROX_AUTH_DENIED() {
        return (int)891L;
    }
    public static int GPG_ERR_USER_1() {
        return (int)1024L;
    }
    public static int GPG_ERR_USER_2() {
        return (int)1025L;
    }
    public static int GPG_ERR_USER_3() {
        return (int)1026L;
    }
    public static int GPG_ERR_USER_4() {
        return (int)1027L;
    }
    public static int GPG_ERR_USER_5() {
        return (int)1028L;
    }
    public static int GPG_ERR_USER_6() {
        return (int)1029L;
    }
    public static int GPG_ERR_USER_7() {
        return (int)1030L;
    }
    public static int GPG_ERR_USER_8() {
        return (int)1031L;
    }
    public static int GPG_ERR_USER_9() {
        return (int)1032L;
    }
    public static int GPG_ERR_USER_10() {
        return (int)1033L;
    }
    public static int GPG_ERR_USER_11() {
        return (int)1034L;
    }
    public static int GPG_ERR_USER_12() {
        return (int)1035L;
    }
    public static int GPG_ERR_USER_13() {
        return (int)1036L;
    }
    public static int GPG_ERR_USER_14() {
        return (int)1037L;
    }
    public static int GPG_ERR_USER_15() {
        return (int)1038L;
    }
    public static int GPG_ERR_USER_16() {
        return (int)1039L;
    }
    public static int GPG_ERR_SQL_OK() {
        return (int)1500L;
    }
    public static int GPG_ERR_SQL_ERROR() {
        return (int)1501L;
    }
    public static int GPG_ERR_SQL_INTERNAL() {
        return (int)1502L;
    }
    public static int GPG_ERR_SQL_PERM() {
        return (int)1503L;
    }
    public static int GPG_ERR_SQL_ABORT() {
        return (int)1504L;
    }
    public static int GPG_ERR_SQL_BUSY() {
        return (int)1505L;
    }
    public static int GPG_ERR_SQL_LOCKED() {
        return (int)1506L;
    }
    public static int GPG_ERR_SQL_NOMEM() {
        return (int)1507L;
    }
    public static int GPG_ERR_SQL_READONLY() {
        return (int)1508L;
    }
    public static int GPG_ERR_SQL_INTERRUPT() {
        return (int)1509L;
    }
    public static int GPG_ERR_SQL_IOERR() {
        return (int)1510L;
    }
    public static int GPG_ERR_SQL_CORRUPT() {
        return (int)1511L;
    }
    public static int GPG_ERR_SQL_NOTFOUND() {
        return (int)1512L;
    }
    public static int GPG_ERR_SQL_FULL() {
        return (int)1513L;
    }
    public static int GPG_ERR_SQL_CANTOPEN() {
        return (int)1514L;
    }
    public static int GPG_ERR_SQL_PROTOCOL() {
        return (int)1515L;
    }
    public static int GPG_ERR_SQL_EMPTY() {
        return (int)1516L;
    }
    public static int GPG_ERR_SQL_SCHEMA() {
        return (int)1517L;
    }
    public static int GPG_ERR_SQL_TOOBIG() {
        return (int)1518L;
    }
    public static int GPG_ERR_SQL_CONSTRAINT() {
        return (int)1519L;
    }
    public static int GPG_ERR_SQL_MISMATCH() {
        return (int)1520L;
    }
    public static int GPG_ERR_SQL_MISUSE() {
        return (int)1521L;
    }
    public static int GPG_ERR_SQL_NOLFS() {
        return (int)1522L;
    }
    public static int GPG_ERR_SQL_AUTH() {
        return (int)1523L;
    }
    public static int GPG_ERR_SQL_FORMAT() {
        return (int)1524L;
    }
    public static int GPG_ERR_SQL_RANGE() {
        return (int)1525L;
    }
    public static int GPG_ERR_SQL_NOTADB() {
        return (int)1526L;
    }
    public static int GPG_ERR_SQL_NOTICE() {
        return (int)1527L;
    }
    public static int GPG_ERR_SQL_WARNING() {
        return (int)1528L;
    }
    public static int GPG_ERR_SQL_ROW() {
        return (int)1600L;
    }
    public static int GPG_ERR_SQL_DONE() {
        return (int)1601L;
    }
    public static int GPG_ERR_MISSING_ERRNO() {
        return (int)16381L;
    }
    public static int GPG_ERR_UNKNOWN_ERRNO() {
        return (int)16382L;
    }
    public static int GPG_ERR_EOF() {
        return (int)16383L;
    }
    public static int GPG_ERR_E2BIG() {
        return (int)32768L;
    }
    public static int GPG_ERR_EACCES() {
        return (int)32769L;
    }
    public static int GPG_ERR_EADDRINUSE() {
        return (int)32770L;
    }
    public static int GPG_ERR_EADDRNOTAVAIL() {
        return (int)32771L;
    }
    public static int GPG_ERR_EADV() {
        return (int)32772L;
    }
    public static int GPG_ERR_EAFNOSUPPORT() {
        return (int)32773L;
    }
    public static int GPG_ERR_EAGAIN() {
        return (int)32774L;
    }
    public static int GPG_ERR_EALREADY() {
        return (int)32775L;
    }
    public static int GPG_ERR_EAUTH() {
        return (int)32776L;
    }
    public static int GPG_ERR_EBACKGROUND() {
        return (int)32777L;
    }
    public static int GPG_ERR_EBADE() {
        return (int)32778L;
    }
    public static int GPG_ERR_EBADF() {
        return (int)32779L;
    }
    public static int GPG_ERR_EBADFD() {
        return (int)32780L;
    }
    public static int GPG_ERR_EBADMSG() {
        return (int)32781L;
    }
    public static int GPG_ERR_EBADR() {
        return (int)32782L;
    }
    public static int GPG_ERR_EBADRPC() {
        return (int)32783L;
    }
    public static int GPG_ERR_EBADRQC() {
        return (int)32784L;
    }
    public static int GPG_ERR_EBADSLT() {
        return (int)32785L;
    }
    public static int GPG_ERR_EBFONT() {
        return (int)32786L;
    }
    public static int GPG_ERR_EBUSY() {
        return (int)32787L;
    }
    public static int GPG_ERR_ECANCELED() {
        return (int)32788L;
    }
    public static int GPG_ERR_ECHILD() {
        return (int)32789L;
    }
    public static int GPG_ERR_ECHRNG() {
        return (int)32790L;
    }
    public static int GPG_ERR_ECOMM() {
        return (int)32791L;
    }
    public static int GPG_ERR_ECONNABORTED() {
        return (int)32792L;
    }
    public static int GPG_ERR_ECONNREFUSED() {
        return (int)32793L;
    }
    public static int GPG_ERR_ECONNRESET() {
        return (int)32794L;
    }
    public static int GPG_ERR_ED() {
        return (int)32795L;
    }
    public static int GPG_ERR_EDEADLK() {
        return (int)32796L;
    }
    public static int GPG_ERR_EDEADLOCK() {
        return (int)32797L;
    }
    public static int GPG_ERR_EDESTADDRREQ() {
        return (int)32798L;
    }
    public static int GPG_ERR_EDIED() {
        return (int)32799L;
    }
    public static int GPG_ERR_EDOM() {
        return (int)32800L;
    }
    public static int GPG_ERR_EDOTDOT() {
        return (int)32801L;
    }
    public static int GPG_ERR_EDQUOT() {
        return (int)32802L;
    }
    public static int GPG_ERR_EEXIST() {
        return (int)32803L;
    }
    public static int GPG_ERR_EFAULT() {
        return (int)32804L;
    }
    public static int GPG_ERR_EFBIG() {
        return (int)32805L;
    }
    public static int GPG_ERR_EFTYPE() {
        return (int)32806L;
    }
    public static int GPG_ERR_EGRATUITOUS() {
        return (int)32807L;
    }
    public static int GPG_ERR_EGREGIOUS() {
        return (int)32808L;
    }
    public static int GPG_ERR_EHOSTDOWN() {
        return (int)32809L;
    }
    public static int GPG_ERR_EHOSTUNREACH() {
        return (int)32810L;
    }
    public static int GPG_ERR_EIDRM() {
        return (int)32811L;
    }
    public static int GPG_ERR_EIEIO() {
        return (int)32812L;
    }
    public static int GPG_ERR_EILSEQ() {
        return (int)32813L;
    }
    public static int GPG_ERR_EINPROGRESS() {
        return (int)32814L;
    }
    public static int GPG_ERR_EINTR() {
        return (int)32815L;
    }
    public static int GPG_ERR_EINVAL() {
        return (int)32816L;
    }
    public static int GPG_ERR_EIO() {
        return (int)32817L;
    }
    public static int GPG_ERR_EISCONN() {
        return (int)32818L;
    }
    public static int GPG_ERR_EISDIR() {
        return (int)32819L;
    }
    public static int GPG_ERR_EISNAM() {
        return (int)32820L;
    }
    public static int GPG_ERR_EL2HLT() {
        return (int)32821L;
    }
    public static int GPG_ERR_EL2NSYNC() {
        return (int)32822L;
    }
    public static int GPG_ERR_EL3HLT() {
        return (int)32823L;
    }
    public static int GPG_ERR_EL3RST() {
        return (int)32824L;
    }
    public static int GPG_ERR_ELIBACC() {
        return (int)32825L;
    }
    public static int GPG_ERR_ELIBBAD() {
        return (int)32826L;
    }
    public static int GPG_ERR_ELIBEXEC() {
        return (int)32827L;
    }
    public static int GPG_ERR_ELIBMAX() {
        return (int)32828L;
    }
    public static int GPG_ERR_ELIBSCN() {
        return (int)32829L;
    }
    public static int GPG_ERR_ELNRNG() {
        return (int)32830L;
    }
    public static int GPG_ERR_ELOOP() {
        return (int)32831L;
    }
    public static int GPG_ERR_EMEDIUMTYPE() {
        return (int)32832L;
    }
    public static int GPG_ERR_EMFILE() {
        return (int)32833L;
    }
    public static int GPG_ERR_EMLINK() {
        return (int)32834L;
    }
    public static int GPG_ERR_EMSGSIZE() {
        return (int)32835L;
    }
    public static int GPG_ERR_EMULTIHOP() {
        return (int)32836L;
    }
    public static int GPG_ERR_ENAMETOOLONG() {
        return (int)32837L;
    }
    public static int GPG_ERR_ENAVAIL() {
        return (int)32838L;
    }
    public static int GPG_ERR_ENEEDAUTH() {
        return (int)32839L;
    }
    public static int GPG_ERR_ENETDOWN() {
        return (int)32840L;
    }
    public static int GPG_ERR_ENETRESET() {
        return (int)32841L;
    }
    public static int GPG_ERR_ENETUNREACH() {
        return (int)32842L;
    }
    public static int GPG_ERR_ENFILE() {
        return (int)32843L;
    }
    public static int GPG_ERR_ENOANO() {
        return (int)32844L;
    }
    public static int GPG_ERR_ENOBUFS() {
        return (int)32845L;
    }
    public static int GPG_ERR_ENOCSI() {
        return (int)32846L;
    }
    public static int GPG_ERR_ENODATA() {
        return (int)32847L;
    }
    public static int GPG_ERR_ENODEV() {
        return (int)32848L;
    }
    public static int GPG_ERR_ENOENT() {
        return (int)32849L;
    }
    public static int GPG_ERR_ENOEXEC() {
        return (int)32850L;
    }
    public static int GPG_ERR_ENOLCK() {
        return (int)32851L;
    }
    public static int GPG_ERR_ENOLINK() {
        return (int)32852L;
    }
    public static int GPG_ERR_ENOMEDIUM() {
        return (int)32853L;
    }
    public static int GPG_ERR_ENOMEM() {
        return (int)32854L;
    }
    public static int GPG_ERR_ENOMSG() {
        return (int)32855L;
    }
    public static int GPG_ERR_ENONET() {
        return (int)32856L;
    }
    public static int GPG_ERR_ENOPKG() {
        return (int)32857L;
    }
    public static int GPG_ERR_ENOPROTOOPT() {
        return (int)32858L;
    }
    public static int GPG_ERR_ENOSPC() {
        return (int)32859L;
    }
    public static int GPG_ERR_ENOSR() {
        return (int)32860L;
    }
    public static int GPG_ERR_ENOSTR() {
        return (int)32861L;
    }
    public static int GPG_ERR_ENOSYS() {
        return (int)32862L;
    }
    public static int GPG_ERR_ENOTBLK() {
        return (int)32863L;
    }
    public static int GPG_ERR_ENOTCONN() {
        return (int)32864L;
    }
    public static int GPG_ERR_ENOTDIR() {
        return (int)32865L;
    }
    public static int GPG_ERR_ENOTEMPTY() {
        return (int)32866L;
    }
    public static int GPG_ERR_ENOTNAM() {
        return (int)32867L;
    }
    public static int GPG_ERR_ENOTSOCK() {
        return (int)32868L;
    }
    public static int GPG_ERR_ENOTSUP() {
        return (int)32869L;
    }
    public static int GPG_ERR_ENOTTY() {
        return (int)32870L;
    }
    public static int GPG_ERR_ENOTUNIQ() {
        return (int)32871L;
    }
    public static int GPG_ERR_ENXIO() {
        return (int)32872L;
    }
    public static int GPG_ERR_EOPNOTSUPP() {
        return (int)32873L;
    }
    public static int GPG_ERR_EOVERFLOW() {
        return (int)32874L;
    }
    public static int GPG_ERR_EPERM() {
        return (int)32875L;
    }
    public static int GPG_ERR_EPFNOSUPPORT() {
        return (int)32876L;
    }
    public static int GPG_ERR_EPIPE() {
        return (int)32877L;
    }
    public static int GPG_ERR_EPROCLIM() {
        return (int)32878L;
    }
    public static int GPG_ERR_EPROCUNAVAIL() {
        return (int)32879L;
    }
    public static int GPG_ERR_EPROGMISMATCH() {
        return (int)32880L;
    }
    public static int GPG_ERR_EPROGUNAVAIL() {
        return (int)32881L;
    }
    public static int GPG_ERR_EPROTO() {
        return (int)32882L;
    }
    public static int GPG_ERR_EPROTONOSUPPORT() {
        return (int)32883L;
    }
    public static int GPG_ERR_EPROTOTYPE() {
        return (int)32884L;
    }
    public static int GPG_ERR_ERANGE() {
        return (int)32885L;
    }
    public static int GPG_ERR_EREMCHG() {
        return (int)32886L;
    }
    public static int GPG_ERR_EREMOTE() {
        return (int)32887L;
    }
    public static int GPG_ERR_EREMOTEIO() {
        return (int)32888L;
    }
    public static int GPG_ERR_ERESTART() {
        return (int)32889L;
    }
    public static int GPG_ERR_EROFS() {
        return (int)32890L;
    }
    public static int GPG_ERR_ERPCMISMATCH() {
        return (int)32891L;
    }
    public static int GPG_ERR_ESHUTDOWN() {
        return (int)32892L;
    }
    public static int GPG_ERR_ESOCKTNOSUPPORT() {
        return (int)32893L;
    }
    public static int GPG_ERR_ESPIPE() {
        return (int)32894L;
    }
    public static int GPG_ERR_ESRCH() {
        return (int)32895L;
    }
    public static int GPG_ERR_ESRMNT() {
        return (int)32896L;
    }
    public static int GPG_ERR_ESTALE() {
        return (int)32897L;
    }
    public static int GPG_ERR_ESTRPIPE() {
        return (int)32898L;
    }
    public static int GPG_ERR_ETIME() {
        return (int)32899L;
    }
    public static int GPG_ERR_ETIMEDOUT() {
        return (int)32900L;
    }
    public static int GPG_ERR_ETOOMANYREFS() {
        return (int)32901L;
    }
    public static int GPG_ERR_ETXTBSY() {
        return (int)32902L;
    }
    public static int GPG_ERR_EUCLEAN() {
        return (int)32903L;
    }
    public static int GPG_ERR_EUNATCH() {
        return (int)32904L;
    }
    public static int GPG_ERR_EUSERS() {
        return (int)32905L;
    }
    public static int GPG_ERR_EWOULDBLOCK() {
        return (int)32906L;
    }
    public static int GPG_ERR_EXDEV() {
        return (int)32907L;
    }
    public static int GPG_ERR_EXFULL() {
        return (int)32908L;
    }
    public static int GPG_ERR_CODE_DIM() {
        return (int)65536L;
    }
    public static MethodHandle gpgrt_annotate_leaked_object$MH() {
        return RuntimeHelper.requireNonNull(constants$1375.gpgrt_annotate_leaked_object$MH,"gpgrt_annotate_leaked_object");
    }
    public static void gpgrt_annotate_leaked_object ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1375.gpgrt_annotate_leaked_object$MH, "gpgrt_annotate_leaked_object");
        try {
            mh$.invokeExact(p.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpg_err_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1376.gpg_err_init$MH,"gpg_err_init");
    }
    public static int gpg_err_init () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1376.gpg_err_init$MH, "gpg_err_init");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpg_err_deinit$MH() {
        return RuntimeHelper.requireNonNull(constants$1376.gpg_err_deinit$MH,"gpg_err_deinit");
    }
    public static void gpg_err_deinit ( int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1376.gpg_err_deinit$MH, "gpg_err_deinit");
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_set_syscall_clamp$MH() {
        return RuntimeHelper.requireNonNull(constants$1377.gpgrt_set_syscall_clamp$MH,"gpgrt_set_syscall_clamp");
    }
    public static void gpgrt_set_syscall_clamp ( Addressable pre,  Addressable post) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1377.gpgrt_set_syscall_clamp$MH, "gpgrt_set_syscall_clamp");
        try {
            mh$.invokeExact(pre.address(), post.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_get_syscall_clamp$MH() {
        return RuntimeHelper.requireNonNull(constants$1377.gpgrt_get_syscall_clamp$MH,"gpgrt_get_syscall_clamp");
    }
    public static void gpgrt_get_syscall_clamp ( Addressable r_pre,  Addressable r_post) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1377.gpgrt_get_syscall_clamp$MH, "gpgrt_get_syscall_clamp");
        try {
            mh$.invokeExact(r_pre.address(), r_post.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_set_alloc_func$MH() {
        return RuntimeHelper.requireNonNull(constants$1378.gpgrt_set_alloc_func$MH,"gpgrt_set_alloc_func");
    }
    public static void gpgrt_set_alloc_func ( Addressable f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1378.gpgrt_set_alloc_func$MH, "gpgrt_set_alloc_func");
        try {
            mh$.invokeExact(f.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_add_emergency_cleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$1378.gpgrt_add_emergency_cleanup$MH,"gpgrt_add_emergency_cleanup");
    }
    public static void gpgrt_add_emergency_cleanup ( Addressable f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1378.gpgrt_add_emergency_cleanup$MH, "gpgrt_add_emergency_cleanup");
        try {
            mh$.invokeExact(f.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_abort$MH() {
        return RuntimeHelper.requireNonNull(constants$1379.gpgrt_abort$MH,"gpgrt_abort");
    }
    public static void gpgrt_abort () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1379.gpgrt_abort$MH, "gpgrt_abort");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpg_err_make$MH() {
        return RuntimeHelper.requireNonNull(constants$1379.gpg_err_make$MH,"gpg_err_make");
    }
    public static int gpg_err_make ( int source,  int code) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1379.gpg_err_make$MH, "gpg_err_make");
        try {
            return (int)mh$.invokeExact(source, code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpg_error$MH() {
        return RuntimeHelper.requireNonNull(constants$1379.gpg_error$MH,"gpg_error");
    }
    public static int gpg_error ( int code) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1379.gpg_error$MH, "gpg_error");
        try {
            return (int)mh$.invokeExact(code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpg_err_code$MH() {
        return RuntimeHelper.requireNonNull(constants$1379.gpg_err_code$MH,"gpg_err_code");
    }
    public static int gpg_err_code ( int err) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1379.gpg_err_code$MH, "gpg_err_code");
        try {
            return (int)mh$.invokeExact(err);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpg_err_source$MH() {
        return RuntimeHelper.requireNonNull(constants$1379.gpg_err_source$MH,"gpg_err_source");
    }
    public static int gpg_err_source ( int err) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1379.gpg_err_source$MH, "gpg_err_source");
        try {
            return (int)mh$.invokeExact(err);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpg_strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$1379.gpg_strerror$MH,"gpg_strerror");
    }
    public static MemoryAddress gpg_strerror ( int err) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1379.gpg_strerror$MH, "gpg_strerror");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(err);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpg_strerror_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1380.gpg_strerror_r$MH,"gpg_strerror_r");
    }
    public static int gpg_strerror_r ( int err,  Addressable buf,  long buflen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1380.gpg_strerror_r$MH, "gpg_strerror_r");
        try {
            return (int)mh$.invokeExact(err, buf.address(), buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpg_strsource$MH() {
        return RuntimeHelper.requireNonNull(constants$1380.gpg_strsource$MH,"gpg_strsource");
    }
    public static MemoryAddress gpg_strsource ( int err) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1380.gpg_strsource$MH, "gpg_strsource");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(err);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpg_err_code_from_errno$MH() {
        return RuntimeHelper.requireNonNull(constants$1380.gpg_err_code_from_errno$MH,"gpg_err_code_from_errno");
    }
    public static int gpg_err_code_from_errno ( int err) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1380.gpg_err_code_from_errno$MH, "gpg_err_code_from_errno");
        try {
            return (int)mh$.invokeExact(err);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpg_err_code_to_errno$MH() {
        return RuntimeHelper.requireNonNull(constants$1380.gpg_err_code_to_errno$MH,"gpg_err_code_to_errno");
    }
    public static int gpg_err_code_to_errno ( int code) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1380.gpg_err_code_to_errno$MH, "gpg_err_code_to_errno");
        try {
            return (int)mh$.invokeExact(code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpg_err_code_from_syserror$MH() {
        return RuntimeHelper.requireNonNull(constants$1380.gpg_err_code_from_syserror$MH,"gpg_err_code_from_syserror");
    }
    public static int gpg_err_code_from_syserror () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1380.gpg_err_code_from_syserror$MH, "gpg_err_code_from_syserror");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpg_err_code_from_sqlite$MH() {
        return RuntimeHelper.requireNonNull(constants$1380.gpg_err_code_from_sqlite$MH,"gpg_err_code_from_sqlite");
    }
    public static int gpg_err_code_from_sqlite ( int sqlres) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1380.gpg_err_code_from_sqlite$MH, "gpg_err_code_from_sqlite");
        try {
            return (int)mh$.invokeExact(sqlres);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpg_err_set_errno$MH() {
        return RuntimeHelper.requireNonNull(constants$1381.gpg_err_set_errno$MH,"gpg_err_set_errno");
    }
    public static void gpg_err_set_errno ( int err) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1381.gpg_err_set_errno$MH, "gpg_err_set_errno");
        try {
            mh$.invokeExact(err);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_check_version$MH() {
        return RuntimeHelper.requireNonNull(constants$1381.gpgrt_check_version$MH,"gpgrt_check_version");
    }
    public static MemoryAddress gpgrt_check_version ( Addressable req_version) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1381.gpgrt_check_version$MH, "gpgrt_check_version");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(req_version.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpg_error_check_version$MH() {
        return RuntimeHelper.requireNonNull(constants$1381.gpg_error_check_version$MH,"gpg_error_check_version");
    }
    public static MemoryAddress gpg_error_check_version ( Addressable req_version) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1381.gpg_error_check_version$MH, "gpg_error_check_version");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(req_version.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout int16_t = C_SHORT;
    public static ValueLayout int32_t = C_INT;
    public static ValueLayout int64_t = C_LONG_LONG;
    public static ValueLayout int_least16_t = C_SHORT;
    public static ValueLayout int_least32_t = C_INT;
    public static ValueLayout int_least64_t = C_LONG_LONG;
    public static ValueLayout int_fast16_t = C_SHORT;
    public static ValueLayout int_fast32_t = C_INT;
    public static ValueLayout int_fast64_t = C_LONG_LONG;
    public static ValueLayout intmax_t = C_LONG_LONG;
    public static ValueLayout gpgrt_ssize_t = C_LONG_LONG;
    public static ValueLayout gpgrt_off_t = C_LONG_LONG;
    public static MethodHandle _gpg_w32_bindtextdomain$MH() {
        return RuntimeHelper.requireNonNull(constants$1381._gpg_w32_bindtextdomain$MH,"_gpg_w32_bindtextdomain");
    }
    public static MemoryAddress _gpg_w32_bindtextdomain ( Addressable domainname,  Addressable dirname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1381._gpg_w32_bindtextdomain$MH, "_gpg_w32_bindtextdomain");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(domainname.address(), dirname.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gpg_w32_textdomain$MH() {
        return RuntimeHelper.requireNonNull(constants$1381._gpg_w32_textdomain$MH,"_gpg_w32_textdomain");
    }
    public static MemoryAddress _gpg_w32_textdomain ( Addressable domainname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1381._gpg_w32_textdomain$MH, "_gpg_w32_textdomain");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(domainname.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gpg_w32_gettext$MH() {
        return RuntimeHelper.requireNonNull(constants$1381._gpg_w32_gettext$MH,"_gpg_w32_gettext");
    }
    public static MemoryAddress _gpg_w32_gettext ( Addressable msgid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1381._gpg_w32_gettext$MH, "_gpg_w32_gettext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(msgid.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gpg_w32_dgettext$MH() {
        return RuntimeHelper.requireNonNull(constants$1382._gpg_w32_dgettext$MH,"_gpg_w32_dgettext");
    }
    public static MemoryAddress _gpg_w32_dgettext ( Addressable domainname,  Addressable msgid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1382._gpg_w32_dgettext$MH, "_gpg_w32_dgettext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(domainname.address(), msgid.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gpg_w32_dngettext$MH() {
        return RuntimeHelper.requireNonNull(constants$1382._gpg_w32_dngettext$MH,"_gpg_w32_dngettext");
    }
    public static MemoryAddress _gpg_w32_dngettext ( Addressable domainname,  Addressable msgid1,  Addressable msgid2,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1382._gpg_w32_dngettext$MH, "_gpg_w32_dngettext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(domainname.address(), msgid1.address(), msgid2.address(), n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gpg_w32_gettext_localename$MH() {
        return RuntimeHelper.requireNonNull(constants$1382._gpg_w32_gettext_localename$MH,"_gpg_w32_gettext_localename");
    }
    public static MemoryAddress _gpg_w32_gettext_localename () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1382._gpg_w32_gettext_localename$MH, "_gpg_w32_gettext_localename");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gpg_w32_gettext_use_utf8$MH() {
        return RuntimeHelper.requireNonNull(constants$1382._gpg_w32_gettext_use_utf8$MH,"_gpg_w32_gettext_use_utf8");
    }
    public static int _gpg_w32_gettext_use_utf8 ( int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1382._gpg_w32_gettext_use_utf8$MH, "_gpg_w32_gettext_use_utf8");
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_w32_override_locale$MH() {
        return RuntimeHelper.requireNonNull(constants$1382.gpgrt_w32_override_locale$MH,"gpgrt_w32_override_locale");
    }
    public static void gpgrt_w32_override_locale ( Addressable name,  short langid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1382.gpgrt_w32_override_locale$MH, "gpgrt_w32_override_locale");
        try {
            mh$.invokeExact(name.address(), langid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_w32_iconv_open$MH() {
        return RuntimeHelper.requireNonNull(constants$1382.gpgrt_w32_iconv_open$MH,"gpgrt_w32_iconv_open");
    }
    public static MemoryAddress gpgrt_w32_iconv_open ( Addressable tocode,  Addressable fromcode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1382.gpgrt_w32_iconv_open$MH, "gpgrt_w32_iconv_open");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(tocode.address(), fromcode.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_w32_iconv_close$MH() {
        return RuntimeHelper.requireNonNull(constants$1383.gpgrt_w32_iconv_close$MH,"gpgrt_w32_iconv_close");
    }
    public static int gpgrt_w32_iconv_close ( Addressable cd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1383.gpgrt_w32_iconv_close$MH, "gpgrt_w32_iconv_close");
        try {
            return (int)mh$.invokeExact(cd.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_w32_iconv$MH() {
        return RuntimeHelper.requireNonNull(constants$1383.gpgrt_w32_iconv$MH,"gpgrt_w32_iconv");
    }
    public static long gpgrt_w32_iconv ( Addressable cd,  Addressable inbuf,  Addressable inbytesleft,  Addressable outbuf,  Addressable outbytesleft) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1383.gpgrt_w32_iconv$MH, "gpgrt_w32_iconv");
        try {
            return (long)mh$.invokeExact(cd.address(), inbuf.address(), inbytesleft.address(), outbuf.address(), outbytesleft.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_w32_reg_query_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1383.gpgrt_w32_reg_query_string$MH,"gpgrt_w32_reg_query_string");
    }
    public static MemoryAddress gpgrt_w32_reg_query_string ( Addressable root,  Addressable dir,  Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1383.gpgrt_w32_reg_query_string$MH, "gpgrt_w32_reg_query_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(root.address(), dir.address(), name.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpg_err_make_from_errno$MH() {
        return RuntimeHelper.requireNonNull(constants$1383.gpg_err_make_from_errno$MH,"gpg_err_make_from_errno");
    }
    public static int gpg_err_make_from_errno ( int source,  int err) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1383.gpg_err_make_from_errno$MH, "gpg_err_make_from_errno");
        try {
            return (int)mh$.invokeExact(source, err);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpg_error_from_errno$MH() {
        return RuntimeHelper.requireNonNull(constants$1383.gpg_error_from_errno$MH,"gpg_error_from_errno");
    }
    public static int gpg_error_from_errno ( int err) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1383.gpg_error_from_errno$MH, "gpg_error_from_errno");
        try {
            return (int)mh$.invokeExact(err);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpg_error_from_syserror$MH() {
        return RuntimeHelper.requireNonNull(constants$1383.gpg_error_from_syserror$MH,"gpg_error_from_syserror");
    }
    public static int gpg_error_from_syserror () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1383.gpg_error_from_syserror$MH, "gpg_error_from_syserror");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1384.gpgrt_realloc$MH,"gpgrt_realloc");
    }
    public static MemoryAddress gpgrt_realloc ( Addressable a,  long n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1384.gpgrt_realloc$MH, "gpgrt_realloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a.address(), n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_reallocarray$MH() {
        return RuntimeHelper.requireNonNull(constants$1384.gpgrt_reallocarray$MH,"gpgrt_reallocarray");
    }
    public static MemoryAddress gpgrt_reallocarray ( Addressable a,  long oldnmemb,  long nmemb,  long size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1384.gpgrt_reallocarray$MH, "gpgrt_reallocarray");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a.address(), oldnmemb, nmemb, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1384.gpgrt_malloc$MH,"gpgrt_malloc");
    }
    public static MemoryAddress gpgrt_malloc ( long n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1384.gpgrt_malloc$MH, "gpgrt_malloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1384.gpgrt_calloc$MH,"gpgrt_calloc");
    }
    public static MemoryAddress gpgrt_calloc ( long n,  long m) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1384.gpgrt_calloc$MH, "gpgrt_calloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(n, m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_strdup$MH() {
        return RuntimeHelper.requireNonNull(constants$1384.gpgrt_strdup$MH,"gpgrt_strdup");
    }
    public static MemoryAddress gpgrt_strdup ( Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1384.gpgrt_strdup$MH, "gpgrt_strdup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_strconcat$MH() {
        return RuntimeHelper.requireNonNull(constants$1384.gpgrt_strconcat$MH,"gpgrt_strconcat");
    }
    public static MemoryAddress gpgrt_strconcat ( Addressable s1, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1384.gpgrt_strconcat$MH, "gpgrt_strconcat");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s1.address(), x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1385.gpgrt_free$MH,"gpgrt_free");
    }
    public static void gpgrt_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1385.gpgrt_free$MH, "gpgrt_free");
        try {
            mh$.invokeExact(a.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$1385.gpgrt_getenv$MH,"gpgrt_getenv");
    }
    public static MemoryAddress gpgrt_getenv ( Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1385.gpgrt_getenv$MH, "gpgrt_getenv");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(name.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$1385.gpgrt_setenv$MH,"gpgrt_setenv");
    }
    public static int gpgrt_setenv ( Addressable name,  Addressable value,  int overwrite) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1385.gpgrt_setenv$MH, "gpgrt_setenv");
        try {
            return (int)mh$.invokeExact(name.address(), value.address(), overwrite);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_mkdir$MH() {
        return RuntimeHelper.requireNonNull(constants$1385.gpgrt_mkdir$MH,"gpgrt_mkdir");
    }
    public static int gpgrt_mkdir ( Addressable name,  Addressable modestr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1385.gpgrt_mkdir$MH, "gpgrt_mkdir");
        try {
            return (int)mh$.invokeExact(name.address(), modestr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_chdir$MH() {
        return RuntimeHelper.requireNonNull(constants$1385.gpgrt_chdir$MH,"gpgrt_chdir");
    }
    public static int gpgrt_chdir ( Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1385.gpgrt_chdir$MH, "gpgrt_chdir");
        try {
            return (int)mh$.invokeExact(name.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_getcwd$MH() {
        return RuntimeHelper.requireNonNull(constants$1385.gpgrt_getcwd$MH,"gpgrt_getcwd");
    }
    public static MemoryAddress gpgrt_getcwd () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1385.gpgrt_getcwd$MH, "gpgrt_getcwd");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_access$MH() {
        return RuntimeHelper.requireNonNull(constants$1386.gpgrt_access$MH,"gpgrt_access");
    }
    public static int gpgrt_access ( Addressable fname,  int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1386.gpgrt_access$MH, "gpgrt_access");
        try {
            return (int)mh$.invokeExact(fname.address(), mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_lock_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1386.gpgrt_lock_init$MH,"gpgrt_lock_init");
    }
    public static int gpgrt_lock_init ( Addressable lockhd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1386.gpgrt_lock_init$MH, "gpgrt_lock_init");
        try {
            return (int)mh$.invokeExact(lockhd.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_lock_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$1386.gpgrt_lock_lock$MH,"gpgrt_lock_lock");
    }
    public static int gpgrt_lock_lock ( Addressable lockhd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1386.gpgrt_lock_lock$MH, "gpgrt_lock_lock");
        try {
            return (int)mh$.invokeExact(lockhd.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_lock_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$1386.gpgrt_lock_trylock$MH,"gpgrt_lock_trylock");
    }
    public static int gpgrt_lock_trylock ( Addressable lockhd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1386.gpgrt_lock_trylock$MH, "gpgrt_lock_trylock");
        try {
            return (int)mh$.invokeExact(lockhd.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_lock_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$1386.gpgrt_lock_unlock$MH,"gpgrt_lock_unlock");
    }
    public static int gpgrt_lock_unlock ( Addressable lockhd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1386.gpgrt_lock_unlock$MH, "gpgrt_lock_unlock");
        try {
            return (int)mh$.invokeExact(lockhd.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_lock_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$1386.gpgrt_lock_destroy$MH,"gpgrt_lock_destroy");
    }
    public static int gpgrt_lock_destroy ( Addressable lockhd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1386.gpgrt_lock_destroy$MH, "gpgrt_lock_destroy");
        try {
            return (int)mh$.invokeExact(lockhd.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_yield$MH() {
        return RuntimeHelper.requireNonNull(constants$1387.gpgrt_yield$MH,"gpgrt_yield");
    }
    public static int gpgrt_yield () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1387.gpgrt_yield$MH, "gpgrt_yield");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int GPGRT_SYSHD_NONE() {
        return (int)0L;
    }
    public static int GPGRT_SYSHD_FD() {
        return (int)1L;
    }
    public static int GPGRT_SYSHD_SOCK() {
        return (int)2L;
    }
    public static int GPGRT_SYSHD_RVID() {
        return (int)3L;
    }
    public static int GPGRT_SYSHD_HANDLE() {
        return (int)4L;
    }
    public static MethodHandle gpgrt_fopen$MH() {
        return RuntimeHelper.requireNonNull(constants$1388.gpgrt_fopen$MH,"gpgrt_fopen");
    }
    public static MemoryAddress gpgrt_fopen ( Addressable path,  Addressable mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1388.gpgrt_fopen$MH, "gpgrt_fopen");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(path.address(), mode.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_mopen$MH() {
        return RuntimeHelper.requireNonNull(constants$1389.gpgrt_mopen$MH,"gpgrt_mopen");
    }
    public static MemoryAddress gpgrt_mopen ( Addressable data,  long data_n,  long data_len,  int grow,  Addressable func_realloc,  Addressable func_free,  Addressable mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1389.gpgrt_mopen$MH, "gpgrt_mopen");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(data.address(), data_n, data_len, grow, func_realloc.address(), func_free.address(), mode.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fopenmem$MH() {
        return RuntimeHelper.requireNonNull(constants$1389.gpgrt_fopenmem$MH,"gpgrt_fopenmem");
    }
    public static MemoryAddress gpgrt_fopenmem ( long memlimit,  Addressable mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1389.gpgrt_fopenmem$MH, "gpgrt_fopenmem");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(memlimit, mode.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fopenmem_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1390.gpgrt_fopenmem_init$MH,"gpgrt_fopenmem_init");
    }
    public static MemoryAddress gpgrt_fopenmem_init ( long memlimit,  Addressable mode,  Addressable data,  long datalen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1390.gpgrt_fopenmem_init$MH, "gpgrt_fopenmem_init");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(memlimit, mode.address(), data.address(), datalen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fdopen$MH() {
        return RuntimeHelper.requireNonNull(constants$1390.gpgrt_fdopen$MH,"gpgrt_fdopen");
    }
    public static MemoryAddress gpgrt_fdopen ( int filedes,  Addressable mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1390.gpgrt_fdopen$MH, "gpgrt_fdopen");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(filedes, mode.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fdopen_nc$MH() {
        return RuntimeHelper.requireNonNull(constants$1390.gpgrt_fdopen_nc$MH,"gpgrt_fdopen_nc");
    }
    public static MemoryAddress gpgrt_fdopen_nc ( int filedes,  Addressable mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1390.gpgrt_fdopen_nc$MH, "gpgrt_fdopen_nc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(filedes, mode.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_sysopen$MH() {
        return RuntimeHelper.requireNonNull(constants$1390.gpgrt_sysopen$MH,"gpgrt_sysopen");
    }
    public static MemoryAddress gpgrt_sysopen ( Addressable syshd,  Addressable mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1390.gpgrt_sysopen$MH, "gpgrt_sysopen");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(syshd.address(), mode.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_sysopen_nc$MH() {
        return RuntimeHelper.requireNonNull(constants$1390.gpgrt_sysopen_nc$MH,"gpgrt_sysopen_nc");
    }
    public static MemoryAddress gpgrt_sysopen_nc ( Addressable syshd,  Addressable mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1390.gpgrt_sysopen_nc$MH, "gpgrt_sysopen_nc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(syshd.address(), mode.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fpopen$MH() {
        return RuntimeHelper.requireNonNull(constants$1390.gpgrt_fpopen$MH,"gpgrt_fpopen");
    }
    public static MemoryAddress gpgrt_fpopen ( Addressable fp,  Addressable mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1390.gpgrt_fpopen$MH, "gpgrt_fpopen");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp.address(), mode.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fpopen_nc$MH() {
        return RuntimeHelper.requireNonNull(constants$1391.gpgrt_fpopen_nc$MH,"gpgrt_fpopen_nc");
    }
    public static MemoryAddress gpgrt_fpopen_nc ( Addressable fp,  Addressable mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1391.gpgrt_fpopen_nc$MH, "gpgrt_fpopen_nc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp.address(), mode.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_freopen$MH() {
        return RuntimeHelper.requireNonNull(constants$1391.gpgrt_freopen$MH,"gpgrt_freopen");
    }
    public static MemoryAddress gpgrt_freopen ( Addressable path,  Addressable mode,  Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1391.gpgrt_freopen$MH, "gpgrt_freopen");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(path.address(), mode.address(), stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fopencookie$MH() {
        return RuntimeHelper.requireNonNull(constants$1391.gpgrt_fopencookie$MH,"gpgrt_fopencookie");
    }
    public static MemoryAddress gpgrt_fopencookie ( Addressable cookie,  Addressable mode,  MemorySegment functions) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1391.gpgrt_fopencookie$MH, "gpgrt_fopencookie");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(cookie.address(), mode.address(), functions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fclose$MH() {
        return RuntimeHelper.requireNonNull(constants$1391.gpgrt_fclose$MH,"gpgrt_fclose");
    }
    public static int gpgrt_fclose ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1391.gpgrt_fclose$MH, "gpgrt_fclose");
        try {
            return (int)mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fcancel$MH() {
        return RuntimeHelper.requireNonNull(constants$1391.gpgrt_fcancel$MH,"gpgrt_fcancel");
    }
    public static int gpgrt_fcancel ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1391.gpgrt_fcancel$MH, "gpgrt_fcancel");
        try {
            return (int)mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fclose_snatch$MH() {
        return RuntimeHelper.requireNonNull(constants$1391.gpgrt_fclose_snatch$MH,"gpgrt_fclose_snatch");
    }
    public static int gpgrt_fclose_snatch ( Addressable stream,  Addressable r_buffer,  Addressable r_buflen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1391.gpgrt_fclose_snatch$MH, "gpgrt_fclose_snatch");
        try {
            return (int)mh$.invokeExact(stream.address(), r_buffer.address(), r_buflen.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_onclose$MH() {
        return RuntimeHelper.requireNonNull(constants$1392.gpgrt_onclose$MH,"gpgrt_onclose");
    }
    public static int gpgrt_onclose ( Addressable stream,  int mode,  Addressable fnc,  Addressable fnc_value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1392.gpgrt_onclose$MH, "gpgrt_onclose");
        try {
            return (int)mh$.invokeExact(stream.address(), mode, fnc.address(), fnc_value.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fileno$MH() {
        return RuntimeHelper.requireNonNull(constants$1392.gpgrt_fileno$MH,"gpgrt_fileno");
    }
    public static int gpgrt_fileno ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1392.gpgrt_fileno$MH, "gpgrt_fileno");
        try {
            return (int)mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fileno_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$1392.gpgrt_fileno_unlocked$MH,"gpgrt_fileno_unlocked");
    }
    public static int gpgrt_fileno_unlocked ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1392.gpgrt_fileno_unlocked$MH, "gpgrt_fileno_unlocked");
        try {
            return (int)mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_syshd$MH() {
        return RuntimeHelper.requireNonNull(constants$1392.gpgrt_syshd$MH,"gpgrt_syshd");
    }
    public static int gpgrt_syshd ( Addressable stream,  Addressable syshd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1392.gpgrt_syshd$MH, "gpgrt_syshd");
        try {
            return (int)mh$.invokeExact(stream.address(), syshd.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_syshd_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$1393.gpgrt_syshd_unlocked$MH,"gpgrt_syshd_unlocked");
    }
    public static int gpgrt_syshd_unlocked ( Addressable stream,  Addressable syshd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1393.gpgrt_syshd_unlocked$MH, "gpgrt_syshd_unlocked");
        try {
            return (int)mh$.invokeExact(stream.address(), syshd.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gpgrt_set_std_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$1393._gpgrt_set_std_fd$MH,"_gpgrt_set_std_fd");
    }
    public static void _gpgrt_set_std_fd ( int no,  int fd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1393._gpgrt_set_std_fd$MH, "_gpgrt_set_std_fd");
        try {
            mh$.invokeExact(no, fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gpgrt_get_std_stream$MH() {
        return RuntimeHelper.requireNonNull(constants$1393._gpgrt_get_std_stream$MH,"_gpgrt_get_std_stream");
    }
    public static MemoryAddress _gpgrt_get_std_stream ( int fd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1393._gpgrt_get_std_stream$MH, "_gpgrt_get_std_stream");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_flockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$1393.gpgrt_flockfile$MH,"gpgrt_flockfile");
    }
    public static void gpgrt_flockfile ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1393.gpgrt_flockfile$MH, "gpgrt_flockfile");
        try {
            mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_ftrylockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$1393.gpgrt_ftrylockfile$MH,"gpgrt_ftrylockfile");
    }
    public static int gpgrt_ftrylockfile ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1393.gpgrt_ftrylockfile$MH, "gpgrt_ftrylockfile");
        try {
            return (int)mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_funlockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$1393.gpgrt_funlockfile$MH,"gpgrt_funlockfile");
    }
    public static void gpgrt_funlockfile ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1393.gpgrt_funlockfile$MH, "gpgrt_funlockfile");
        try {
            mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_feof$MH() {
        return RuntimeHelper.requireNonNull(constants$1394.gpgrt_feof$MH,"gpgrt_feof");
    }
    public static int gpgrt_feof ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1394.gpgrt_feof$MH, "gpgrt_feof");
        try {
            return (int)mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_feof_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$1394.gpgrt_feof_unlocked$MH,"gpgrt_feof_unlocked");
    }
    public static int gpgrt_feof_unlocked ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1394.gpgrt_feof_unlocked$MH, "gpgrt_feof_unlocked");
        try {
            return (int)mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_ferror$MH() {
        return RuntimeHelper.requireNonNull(constants$1394.gpgrt_ferror$MH,"gpgrt_ferror");
    }
    public static int gpgrt_ferror ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1394.gpgrt_ferror$MH, "gpgrt_ferror");
        try {
            return (int)mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_ferror_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$1394.gpgrt_ferror_unlocked$MH,"gpgrt_ferror_unlocked");
    }
    public static int gpgrt_ferror_unlocked ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1394.gpgrt_ferror_unlocked$MH, "gpgrt_ferror_unlocked");
        try {
            return (int)mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_clearerr$MH() {
        return RuntimeHelper.requireNonNull(constants$1394.gpgrt_clearerr$MH,"gpgrt_clearerr");
    }
    public static void gpgrt_clearerr ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1394.gpgrt_clearerr$MH, "gpgrt_clearerr");
        try {
            mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_clearerr_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$1394.gpgrt_clearerr_unlocked$MH,"gpgrt_clearerr_unlocked");
    }
    public static void gpgrt_clearerr_unlocked ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1394.gpgrt_clearerr_unlocked$MH, "gpgrt_clearerr_unlocked");
        try {
            mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gpgrt_pending$MH() {
        return RuntimeHelper.requireNonNull(constants$1395._gpgrt_pending$MH,"_gpgrt_pending");
    }
    public static int _gpgrt_pending ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1395._gpgrt_pending$MH, "_gpgrt_pending");
        try {
            return (int)mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gpgrt_pending_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$1395._gpgrt_pending_unlocked$MH,"_gpgrt_pending_unlocked");
    }
    public static int _gpgrt_pending_unlocked ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1395._gpgrt_pending_unlocked$MH, "_gpgrt_pending_unlocked");
        try {
            return (int)mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fflush$MH() {
        return RuntimeHelper.requireNonNull(constants$1395.gpgrt_fflush$MH,"gpgrt_fflush");
    }
    public static int gpgrt_fflush ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1395.gpgrt_fflush$MH, "gpgrt_fflush");
        try {
            return (int)mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fseek$MH() {
        return RuntimeHelper.requireNonNull(constants$1395.gpgrt_fseek$MH,"gpgrt_fseek");
    }
    public static int gpgrt_fseek ( Addressable stream,  int offset,  int whence) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1395.gpgrt_fseek$MH, "gpgrt_fseek");
        try {
            return (int)mh$.invokeExact(stream.address(), offset, whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fseeko$MH() {
        return RuntimeHelper.requireNonNull(constants$1395.gpgrt_fseeko$MH,"gpgrt_fseeko");
    }
    public static int gpgrt_fseeko ( Addressable stream,  long offset,  int whence) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1395.gpgrt_fseeko$MH, "gpgrt_fseeko");
        try {
            return (int)mh$.invokeExact(stream.address(), offset, whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_ftruncate$MH() {
        return RuntimeHelper.requireNonNull(constants$1395.gpgrt_ftruncate$MH,"gpgrt_ftruncate");
    }
    public static int gpgrt_ftruncate ( Addressable stream,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1395.gpgrt_ftruncate$MH, "gpgrt_ftruncate");
        try {
            return (int)mh$.invokeExact(stream.address(), length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_ftell$MH() {
        return RuntimeHelper.requireNonNull(constants$1396.gpgrt_ftell$MH,"gpgrt_ftell");
    }
    public static int gpgrt_ftell ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1396.gpgrt_ftell$MH, "gpgrt_ftell");
        try {
            return (int)mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_ftello$MH() {
        return RuntimeHelper.requireNonNull(constants$1396.gpgrt_ftello$MH,"gpgrt_ftello");
    }
    public static long gpgrt_ftello ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1396.gpgrt_ftello$MH, "gpgrt_ftello");
        try {
            return (long)mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_rewind$MH() {
        return RuntimeHelper.requireNonNull(constants$1396.gpgrt_rewind$MH,"gpgrt_rewind");
    }
    public static void gpgrt_rewind ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1396.gpgrt_rewind$MH, "gpgrt_rewind");
        try {
            mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fgetc$MH() {
        return RuntimeHelper.requireNonNull(constants$1396.gpgrt_fgetc$MH,"gpgrt_fgetc");
    }
    public static int gpgrt_fgetc ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1396.gpgrt_fgetc$MH, "gpgrt_fgetc");
        try {
            return (int)mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fputc$MH() {
        return RuntimeHelper.requireNonNull(constants$1396.gpgrt_fputc$MH,"gpgrt_fputc");
    }
    public static int gpgrt_fputc ( int c,  Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1396.gpgrt_fputc$MH, "gpgrt_fputc");
        try {
            return (int)mh$.invokeExact(c, stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gpgrt_getc_underflow$MH() {
        return RuntimeHelper.requireNonNull(constants$1396._gpgrt_getc_underflow$MH,"_gpgrt_getc_underflow");
    }
    public static int _gpgrt_getc_underflow ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1396._gpgrt_getc_underflow$MH, "_gpgrt_getc_underflow");
        try {
            return (int)mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gpgrt_putc_overflow$MH() {
        return RuntimeHelper.requireNonNull(constants$1397._gpgrt_putc_overflow$MH,"_gpgrt_putc_overflow");
    }
    public static int _gpgrt_putc_overflow ( int c,  Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1397._gpgrt_putc_overflow$MH, "_gpgrt_putc_overflow");
        try {
            return (int)mh$.invokeExact(c, stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_ungetc$MH() {
        return RuntimeHelper.requireNonNull(constants$1397.gpgrt_ungetc$MH,"gpgrt_ungetc");
    }
    public static int gpgrt_ungetc ( int c,  Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1397.gpgrt_ungetc$MH, "gpgrt_ungetc");
        try {
            return (int)mh$.invokeExact(c, stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_read$MH() {
        return RuntimeHelper.requireNonNull(constants$1397.gpgrt_read$MH,"gpgrt_read");
    }
    public static int gpgrt_read ( Addressable stream,  Addressable buffer,  long bytes_to_read,  Addressable bytes_read) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1397.gpgrt_read$MH, "gpgrt_read");
        try {
            return (int)mh$.invokeExact(stream.address(), buffer.address(), bytes_to_read, bytes_read.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_write$MH() {
        return RuntimeHelper.requireNonNull(constants$1397.gpgrt_write$MH,"gpgrt_write");
    }
    public static int gpgrt_write ( Addressable stream,  Addressable buffer,  long bytes_to_write,  Addressable bytes_written) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1397.gpgrt_write$MH, "gpgrt_write");
        try {
            return (int)mh$.invokeExact(stream.address(), buffer.address(), bytes_to_write, bytes_written.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_write_sanitized$MH() {
        return RuntimeHelper.requireNonNull(constants$1397.gpgrt_write_sanitized$MH,"gpgrt_write_sanitized");
    }
    public static int gpgrt_write_sanitized ( Addressable stream,  Addressable buffer,  long length,  Addressable delimiters,  Addressable bytes_written) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1397.gpgrt_write_sanitized$MH, "gpgrt_write_sanitized");
        try {
            return (int)mh$.invokeExact(stream.address(), buffer.address(), length, delimiters.address(), bytes_written.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_write_hexstring$MH() {
        return RuntimeHelper.requireNonNull(constants$1397.gpgrt_write_hexstring$MH,"gpgrt_write_hexstring");
    }
    public static int gpgrt_write_hexstring ( Addressable stream,  Addressable buffer,  long length,  int reserved,  Addressable bytes_written) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1397.gpgrt_write_hexstring$MH, "gpgrt_write_hexstring");
        try {
            return (int)mh$.invokeExact(stream.address(), buffer.address(), length, reserved, bytes_written.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fread$MH() {
        return RuntimeHelper.requireNonNull(constants$1398.gpgrt_fread$MH,"gpgrt_fread");
    }
    public static long gpgrt_fread ( Addressable ptr,  long size,  long nitems,  Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1398.gpgrt_fread$MH, "gpgrt_fread");
        try {
            return (long)mh$.invokeExact(ptr.address(), size, nitems, stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$1398.gpgrt_fwrite$MH,"gpgrt_fwrite");
    }
    public static long gpgrt_fwrite ( Addressable ptr,  long size,  long nitems,  Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1398.gpgrt_fwrite$MH, "gpgrt_fwrite");
        try {
            return (long)mh$.invokeExact(ptr.address(), size, nitems, stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fgets$MH() {
        return RuntimeHelper.requireNonNull(constants$1398.gpgrt_fgets$MH,"gpgrt_fgets");
    }
    public static MemoryAddress gpgrt_fgets ( Addressable s,  int n,  Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1398.gpgrt_fgets$MH, "gpgrt_fgets");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s.address(), n, stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fputs$MH() {
        return RuntimeHelper.requireNonNull(constants$1398.gpgrt_fputs$MH,"gpgrt_fputs");
    }
    public static int gpgrt_fputs ( Addressable s,  Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1398.gpgrt_fputs$MH, "gpgrt_fputs");
        try {
            return (int)mh$.invokeExact(s.address(), stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fputs_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$1398.gpgrt_fputs_unlocked$MH,"gpgrt_fputs_unlocked");
    }
    public static int gpgrt_fputs_unlocked ( Addressable s,  Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1398.gpgrt_fputs_unlocked$MH, "gpgrt_fputs_unlocked");
        try {
            return (int)mh$.invokeExact(s.address(), stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_getline$MH() {
        return RuntimeHelper.requireNonNull(constants$1398.gpgrt_getline$MH,"gpgrt_getline");
    }
    public static long gpgrt_getline ( Addressable lineptr,  Addressable n,  Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1398.gpgrt_getline$MH, "gpgrt_getline");
        try {
            return (long)mh$.invokeExact(lineptr.address(), n.address(), stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_read_line$MH() {
        return RuntimeHelper.requireNonNull(constants$1399.gpgrt_read_line$MH,"gpgrt_read_line");
    }
    public static long gpgrt_read_line ( Addressable stream,  Addressable addr_of_buffer,  Addressable length_of_buffer,  Addressable max_length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1399.gpgrt_read_line$MH, "gpgrt_read_line");
        try {
            return (long)mh$.invokeExact(stream.address(), addr_of_buffer.address(), length_of_buffer.address(), max_length.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$1399.gpgrt_fprintf$MH,"gpgrt_fprintf");
    }
    public static int gpgrt_fprintf ( Addressable stream,  Addressable format, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1399.gpgrt_fprintf$MH, "gpgrt_fprintf");
        try {
            return (int)mh$.invokeExact(stream.address(), format.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fprintf_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$1399.gpgrt_fprintf_unlocked$MH,"gpgrt_fprintf_unlocked");
    }
    public static int gpgrt_fprintf_unlocked ( Addressable stream,  Addressable format, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1399.gpgrt_fprintf_unlocked$MH, "gpgrt_fprintf_unlocked");
        try {
            return (int)mh$.invokeExact(stream.address(), format.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fprintf_sf$MH() {
        return RuntimeHelper.requireNonNull(constants$1399.gpgrt_fprintf_sf$MH,"gpgrt_fprintf_sf");
    }
    public static int gpgrt_fprintf_sf ( Addressable stream,  Addressable sf,  Addressable sfvalue,  Addressable format, Object... x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1399.gpgrt_fprintf_sf$MH, "gpgrt_fprintf_sf");
        try {
            return (int)mh$.invokeExact(stream.address(), sf.address(), sfvalue.address(), format.address(), x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fprintf_sf_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$1399.gpgrt_fprintf_sf_unlocked$MH,"gpgrt_fprintf_sf_unlocked");
    }
    public static int gpgrt_fprintf_sf_unlocked ( Addressable stream,  Addressable sf,  Addressable sfvalue,  Addressable format, Object... x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1399.gpgrt_fprintf_sf_unlocked$MH, "gpgrt_fprintf_sf_unlocked");
        try {
            return (int)mh$.invokeExact(stream.address(), sf.address(), sfvalue.address(), format.address(), x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_printf$MH() {
        return RuntimeHelper.requireNonNull(constants$1399.gpgrt_printf$MH,"gpgrt_printf");
    }
    public static int gpgrt_printf ( Addressable format, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1399.gpgrt_printf$MH, "gpgrt_printf");
        try {
            return (int)mh$.invokeExact(format.address(), x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_printf_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$1400.gpgrt_printf_unlocked$MH,"gpgrt_printf_unlocked");
    }
    public static int gpgrt_printf_unlocked ( Addressable format, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1400.gpgrt_printf_unlocked$MH, "gpgrt_printf_unlocked");
        try {
            return (int)mh$.invokeExact(format.address(), x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_vfprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$1400.gpgrt_vfprintf$MH,"gpgrt_vfprintf");
    }
    public static int gpgrt_vfprintf ( Addressable stream,  Addressable format,  Addressable ap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1400.gpgrt_vfprintf$MH, "gpgrt_vfprintf");
        try {
            return (int)mh$.invokeExact(stream.address(), format.address(), ap.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_vfprintf_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$1400.gpgrt_vfprintf_unlocked$MH,"gpgrt_vfprintf_unlocked");
    }
    public static int gpgrt_vfprintf_unlocked ( Addressable stream,  Addressable format,  Addressable ap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1400.gpgrt_vfprintf_unlocked$MH, "gpgrt_vfprintf_unlocked");
        try {
            return (int)mh$.invokeExact(stream.address(), format.address(), ap.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_setvbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$1400.gpgrt_setvbuf$MH,"gpgrt_setvbuf");
    }
    public static int gpgrt_setvbuf ( Addressable stream,  Addressable buf,  int mode,  long size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1400.gpgrt_setvbuf$MH, "gpgrt_setvbuf");
        try {
            return (int)mh$.invokeExact(stream.address(), buf.address(), mode, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_setbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$1400.gpgrt_setbuf$MH,"gpgrt_setbuf");
    }
    public static void gpgrt_setbuf ( Addressable stream,  Addressable buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1400.gpgrt_setbuf$MH, "gpgrt_setbuf");
        try {
            mh$.invokeExact(stream.address(), buf.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_set_binary$MH() {
        return RuntimeHelper.requireNonNull(constants$1400.gpgrt_set_binary$MH,"gpgrt_set_binary");
    }
    public static void gpgrt_set_binary ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1400.gpgrt_set_binary$MH, "gpgrt_set_binary");
        try {
            mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_set_nonblock$MH() {
        return RuntimeHelper.requireNonNull(constants$1401.gpgrt_set_nonblock$MH,"gpgrt_set_nonblock");
    }
    public static int gpgrt_set_nonblock ( Addressable stream,  int onoff) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1401.gpgrt_set_nonblock$MH, "gpgrt_set_nonblock");
        try {
            return (int)mh$.invokeExact(stream.address(), onoff);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_get_nonblock$MH() {
        return RuntimeHelper.requireNonNull(constants$1401.gpgrt_get_nonblock$MH,"gpgrt_get_nonblock");
    }
    public static int gpgrt_get_nonblock ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1401.gpgrt_get_nonblock$MH, "gpgrt_get_nonblock");
        try {
            return (int)mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_poll$MH() {
        return RuntimeHelper.requireNonNull(constants$1401.gpgrt_poll$MH,"gpgrt_poll");
    }
    public static int gpgrt_poll ( Addressable fdlist,  int nfds,  int timeout) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1401.gpgrt_poll$MH, "gpgrt_poll");
        try {
            return (int)mh$.invokeExact(fdlist.address(), nfds, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_tmpfile$MH() {
        return RuntimeHelper.requireNonNull(constants$1401.gpgrt_tmpfile$MH,"gpgrt_tmpfile");
    }
    public static MemoryAddress gpgrt_tmpfile () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1401.gpgrt_tmpfile$MH, "gpgrt_tmpfile");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_opaque_set$MH() {
        return RuntimeHelper.requireNonNull(constants$1401.gpgrt_opaque_set$MH,"gpgrt_opaque_set");
    }
    public static void gpgrt_opaque_set ( Addressable stream,  Addressable opaque) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1401.gpgrt_opaque_set$MH, "gpgrt_opaque_set");
        try {
            mh$.invokeExact(stream.address(), opaque.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_opaque_get$MH() {
        return RuntimeHelper.requireNonNull(constants$1401.gpgrt_opaque_get$MH,"gpgrt_opaque_get");
    }
    public static MemoryAddress gpgrt_opaque_get ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1401.gpgrt_opaque_get$MH, "gpgrt_opaque_get");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fname_set$MH() {
        return RuntimeHelper.requireNonNull(constants$1402.gpgrt_fname_set$MH,"gpgrt_fname_set");
    }
    public static void gpgrt_fname_set ( Addressable stream,  Addressable fname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1402.gpgrt_fname_set$MH, "gpgrt_fname_set");
        try {
            mh$.invokeExact(stream.address(), fname.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fname_get$MH() {
        return RuntimeHelper.requireNonNull(constants$1402.gpgrt_fname_get$MH,"gpgrt_fname_get");
    }
    public static MemoryAddress gpgrt_fname_get ( Addressable stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1402.gpgrt_fname_get$MH, "gpgrt_fname_get");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(stream.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_asprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$1402.gpgrt_asprintf$MH,"gpgrt_asprintf");
    }
    public static int gpgrt_asprintf ( Addressable r_buf,  Addressable format, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1402.gpgrt_asprintf$MH, "gpgrt_asprintf");
        try {
            return (int)mh$.invokeExact(r_buf.address(), format.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_vasprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$1402.gpgrt_vasprintf$MH,"gpgrt_vasprintf");
    }
    public static int gpgrt_vasprintf ( Addressable r_buf,  Addressable format,  Addressable ap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1402.gpgrt_vasprintf$MH, "gpgrt_vasprintf");
        try {
            return (int)mh$.invokeExact(r_buf.address(), format.address(), ap.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_bsprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$1402.gpgrt_bsprintf$MH,"gpgrt_bsprintf");
    }
    public static MemoryAddress gpgrt_bsprintf ( Addressable format, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1402.gpgrt_bsprintf$MH, "gpgrt_bsprintf");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(format.address(), x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_vbsprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$1402.gpgrt_vbsprintf$MH,"gpgrt_vbsprintf");
    }
    public static MemoryAddress gpgrt_vbsprintf ( Addressable format,  Addressable ap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1402.gpgrt_vbsprintf$MH, "gpgrt_vbsprintf");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(format.address(), ap.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$1403.gpgrt_snprintf$MH,"gpgrt_snprintf");
    }
    public static int gpgrt_snprintf ( Addressable buf,  long bufsize,  Addressable format, Object... x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1403.gpgrt_snprintf$MH, "gpgrt_snprintf");
        try {
            return (int)mh$.invokeExact(buf.address(), bufsize, format.address(), x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$1403.gpgrt_vsnprintf$MH,"gpgrt_vsnprintf");
    }
    public static int gpgrt_vsnprintf ( Addressable buf,  long bufsize,  Addressable format,  Addressable arg_ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1403.gpgrt_vsnprintf$MH, "gpgrt_vsnprintf");
        try {
            return (int)mh$.invokeExact(buf.address(), bufsize, format.address(), arg_ptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_b64enc_start$MH() {
        return RuntimeHelper.requireNonNull(constants$1403.gpgrt_b64enc_start$MH,"gpgrt_b64enc_start");
    }
    public static MemoryAddress gpgrt_b64enc_start ( Addressable stream,  Addressable title) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1403.gpgrt_b64enc_start$MH, "gpgrt_b64enc_start");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(stream.address(), title.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_b64enc_write$MH() {
        return RuntimeHelper.requireNonNull(constants$1403.gpgrt_b64enc_write$MH,"gpgrt_b64enc_write");
    }
    public static int gpgrt_b64enc_write ( Addressable state,  Addressable buffer,  long nbytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1403.gpgrt_b64enc_write$MH, "gpgrt_b64enc_write");
        try {
            return (int)mh$.invokeExact(state.address(), buffer.address(), nbytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_b64enc_finish$MH() {
        return RuntimeHelper.requireNonNull(constants$1403.gpgrt_b64enc_finish$MH,"gpgrt_b64enc_finish");
    }
    public static int gpgrt_b64enc_finish ( Addressable state) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1403.gpgrt_b64enc_finish$MH, "gpgrt_b64enc_finish");
        try {
            return (int)mh$.invokeExact(state.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_b64dec_start$MH() {
        return RuntimeHelper.requireNonNull(constants$1403.gpgrt_b64dec_start$MH,"gpgrt_b64dec_start");
    }
    public static MemoryAddress gpgrt_b64dec_start ( Addressable title) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1403.gpgrt_b64dec_start$MH, "gpgrt_b64dec_start");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(title.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_b64dec_proc$MH() {
        return RuntimeHelper.requireNonNull(constants$1404.gpgrt_b64dec_proc$MH,"gpgrt_b64dec_proc");
    }
    public static int gpgrt_b64dec_proc ( Addressable state,  Addressable buffer,  long length,  Addressable r_nbytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1404.gpgrt_b64dec_proc$MH, "gpgrt_b64dec_proc");
        try {
            return (int)mh$.invokeExact(state.address(), buffer.address(), length, r_nbytes.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_b64dec_finish$MH() {
        return RuntimeHelper.requireNonNull(constants$1404.gpgrt_b64dec_finish$MH,"gpgrt_b64dec_finish");
    }
    public static int gpgrt_b64dec_finish ( Addressable state) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1404.gpgrt_b64dec_finish$MH, "gpgrt_b64dec_finish");
        try {
            return (int)mh$.invokeExact(state.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int GPGRT_LOGLVL_BEGIN() {
        return (int)0L;
    }
    public static int GPGRT_LOGLVL_CONT() {
        return (int)1L;
    }
    public static int GPGRT_LOGLVL_INFO() {
        return (int)2L;
    }
    public static int GPGRT_LOGLVL_WARN() {
        return (int)3L;
    }
    public static int GPGRT_LOGLVL_ERROR() {
        return (int)4L;
    }
    public static int GPGRT_LOGLVL_FATAL() {
        return (int)5L;
    }
    public static int GPGRT_LOGLVL_BUG() {
        return (int)6L;
    }
    public static int GPGRT_LOGLVL_DEBUG() {
        return (int)7L;
    }
    public static MethodHandle gpgrt_log_set_sink$MH() {
        return RuntimeHelper.requireNonNull(constants$1404.gpgrt_log_set_sink$MH,"gpgrt_log_set_sink");
    }
    public static void gpgrt_log_set_sink ( Addressable name,  Addressable stream,  int fd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1404.gpgrt_log_set_sink$MH, "gpgrt_log_set_sink");
        try {
            mh$.invokeExact(name.address(), stream.address(), fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_log_set_socket_dir_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$1404.gpgrt_log_set_socket_dir_cb$MH,"gpgrt_log_set_socket_dir_cb");
    }
    public static void gpgrt_log_set_socket_dir_cb ( Addressable fnc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1404.gpgrt_log_set_socket_dir_cb$MH, "gpgrt_log_set_socket_dir_cb");
        try {
            mh$.invokeExact(fnc.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_log_set_pid_suffix_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$1405.gpgrt_log_set_pid_suffix_cb$MH,"gpgrt_log_set_pid_suffix_cb");
    }
    public static void gpgrt_log_set_pid_suffix_cb ( Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1405.gpgrt_log_set_pid_suffix_cb$MH, "gpgrt_log_set_pid_suffix_cb");
        try {
            mh$.invokeExact(cb.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_log_set_prefix$MH() {
        return RuntimeHelper.requireNonNull(constants$1405.gpgrt_log_set_prefix$MH,"gpgrt_log_set_prefix");
    }
    public static void gpgrt_log_set_prefix ( Addressable text,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1405.gpgrt_log_set_prefix$MH, "gpgrt_log_set_prefix");
        try {
            mh$.invokeExact(text.address(), flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_get_errorcount$MH() {
        return RuntimeHelper.requireNonNull(constants$1405.gpgrt_get_errorcount$MH,"gpgrt_get_errorcount");
    }
    public static int gpgrt_get_errorcount ( int clear) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1405.gpgrt_get_errorcount$MH, "gpgrt_get_errorcount");
        try {
            return (int)mh$.invokeExact(clear);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_inc_errorcount$MH() {
        return RuntimeHelper.requireNonNull(constants$1405.gpgrt_inc_errorcount$MH,"gpgrt_inc_errorcount");
    }
    public static void gpgrt_inc_errorcount () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1405.gpgrt_inc_errorcount$MH, "gpgrt_inc_errorcount");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_log_get_prefix$MH() {
        return RuntimeHelper.requireNonNull(constants$1406.gpgrt_log_get_prefix$MH,"gpgrt_log_get_prefix");
    }
    public static MemoryAddress gpgrt_log_get_prefix ( Addressable flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1406.gpgrt_log_get_prefix$MH, "gpgrt_log_get_prefix");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(flags.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_log_test_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$1406.gpgrt_log_test_fd$MH,"gpgrt_log_test_fd");
    }
    public static int gpgrt_log_test_fd ( int fd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1406.gpgrt_log_test_fd$MH, "gpgrt_log_test_fd");
        try {
            return (int)mh$.invokeExact(fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_log_get_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$1406.gpgrt_log_get_fd$MH,"gpgrt_log_get_fd");
    }
    public static int gpgrt_log_get_fd () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1406.gpgrt_log_get_fd$MH, "gpgrt_log_get_fd");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_log_get_stream$MH() {
        return RuntimeHelper.requireNonNull(constants$1406.gpgrt_log_get_stream$MH,"gpgrt_log_get_stream");
    }
    public static MemoryAddress gpgrt_log_get_stream () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1406.gpgrt_log_get_stream$MH, "gpgrt_log_get_stream");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_log$MH() {
        return RuntimeHelper.requireNonNull(constants$1406.gpgrt_log$MH,"gpgrt_log");
    }
    public static void gpgrt_log ( int level,  Addressable fmt, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1406.gpgrt_log$MH, "gpgrt_log");
        try {
            mh$.invokeExact(level, fmt.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_logv$MH() {
        return RuntimeHelper.requireNonNull(constants$1406.gpgrt_logv$MH,"gpgrt_logv");
    }
    public static void gpgrt_logv ( int level,  Addressable fmt,  Addressable arg_ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1406.gpgrt_logv$MH, "gpgrt_logv");
        try {
            mh$.invokeExact(level, fmt.address(), arg_ptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_logv_prefix$MH() {
        return RuntimeHelper.requireNonNull(constants$1407.gpgrt_logv_prefix$MH,"gpgrt_logv_prefix");
    }
    public static void gpgrt_logv_prefix ( int level,  Addressable prefix,  Addressable fmt,  Addressable arg_ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1407.gpgrt_logv_prefix$MH, "gpgrt_logv_prefix");
        try {
            mh$.invokeExact(level, prefix.address(), fmt.address(), arg_ptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_log_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1407.gpgrt_log_string$MH,"gpgrt_log_string");
    }
    public static void gpgrt_log_string ( int level,  Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1407.gpgrt_log_string$MH, "gpgrt_log_string");
        try {
            mh$.invokeExact(level, string.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_log_bug$MH() {
        return RuntimeHelper.requireNonNull(constants$1407.gpgrt_log_bug$MH,"gpgrt_log_bug");
    }
    public static void gpgrt_log_bug ( Addressable fmt, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1407.gpgrt_log_bug$MH, "gpgrt_log_bug");
        try {
            mh$.invokeExact(fmt.address(), x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_log_fatal$MH() {
        return RuntimeHelper.requireNonNull(constants$1407.gpgrt_log_fatal$MH,"gpgrt_log_fatal");
    }
    public static void gpgrt_log_fatal ( Addressable fmt, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1407.gpgrt_log_fatal$MH, "gpgrt_log_fatal");
        try {
            mh$.invokeExact(fmt.address(), x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_log_error$MH() {
        return RuntimeHelper.requireNonNull(constants$1407.gpgrt_log_error$MH,"gpgrt_log_error");
    }
    public static void gpgrt_log_error ( Addressable fmt, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1407.gpgrt_log_error$MH, "gpgrt_log_error");
        try {
            mh$.invokeExact(fmt.address(), x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_log_info$MH() {
        return RuntimeHelper.requireNonNull(constants$1407.gpgrt_log_info$MH,"gpgrt_log_info");
    }
    public static void gpgrt_log_info ( Addressable fmt, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1407.gpgrt_log_info$MH, "gpgrt_log_info");
        try {
            mh$.invokeExact(fmt.address(), x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_log_debug$MH() {
        return RuntimeHelper.requireNonNull(constants$1408.gpgrt_log_debug$MH,"gpgrt_log_debug");
    }
    public static void gpgrt_log_debug ( Addressable fmt, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1408.gpgrt_log_debug$MH, "gpgrt_log_debug");
        try {
            mh$.invokeExact(fmt.address(), x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_log_debug_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1408.gpgrt_log_debug_string$MH,"gpgrt_log_debug_string");
    }
    public static void gpgrt_log_debug_string ( Addressable string,  Addressable fmt, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1408.gpgrt_log_debug_string$MH, "gpgrt_log_debug_string");
        try {
            mh$.invokeExact(string.address(), fmt.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_log_printf$MH() {
        return RuntimeHelper.requireNonNull(constants$1408.gpgrt_log_printf$MH,"gpgrt_log_printf");
    }
    public static void gpgrt_log_printf ( Addressable fmt, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1408.gpgrt_log_printf$MH, "gpgrt_log_printf");
        try {
            mh$.invokeExact(fmt.address(), x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_log_printhex$MH() {
        return RuntimeHelper.requireNonNull(constants$1408.gpgrt_log_printhex$MH,"gpgrt_log_printhex");
    }
    public static void gpgrt_log_printhex ( Addressable buffer,  long length,  Addressable fmt, Object... x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1408.gpgrt_log_printhex$MH, "gpgrt_log_printhex");
        try {
            mh$.invokeExact(buffer.address(), length, fmt.address(), x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_log_clock$MH() {
        return RuntimeHelper.requireNonNull(constants$1408.gpgrt_log_clock$MH,"gpgrt_log_clock");
    }
    public static void gpgrt_log_clock ( Addressable fmt, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1408.gpgrt_log_clock$MH, "gpgrt_log_clock");
        try {
            mh$.invokeExact(fmt.address(), x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_log_flush$MH() {
        return RuntimeHelper.requireNonNull(constants$1408.gpgrt_log_flush$MH,"gpgrt_log_flush");
    }
    public static void gpgrt_log_flush () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1408.gpgrt_log_flush$MH, "gpgrt_log_flush");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gpgrt_log_assert$MH() {
        return RuntimeHelper.requireNonNull(constants$1409._gpgrt_log_assert$MH,"_gpgrt_log_assert");
    }
    public static void _gpgrt_log_assert ( Addressable expr,  Addressable file,  int line,  Addressable func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1409._gpgrt_log_assert$MH, "_gpgrt_log_assert");
        try {
            mh$.invokeExact(expr.address(), file.address(), line, func.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_argparse$MH() {
        return RuntimeHelper.requireNonNull(constants$1409.gpgrt_argparse$MH,"gpgrt_argparse");
    }
    public static int gpgrt_argparse ( Addressable fp,  Addressable arg,  Addressable opts) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1409.gpgrt_argparse$MH, "gpgrt_argparse");
        try {
            return (int)mh$.invokeExact(fp.address(), arg.address(), opts.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_argparser$MH() {
        return RuntimeHelper.requireNonNull(constants$1409.gpgrt_argparser$MH,"gpgrt_argparser");
    }
    public static int gpgrt_argparser ( Addressable arg,  Addressable opts,  Addressable confname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1409.gpgrt_argparser$MH, "gpgrt_argparser");
        try {
            return (int)mh$.invokeExact(arg.address(), opts.address(), confname.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_usage$MH() {
        return RuntimeHelper.requireNonNull(constants$1409.gpgrt_usage$MH,"gpgrt_usage");
    }
    public static void gpgrt_usage ( int level) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1409.gpgrt_usage$MH, "gpgrt_usage");
        try {
            mh$.invokeExact(level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_strusage$MH() {
        return RuntimeHelper.requireNonNull(constants$1409.gpgrt_strusage$MH,"gpgrt_strusage");
    }
    public static MemoryAddress gpgrt_strusage ( int level) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1409.gpgrt_strusage$MH, "gpgrt_strusage");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_set_strusage$MH() {
        return RuntimeHelper.requireNonNull(constants$1410.gpgrt_set_strusage$MH,"gpgrt_set_strusage");
    }
    public static void gpgrt_set_strusage ( Addressable f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1410.gpgrt_set_strusage$MH, "gpgrt_set_strusage");
        try {
            mh$.invokeExact(f.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_set_usage_outfnc$MH() {
        return RuntimeHelper.requireNonNull(constants$1410.gpgrt_set_usage_outfnc$MH,"gpgrt_set_usage_outfnc");
    }
    public static void gpgrt_set_usage_outfnc ( Addressable f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1410.gpgrt_set_usage_outfnc$MH, "gpgrt_set_usage_outfnc");
        try {
            mh$.invokeExact(f.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_set_fixed_string_mapper$MH() {
        return RuntimeHelper.requireNonNull(constants$1411.gpgrt_set_fixed_string_mapper$MH,"gpgrt_set_fixed_string_mapper");
    }
    public static void gpgrt_set_fixed_string_mapper ( Addressable f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1411.gpgrt_set_fixed_string_mapper$MH, "gpgrt_set_fixed_string_mapper");
        try {
            mh$.invokeExact(f.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_set_confdir$MH() {
        return RuntimeHelper.requireNonNull(constants$1411.gpgrt_set_confdir$MH,"gpgrt_set_confdir");
    }
    public static void gpgrt_set_confdir ( int what,  Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1411.gpgrt_set_confdir$MH, "gpgrt_set_confdir");
        try {
            mh$.invokeExact(what, name.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_cmp_version$MH() {
        return RuntimeHelper.requireNonNull(constants$1411.gpgrt_cmp_version$MH,"gpgrt_cmp_version");
    }
    public static int gpgrt_cmp_version ( Addressable a,  Addressable b,  int level) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1411.gpgrt_cmp_version$MH, "gpgrt_cmp_version");
        try {
            return (int)mh$.invokeExact(a.address(), b.address(), level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_fnameconcat$MH() {
        return RuntimeHelper.requireNonNull(constants$1411.gpgrt_fnameconcat$MH,"gpgrt_fnameconcat");
    }
    public static MemoryAddress gpgrt_fnameconcat ( Addressable first, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1411.gpgrt_fnameconcat$MH, "gpgrt_fnameconcat");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(first.address(), x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gpgrt_absfnameconcat$MH() {
        return RuntimeHelper.requireNonNull(constants$1411.gpgrt_absfnameconcat$MH,"gpgrt_absfnameconcat");
    }
    public static MemoryAddress gpgrt_absfnameconcat ( Addressable first, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1411.gpgrt_absfnameconcat$MH, "gpgrt_absfnameconcat");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(first.address(), x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle assuan_fd_from_posix_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$1412.assuan_fd_from_posix_fd$MH,"assuan_fd_from_posix_fd");
    }
    public static MemoryAddress assuan_fd_from_posix_fd ( int fd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1412.assuan_fd_from_posix_fd$MH, "assuan_fd_from_posix_fd");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle assuan_fdopen$MH() {
        return RuntimeHelper.requireNonNull(constants$1412.assuan_fdopen$MH,"assuan_fdopen");
    }
    public static MemoryAddress assuan_fdopen ( int fd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1412.assuan_fdopen$MH, "assuan_fdopen");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle assuan_check_version$MH() {
        return RuntimeHelper.requireNonNull(constants$1412.assuan_check_version$MH,"assuan_check_version");
    }
    public static MemoryAddress assuan_check_version ( Addressable req_version) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1412.assuan_check_version$MH, "assuan_check_version");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(req_version.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


