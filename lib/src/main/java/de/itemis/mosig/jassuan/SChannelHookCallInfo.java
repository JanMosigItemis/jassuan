// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class SChannelHookCallInfo {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
        ).withName("iid"),
        C_LONG.withName("cbSize"),
        MemoryLayout.structLayout(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
        ).withName("uCausality"),
        C_LONG.withName("dwServerPid"),
        C_LONG.withName("iMethod"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("pObject")
    ).withName("SChannelHookCallInfo");
    public static MemoryLayout $LAYOUT() {
        return SChannelHookCallInfo.$struct$LAYOUT;
    }
    public static MemorySegment iid$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return SChannelHookCallInfo.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)SChannelHookCallInfo.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        SChannelHookCallInfo.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)SChannelHookCallInfo.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        SChannelHookCallInfo.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment uCausality$slice(MemorySegment seg) {
        return seg.asSlice(20, 16);
    }
    static final VarHandle dwServerPid$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwServerPid"));
    public static VarHandle dwServerPid$VH() {
        return SChannelHookCallInfo.dwServerPid$VH;
    }
    public static int dwServerPid$get(MemorySegment seg) {
        return (int)SChannelHookCallInfo.dwServerPid$VH.get(seg);
    }
    public static void dwServerPid$set( MemorySegment seg, int x) {
        SChannelHookCallInfo.dwServerPid$VH.set(seg, x);
    }
    public static int dwServerPid$get(MemorySegment seg, long index) {
        return (int)SChannelHookCallInfo.dwServerPid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwServerPid$set(MemorySegment seg, long index, int x) {
        SChannelHookCallInfo.dwServerPid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iMethod$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("iMethod"));
    public static VarHandle iMethod$VH() {
        return SChannelHookCallInfo.iMethod$VH;
    }
    public static int iMethod$get(MemorySegment seg) {
        return (int)SChannelHookCallInfo.iMethod$VH.get(seg);
    }
    public static void iMethod$set( MemorySegment seg, int x) {
        SChannelHookCallInfo.iMethod$VH.set(seg, x);
    }
    public static int iMethod$get(MemorySegment seg, long index) {
        return (int)SChannelHookCallInfo.iMethod$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iMethod$set(MemorySegment seg, long index, int x) {
        SChannelHookCallInfo.iMethod$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pObject$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pObject")));
    public static VarHandle pObject$VH() {
        return SChannelHookCallInfo.pObject$VH;
    }
    public static MemoryAddress pObject$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)SChannelHookCallInfo.pObject$VH.get(seg);
    }
    public static void pObject$set( MemorySegment seg, MemoryAddress x) {
        SChannelHookCallInfo.pObject$VH.set(seg, x);
    }
    public static MemoryAddress pObject$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)SChannelHookCallInfo.pObject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pObject$set(MemorySegment seg, long index, MemoryAddress x) {
        SChannelHookCallInfo.pObject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


