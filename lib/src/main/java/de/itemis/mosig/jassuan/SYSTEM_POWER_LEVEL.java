// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class SYSTEM_POWER_LEVEL {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_CHAR.withName("Enable"),
        MemoryLayout.sequenceLayout(3, C_CHAR).withName("Spare"),
        C_LONG.withName("BatteryLevel"),
        MemoryLayout.structLayout(
            C_INT.withName("Action"),
            C_LONG.withName("Flags"),
            C_LONG.withName("EventCode")
        ).withName("PowerPolicy"),
        C_INT.withName("MinSystemState")
    );
    public static MemoryLayout $LAYOUT() {
        return SYSTEM_POWER_LEVEL.$struct$LAYOUT;
    }
    static final VarHandle Enable$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Enable"));
    public static VarHandle Enable$VH() {
        return SYSTEM_POWER_LEVEL.Enable$VH;
    }
    public static byte Enable$get(MemorySegment seg) {
        return (byte)SYSTEM_POWER_LEVEL.Enable$VH.get(seg);
    }
    public static void Enable$set( MemorySegment seg, byte x) {
        SYSTEM_POWER_LEVEL.Enable$VH.set(seg, x);
    }
    public static byte Enable$get(MemorySegment seg, long index) {
        return (byte)SYSTEM_POWER_LEVEL.Enable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Enable$set(MemorySegment seg, long index, byte x) {
        SYSTEM_POWER_LEVEL.Enable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Spare$slice(MemorySegment seg) {
        return seg.asSlice(1, 3);
    }
    static final VarHandle BatteryLevel$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("BatteryLevel"));
    public static VarHandle BatteryLevel$VH() {
        return SYSTEM_POWER_LEVEL.BatteryLevel$VH;
    }
    public static int BatteryLevel$get(MemorySegment seg) {
        return (int)SYSTEM_POWER_LEVEL.BatteryLevel$VH.get(seg);
    }
    public static void BatteryLevel$set( MemorySegment seg, int x) {
        SYSTEM_POWER_LEVEL.BatteryLevel$VH.set(seg, x);
    }
    public static int BatteryLevel$get(MemorySegment seg, long index) {
        return (int)SYSTEM_POWER_LEVEL.BatteryLevel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BatteryLevel$set(MemorySegment seg, long index, int x) {
        SYSTEM_POWER_LEVEL.BatteryLevel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment PowerPolicy$slice(MemorySegment seg) {
        return seg.asSlice(8, 12);
    }
    static final VarHandle MinSystemState$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinSystemState"));
    public static VarHandle MinSystemState$VH() {
        return SYSTEM_POWER_LEVEL.MinSystemState$VH;
    }
    public static int MinSystemState$get(MemorySegment seg) {
        return (int)SYSTEM_POWER_LEVEL.MinSystemState$VH.get(seg);
    }
    public static void MinSystemState$set( MemorySegment seg, int x) {
        SYSTEM_POWER_LEVEL.MinSystemState$VH.set(seg, x);
    }
    public static int MinSystemState$get(MemorySegment seg, long index) {
        return (int)SYSTEM_POWER_LEVEL.MinSystemState$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MinSystemState$set(MemorySegment seg, long index, int x) {
        SYSTEM_POWER_LEVEL.MinSystemState$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


