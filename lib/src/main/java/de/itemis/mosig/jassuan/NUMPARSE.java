// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class NUMPARSE {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("cDig"),
        C_LONG.withName("dwInFlags"),
        C_LONG.withName("dwOutFlags"),
        C_INT.withName("cchUsed"),
        C_INT.withName("nBaseShift"),
        C_INT.withName("nPwr10")
    );
    public static MemoryLayout $LAYOUT() {
        return NUMPARSE.$struct$LAYOUT;
    }
    static final VarHandle cDig$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cDig"));
    public static VarHandle cDig$VH() {
        return NUMPARSE.cDig$VH;
    }
    public static int cDig$get(MemorySegment seg) {
        return (int)NUMPARSE.cDig$VH.get(seg);
    }
    public static void cDig$set( MemorySegment seg, int x) {
        NUMPARSE.cDig$VH.set(seg, x);
    }
    public static int cDig$get(MemorySegment seg, long index) {
        return (int)NUMPARSE.cDig$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cDig$set(MemorySegment seg, long index, int x) {
        NUMPARSE.cDig$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwInFlags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwInFlags"));
    public static VarHandle dwInFlags$VH() {
        return NUMPARSE.dwInFlags$VH;
    }
    public static int dwInFlags$get(MemorySegment seg) {
        return (int)NUMPARSE.dwInFlags$VH.get(seg);
    }
    public static void dwInFlags$set( MemorySegment seg, int x) {
        NUMPARSE.dwInFlags$VH.set(seg, x);
    }
    public static int dwInFlags$get(MemorySegment seg, long index) {
        return (int)NUMPARSE.dwInFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwInFlags$set(MemorySegment seg, long index, int x) {
        NUMPARSE.dwInFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwOutFlags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwOutFlags"));
    public static VarHandle dwOutFlags$VH() {
        return NUMPARSE.dwOutFlags$VH;
    }
    public static int dwOutFlags$get(MemorySegment seg) {
        return (int)NUMPARSE.dwOutFlags$VH.get(seg);
    }
    public static void dwOutFlags$set( MemorySegment seg, int x) {
        NUMPARSE.dwOutFlags$VH.set(seg, x);
    }
    public static int dwOutFlags$get(MemorySegment seg, long index) {
        return (int)NUMPARSE.dwOutFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwOutFlags$set(MemorySegment seg, long index, int x) {
        NUMPARSE.dwOutFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cchUsed$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cchUsed"));
    public static VarHandle cchUsed$VH() {
        return NUMPARSE.cchUsed$VH;
    }
    public static int cchUsed$get(MemorySegment seg) {
        return (int)NUMPARSE.cchUsed$VH.get(seg);
    }
    public static void cchUsed$set( MemorySegment seg, int x) {
        NUMPARSE.cchUsed$VH.set(seg, x);
    }
    public static int cchUsed$get(MemorySegment seg, long index) {
        return (int)NUMPARSE.cchUsed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cchUsed$set(MemorySegment seg, long index, int x) {
        NUMPARSE.cchUsed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nBaseShift$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("nBaseShift"));
    public static VarHandle nBaseShift$VH() {
        return NUMPARSE.nBaseShift$VH;
    }
    public static int nBaseShift$get(MemorySegment seg) {
        return (int)NUMPARSE.nBaseShift$VH.get(seg);
    }
    public static void nBaseShift$set( MemorySegment seg, int x) {
        NUMPARSE.nBaseShift$VH.set(seg, x);
    }
    public static int nBaseShift$get(MemorySegment seg, long index) {
        return (int)NUMPARSE.nBaseShift$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nBaseShift$set(MemorySegment seg, long index, int x) {
        NUMPARSE.nBaseShift$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nPwr10$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("nPwr10"));
    public static VarHandle nPwr10$VH() {
        return NUMPARSE.nPwr10$VH;
    }
    public static int nPwr10$get(MemorySegment seg) {
        return (int)NUMPARSE.nPwr10$VH.get(seg);
    }
    public static void nPwr10$set( MemorySegment seg, int x) {
        NUMPARSE.nPwr10$VH.set(seg, x);
    }
    public static int nPwr10$get(MemorySegment seg, long index) {
        return (int)NUMPARSE.nPwr10$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nPwr10$set(MemorySegment seg, long index, int x) {
        NUMPARSE.nPwr10$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


