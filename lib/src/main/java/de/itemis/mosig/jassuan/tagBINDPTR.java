// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class tagBINDPTR {

    static final MemoryLayout $union$LAYOUT = MemoryLayout.unionLayout(
        C_POINTER.withName("lpfuncdesc"),
        C_POINTER.withName("lpvardesc"),
        C_POINTER.withName("lptcomp")
    ).withName("tagBINDPTR");
    public static MemoryLayout $LAYOUT() {
        return tagBINDPTR.$union$LAYOUT;
    }
    static final VarHandle lpfuncdesc$VH = MemoryHandles.asAddressVarHandle($union$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpfuncdesc")));
    public static VarHandle lpfuncdesc$VH() {
        return tagBINDPTR.lpfuncdesc$VH;
    }
    public static MemoryAddress lpfuncdesc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagBINDPTR.lpfuncdesc$VH.get(seg);
    }
    public static void lpfuncdesc$set( MemorySegment seg, MemoryAddress x) {
        tagBINDPTR.lpfuncdesc$VH.set(seg, x);
    }
    public static MemoryAddress lpfuncdesc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagBINDPTR.lpfuncdesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpfuncdesc$set(MemorySegment seg, long index, MemoryAddress x) {
        tagBINDPTR.lpfuncdesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpvardesc$VH = MemoryHandles.asAddressVarHandle($union$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpvardesc")));
    public static VarHandle lpvardesc$VH() {
        return tagBINDPTR.lpvardesc$VH;
    }
    public static MemoryAddress lpvardesc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagBINDPTR.lpvardesc$VH.get(seg);
    }
    public static void lpvardesc$set( MemorySegment seg, MemoryAddress x) {
        tagBINDPTR.lpvardesc$VH.set(seg, x);
    }
    public static MemoryAddress lpvardesc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagBINDPTR.lpvardesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpvardesc$set(MemorySegment seg, long index, MemoryAddress x) {
        tagBINDPTR.lpvardesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lptcomp$VH = MemoryHandles.asAddressVarHandle($union$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lptcomp")));
    public static VarHandle lptcomp$VH() {
        return tagBINDPTR.lptcomp$VH;
    }
    public static MemoryAddress lptcomp$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagBINDPTR.lptcomp$VH.get(seg);
    }
    public static void lptcomp$set( MemorySegment seg, MemoryAddress x) {
        tagBINDPTR.lptcomp$VH.set(seg, x);
    }
    public static MemoryAddress lptcomp$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagBINDPTR.lptcomp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lptcomp$set(MemorySegment seg, long index, MemoryAddress x) {
        tagBINDPTR.lptcomp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


