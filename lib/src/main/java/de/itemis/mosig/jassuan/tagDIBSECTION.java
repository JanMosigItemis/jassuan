// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class tagDIBSECTION {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            C_LONG.withName("bmType"),
            C_LONG.withName("bmWidth"),
            C_LONG.withName("bmHeight"),
            C_LONG.withName("bmWidthBytes"),
            C_SHORT.withName("bmPlanes"),
            C_SHORT.withName("bmBitsPixel"),
            MemoryLayout.paddingLayout(32),
            C_POINTER.withName("bmBits")
        ).withName("dsBm"),
        MemoryLayout.structLayout(
            C_LONG.withName("biSize"),
            C_LONG.withName("biWidth"),
            C_LONG.withName("biHeight"),
            C_SHORT.withName("biPlanes"),
            C_SHORT.withName("biBitCount"),
            C_LONG.withName("biCompression"),
            C_LONG.withName("biSizeImage"),
            C_LONG.withName("biXPelsPerMeter"),
            C_LONG.withName("biYPelsPerMeter"),
            C_LONG.withName("biClrUsed"),
            C_LONG.withName("biClrImportant")
        ).withName("dsBmih"),
        MemoryLayout.sequenceLayout(3, C_LONG).withName("dsBitfields"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("dshSection"),
        C_LONG.withName("dsOffset"),
        MemoryLayout.paddingLayout(32)
    ).withName("tagDIBSECTION");
    public static MemoryLayout $LAYOUT() {
        return tagDIBSECTION.$struct$LAYOUT;
    }
    public static MemorySegment dsBm$slice(MemorySegment seg) {
        return seg.asSlice(0, 32);
    }
    public static MemorySegment dsBmih$slice(MemorySegment seg) {
        return seg.asSlice(32, 40);
    }
    public static MemorySegment dsBitfields$slice(MemorySegment seg) {
        return seg.asSlice(72, 12);
    }
    static final VarHandle dshSection$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("dshSection")));
    public static VarHandle dshSection$VH() {
        return tagDIBSECTION.dshSection$VH;
    }
    public static MemoryAddress dshSection$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagDIBSECTION.dshSection$VH.get(seg);
    }
    public static void dshSection$set( MemorySegment seg, MemoryAddress x) {
        tagDIBSECTION.dshSection$VH.set(seg, x);
    }
    public static MemoryAddress dshSection$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagDIBSECTION.dshSection$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dshSection$set(MemorySegment seg, long index, MemoryAddress x) {
        tagDIBSECTION.dshSection$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dsOffset$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dsOffset"));
    public static VarHandle dsOffset$VH() {
        return tagDIBSECTION.dsOffset$VH;
    }
    public static int dsOffset$get(MemorySegment seg) {
        return (int)tagDIBSECTION.dsOffset$VH.get(seg);
    }
    public static void dsOffset$set( MemorySegment seg, int x) {
        tagDIBSECTION.dsOffset$VH.set(seg, x);
    }
    public static int dsOffset$get(MemorySegment seg, long index) {
        return (int)tagDIBSECTION.dsOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dsOffset$set(MemorySegment seg, long index, int x) {
        tagDIBSECTION.dsOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


