// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _SOCKET_ADDRESS_LIST {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("iAddressCount"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            C_POINTER.withName("lpSockaddr"),
            C_INT.withName("iSockaddrLength"),
            MemoryLayout.paddingLayout(32)
        ).withName("_SOCKET_ADDRESS")).withName("Address")
    ).withName("_SOCKET_ADDRESS_LIST");
    public static MemoryLayout $LAYOUT() {
        return _SOCKET_ADDRESS_LIST.$struct$LAYOUT;
    }
    static final VarHandle iAddressCount$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("iAddressCount"));
    public static VarHandle iAddressCount$VH() {
        return _SOCKET_ADDRESS_LIST.iAddressCount$VH;
    }
    public static int iAddressCount$get(MemorySegment seg) {
        return (int)_SOCKET_ADDRESS_LIST.iAddressCount$VH.get(seg);
    }
    public static void iAddressCount$set( MemorySegment seg, int x) {
        _SOCKET_ADDRESS_LIST.iAddressCount$VH.set(seg, x);
    }
    public static int iAddressCount$get(MemorySegment seg, long index) {
        return (int)_SOCKET_ADDRESS_LIST.iAddressCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iAddressCount$set(MemorySegment seg, long index, int x) {
        _SOCKET_ADDRESS_LIST.iAddressCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Address$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


