// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class tagRAWINPUT {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            C_LONG.withName("dwType"),
            C_LONG.withName("dwSize"),
            C_POINTER.withName("hDevice"),
            C_LONG_LONG.withName("wParam")
        ).withName("header"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_SHORT.withName("usFlags"),
                MemoryLayout.paddingLayout(16),
                MemoryLayout.unionLayout(
                    C_LONG.withName("ulButtons"),
                    MemoryLayout.structLayout(
                        C_SHORT.withName("usButtonFlags"),
                        C_SHORT.withName("usButtonData")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                C_LONG.withName("ulRawButtons"),
                C_LONG.withName("lLastX"),
                C_LONG.withName("lLastY"),
                C_LONG.withName("ulExtraInformation")
            ).withName("mouse"),
            MemoryLayout.structLayout(
                C_SHORT.withName("MakeCode"),
                C_SHORT.withName("Flags"),
                C_SHORT.withName("Reserved"),
                C_SHORT.withName("VKey"),
                C_INT.withName("Message"),
                C_LONG.withName("ExtraInformation")
            ).withName("keyboard"),
            MemoryLayout.structLayout(
                C_LONG.withName("dwSizeHid"),
                C_LONG.withName("dwCount"),
                MemoryLayout.sequenceLayout(1, C_CHAR).withName("bRawData"),
                MemoryLayout.paddingLayout(24)
            ).withName("hid")
        ).withName("data")
    ).withName("tagRAWINPUT");
    public static MemoryLayout $LAYOUT() {
        return tagRAWINPUT.$struct$LAYOUT;
    }
    public static MemorySegment header$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    public static class data {

        static final MemoryLayout data$union$LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_SHORT.withName("usFlags"),
                MemoryLayout.paddingLayout(16),
                MemoryLayout.unionLayout(
                    C_LONG.withName("ulButtons"),
                    MemoryLayout.structLayout(
                        C_SHORT.withName("usButtonFlags"),
                        C_SHORT.withName("usButtonData")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                C_LONG.withName("ulRawButtons"),
                C_LONG.withName("lLastX"),
                C_LONG.withName("lLastY"),
                C_LONG.withName("ulExtraInformation")
            ).withName("mouse"),
            MemoryLayout.structLayout(
                C_SHORT.withName("MakeCode"),
                C_SHORT.withName("Flags"),
                C_SHORT.withName("Reserved"),
                C_SHORT.withName("VKey"),
                C_INT.withName("Message"),
                C_LONG.withName("ExtraInformation")
            ).withName("keyboard"),
            MemoryLayout.structLayout(
                C_LONG.withName("dwSizeHid"),
                C_LONG.withName("dwCount"),
                MemoryLayout.sequenceLayout(1, C_CHAR).withName("bRawData"),
                MemoryLayout.paddingLayout(24)
            ).withName("hid")
        );
        public static MemoryLayout $LAYOUT() {
            return data.data$union$LAYOUT;
        }
        public static MemorySegment mouse$slice(MemorySegment seg) {
            return seg.asSlice(0, 24);
        }
        public static MemorySegment keyboard$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment hid$slice(MemorySegment seg) {
            return seg.asSlice(0, 12);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.ofScope(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment data$slice(MemorySegment seg) {
        return seg.asSlice(24, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


