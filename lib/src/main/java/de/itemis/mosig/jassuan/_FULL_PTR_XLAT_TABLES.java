// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _FULL_PTR_XLAT_TABLES {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            C_POINTER.withName("XlatTable"),
            C_POINTER.withName("StateTable"),
            C_LONG.withName("NumberOfEntries"),
            MemoryLayout.paddingLayout(32)
        ).withName("RefIdToPointer"),
        MemoryLayout.structLayout(
            C_POINTER.withName("XlatTable"),
            C_LONG.withName("NumberOfBuckets"),
            C_LONG.withName("HashMask")
        ).withName("PointerToRefId"),
        C_LONG.withName("NextRefId"),
        C_INT.withName("XlatSide")
    ).withName("_FULL_PTR_XLAT_TABLES");
    public static MemoryLayout $LAYOUT() {
        return _FULL_PTR_XLAT_TABLES.$struct$LAYOUT;
    }
    public static class RefIdToPointer {

        static final MemoryLayout RefIdToPointer$struct$LAYOUT = MemoryLayout.structLayout(
            C_POINTER.withName("XlatTable"),
            C_POINTER.withName("StateTable"),
            C_LONG.withName("NumberOfEntries"),
            MemoryLayout.paddingLayout(32)
        );
        public static MemoryLayout $LAYOUT() {
            return RefIdToPointer.RefIdToPointer$struct$LAYOUT;
        }
        static final VarHandle XlatTable$VH = MemoryHandles.asAddressVarHandle(RefIdToPointer$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("XlatTable")));
        public static VarHandle XlatTable$VH() {
            return RefIdToPointer.XlatTable$VH;
        }
        public static MemoryAddress XlatTable$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)RefIdToPointer.XlatTable$VH.get(seg);
        }
        public static void XlatTable$set( MemorySegment seg, MemoryAddress x) {
            RefIdToPointer.XlatTable$VH.set(seg, x);
        }
        public static MemoryAddress XlatTable$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)RefIdToPointer.XlatTable$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void XlatTable$set(MemorySegment seg, long index, MemoryAddress x) {
            RefIdToPointer.XlatTable$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle StateTable$VH = MemoryHandles.asAddressVarHandle(RefIdToPointer$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("StateTable")));
        public static VarHandle StateTable$VH() {
            return RefIdToPointer.StateTable$VH;
        }
        public static MemoryAddress StateTable$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)RefIdToPointer.StateTable$VH.get(seg);
        }
        public static void StateTable$set( MemorySegment seg, MemoryAddress x) {
            RefIdToPointer.StateTable$VH.set(seg, x);
        }
        public static MemoryAddress StateTable$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)RefIdToPointer.StateTable$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void StateTable$set(MemorySegment seg, long index, MemoryAddress x) {
            RefIdToPointer.StateTable$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle NumberOfEntries$VH = RefIdToPointer$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfEntries"));
        public static VarHandle NumberOfEntries$VH() {
            return RefIdToPointer.NumberOfEntries$VH;
        }
        public static int NumberOfEntries$get(MemorySegment seg) {
            return (int)RefIdToPointer.NumberOfEntries$VH.get(seg);
        }
        public static void NumberOfEntries$set( MemorySegment seg, int x) {
            RefIdToPointer.NumberOfEntries$VH.set(seg, x);
        }
        public static int NumberOfEntries$get(MemorySegment seg, long index) {
            return (int)RefIdToPointer.NumberOfEntries$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfEntries$set(MemorySegment seg, long index, int x) {
            RefIdToPointer.NumberOfEntries$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.ofScope(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment RefIdToPointer$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    public static class PointerToRefId {

        static final MemoryLayout PointerToRefId$struct$LAYOUT = MemoryLayout.structLayout(
            C_POINTER.withName("XlatTable"),
            C_LONG.withName("NumberOfBuckets"),
            C_LONG.withName("HashMask")
        );
        public static MemoryLayout $LAYOUT() {
            return PointerToRefId.PointerToRefId$struct$LAYOUT;
        }
        static final VarHandle XlatTable$VH = MemoryHandles.asAddressVarHandle(PointerToRefId$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("XlatTable")));
        public static VarHandle XlatTable$VH() {
            return PointerToRefId.XlatTable$VH;
        }
        public static MemoryAddress XlatTable$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)PointerToRefId.XlatTable$VH.get(seg);
        }
        public static void XlatTable$set( MemorySegment seg, MemoryAddress x) {
            PointerToRefId.XlatTable$VH.set(seg, x);
        }
        public static MemoryAddress XlatTable$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)PointerToRefId.XlatTable$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void XlatTable$set(MemorySegment seg, long index, MemoryAddress x) {
            PointerToRefId.XlatTable$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle NumberOfBuckets$VH = PointerToRefId$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfBuckets"));
        public static VarHandle NumberOfBuckets$VH() {
            return PointerToRefId.NumberOfBuckets$VH;
        }
        public static int NumberOfBuckets$get(MemorySegment seg) {
            return (int)PointerToRefId.NumberOfBuckets$VH.get(seg);
        }
        public static void NumberOfBuckets$set( MemorySegment seg, int x) {
            PointerToRefId.NumberOfBuckets$VH.set(seg, x);
        }
        public static int NumberOfBuckets$get(MemorySegment seg, long index) {
            return (int)PointerToRefId.NumberOfBuckets$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfBuckets$set(MemorySegment seg, long index, int x) {
            PointerToRefId.NumberOfBuckets$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle HashMask$VH = PointerToRefId$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("HashMask"));
        public static VarHandle HashMask$VH() {
            return PointerToRefId.HashMask$VH;
        }
        public static int HashMask$get(MemorySegment seg) {
            return (int)PointerToRefId.HashMask$VH.get(seg);
        }
        public static void HashMask$set( MemorySegment seg, int x) {
            PointerToRefId.HashMask$VH.set(seg, x);
        }
        public static int HashMask$get(MemorySegment seg, long index) {
            return (int)PointerToRefId.HashMask$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void HashMask$set(MemorySegment seg, long index, int x) {
            PointerToRefId.HashMask$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.ofScope(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment PointerToRefId$slice(MemorySegment seg) {
        return seg.asSlice(24, 16);
    }
    static final VarHandle NextRefId$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("NextRefId"));
    public static VarHandle NextRefId$VH() {
        return _FULL_PTR_XLAT_TABLES.NextRefId$VH;
    }
    public static int NextRefId$get(MemorySegment seg) {
        return (int)_FULL_PTR_XLAT_TABLES.NextRefId$VH.get(seg);
    }
    public static void NextRefId$set( MemorySegment seg, int x) {
        _FULL_PTR_XLAT_TABLES.NextRefId$VH.set(seg, x);
    }
    public static int NextRefId$get(MemorySegment seg, long index) {
        return (int)_FULL_PTR_XLAT_TABLES.NextRefId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NextRefId$set(MemorySegment seg, long index, int x) {
        _FULL_PTR_XLAT_TABLES.NextRefId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle XlatSide$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("XlatSide"));
    public static VarHandle XlatSide$VH() {
        return _FULL_PTR_XLAT_TABLES.XlatSide$VH;
    }
    public static int XlatSide$get(MemorySegment seg) {
        return (int)_FULL_PTR_XLAT_TABLES.XlatSide$VH.get(seg);
    }
    public static void XlatSide$set( MemorySegment seg, int x) {
        _FULL_PTR_XLAT_TABLES.XlatSide$VH.set(seg, x);
    }
    public static int XlatSide$get(MemorySegment seg, long index) {
        return (int)_FULL_PTR_XLAT_TABLES.XlatSide$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void XlatSide$set(MemorySegment seg, long index, int x) {
        _FULL_PTR_XLAT_TABLES.XlatSide$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


