// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _XCPT_ACTION {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("XcptNum"),
        C_INT.withName("SigNum"),
        C_POINTER.withName("XcptAction")
    ).withName("_XCPT_ACTION");
    public static MemoryLayout $LAYOUT() {
        return _XCPT_ACTION.$struct$LAYOUT;
    }
    static final VarHandle XcptNum$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("XcptNum"));
    public static VarHandle XcptNum$VH() {
        return _XCPT_ACTION.XcptNum$VH;
    }
    public static int XcptNum$get(MemorySegment seg) {
        return (int)_XCPT_ACTION.XcptNum$VH.get(seg);
    }
    public static void XcptNum$set( MemorySegment seg, int x) {
        _XCPT_ACTION.XcptNum$VH.set(seg, x);
    }
    public static int XcptNum$get(MemorySegment seg, long index) {
        return (int)_XCPT_ACTION.XcptNum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void XcptNum$set(MemorySegment seg, long index, int x) {
        _XCPT_ACTION.XcptNum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SigNum$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("SigNum"));
    public static VarHandle SigNum$VH() {
        return _XCPT_ACTION.SigNum$VH;
    }
    public static int SigNum$get(MemorySegment seg) {
        return (int)_XCPT_ACTION.SigNum$VH.get(seg);
    }
    public static void SigNum$set( MemorySegment seg, int x) {
        _XCPT_ACTION.SigNum$VH.set(seg, x);
    }
    public static int SigNum$get(MemorySegment seg, long index) {
        return (int)_XCPT_ACTION.SigNum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SigNum$set(MemorySegment seg, long index, int x) {
        _XCPT_ACTION.SigNum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle XcptAction$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("XcptAction")));
    public static VarHandle XcptAction$VH() {
        return _XCPT_ACTION.XcptAction$VH;
    }
    public static MemoryAddress XcptAction$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_XCPT_ACTION.XcptAction$VH.get(seg);
    }
    public static void XcptAction$set( MemorySegment seg, MemoryAddress x) {
        _XCPT_ACTION.XcptAction$VH.set(seg, x);
    }
    public static MemoryAddress XcptAction$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_XCPT_ACTION.XcptAction$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void XcptAction$set(MemorySegment seg, long index, MemoryAddress x) {
        _XCPT_ACTION.XcptAction$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _PHNDLR XcptAction (MemorySegment segment) {
        return _PHNDLR.ofAddress(XcptAction$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


