// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _CRYPT_RSAES_OAEP_PARAMETERS {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            C_POINTER.withName("pszObjId"),
            MemoryLayout.structLayout(
                C_LONG.withName("cbData"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("pbData")
            ).withName("Parameters")
        ).withName("HashAlgorithm"),
        MemoryLayout.structLayout(
            C_POINTER.withName("pszObjId"),
            MemoryLayout.structLayout(
                C_POINTER.withName("pszObjId"),
                MemoryLayout.structLayout(
                    C_LONG.withName("cbData"),
                    MemoryLayout.paddingLayout(32),
                    C_POINTER.withName("pbData")
                ).withName("Parameters")
            ).withName("HashAlgorithm")
        ).withName("MaskGenAlgorithm"),
        MemoryLayout.structLayout(
            C_POINTER.withName("pszObjId"),
            MemoryLayout.structLayout(
                C_LONG.withName("cbData"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("pbData")
            ).withName("EncodingParameters")
        ).withName("PSourceAlgorithm")
    ).withName("_CRYPT_RSAES_OAEP_PARAMETERS");
    public static MemoryLayout $LAYOUT() {
        return _CRYPT_RSAES_OAEP_PARAMETERS.$struct$LAYOUT;
    }
    public static MemorySegment HashAlgorithm$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    public static MemorySegment MaskGenAlgorithm$slice(MemorySegment seg) {
        return seg.asSlice(24, 32);
    }
    public static MemorySegment PSourceAlgorithm$slice(MemorySegment seg) {
        return seg.asSlice(56, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


