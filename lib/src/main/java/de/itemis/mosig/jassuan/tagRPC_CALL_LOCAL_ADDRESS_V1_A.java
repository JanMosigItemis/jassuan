// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class tagRPC_CALL_LOCAL_ADDRESS_V1_A {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("Version"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("Buffer"),
        C_LONG.withName("BufferSize"),
        C_INT.withName("AddressFormat")
    ).withName("tagRPC_CALL_LOCAL_ADDRESS_V1_A");
    public static MemoryLayout $LAYOUT() {
        return tagRPC_CALL_LOCAL_ADDRESS_V1_A.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return tagRPC_CALL_LOCAL_ADDRESS_V1_A.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)tagRPC_CALL_LOCAL_ADDRESS_V1_A.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        tagRPC_CALL_LOCAL_ADDRESS_V1_A.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)tagRPC_CALL_LOCAL_ADDRESS_V1_A.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        tagRPC_CALL_LOCAL_ADDRESS_V1_A.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Buffer$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Buffer")));
    public static VarHandle Buffer$VH() {
        return tagRPC_CALL_LOCAL_ADDRESS_V1_A.Buffer$VH;
    }
    public static MemoryAddress Buffer$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagRPC_CALL_LOCAL_ADDRESS_V1_A.Buffer$VH.get(seg);
    }
    public static void Buffer$set( MemorySegment seg, MemoryAddress x) {
        tagRPC_CALL_LOCAL_ADDRESS_V1_A.Buffer$VH.set(seg, x);
    }
    public static MemoryAddress Buffer$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagRPC_CALL_LOCAL_ADDRESS_V1_A.Buffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Buffer$set(MemorySegment seg, long index, MemoryAddress x) {
        tagRPC_CALL_LOCAL_ADDRESS_V1_A.Buffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BufferSize$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("BufferSize"));
    public static VarHandle BufferSize$VH() {
        return tagRPC_CALL_LOCAL_ADDRESS_V1_A.BufferSize$VH;
    }
    public static int BufferSize$get(MemorySegment seg) {
        return (int)tagRPC_CALL_LOCAL_ADDRESS_V1_A.BufferSize$VH.get(seg);
    }
    public static void BufferSize$set( MemorySegment seg, int x) {
        tagRPC_CALL_LOCAL_ADDRESS_V1_A.BufferSize$VH.set(seg, x);
    }
    public static int BufferSize$get(MemorySegment seg, long index) {
        return (int)tagRPC_CALL_LOCAL_ADDRESS_V1_A.BufferSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BufferSize$set(MemorySegment seg, long index, int x) {
        tagRPC_CALL_LOCAL_ADDRESS_V1_A.BufferSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AddressFormat$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("AddressFormat"));
    public static VarHandle AddressFormat$VH() {
        return tagRPC_CALL_LOCAL_ADDRESS_V1_A.AddressFormat$VH;
    }
    public static int AddressFormat$get(MemorySegment seg) {
        return (int)tagRPC_CALL_LOCAL_ADDRESS_V1_A.AddressFormat$VH.get(seg);
    }
    public static void AddressFormat$set( MemorySegment seg, int x) {
        tagRPC_CALL_LOCAL_ADDRESS_V1_A.AddressFormat$VH.set(seg, x);
    }
    public static int AddressFormat$get(MemorySegment seg, long index) {
        return (int)tagRPC_CALL_LOCAL_ADDRESS_V1_A.AddressFormat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddressFormat$set(MemorySegment seg, long index, int x) {
        tagRPC_CALL_LOCAL_ADDRESS_V1_A.AddressFormat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


