// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _NDR_USER_MARSHAL_INFO {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("InformationLevel"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_POINTER.withName("Buffer"),
                C_LONG.withName("BufferSize"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("pfnAllocate"),
                C_POINTER.withName("pfnFree"),
                C_POINTER.withName("pRpcChannelBuffer"),
                MemoryLayout.sequenceLayout(5, C_LONG_LONG).withName("Reserved")
            ).withName("Level1")
        ).withName("$anon$0")
    ).withName("_NDR_USER_MARSHAL_INFO");
    public static MemoryLayout $LAYOUT() {
        return _NDR_USER_MARSHAL_INFO.$struct$LAYOUT;
    }
    static final VarHandle InformationLevel$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("InformationLevel"));
    public static VarHandle InformationLevel$VH() {
        return _NDR_USER_MARSHAL_INFO.InformationLevel$VH;
    }
    public static int InformationLevel$get(MemorySegment seg) {
        return (int)_NDR_USER_MARSHAL_INFO.InformationLevel$VH.get(seg);
    }
    public static void InformationLevel$set( MemorySegment seg, int x) {
        _NDR_USER_MARSHAL_INFO.InformationLevel$VH.set(seg, x);
    }
    public static int InformationLevel$get(MemorySegment seg, long index) {
        return (int)_NDR_USER_MARSHAL_INFO.InformationLevel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void InformationLevel$set(MemorySegment seg, long index, int x) {
        _NDR_USER_MARSHAL_INFO.InformationLevel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Level1$slice(MemorySegment seg) {
        return seg.asSlice(8, 80);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


