// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public interface PTP_WIN32_IO_CALLBACK {

    void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, long x4, jdk.incubator.foreign.MemoryAddress x5);
    static MemoryAddress allocate(PTP_WIN32_IO_CALLBACK fi) {
        return RuntimeHelper.upcallStub(PTP_WIN32_IO_CALLBACK.class, fi, constants$379.PTP_WIN32_IO_CALLBACK$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJLjdk/incubator/foreign/MemoryAddress;)V");
    }
    static MemoryAddress allocate(PTP_WIN32_IO_CALLBACK fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PTP_WIN32_IO_CALLBACK.class, fi, constants$379.PTP_WIN32_IO_CALLBACK$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJLjdk/incubator/foreign/MemoryAddress;)V", scope);
    }
    static PTP_WIN32_IO_CALLBACK ofAddress(MemoryAddress addr) {
        return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, long x4, jdk.incubator.foreign.MemoryAddress x5) -> {
            try {
                constants$379.PTP_WIN32_IO_CALLBACK$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


