// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _CRL_ISSUING_DIST_POINT {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            C_LONG.withName("dwDistPointNameChoice"),
            MemoryLayout.paddingLayout(32),
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    C_LONG.withName("cAltEntry"),
                    MemoryLayout.paddingLayout(32),
                    C_POINTER.withName("rgAltEntry")
                ).withName("FullName")
            ).withName("$anon$0")
        ).withName("DistPointName"),
        C_INT.withName("fOnlyContainsUserCerts"),
        C_INT.withName("fOnlyContainsCACerts"),
        MemoryLayout.structLayout(
            C_LONG.withName("cbData"),
            MemoryLayout.paddingLayout(32),
            C_POINTER.withName("pbData"),
            C_LONG.withName("cUnusedBits"),
            MemoryLayout.paddingLayout(32)
        ).withName("OnlySomeReasonFlags"),
        C_INT.withName("fIndirectCRL"),
        MemoryLayout.paddingLayout(32)
    ).withName("_CRL_ISSUING_DIST_POINT");
    public static MemoryLayout $LAYOUT() {
        return _CRL_ISSUING_DIST_POINT.$struct$LAYOUT;
    }
    public static MemorySegment DistPointName$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    static final VarHandle fOnlyContainsUserCerts$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("fOnlyContainsUserCerts"));
    public static VarHandle fOnlyContainsUserCerts$VH() {
        return _CRL_ISSUING_DIST_POINT.fOnlyContainsUserCerts$VH;
    }
    public static int fOnlyContainsUserCerts$get(MemorySegment seg) {
        return (int)_CRL_ISSUING_DIST_POINT.fOnlyContainsUserCerts$VH.get(seg);
    }
    public static void fOnlyContainsUserCerts$set( MemorySegment seg, int x) {
        _CRL_ISSUING_DIST_POINT.fOnlyContainsUserCerts$VH.set(seg, x);
    }
    public static int fOnlyContainsUserCerts$get(MemorySegment seg, long index) {
        return (int)_CRL_ISSUING_DIST_POINT.fOnlyContainsUserCerts$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fOnlyContainsUserCerts$set(MemorySegment seg, long index, int x) {
        _CRL_ISSUING_DIST_POINT.fOnlyContainsUserCerts$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fOnlyContainsCACerts$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("fOnlyContainsCACerts"));
    public static VarHandle fOnlyContainsCACerts$VH() {
        return _CRL_ISSUING_DIST_POINT.fOnlyContainsCACerts$VH;
    }
    public static int fOnlyContainsCACerts$get(MemorySegment seg) {
        return (int)_CRL_ISSUING_DIST_POINT.fOnlyContainsCACerts$VH.get(seg);
    }
    public static void fOnlyContainsCACerts$set( MemorySegment seg, int x) {
        _CRL_ISSUING_DIST_POINT.fOnlyContainsCACerts$VH.set(seg, x);
    }
    public static int fOnlyContainsCACerts$get(MemorySegment seg, long index) {
        return (int)_CRL_ISSUING_DIST_POINT.fOnlyContainsCACerts$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fOnlyContainsCACerts$set(MemorySegment seg, long index, int x) {
        _CRL_ISSUING_DIST_POINT.fOnlyContainsCACerts$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment OnlySomeReasonFlags$slice(MemorySegment seg) {
        return seg.asSlice(32, 24);
    }
    static final VarHandle fIndirectCRL$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("fIndirectCRL"));
    public static VarHandle fIndirectCRL$VH() {
        return _CRL_ISSUING_DIST_POINT.fIndirectCRL$VH;
    }
    public static int fIndirectCRL$get(MemorySegment seg) {
        return (int)_CRL_ISSUING_DIST_POINT.fIndirectCRL$VH.get(seg);
    }
    public static void fIndirectCRL$set( MemorySegment seg, int x) {
        _CRL_ISSUING_DIST_POINT.fIndirectCRL$VH.set(seg, x);
    }
    public static int fIndirectCRL$get(MemorySegment seg, long index) {
        return (int)_CRL_ISSUING_DIST_POINT.fIndirectCRL$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fIndirectCRL$set(MemorySegment seg, long index, int x) {
        _CRL_ISSUING_DIST_POINT.fIndirectCRL$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


