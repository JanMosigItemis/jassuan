// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _RTL_VERIFIER_DLL_DESCRIPTOR {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("DllName"),
        C_LONG.withName("DllFlags"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("DllAddress"),
        C_POINTER.withName("DllThunks")
    ).withName("_RTL_VERIFIER_DLL_DESCRIPTOR");
    public static MemoryLayout $LAYOUT() {
        return _RTL_VERIFIER_DLL_DESCRIPTOR.$struct$LAYOUT;
    }
    static final VarHandle DllName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("DllName")));
    public static VarHandle DllName$VH() {
        return _RTL_VERIFIER_DLL_DESCRIPTOR.DllName$VH;
    }
    public static MemoryAddress DllName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_DLL_DESCRIPTOR.DllName$VH.get(seg);
    }
    public static void DllName$set( MemorySegment seg, MemoryAddress x) {
        _RTL_VERIFIER_DLL_DESCRIPTOR.DllName$VH.set(seg, x);
    }
    public static MemoryAddress DllName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_DLL_DESCRIPTOR.DllName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DllName$set(MemorySegment seg, long index, MemoryAddress x) {
        _RTL_VERIFIER_DLL_DESCRIPTOR.DllName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DllFlags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("DllFlags"));
    public static VarHandle DllFlags$VH() {
        return _RTL_VERIFIER_DLL_DESCRIPTOR.DllFlags$VH;
    }
    public static int DllFlags$get(MemorySegment seg) {
        return (int)_RTL_VERIFIER_DLL_DESCRIPTOR.DllFlags$VH.get(seg);
    }
    public static void DllFlags$set( MemorySegment seg, int x) {
        _RTL_VERIFIER_DLL_DESCRIPTOR.DllFlags$VH.set(seg, x);
    }
    public static int DllFlags$get(MemorySegment seg, long index) {
        return (int)_RTL_VERIFIER_DLL_DESCRIPTOR.DllFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DllFlags$set(MemorySegment seg, long index, int x) {
        _RTL_VERIFIER_DLL_DESCRIPTOR.DllFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DllAddress$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("DllAddress")));
    public static VarHandle DllAddress$VH() {
        return _RTL_VERIFIER_DLL_DESCRIPTOR.DllAddress$VH;
    }
    public static MemoryAddress DllAddress$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_DLL_DESCRIPTOR.DllAddress$VH.get(seg);
    }
    public static void DllAddress$set( MemorySegment seg, MemoryAddress x) {
        _RTL_VERIFIER_DLL_DESCRIPTOR.DllAddress$VH.set(seg, x);
    }
    public static MemoryAddress DllAddress$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_DLL_DESCRIPTOR.DllAddress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DllAddress$set(MemorySegment seg, long index, MemoryAddress x) {
        _RTL_VERIFIER_DLL_DESCRIPTOR.DllAddress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DllThunks$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("DllThunks")));
    public static VarHandle DllThunks$VH() {
        return _RTL_VERIFIER_DLL_DESCRIPTOR.DllThunks$VH;
    }
    public static MemoryAddress DllThunks$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_DLL_DESCRIPTOR.DllThunks$VH.get(seg);
    }
    public static void DllThunks$set( MemorySegment seg, MemoryAddress x) {
        _RTL_VERIFIER_DLL_DESCRIPTOR.DllThunks$VH.set(seg, x);
    }
    public static MemoryAddress DllThunks$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_DLL_DESCRIPTOR.DllThunks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DllThunks$set(MemorySegment seg, long index, MemoryAddress x) {
        _RTL_VERIFIER_DLL_DESCRIPTOR.DllThunks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


