// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _CTL_CONTEXT {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("dwMsgAndCertEncodingType"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("pbCtlEncoded"),
        C_LONG.withName("cbCtlEncoded"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("pCtlInfo"),
        C_POINTER.withName("hCertStore"),
        C_POINTER.withName("hCryptMsg"),
        C_POINTER.withName("pbCtlContent"),
        C_LONG.withName("cbCtlContent"),
        MemoryLayout.paddingLayout(32)
    ).withName("_CTL_CONTEXT");
    public static MemoryLayout $LAYOUT() {
        return _CTL_CONTEXT.$struct$LAYOUT;
    }
    static final VarHandle dwMsgAndCertEncodingType$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMsgAndCertEncodingType"));
    public static VarHandle dwMsgAndCertEncodingType$VH() {
        return _CTL_CONTEXT.dwMsgAndCertEncodingType$VH;
    }
    public static int dwMsgAndCertEncodingType$get(MemorySegment seg) {
        return (int)_CTL_CONTEXT.dwMsgAndCertEncodingType$VH.get(seg);
    }
    public static void dwMsgAndCertEncodingType$set( MemorySegment seg, int x) {
        _CTL_CONTEXT.dwMsgAndCertEncodingType$VH.set(seg, x);
    }
    public static int dwMsgAndCertEncodingType$get(MemorySegment seg, long index) {
        return (int)_CTL_CONTEXT.dwMsgAndCertEncodingType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwMsgAndCertEncodingType$set(MemorySegment seg, long index, int x) {
        _CTL_CONTEXT.dwMsgAndCertEncodingType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pbCtlEncoded$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pbCtlEncoded")));
    public static VarHandle pbCtlEncoded$VH() {
        return _CTL_CONTEXT.pbCtlEncoded$VH;
    }
    public static MemoryAddress pbCtlEncoded$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CTL_CONTEXT.pbCtlEncoded$VH.get(seg);
    }
    public static void pbCtlEncoded$set( MemorySegment seg, MemoryAddress x) {
        _CTL_CONTEXT.pbCtlEncoded$VH.set(seg, x);
    }
    public static MemoryAddress pbCtlEncoded$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CTL_CONTEXT.pbCtlEncoded$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pbCtlEncoded$set(MemorySegment seg, long index, MemoryAddress x) {
        _CTL_CONTEXT.pbCtlEncoded$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbCtlEncoded$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbCtlEncoded"));
    public static VarHandle cbCtlEncoded$VH() {
        return _CTL_CONTEXT.cbCtlEncoded$VH;
    }
    public static int cbCtlEncoded$get(MemorySegment seg) {
        return (int)_CTL_CONTEXT.cbCtlEncoded$VH.get(seg);
    }
    public static void cbCtlEncoded$set( MemorySegment seg, int x) {
        _CTL_CONTEXT.cbCtlEncoded$VH.set(seg, x);
    }
    public static int cbCtlEncoded$get(MemorySegment seg, long index) {
        return (int)_CTL_CONTEXT.cbCtlEncoded$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbCtlEncoded$set(MemorySegment seg, long index, int x) {
        _CTL_CONTEXT.cbCtlEncoded$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pCtlInfo$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pCtlInfo")));
    public static VarHandle pCtlInfo$VH() {
        return _CTL_CONTEXT.pCtlInfo$VH;
    }
    public static MemoryAddress pCtlInfo$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CTL_CONTEXT.pCtlInfo$VH.get(seg);
    }
    public static void pCtlInfo$set( MemorySegment seg, MemoryAddress x) {
        _CTL_CONTEXT.pCtlInfo$VH.set(seg, x);
    }
    public static MemoryAddress pCtlInfo$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CTL_CONTEXT.pCtlInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pCtlInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        _CTL_CONTEXT.pCtlInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hCertStore$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hCertStore")));
    public static VarHandle hCertStore$VH() {
        return _CTL_CONTEXT.hCertStore$VH;
    }
    public static MemoryAddress hCertStore$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CTL_CONTEXT.hCertStore$VH.get(seg);
    }
    public static void hCertStore$set( MemorySegment seg, MemoryAddress x) {
        _CTL_CONTEXT.hCertStore$VH.set(seg, x);
    }
    public static MemoryAddress hCertStore$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CTL_CONTEXT.hCertStore$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hCertStore$set(MemorySegment seg, long index, MemoryAddress x) {
        _CTL_CONTEXT.hCertStore$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hCryptMsg$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hCryptMsg")));
    public static VarHandle hCryptMsg$VH() {
        return _CTL_CONTEXT.hCryptMsg$VH;
    }
    public static MemoryAddress hCryptMsg$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CTL_CONTEXT.hCryptMsg$VH.get(seg);
    }
    public static void hCryptMsg$set( MemorySegment seg, MemoryAddress x) {
        _CTL_CONTEXT.hCryptMsg$VH.set(seg, x);
    }
    public static MemoryAddress hCryptMsg$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CTL_CONTEXT.hCryptMsg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hCryptMsg$set(MemorySegment seg, long index, MemoryAddress x) {
        _CTL_CONTEXT.hCryptMsg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pbCtlContent$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pbCtlContent")));
    public static VarHandle pbCtlContent$VH() {
        return _CTL_CONTEXT.pbCtlContent$VH;
    }
    public static MemoryAddress pbCtlContent$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CTL_CONTEXT.pbCtlContent$VH.get(seg);
    }
    public static void pbCtlContent$set( MemorySegment seg, MemoryAddress x) {
        _CTL_CONTEXT.pbCtlContent$VH.set(seg, x);
    }
    public static MemoryAddress pbCtlContent$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CTL_CONTEXT.pbCtlContent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pbCtlContent$set(MemorySegment seg, long index, MemoryAddress x) {
        _CTL_CONTEXT.pbCtlContent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbCtlContent$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbCtlContent"));
    public static VarHandle cbCtlContent$VH() {
        return _CTL_CONTEXT.cbCtlContent$VH;
    }
    public static int cbCtlContent$get(MemorySegment seg) {
        return (int)_CTL_CONTEXT.cbCtlContent$VH.get(seg);
    }
    public static void cbCtlContent$set( MemorySegment seg, int x) {
        _CTL_CONTEXT.cbCtlContent$VH.set(seg, x);
    }
    public static int cbCtlContent$get(MemorySegment seg, long index) {
        return (int)_CTL_CONTEXT.cbCtlContent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbCtlContent$set(MemorySegment seg, long index, int x) {
        _CTL_CONTEXT.cbCtlContent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


