// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class DDEPOKE {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.valueLayout(13, ByteOrder.nativeOrder()).withName("unused"),
            MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("fRelease"),
            MemoryLayout.valueLayout(2, ByteOrder.nativeOrder()).withName("fReserved")
        ),
        C_SHORT.withName("cfFormat"),
        MemoryLayout.sequenceLayout(1, C_CHAR).withName("Value"),
        MemoryLayout.paddingLayout(8)
    );
    public static MemoryLayout $LAYOUT() {
        return DDEPOKE.$struct$LAYOUT;
    }
    static final VarHandle cfFormat$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("cfFormat"));
    public static VarHandle cfFormat$VH() {
        return DDEPOKE.cfFormat$VH;
    }
    public static short cfFormat$get(MemorySegment seg) {
        return (short)DDEPOKE.cfFormat$VH.get(seg);
    }
    public static void cfFormat$set( MemorySegment seg, short x) {
        DDEPOKE.cfFormat$VH.set(seg, x);
    }
    public static short cfFormat$get(MemorySegment seg, long index) {
        return (short)DDEPOKE.cfFormat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cfFormat$set(MemorySegment seg, long index, short x) {
        DDEPOKE.cfFormat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Value$slice(MemorySegment seg) {
        return seg.asSlice(4, 1);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


