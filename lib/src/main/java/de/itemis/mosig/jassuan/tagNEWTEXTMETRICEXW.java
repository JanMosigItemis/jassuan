// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class tagNEWTEXTMETRICEXW {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            C_LONG.withName("tmHeight"),
            C_LONG.withName("tmAscent"),
            C_LONG.withName("tmDescent"),
            C_LONG.withName("tmInternalLeading"),
            C_LONG.withName("tmExternalLeading"),
            C_LONG.withName("tmAveCharWidth"),
            C_LONG.withName("tmMaxCharWidth"),
            C_LONG.withName("tmWeight"),
            C_LONG.withName("tmOverhang"),
            C_LONG.withName("tmDigitizedAspectX"),
            C_LONG.withName("tmDigitizedAspectY"),
            C_SHORT.withName("tmFirstChar"),
            C_SHORT.withName("tmLastChar"),
            C_SHORT.withName("tmDefaultChar"),
            C_SHORT.withName("tmBreakChar"),
            C_CHAR.withName("tmItalic"),
            C_CHAR.withName("tmUnderlined"),
            C_CHAR.withName("tmStruckOut"),
            C_CHAR.withName("tmPitchAndFamily"),
            C_CHAR.withName("tmCharSet"),
            MemoryLayout.paddingLayout(24),
            C_LONG.withName("ntmFlags"),
            C_INT.withName("ntmSizeEM"),
            C_INT.withName("ntmCellHeight"),
            C_INT.withName("ntmAvgWidth")
        ).withName("ntmTm"),
        MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(4, C_LONG).withName("fsUsb"),
            MemoryLayout.sequenceLayout(2, C_LONG).withName("fsCsb")
        ).withName("ntmFontSig")
    ).withName("tagNEWTEXTMETRICEXW");
    public static MemoryLayout $LAYOUT() {
        return tagNEWTEXTMETRICEXW.$struct$LAYOUT;
    }
    public static MemorySegment ntmTm$slice(MemorySegment seg) {
        return seg.asSlice(0, 76);
    }
    public static MemorySegment ntmFontSig$slice(MemorySegment seg) {
        return seg.asSlice(76, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


