// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$975 {

    static final FunctionDescriptor ISequentialStream_RemoteWrite_Proxy$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle ISequentialStream_RemoteWrite_Proxy$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "ISequentialStream_RemoteWrite_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        constants$975.ISequentialStream_RemoteWrite_Proxy$FUNC, false
    );
    static final FunctionDescriptor ISequentialStream_RemoteWrite_Stub$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle ISequentialStream_RemoteWrite_Stub$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "ISequentialStream_RemoteWrite_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$975.ISequentialStream_RemoteWrite_Stub$FUNC, false
    );
    static final FunctionDescriptor ISequentialStream_Read_Proxy$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle ISequentialStream_Read_Proxy$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "ISequentialStream_Read_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        constants$975.ISequentialStream_Read_Proxy$FUNC, false
    );
    static final FunctionDescriptor ISequentialStream_Read_Stub$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle ISequentialStream_Read_Stub$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "ISequentialStream_Read_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        constants$975.ISequentialStream_Read_Stub$FUNC, false
    );
    static final FunctionDescriptor ISequentialStream_Write_Proxy$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle ISequentialStream_Write_Proxy$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "ISequentialStream_Write_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        constants$975.ISequentialStream_Write_Proxy$FUNC, false
    );
    static final FunctionDescriptor ISequentialStream_Write_Stub$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle ISequentialStream_Write_Stub$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "ISequentialStream_Write_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        constants$975.ISequentialStream_Write_Stub$FUNC, false
    );
}


