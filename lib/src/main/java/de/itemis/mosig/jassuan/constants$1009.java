// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$1009 {

    static final FunctionDescriptor LPFNGETCLASSOBJECT$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle LPFNGETCLASSOBJECT$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$1009.LPFNGETCLASSOBJECT$FUNC, false
    );
    static final FunctionDescriptor LPFNCANUNLOADNOW$FUNC = FunctionDescriptor.of(C_LONG);
    static final MethodHandle LPFNCANUNLOADNOW$MH = RuntimeHelper.downcallHandle(
        "()I",
        constants$1009.LPFNCANUNLOADNOW$FUNC, false
    );
    static final FunctionDescriptor DllGetClassObject$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle DllGetClassObject$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "DllGetClassObject",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$1009.DllGetClassObject$FUNC, false
    );
    static final FunctionDescriptor DllCanUnloadNow$FUNC = FunctionDescriptor.of(C_LONG);
    static final MethodHandle DllCanUnloadNow$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "DllCanUnloadNow",
        "()I",
        constants$1009.DllCanUnloadNow$FUNC, false
    );
    static final FunctionDescriptor CoTaskMemAlloc$FUNC = FunctionDescriptor.of(C_POINTER,
        C_LONG_LONG
    );
    static final MethodHandle CoTaskMemAlloc$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CoTaskMemAlloc",
        "(J)Ljdk/incubator/foreign/MemoryAddress;",
        constants$1009.CoTaskMemAlloc$FUNC, false
    );
}


