// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IHttpNegotiate3Vtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("BeginningTransaction"),
        C_POINTER.withName("OnResponse"),
        C_POINTER.withName("GetRootSecurityId"),
        C_POINTER.withName("GetSerializedClientCertContext")
    ).withName("IHttpNegotiate3Vtbl");
    public static MemoryLayout $LAYOUT() {
        return IHttpNegotiate3Vtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IHttpNegotiate3Vtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IHttpNegotiate3Vtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IHttpNegotiate3Vtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IHttpNegotiate3Vtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IHttpNegotiate3Vtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IHttpNegotiate3Vtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IHttpNegotiate3Vtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IHttpNegotiate3Vtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IHttpNegotiate3Vtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IHttpNegotiate3Vtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IHttpNegotiate3Vtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IHttpNegotiate3Vtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IHttpNegotiate3Vtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IHttpNegotiate3Vtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IHttpNegotiate3Vtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IHttpNegotiate3Vtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IHttpNegotiate3Vtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IHttpNegotiate3Vtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IHttpNegotiate3Vtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IHttpNegotiate3Vtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IHttpNegotiate3Vtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IHttpNegotiate3Vtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IHttpNegotiate3Vtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IHttpNegotiate3Vtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IHttpNegotiate3Vtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IHttpNegotiate3Vtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IHttpNegotiate3Vtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor BeginningTransaction$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle BeginningTransaction$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        IHttpNegotiate3Vtbl.BeginningTransaction$FUNC, false
    );
    public interface BeginningTransaction {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4);
        static MemoryAddress allocate(BeginningTransaction fi) {
            return RuntimeHelper.upcallStub(BeginningTransaction.class, fi, IHttpNegotiate3Vtbl.BeginningTransaction$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(BeginningTransaction fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(BeginningTransaction.class, fi, IHttpNegotiate3Vtbl.BeginningTransaction$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static BeginningTransaction ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4) -> {
                try {
                    return (int)IHttpNegotiate3Vtbl.BeginningTransaction$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle BeginningTransaction$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("BeginningTransaction")));
    public static VarHandle BeginningTransaction$VH() {
        return IHttpNegotiate3Vtbl.BeginningTransaction$VH;
    }
    public static MemoryAddress BeginningTransaction$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IHttpNegotiate3Vtbl.BeginningTransaction$VH.get(seg);
    }
    public static void BeginningTransaction$set( MemorySegment seg, MemoryAddress x) {
        IHttpNegotiate3Vtbl.BeginningTransaction$VH.set(seg, x);
    }
    public static MemoryAddress BeginningTransaction$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IHttpNegotiate3Vtbl.BeginningTransaction$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BeginningTransaction$set(MemorySegment seg, long index, MemoryAddress x) {
        IHttpNegotiate3Vtbl.BeginningTransaction$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static BeginningTransaction BeginningTransaction (MemorySegment segment) {
        return BeginningTransaction.ofAddress(BeginningTransaction$get(segment));
    }
    static final FunctionDescriptor OnResponse$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle OnResponse$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IHttpNegotiate3Vtbl.OnResponse$FUNC, false
    );
    public interface OnResponse {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4);
        static MemoryAddress allocate(OnResponse fi) {
            return RuntimeHelper.upcallStub(OnResponse.class, fi, IHttpNegotiate3Vtbl.OnResponse$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(OnResponse fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(OnResponse.class, fi, IHttpNegotiate3Vtbl.OnResponse$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static OnResponse ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4) -> {
                try {
                    return (int)IHttpNegotiate3Vtbl.OnResponse$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnResponse$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("OnResponse")));
    public static VarHandle OnResponse$VH() {
        return IHttpNegotiate3Vtbl.OnResponse$VH;
    }
    public static MemoryAddress OnResponse$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IHttpNegotiate3Vtbl.OnResponse$VH.get(seg);
    }
    public static void OnResponse$set( MemorySegment seg, MemoryAddress x) {
        IHttpNegotiate3Vtbl.OnResponse$VH.set(seg, x);
    }
    public static MemoryAddress OnResponse$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IHttpNegotiate3Vtbl.OnResponse$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnResponse$set(MemorySegment seg, long index, MemoryAddress x) {
        IHttpNegotiate3Vtbl.OnResponse$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnResponse OnResponse (MemorySegment segment) {
        return OnResponse.ofAddress(OnResponse$get(segment));
    }
    static final FunctionDescriptor GetRootSecurityId$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG
    );
    static final MethodHandle GetRootSecurityId$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        IHttpNegotiate3Vtbl.GetRootSecurityId$FUNC, false
    );
    public interface GetRootSecurityId {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, long x3);
        static MemoryAddress allocate(GetRootSecurityId fi) {
            return RuntimeHelper.upcallStub(GetRootSecurityId.class, fi, IHttpNegotiate3Vtbl.GetRootSecurityId$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I");
        }
        static MemoryAddress allocate(GetRootSecurityId fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetRootSecurityId.class, fi, IHttpNegotiate3Vtbl.GetRootSecurityId$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I", scope);
        }
        static GetRootSecurityId ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, long x3) -> {
                try {
                    return (int)IHttpNegotiate3Vtbl.GetRootSecurityId$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetRootSecurityId$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetRootSecurityId")));
    public static VarHandle GetRootSecurityId$VH() {
        return IHttpNegotiate3Vtbl.GetRootSecurityId$VH;
    }
    public static MemoryAddress GetRootSecurityId$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IHttpNegotiate3Vtbl.GetRootSecurityId$VH.get(seg);
    }
    public static void GetRootSecurityId$set( MemorySegment seg, MemoryAddress x) {
        IHttpNegotiate3Vtbl.GetRootSecurityId$VH.set(seg, x);
    }
    public static MemoryAddress GetRootSecurityId$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IHttpNegotiate3Vtbl.GetRootSecurityId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetRootSecurityId$set(MemorySegment seg, long index, MemoryAddress x) {
        IHttpNegotiate3Vtbl.GetRootSecurityId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetRootSecurityId GetRootSecurityId (MemorySegment segment) {
        return GetRootSecurityId.ofAddress(GetRootSecurityId$get(segment));
    }
    static final FunctionDescriptor GetSerializedClientCertContext$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetSerializedClientCertContext$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IHttpNegotiate3Vtbl.GetSerializedClientCertContext$FUNC, false
    );
    public interface GetSerializedClientCertContext {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetSerializedClientCertContext fi) {
            return RuntimeHelper.upcallStub(GetSerializedClientCertContext.class, fi, IHttpNegotiate3Vtbl.GetSerializedClientCertContext$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetSerializedClientCertContext fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetSerializedClientCertContext.class, fi, IHttpNegotiate3Vtbl.GetSerializedClientCertContext$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetSerializedClientCertContext ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IHttpNegotiate3Vtbl.GetSerializedClientCertContext$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetSerializedClientCertContext$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetSerializedClientCertContext")));
    public static VarHandle GetSerializedClientCertContext$VH() {
        return IHttpNegotiate3Vtbl.GetSerializedClientCertContext$VH;
    }
    public static MemoryAddress GetSerializedClientCertContext$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IHttpNegotiate3Vtbl.GetSerializedClientCertContext$VH.get(seg);
    }
    public static void GetSerializedClientCertContext$set( MemorySegment seg, MemoryAddress x) {
        IHttpNegotiate3Vtbl.GetSerializedClientCertContext$VH.set(seg, x);
    }
    public static MemoryAddress GetSerializedClientCertContext$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IHttpNegotiate3Vtbl.GetSerializedClientCertContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSerializedClientCertContext$set(MemorySegment seg, long index, MemoryAddress x) {
        IHttpNegotiate3Vtbl.GetSerializedClientCertContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSerializedClientCertContext GetSerializedClientCertContext (MemorySegment segment) {
        return GetSerializedClientCertContext.ofAddress(GetSerializedClientCertContext$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


