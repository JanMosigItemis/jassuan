// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$94 {

    static final FunctionDescriptor open$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final MethodHandle open$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "open",
        "(Ljdk/incubator/foreign/MemoryAddress;I[Ljava/lang/Object;)I",
        constants$94.open$FUNC, true
    );
    static final FunctionDescriptor read$FUNC = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final MethodHandle read$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "read",
        "(ILjdk/incubator/foreign/MemoryAddress;I)I",
        constants$94.read$FUNC, false
    );
    static final FunctionDescriptor setmode$FUNC = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    static final MethodHandle setmode$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "setmode",
        "(II)I",
        constants$94.setmode$FUNC, false
    );
    static final FunctionDescriptor sopen$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final MethodHandle sopen$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "sopen",
        "(Ljdk/incubator/foreign/MemoryAddress;II[Ljava/lang/Object;)I",
        constants$94.sopen$FUNC, true
    );
    static final FunctionDescriptor tell$FUNC = FunctionDescriptor.of(C_LONG,
        C_INT
    );
    static final MethodHandle tell$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "tell",
        "(I)I",
        constants$94.tell$FUNC, false
    );
    static final FunctionDescriptor umask$FUNC = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final MethodHandle umask$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "umask",
        "(I)I",
        constants$94.umask$FUNC, false
    );
}


