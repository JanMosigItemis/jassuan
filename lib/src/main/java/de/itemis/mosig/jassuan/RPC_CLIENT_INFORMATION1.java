// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class RPC_CLIENT_INFORMATION1 {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("UserName"),
        C_POINTER.withName("ComputerName"),
        C_SHORT.withName("Privilege"),
        MemoryLayout.paddingLayout(16),
        C_LONG.withName("AuthFlags")
    );
    public static MemoryLayout $LAYOUT() {
        return RPC_CLIENT_INFORMATION1.$struct$LAYOUT;
    }
    static final VarHandle UserName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("UserName")));
    public static VarHandle UserName$VH() {
        return RPC_CLIENT_INFORMATION1.UserName$VH;
    }
    public static MemoryAddress UserName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)RPC_CLIENT_INFORMATION1.UserName$VH.get(seg);
    }
    public static void UserName$set( MemorySegment seg, MemoryAddress x) {
        RPC_CLIENT_INFORMATION1.UserName$VH.set(seg, x);
    }
    public static MemoryAddress UserName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)RPC_CLIENT_INFORMATION1.UserName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UserName$set(MemorySegment seg, long index, MemoryAddress x) {
        RPC_CLIENT_INFORMATION1.UserName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ComputerName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ComputerName")));
    public static VarHandle ComputerName$VH() {
        return RPC_CLIENT_INFORMATION1.ComputerName$VH;
    }
    public static MemoryAddress ComputerName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)RPC_CLIENT_INFORMATION1.ComputerName$VH.get(seg);
    }
    public static void ComputerName$set( MemorySegment seg, MemoryAddress x) {
        RPC_CLIENT_INFORMATION1.ComputerName$VH.set(seg, x);
    }
    public static MemoryAddress ComputerName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)RPC_CLIENT_INFORMATION1.ComputerName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ComputerName$set(MemorySegment seg, long index, MemoryAddress x) {
        RPC_CLIENT_INFORMATION1.ComputerName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Privilege$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("Privilege"));
    public static VarHandle Privilege$VH() {
        return RPC_CLIENT_INFORMATION1.Privilege$VH;
    }
    public static short Privilege$get(MemorySegment seg) {
        return (short)RPC_CLIENT_INFORMATION1.Privilege$VH.get(seg);
    }
    public static void Privilege$set( MemorySegment seg, short x) {
        RPC_CLIENT_INFORMATION1.Privilege$VH.set(seg, x);
    }
    public static short Privilege$get(MemorySegment seg, long index) {
        return (short)RPC_CLIENT_INFORMATION1.Privilege$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Privilege$set(MemorySegment seg, long index, short x) {
        RPC_CLIENT_INFORMATION1.Privilege$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AuthFlags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("AuthFlags"));
    public static VarHandle AuthFlags$VH() {
        return RPC_CLIENT_INFORMATION1.AuthFlags$VH;
    }
    public static int AuthFlags$get(MemorySegment seg) {
        return (int)RPC_CLIENT_INFORMATION1.AuthFlags$VH.get(seg);
    }
    public static void AuthFlags$set( MemorySegment seg, int x) {
        RPC_CLIENT_INFORMATION1.AuthFlags$VH.set(seg, x);
    }
    public static int AuthFlags$get(MemorySegment seg, long index) {
        return (int)RPC_CLIENT_INFORMATION1.AuthFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AuthFlags$set(MemorySegment seg, long index, int x) {
        RPC_CLIENT_INFORMATION1.AuthFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


