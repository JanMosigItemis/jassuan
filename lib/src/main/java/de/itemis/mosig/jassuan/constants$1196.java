// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$1196 {

    static final MemoryLayout IID_IEncodingFilterFactory$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment IID_IEncodingFilterFactory$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "IID_IEncodingFilterFactory", constants$1196.IID_IEncodingFilterFactory$LAYOUT);
    static final FunctionDescriptor IsLoggingEnabledA$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle IsLoggingEnabledA$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "IsLoggingEnabledA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$1196.IsLoggingEnabledA$FUNC, false
    );
    static final FunctionDescriptor IsLoggingEnabledW$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle IsLoggingEnabledW$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "IsLoggingEnabledW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$1196.IsLoggingEnabledW$FUNC, false
    );
    static final FunctionDescriptor WriteHitLogging$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle WriteHitLogging$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "WriteHitLogging",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$1196.WriteHitLogging$FUNC, false
    );
    static final MemoryLayout GUID_CUSTOM_CONFIRMOBJECTSAFETY$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_CUSTOM_CONFIRMOBJECTSAFETY$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "GUID_CUSTOM_CONFIRMOBJECTSAFETY", constants$1196.GUID_CUSTOM_CONFIRMOBJECTSAFETY$LAYOUT);
    static final MemoryLayout IID_IWrappedProtocol$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment IID_IWrappedProtocol$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "IID_IWrappedProtocol", constants$1196.IID_IWrappedProtocol$LAYOUT);
}


