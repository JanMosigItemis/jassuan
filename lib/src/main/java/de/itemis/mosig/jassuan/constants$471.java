// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$471 {

    static final FunctionDescriptor GetMaximumProcessorGroupCount$FUNC = FunctionDescriptor.of(C_SHORT);
    static final MethodHandle GetMaximumProcessorGroupCount$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "GetMaximumProcessorGroupCount",
        "()S",
        constants$471.GetMaximumProcessorGroupCount$FUNC, false
    );
    static final FunctionDescriptor GetActiveProcessorCount$FUNC = FunctionDescriptor.of(C_LONG,
        C_SHORT
    );
    static final MethodHandle GetActiveProcessorCount$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "GetActiveProcessorCount",
        "(S)I",
        constants$471.GetActiveProcessorCount$FUNC, false
    );
    static final FunctionDescriptor GetMaximumProcessorCount$FUNC = FunctionDescriptor.of(C_LONG,
        C_SHORT
    );
    static final MethodHandle GetMaximumProcessorCount$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "GetMaximumProcessorCount",
        "(S)I",
        constants$471.GetMaximumProcessorCount$FUNC, false
    );
    static final FunctionDescriptor GetNumaNodeNumberFromHandle$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetNumaNodeNumberFromHandle$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "GetNumaNodeNumberFromHandle",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$471.GetNumaNodeNumberFromHandle$FUNC, false
    );
    static final FunctionDescriptor GetNumaProcessorNodeEx$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetNumaProcessorNodeEx$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "GetNumaProcessorNodeEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$471.GetNumaProcessorNodeEx$FUNC, false
    );
    static final FunctionDescriptor GetNumaAvailableMemoryNodeEx$FUNC = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER
    );
    static final MethodHandle GetNumaAvailableMemoryNodeEx$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "GetNumaAvailableMemoryNodeEx",
        "(SLjdk/incubator/foreign/MemoryAddress;)I",
        constants$471.GetNumaAvailableMemoryNodeEx$FUNC, false
    );
}


