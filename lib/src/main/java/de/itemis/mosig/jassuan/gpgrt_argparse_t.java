// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class gpgrt_argparse_t {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("argc"),
        C_POINTER.withName("argv"),
        C_INT.withName("flags"),
        C_INT.withName("err"),
        C_INT.withName("lineno"),
        C_INT.withName("r_opt"),
        C_INT.withName("r_type"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            C_INT.withName("ret_int"),
            C_LONG.withName("ret_long"),
            C_LONG.withName("ret_ulong"),
            C_POINTER.withName("ret_str")
        ).withName("r"),
        C_POINTER.withName("internal")
    );
    public static MemoryLayout $LAYOUT() {
        return gpgrt_argparse_t.$struct$LAYOUT;
    }
    static final VarHandle argc$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("argc")));
    public static VarHandle argc$VH() {
        return gpgrt_argparse_t.argc$VH;
    }
    public static MemoryAddress argc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)gpgrt_argparse_t.argc$VH.get(seg);
    }
    public static void argc$set( MemorySegment seg, MemoryAddress x) {
        gpgrt_argparse_t.argc$VH.set(seg, x);
    }
    public static MemoryAddress argc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)gpgrt_argparse_t.argc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void argc$set(MemorySegment seg, long index, MemoryAddress x) {
        gpgrt_argparse_t.argc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle argv$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("argv")));
    public static VarHandle argv$VH() {
        return gpgrt_argparse_t.argv$VH;
    }
    public static MemoryAddress argv$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)gpgrt_argparse_t.argv$VH.get(seg);
    }
    public static void argv$set( MemorySegment seg, MemoryAddress x) {
        gpgrt_argparse_t.argv$VH.set(seg, x);
    }
    public static MemoryAddress argv$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)gpgrt_argparse_t.argv$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void argv$set(MemorySegment seg, long index, MemoryAddress x) {
        gpgrt_argparse_t.argv$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return gpgrt_argparse_t.flags$VH;
    }
    public static int flags$get(MemorySegment seg) {
        return (int)gpgrt_argparse_t.flags$VH.get(seg);
    }
    public static void flags$set( MemorySegment seg, int x) {
        gpgrt_argparse_t.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)gpgrt_argparse_t.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        gpgrt_argparse_t.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle err$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("err"));
    public static VarHandle err$VH() {
        return gpgrt_argparse_t.err$VH;
    }
    public static int err$get(MemorySegment seg) {
        return (int)gpgrt_argparse_t.err$VH.get(seg);
    }
    public static void err$set( MemorySegment seg, int x) {
        gpgrt_argparse_t.err$VH.set(seg, x);
    }
    public static int err$get(MemorySegment seg, long index) {
        return (int)gpgrt_argparse_t.err$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void err$set(MemorySegment seg, long index, int x) {
        gpgrt_argparse_t.err$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lineno$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("lineno"));
    public static VarHandle lineno$VH() {
        return gpgrt_argparse_t.lineno$VH;
    }
    public static int lineno$get(MemorySegment seg) {
        return (int)gpgrt_argparse_t.lineno$VH.get(seg);
    }
    public static void lineno$set( MemorySegment seg, int x) {
        gpgrt_argparse_t.lineno$VH.set(seg, x);
    }
    public static int lineno$get(MemorySegment seg, long index) {
        return (int)gpgrt_argparse_t.lineno$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lineno$set(MemorySegment seg, long index, int x) {
        gpgrt_argparse_t.lineno$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle r_opt$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("r_opt"));
    public static VarHandle r_opt$VH() {
        return gpgrt_argparse_t.r_opt$VH;
    }
    public static int r_opt$get(MemorySegment seg) {
        return (int)gpgrt_argparse_t.r_opt$VH.get(seg);
    }
    public static void r_opt$set( MemorySegment seg, int x) {
        gpgrt_argparse_t.r_opt$VH.set(seg, x);
    }
    public static int r_opt$get(MemorySegment seg, long index) {
        return (int)gpgrt_argparse_t.r_opt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void r_opt$set(MemorySegment seg, long index, int x) {
        gpgrt_argparse_t.r_opt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle r_type$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("r_type"));
    public static VarHandle r_type$VH() {
        return gpgrt_argparse_t.r_type$VH;
    }
    public static int r_type$get(MemorySegment seg) {
        return (int)gpgrt_argparse_t.r_type$VH.get(seg);
    }
    public static void r_type$set( MemorySegment seg, int x) {
        gpgrt_argparse_t.r_type$VH.set(seg, x);
    }
    public static int r_type$get(MemorySegment seg, long index) {
        return (int)gpgrt_argparse_t.r_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void r_type$set(MemorySegment seg, long index, int x) {
        gpgrt_argparse_t.r_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class r {

        static final MemoryLayout r$union$LAYOUT = MemoryLayout.unionLayout(
            C_INT.withName("ret_int"),
            C_LONG.withName("ret_long"),
            C_LONG.withName("ret_ulong"),
            C_POINTER.withName("ret_str")
        );
        public static MemoryLayout $LAYOUT() {
            return r.r$union$LAYOUT;
        }
        static final VarHandle ret_int$VH = r$union$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ret_int"));
        public static VarHandle ret_int$VH() {
            return r.ret_int$VH;
        }
        public static int ret_int$get(MemorySegment seg) {
            return (int)r.ret_int$VH.get(seg);
        }
        public static void ret_int$set( MemorySegment seg, int x) {
            r.ret_int$VH.set(seg, x);
        }
        public static int ret_int$get(MemorySegment seg, long index) {
            return (int)r.ret_int$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void ret_int$set(MemorySegment seg, long index, int x) {
            r.ret_int$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle ret_long$VH = r$union$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ret_long"));
        public static VarHandle ret_long$VH() {
            return r.ret_long$VH;
        }
        public static int ret_long$get(MemorySegment seg) {
            return (int)r.ret_long$VH.get(seg);
        }
        public static void ret_long$set( MemorySegment seg, int x) {
            r.ret_long$VH.set(seg, x);
        }
        public static int ret_long$get(MemorySegment seg, long index) {
            return (int)r.ret_long$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void ret_long$set(MemorySegment seg, long index, int x) {
            r.ret_long$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle ret_ulong$VH = r$union$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ret_ulong"));
        public static VarHandle ret_ulong$VH() {
            return r.ret_ulong$VH;
        }
        public static int ret_ulong$get(MemorySegment seg) {
            return (int)r.ret_ulong$VH.get(seg);
        }
        public static void ret_ulong$set( MemorySegment seg, int x) {
            r.ret_ulong$VH.set(seg, x);
        }
        public static int ret_ulong$get(MemorySegment seg, long index) {
            return (int)r.ret_ulong$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void ret_ulong$set(MemorySegment seg, long index, int x) {
            r.ret_ulong$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle ret_str$VH = MemoryHandles.asAddressVarHandle(r$union$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ret_str")));
        public static VarHandle ret_str$VH() {
            return r.ret_str$VH;
        }
        public static MemoryAddress ret_str$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)r.ret_str$VH.get(seg);
        }
        public static void ret_str$set( MemorySegment seg, MemoryAddress x) {
            r.ret_str$VH.set(seg, x);
        }
        public static MemoryAddress ret_str$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)r.ret_str$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void ret_str$set(MemorySegment seg, long index, MemoryAddress x) {
            r.ret_str$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.ofScope(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment r$slice(MemorySegment seg) {
        return seg.asSlice(40, 8);
    }
    static final VarHandle internal$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("internal")));
    public static VarHandle internal$VH() {
        return gpgrt_argparse_t.internal$VH;
    }
    public static MemoryAddress internal$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)gpgrt_argparse_t.internal$VH.get(seg);
    }
    public static void internal$set( MemorySegment seg, MemoryAddress x) {
        gpgrt_argparse_t.internal$VH.set(seg, x);
    }
    public static MemoryAddress internal$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)gpgrt_argparse_t.internal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void internal$set(MemorySegment seg, long index, MemoryAddress x) {
        gpgrt_argparse_t.internal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


