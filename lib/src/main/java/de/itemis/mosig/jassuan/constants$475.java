// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$475 {

    static final FunctionDescriptor QueryActCtxSettingsW$FUNC = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER
    );
    static final MethodHandle QueryActCtxSettingsW$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "QueryActCtxSettingsW",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        constants$475.QueryActCtxSettingsW$FUNC, false
    );
    static final FunctionDescriptor ReplacePartitionUnit$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle ReplacePartitionUnit$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "ReplacePartitionUnit",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$475.ReplacePartitionUnit$FUNC, false
    );
    static final FunctionDescriptor AddSecureMemoryCacheCallback$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle AddSecureMemoryCacheCallback$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "AddSecureMemoryCacheCallback",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$475.AddSecureMemoryCacheCallback$FUNC, false
    );
    static final FunctionDescriptor RemoveSecureMemoryCacheCallback$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle RemoveSecureMemoryCacheCallback$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "RemoveSecureMemoryCacheCallback",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$475.RemoveSecureMemoryCacheCallback$FUNC, false
    );
    static final FunctionDescriptor CopyContext$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle CopyContext$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CopyContext",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        constants$475.CopyContext$FUNC, false
    );
    static final FunctionDescriptor InitializeContext$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle InitializeContext$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "InitializeContext",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$475.InitializeContext$FUNC, false
    );
}


