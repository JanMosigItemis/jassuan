// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class ASSOCIATIONELEMENT {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("ac"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("hkClass"),
        C_POINTER.withName("pszClass")
    ).withName("ASSOCIATIONELEMENT");
    public static MemoryLayout $LAYOUT() {
        return ASSOCIATIONELEMENT.$struct$LAYOUT;
    }
    static final VarHandle ac$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ac"));
    public static VarHandle ac$VH() {
        return ASSOCIATIONELEMENT.ac$VH;
    }
    public static int ac$get(MemorySegment seg) {
        return (int)ASSOCIATIONELEMENT.ac$VH.get(seg);
    }
    public static void ac$set( MemorySegment seg, int x) {
        ASSOCIATIONELEMENT.ac$VH.set(seg, x);
    }
    public static int ac$get(MemorySegment seg, long index) {
        return (int)ASSOCIATIONELEMENT.ac$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ac$set(MemorySegment seg, long index, int x) {
        ASSOCIATIONELEMENT.ac$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hkClass$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hkClass")));
    public static VarHandle hkClass$VH() {
        return ASSOCIATIONELEMENT.hkClass$VH;
    }
    public static MemoryAddress hkClass$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ASSOCIATIONELEMENT.hkClass$VH.get(seg);
    }
    public static void hkClass$set( MemorySegment seg, MemoryAddress x) {
        ASSOCIATIONELEMENT.hkClass$VH.set(seg, x);
    }
    public static MemoryAddress hkClass$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ASSOCIATIONELEMENT.hkClass$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hkClass$set(MemorySegment seg, long index, MemoryAddress x) {
        ASSOCIATIONELEMENT.hkClass$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pszClass$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszClass")));
    public static VarHandle pszClass$VH() {
        return ASSOCIATIONELEMENT.pszClass$VH;
    }
    public static MemoryAddress pszClass$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ASSOCIATIONELEMENT.pszClass$VH.get(seg);
    }
    public static void pszClass$set( MemorySegment seg, MemoryAddress x) {
        ASSOCIATIONELEMENT.pszClass$VH.set(seg, x);
    }
    public static MemoryAddress pszClass$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ASSOCIATIONELEMENT.pszClass$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pszClass$set(MemorySegment seg, long index, MemoryAddress x) {
        ASSOCIATIONELEMENT.pszClass$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


