// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _GET_MEDIA_TYPES {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("DeviceType"),
        C_LONG.withName("MediaInfoCount"),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_LONG.withName("LowPart"),
                            C_LONG.withName("HighPart")
                        ).withName("$anon$0"),
                        MemoryLayout.structLayout(
                            C_LONG.withName("LowPart"),
                            C_LONG.withName("HighPart")
                        ).withName("u"),
                        C_LONG_LONG.withName("QuadPart")
                    ).withName("Cylinders"),
                    C_INT.withName("MediaType"),
                    C_LONG.withName("TracksPerCylinder"),
                    C_LONG.withName("SectorsPerTrack"),
                    C_LONG.withName("BytesPerSector"),
                    C_LONG.withName("NumberMediaSides"),
                    C_LONG.withName("MediaCharacteristics")
                ).withName("DiskInfo"),
                MemoryLayout.structLayout(
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_LONG.withName("LowPart"),
                            C_LONG.withName("HighPart")
                        ).withName("$anon$0"),
                        MemoryLayout.structLayout(
                            C_LONG.withName("LowPart"),
                            C_LONG.withName("HighPart")
                        ).withName("u"),
                        C_LONG_LONG.withName("QuadPart")
                    ).withName("Cylinders"),
                    C_INT.withName("MediaType"),
                    C_LONG.withName("TracksPerCylinder"),
                    C_LONG.withName("SectorsPerTrack"),
                    C_LONG.withName("BytesPerSector"),
                    C_LONG.withName("NumberMediaSides"),
                    C_LONG.withName("MediaCharacteristics")
                ).withName("RemovableDiskInfo"),
                MemoryLayout.structLayout(
                    C_INT.withName("MediaType"),
                    C_LONG.withName("MediaCharacteristics"),
                    C_LONG.withName("CurrentBlockSize"),
                    C_INT.withName("BusType"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_CHAR.withName("MediumType"),
                            C_CHAR.withName("DensityCode")
                        ).withName("ScsiInformation")
                    ).withName("BusSpecificData"),
                    MemoryLayout.paddingLayout(16)
                ).withName("TapeInfo")
            ).withName("DeviceSpecific")
        ).withName("_DEVICE_MEDIA_INFO")).withName("MediaInfo")
    ).withName("_GET_MEDIA_TYPES");
    public static MemoryLayout $LAYOUT() {
        return _GET_MEDIA_TYPES.$struct$LAYOUT;
    }
    static final VarHandle DeviceType$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("DeviceType"));
    public static VarHandle DeviceType$VH() {
        return _GET_MEDIA_TYPES.DeviceType$VH;
    }
    public static int DeviceType$get(MemorySegment seg) {
        return (int)_GET_MEDIA_TYPES.DeviceType$VH.get(seg);
    }
    public static void DeviceType$set( MemorySegment seg, int x) {
        _GET_MEDIA_TYPES.DeviceType$VH.set(seg, x);
    }
    public static int DeviceType$get(MemorySegment seg, long index) {
        return (int)_GET_MEDIA_TYPES.DeviceType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceType$set(MemorySegment seg, long index, int x) {
        _GET_MEDIA_TYPES.DeviceType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MediaInfoCount$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("MediaInfoCount"));
    public static VarHandle MediaInfoCount$VH() {
        return _GET_MEDIA_TYPES.MediaInfoCount$VH;
    }
    public static int MediaInfoCount$get(MemorySegment seg) {
        return (int)_GET_MEDIA_TYPES.MediaInfoCount$VH.get(seg);
    }
    public static void MediaInfoCount$set( MemorySegment seg, int x) {
        _GET_MEDIA_TYPES.MediaInfoCount$VH.set(seg, x);
    }
    public static int MediaInfoCount$get(MemorySegment seg, long index) {
        return (int)_GET_MEDIA_TYPES.MediaInfoCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MediaInfoCount$set(MemorySegment seg, long index, int x) {
        _GET_MEDIA_TYPES.MediaInfoCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment MediaInfo$slice(MemorySegment seg) {
        return seg.asSlice(8, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


