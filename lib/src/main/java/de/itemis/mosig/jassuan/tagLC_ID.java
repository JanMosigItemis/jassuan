// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class tagLC_ID {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_SHORT.withName("wLanguage"),
        C_SHORT.withName("wCountry"),
        C_SHORT.withName("wCodePage")
    ).withName("tagLC_ID");
    public static MemoryLayout $LAYOUT() {
        return tagLC_ID.$struct$LAYOUT;
    }
    static final VarHandle wLanguage$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("wLanguage"));
    public static VarHandle wLanguage$VH() {
        return tagLC_ID.wLanguage$VH;
    }
    public static short wLanguage$get(MemorySegment seg) {
        return (short)tagLC_ID.wLanguage$VH.get(seg);
    }
    public static void wLanguage$set( MemorySegment seg, short x) {
        tagLC_ID.wLanguage$VH.set(seg, x);
    }
    public static short wLanguage$get(MemorySegment seg, long index) {
        return (short)tagLC_ID.wLanguage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wLanguage$set(MemorySegment seg, long index, short x) {
        tagLC_ID.wLanguage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wCountry$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("wCountry"));
    public static VarHandle wCountry$VH() {
        return tagLC_ID.wCountry$VH;
    }
    public static short wCountry$get(MemorySegment seg) {
        return (short)tagLC_ID.wCountry$VH.get(seg);
    }
    public static void wCountry$set( MemorySegment seg, short x) {
        tagLC_ID.wCountry$VH.set(seg, x);
    }
    public static short wCountry$get(MemorySegment seg, long index) {
        return (short)tagLC_ID.wCountry$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wCountry$set(MemorySegment seg, long index, short x) {
        tagLC_ID.wCountry$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wCodePage$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("wCodePage"));
    public static VarHandle wCodePage$VH() {
        return tagLC_ID.wCodePage$VH;
    }
    public static short wCodePage$get(MemorySegment seg) {
        return (short)tagLC_ID.wCodePage$VH.get(seg);
    }
    public static void wCodePage$set( MemorySegment seg, short x) {
        tagLC_ID.wCodePage$VH.set(seg, x);
    }
    public static short wCodePage$get(MemorySegment seg, long index) {
        return (short)tagLC_ID.wCodePage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wCodePage$set(MemorySegment seg, long index, short x) {
        tagLC_ID.wCodePage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


