// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _WSAMSG {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("name"),
        C_INT.withName("namelen"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("lpBuffers"),
        C_LONG.withName("dwBufferCount"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.structLayout(
            C_LONG.withName("len"),
            MemoryLayout.paddingLayout(32),
            C_POINTER.withName("buf")
        ).withName("Control"),
        C_LONG.withName("dwFlags"),
        MemoryLayout.paddingLayout(32)
    ).withName("_WSAMSG");
    public static MemoryLayout $LAYOUT() {
        return _WSAMSG.$struct$LAYOUT;
    }
    static final VarHandle name$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("name")));
    public static VarHandle name$VH() {
        return _WSAMSG.name$VH;
    }
    public static MemoryAddress name$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_WSAMSG.name$VH.get(seg);
    }
    public static void name$set( MemorySegment seg, MemoryAddress x) {
        _WSAMSG.name$VH.set(seg, x);
    }
    public static MemoryAddress name$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_WSAMSG.name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemoryAddress x) {
        _WSAMSG.name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle namelen$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("namelen"));
    public static VarHandle namelen$VH() {
        return _WSAMSG.namelen$VH;
    }
    public static int namelen$get(MemorySegment seg) {
        return (int)_WSAMSG.namelen$VH.get(seg);
    }
    public static void namelen$set( MemorySegment seg, int x) {
        _WSAMSG.namelen$VH.set(seg, x);
    }
    public static int namelen$get(MemorySegment seg, long index) {
        return (int)_WSAMSG.namelen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void namelen$set(MemorySegment seg, long index, int x) {
        _WSAMSG.namelen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpBuffers$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpBuffers")));
    public static VarHandle lpBuffers$VH() {
        return _WSAMSG.lpBuffers$VH;
    }
    public static MemoryAddress lpBuffers$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_WSAMSG.lpBuffers$VH.get(seg);
    }
    public static void lpBuffers$set( MemorySegment seg, MemoryAddress x) {
        _WSAMSG.lpBuffers$VH.set(seg, x);
    }
    public static MemoryAddress lpBuffers$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_WSAMSG.lpBuffers$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpBuffers$set(MemorySegment seg, long index, MemoryAddress x) {
        _WSAMSG.lpBuffers$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwBufferCount$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwBufferCount"));
    public static VarHandle dwBufferCount$VH() {
        return _WSAMSG.dwBufferCount$VH;
    }
    public static int dwBufferCount$get(MemorySegment seg) {
        return (int)_WSAMSG.dwBufferCount$VH.get(seg);
    }
    public static void dwBufferCount$set( MemorySegment seg, int x) {
        _WSAMSG.dwBufferCount$VH.set(seg, x);
    }
    public static int dwBufferCount$get(MemorySegment seg, long index) {
        return (int)_WSAMSG.dwBufferCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwBufferCount$set(MemorySegment seg, long index, int x) {
        _WSAMSG.dwBufferCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Control$slice(MemorySegment seg) {
        return seg.asSlice(32, 16);
    }
    static final VarHandle dwFlags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static VarHandle dwFlags$VH() {
        return _WSAMSG.dwFlags$VH;
    }
    public static int dwFlags$get(MemorySegment seg) {
        return (int)_WSAMSG.dwFlags$VH.get(seg);
    }
    public static void dwFlags$set( MemorySegment seg, int x) {
        _WSAMSG.dwFlags$VH.set(seg, x);
    }
    public static int dwFlags$get(MemorySegment seg, long index) {
        return (int)_WSAMSG.dwFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFlags$set(MemorySegment seg, long index, int x) {
        _WSAMSG.dwFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


