// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IFillLockBytesVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("FillAppend"),
        C_POINTER.withName("FillAt"),
        C_POINTER.withName("SetFillSize"),
        C_POINTER.withName("Terminate")
    ).withName("IFillLockBytesVtbl");
    public static MemoryLayout $LAYOUT() {
        return IFillLockBytesVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IFillLockBytesVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IFillLockBytesVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IFillLockBytesVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IFillLockBytesVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IFillLockBytesVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IFillLockBytesVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IFillLockBytesVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IFillLockBytesVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IFillLockBytesVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IFillLockBytesVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IFillLockBytesVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IFillLockBytesVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IFillLockBytesVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IFillLockBytesVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IFillLockBytesVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IFillLockBytesVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IFillLockBytesVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IFillLockBytesVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IFillLockBytesVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IFillLockBytesVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IFillLockBytesVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IFillLockBytesVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IFillLockBytesVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IFillLockBytesVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IFillLockBytesVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IFillLockBytesVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IFillLockBytesVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor FillAppend$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle FillAppend$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        IFillLockBytesVtbl.FillAppend$FUNC, false
    );
    public interface FillAppend {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(FillAppend fi) {
            return RuntimeHelper.upcallStub(FillAppend.class, fi, IFillLockBytesVtbl.FillAppend$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(FillAppend fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(FillAppend.class, fi, IFillLockBytesVtbl.FillAppend$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static FillAppend ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)IFillLockBytesVtbl.FillAppend$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle FillAppend$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("FillAppend")));
    public static VarHandle FillAppend$VH() {
        return IFillLockBytesVtbl.FillAppend$VH;
    }
    public static MemoryAddress FillAppend$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IFillLockBytesVtbl.FillAppend$VH.get(seg);
    }
    public static void FillAppend$set( MemorySegment seg, MemoryAddress x) {
        IFillLockBytesVtbl.FillAppend$VH.set(seg, x);
    }
    public static MemoryAddress FillAppend$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IFillLockBytesVtbl.FillAppend$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FillAppend$set(MemorySegment seg, long index, MemoryAddress x) {
        IFillLockBytesVtbl.FillAppend$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static FillAppend FillAppend (MemorySegment segment) {
        return FillAppend.ofAddress(FillAppend$get(segment));
    }
    static final FunctionDescriptor FillAt$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONG_LONG.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle FillAt$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        IFillLockBytesVtbl.FillAt$FUNC, false
    );
    public interface FillAt {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4);
        static MemoryAddress allocate(FillAt fi) {
            return RuntimeHelper.upcallStub(FillAt.class, fi, IFillLockBytesVtbl.FillAt$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(FillAt fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(FillAt.class, fi, IFillLockBytesVtbl.FillAt$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static FillAt ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4) -> {
                try {
                    return (int)IFillLockBytesVtbl.FillAt$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle FillAt$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("FillAt")));
    public static VarHandle FillAt$VH() {
        return IFillLockBytesVtbl.FillAt$VH;
    }
    public static MemoryAddress FillAt$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IFillLockBytesVtbl.FillAt$VH.get(seg);
    }
    public static void FillAt$set( MemorySegment seg, MemoryAddress x) {
        IFillLockBytesVtbl.FillAt$VH.set(seg, x);
    }
    public static MemoryAddress FillAt$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IFillLockBytesVtbl.FillAt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FillAt$set(MemorySegment seg, long index, MemoryAddress x) {
        IFillLockBytesVtbl.FillAt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static FillAt FillAt (MemorySegment segment) {
        return FillAt.ofAddress(FillAt$get(segment));
    }
    static final FunctionDescriptor SetFillSize$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONG_LONG.withName("QuadPart")
        ).withName("_ULARGE_INTEGER")
    );
    static final MethodHandle SetFillSize$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        IFillLockBytesVtbl.SetFillSize$FUNC, false
    );
    public interface SetFillSize {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1);
        static MemoryAddress allocate(SetFillSize fi) {
            return RuntimeHelper.upcallStub(SetFillSize.class, fi, IFillLockBytesVtbl.SetFillSize$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I");
        }
        static MemoryAddress allocate(SetFillSize fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetFillSize.class, fi, IFillLockBytesVtbl.SetFillSize$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I", scope);
        }
        static SetFillSize ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1) -> {
                try {
                    return (int)IFillLockBytesVtbl.SetFillSize$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetFillSize$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetFillSize")));
    public static VarHandle SetFillSize$VH() {
        return IFillLockBytesVtbl.SetFillSize$VH;
    }
    public static MemoryAddress SetFillSize$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IFillLockBytesVtbl.SetFillSize$VH.get(seg);
    }
    public static void SetFillSize$set( MemorySegment seg, MemoryAddress x) {
        IFillLockBytesVtbl.SetFillSize$VH.set(seg, x);
    }
    public static MemoryAddress SetFillSize$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IFillLockBytesVtbl.SetFillSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetFillSize$set(MemorySegment seg, long index, MemoryAddress x) {
        IFillLockBytesVtbl.SetFillSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetFillSize SetFillSize (MemorySegment segment) {
        return SetFillSize.ofAddress(SetFillSize$get(segment));
    }
    static final FunctionDescriptor Terminate$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT
    );
    static final MethodHandle Terminate$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        IFillLockBytesVtbl.Terminate$FUNC, false
    );
    public interface Terminate {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
        static MemoryAddress allocate(Terminate fi) {
            return RuntimeHelper.upcallStub(Terminate.class, fi, IFillLockBytesVtbl.Terminate$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(Terminate fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Terminate.class, fi, IFillLockBytesVtbl.Terminate$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static Terminate ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1) -> {
                try {
                    return (int)IFillLockBytesVtbl.Terminate$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Terminate$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Terminate")));
    public static VarHandle Terminate$VH() {
        return IFillLockBytesVtbl.Terminate$VH;
    }
    public static MemoryAddress Terminate$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IFillLockBytesVtbl.Terminate$VH.get(seg);
    }
    public static void Terminate$set( MemorySegment seg, MemoryAddress x) {
        IFillLockBytesVtbl.Terminate$VH.set(seg, x);
    }
    public static MemoryAddress Terminate$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IFillLockBytesVtbl.Terminate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Terminate$set(MemorySegment seg, long index, MemoryAddress x) {
        IFillLockBytesVtbl.Terminate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Terminate Terminate (MemorySegment segment) {
        return Terminate.ofAddress(Terminate$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


