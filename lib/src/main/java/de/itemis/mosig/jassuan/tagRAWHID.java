// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class tagRAWHID {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("dwSizeHid"),
        C_LONG.withName("dwCount"),
        MemoryLayout.sequenceLayout(1, C_CHAR).withName("bRawData"),
        MemoryLayout.paddingLayout(24)
    ).withName("tagRAWHID");
    public static MemoryLayout $LAYOUT() {
        return tagRAWHID.$struct$LAYOUT;
    }
    static final VarHandle dwSizeHid$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSizeHid"));
    public static VarHandle dwSizeHid$VH() {
        return tagRAWHID.dwSizeHid$VH;
    }
    public static int dwSizeHid$get(MemorySegment seg) {
        return (int)tagRAWHID.dwSizeHid$VH.get(seg);
    }
    public static void dwSizeHid$set( MemorySegment seg, int x) {
        tagRAWHID.dwSizeHid$VH.set(seg, x);
    }
    public static int dwSizeHid$get(MemorySegment seg, long index) {
        return (int)tagRAWHID.dwSizeHid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwSizeHid$set(MemorySegment seg, long index, int x) {
        tagRAWHID.dwSizeHid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwCount$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCount"));
    public static VarHandle dwCount$VH() {
        return tagRAWHID.dwCount$VH;
    }
    public static int dwCount$get(MemorySegment seg) {
        return (int)tagRAWHID.dwCount$VH.get(seg);
    }
    public static void dwCount$set( MemorySegment seg, int x) {
        tagRAWHID.dwCount$VH.set(seg, x);
    }
    public static int dwCount$get(MemorySegment seg, long index) {
        return (int)tagRAWHID.dwCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwCount$set(MemorySegment seg, long index, int x) {
        tagRAWHID.dwCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment bRawData$slice(MemorySegment seg) {
        return seg.asSlice(8, 1);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


