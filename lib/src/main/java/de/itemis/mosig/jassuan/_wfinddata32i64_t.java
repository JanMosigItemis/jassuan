// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _wfinddata32i64_t {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("attrib"),
        C_LONG.withName("time_create"),
        C_LONG.withName("time_access"),
        C_LONG.withName("time_write"),
        C_LONG_LONG.withName("size"),
        MemoryLayout.sequenceLayout(260, C_SHORT).withName("name")
    ).withName("_wfinddata32i64_t");
    public static MemoryLayout $LAYOUT() {
        return _wfinddata32i64_t.$struct$LAYOUT;
    }
    static final VarHandle attrib$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("attrib"));
    public static VarHandle attrib$VH() {
        return _wfinddata32i64_t.attrib$VH;
    }
    public static int attrib$get(MemorySegment seg) {
        return (int)_wfinddata32i64_t.attrib$VH.get(seg);
    }
    public static void attrib$set( MemorySegment seg, int x) {
        _wfinddata32i64_t.attrib$VH.set(seg, x);
    }
    public static int attrib$get(MemorySegment seg, long index) {
        return (int)_wfinddata32i64_t.attrib$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void attrib$set(MemorySegment seg, long index, int x) {
        _wfinddata32i64_t.attrib$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle time_create$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("time_create"));
    public static VarHandle time_create$VH() {
        return _wfinddata32i64_t.time_create$VH;
    }
    public static int time_create$get(MemorySegment seg) {
        return (int)_wfinddata32i64_t.time_create$VH.get(seg);
    }
    public static void time_create$set( MemorySegment seg, int x) {
        _wfinddata32i64_t.time_create$VH.set(seg, x);
    }
    public static int time_create$get(MemorySegment seg, long index) {
        return (int)_wfinddata32i64_t.time_create$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void time_create$set(MemorySegment seg, long index, int x) {
        _wfinddata32i64_t.time_create$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle time_access$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("time_access"));
    public static VarHandle time_access$VH() {
        return _wfinddata32i64_t.time_access$VH;
    }
    public static int time_access$get(MemorySegment seg) {
        return (int)_wfinddata32i64_t.time_access$VH.get(seg);
    }
    public static void time_access$set( MemorySegment seg, int x) {
        _wfinddata32i64_t.time_access$VH.set(seg, x);
    }
    public static int time_access$get(MemorySegment seg, long index) {
        return (int)_wfinddata32i64_t.time_access$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void time_access$set(MemorySegment seg, long index, int x) {
        _wfinddata32i64_t.time_access$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle time_write$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("time_write"));
    public static VarHandle time_write$VH() {
        return _wfinddata32i64_t.time_write$VH;
    }
    public static int time_write$get(MemorySegment seg) {
        return (int)_wfinddata32i64_t.time_write$VH.get(seg);
    }
    public static void time_write$set( MemorySegment seg, int x) {
        _wfinddata32i64_t.time_write$VH.set(seg, x);
    }
    public static int time_write$get(MemorySegment seg, long index) {
        return (int)_wfinddata32i64_t.time_write$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void time_write$set(MemorySegment seg, long index, int x) {
        _wfinddata32i64_t.time_write$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle size$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("size"));
    public static VarHandle size$VH() {
        return _wfinddata32i64_t.size$VH;
    }
    public static long size$get(MemorySegment seg) {
        return (long)_wfinddata32i64_t.size$VH.get(seg);
    }
    public static void size$set( MemorySegment seg, long x) {
        _wfinddata32i64_t.size$VH.set(seg, x);
    }
    public static long size$get(MemorySegment seg, long index) {
        return (long)_wfinddata32i64_t.size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void size$set(MemorySegment seg, long index, long x) {
        _wfinddata32i64_t.size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment name$slice(MemorySegment seg) {
        return seg.asSlice(24, 520);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


