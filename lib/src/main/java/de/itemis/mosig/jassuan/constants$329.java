// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$329 {

    static final FunctionDescriptor ConnectNamedPipe$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle ConnectNamedPipe$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "ConnectNamedPipe",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$329.ConnectNamedPipe$FUNC, false
    );
    static final FunctionDescriptor DisconnectNamedPipe$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle DisconnectNamedPipe$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "DisconnectNamedPipe",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$329.DisconnectNamedPipe$FUNC, false
    );
    static final FunctionDescriptor SetNamedPipeHandleState$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle SetNamedPipeHandleState$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "SetNamedPipeHandleState",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$329.SetNamedPipeHandleState$FUNC, false
    );
    static final FunctionDescriptor PeekNamedPipe$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle PeekNamedPipe$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "PeekNamedPipe",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$329.PeekNamedPipe$FUNC, false
    );
    static final FunctionDescriptor TransactNamedPipe$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle TransactNamedPipe$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "TransactNamedPipe",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$329.TransactNamedPipe$FUNC, false
    );
    static final FunctionDescriptor CreateNamedPipeW$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle CreateNamedPipeW$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CreateNamedPipeW",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIIIILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$329.CreateNamedPipeW$FUNC, false
    );
}


