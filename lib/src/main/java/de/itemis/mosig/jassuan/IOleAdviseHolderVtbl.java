// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IOleAdviseHolderVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("Advise"),
        C_POINTER.withName("Unadvise"),
        C_POINTER.withName("EnumAdvise"),
        C_POINTER.withName("SendOnRename"),
        C_POINTER.withName("SendOnSave"),
        C_POINTER.withName("SendOnClose")
    ).withName("IOleAdviseHolderVtbl");
    public static MemoryLayout $LAYOUT() {
        return IOleAdviseHolderVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IOleAdviseHolderVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IOleAdviseHolderVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IOleAdviseHolderVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IOleAdviseHolderVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IOleAdviseHolderVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IOleAdviseHolderVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IOleAdviseHolderVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IOleAdviseHolderVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleAdviseHolderVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IOleAdviseHolderVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IOleAdviseHolderVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IOleAdviseHolderVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IOleAdviseHolderVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IOleAdviseHolderVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IOleAdviseHolderVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IOleAdviseHolderVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IOleAdviseHolderVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleAdviseHolderVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IOleAdviseHolderVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IOleAdviseHolderVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IOleAdviseHolderVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IOleAdviseHolderVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IOleAdviseHolderVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IOleAdviseHolderVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IOleAdviseHolderVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IOleAdviseHolderVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleAdviseHolderVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor Advise$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle Advise$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IOleAdviseHolderVtbl.Advise$FUNC, false
    );
    public interface Advise {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(Advise fi) {
            return RuntimeHelper.upcallStub(Advise.class, fi, IOleAdviseHolderVtbl.Advise$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Advise fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Advise.class, fi, IOleAdviseHolderVtbl.Advise$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Advise ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IOleAdviseHolderVtbl.Advise$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Advise$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Advise")));
    public static VarHandle Advise$VH() {
        return IOleAdviseHolderVtbl.Advise$VH;
    }
    public static MemoryAddress Advise$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IOleAdviseHolderVtbl.Advise$VH.get(seg);
    }
    public static void Advise$set( MemorySegment seg, MemoryAddress x) {
        IOleAdviseHolderVtbl.Advise$VH.set(seg, x);
    }
    public static MemoryAddress Advise$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IOleAdviseHolderVtbl.Advise$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Advise$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleAdviseHolderVtbl.Advise$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Advise Advise (MemorySegment segment) {
        return Advise.ofAddress(Advise$get(segment));
    }
    static final FunctionDescriptor Unadvise$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle Unadvise$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        IOleAdviseHolderVtbl.Unadvise$FUNC, false
    );
    public interface Unadvise {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
        static MemoryAddress allocate(Unadvise fi) {
            return RuntimeHelper.upcallStub(Unadvise.class, fi, IOleAdviseHolderVtbl.Unadvise$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(Unadvise fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Unadvise.class, fi, IOleAdviseHolderVtbl.Unadvise$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static Unadvise ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1) -> {
                try {
                    return (int)IOleAdviseHolderVtbl.Unadvise$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Unadvise$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Unadvise")));
    public static VarHandle Unadvise$VH() {
        return IOleAdviseHolderVtbl.Unadvise$VH;
    }
    public static MemoryAddress Unadvise$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IOleAdviseHolderVtbl.Unadvise$VH.get(seg);
    }
    public static void Unadvise$set( MemorySegment seg, MemoryAddress x) {
        IOleAdviseHolderVtbl.Unadvise$VH.set(seg, x);
    }
    public static MemoryAddress Unadvise$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IOleAdviseHolderVtbl.Unadvise$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Unadvise$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleAdviseHolderVtbl.Unadvise$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Unadvise Unadvise (MemorySegment segment) {
        return Unadvise.ofAddress(Unadvise$get(segment));
    }
    static final FunctionDescriptor EnumAdvise$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle EnumAdvise$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IOleAdviseHolderVtbl.EnumAdvise$FUNC, false
    );
    public interface EnumAdvise {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(EnumAdvise fi) {
            return RuntimeHelper.upcallStub(EnumAdvise.class, fi, IOleAdviseHolderVtbl.EnumAdvise$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(EnumAdvise fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(EnumAdvise.class, fi, IOleAdviseHolderVtbl.EnumAdvise$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static EnumAdvise ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IOleAdviseHolderVtbl.EnumAdvise$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle EnumAdvise$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnumAdvise")));
    public static VarHandle EnumAdvise$VH() {
        return IOleAdviseHolderVtbl.EnumAdvise$VH;
    }
    public static MemoryAddress EnumAdvise$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IOleAdviseHolderVtbl.EnumAdvise$VH.get(seg);
    }
    public static void EnumAdvise$set( MemorySegment seg, MemoryAddress x) {
        IOleAdviseHolderVtbl.EnumAdvise$VH.set(seg, x);
    }
    public static MemoryAddress EnumAdvise$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IOleAdviseHolderVtbl.EnumAdvise$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EnumAdvise$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleAdviseHolderVtbl.EnumAdvise$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnumAdvise EnumAdvise (MemorySegment segment) {
        return EnumAdvise.ofAddress(EnumAdvise$get(segment));
    }
    static final FunctionDescriptor SendOnRename$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle SendOnRename$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IOleAdviseHolderVtbl.SendOnRename$FUNC, false
    );
    public interface SendOnRename {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(SendOnRename fi) {
            return RuntimeHelper.upcallStub(SendOnRename.class, fi, IOleAdviseHolderVtbl.SendOnRename$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SendOnRename fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SendOnRename.class, fi, IOleAdviseHolderVtbl.SendOnRename$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SendOnRename ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IOleAdviseHolderVtbl.SendOnRename$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SendOnRename$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SendOnRename")));
    public static VarHandle SendOnRename$VH() {
        return IOleAdviseHolderVtbl.SendOnRename$VH;
    }
    public static MemoryAddress SendOnRename$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IOleAdviseHolderVtbl.SendOnRename$VH.get(seg);
    }
    public static void SendOnRename$set( MemorySegment seg, MemoryAddress x) {
        IOleAdviseHolderVtbl.SendOnRename$VH.set(seg, x);
    }
    public static MemoryAddress SendOnRename$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IOleAdviseHolderVtbl.SendOnRename$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SendOnRename$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleAdviseHolderVtbl.SendOnRename$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SendOnRename SendOnRename (MemorySegment segment) {
        return SendOnRename.ofAddress(SendOnRename$get(segment));
    }
    static final FunctionDescriptor SendOnSave$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle SendOnSave$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IOleAdviseHolderVtbl.SendOnSave$FUNC, false
    );
    public interface SendOnSave {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(SendOnSave fi) {
            return RuntimeHelper.upcallStub(SendOnSave.class, fi, IOleAdviseHolderVtbl.SendOnSave$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SendOnSave fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SendOnSave.class, fi, IOleAdviseHolderVtbl.SendOnSave$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SendOnSave ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IOleAdviseHolderVtbl.SendOnSave$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SendOnSave$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SendOnSave")));
    public static VarHandle SendOnSave$VH() {
        return IOleAdviseHolderVtbl.SendOnSave$VH;
    }
    public static MemoryAddress SendOnSave$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IOleAdviseHolderVtbl.SendOnSave$VH.get(seg);
    }
    public static void SendOnSave$set( MemorySegment seg, MemoryAddress x) {
        IOleAdviseHolderVtbl.SendOnSave$VH.set(seg, x);
    }
    public static MemoryAddress SendOnSave$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IOleAdviseHolderVtbl.SendOnSave$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SendOnSave$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleAdviseHolderVtbl.SendOnSave$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SendOnSave SendOnSave (MemorySegment segment) {
        return SendOnSave.ofAddress(SendOnSave$get(segment));
    }
    static final FunctionDescriptor SendOnClose$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle SendOnClose$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IOleAdviseHolderVtbl.SendOnClose$FUNC, false
    );
    public interface SendOnClose {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(SendOnClose fi) {
            return RuntimeHelper.upcallStub(SendOnClose.class, fi, IOleAdviseHolderVtbl.SendOnClose$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SendOnClose fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SendOnClose.class, fi, IOleAdviseHolderVtbl.SendOnClose$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SendOnClose ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IOleAdviseHolderVtbl.SendOnClose$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SendOnClose$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SendOnClose")));
    public static VarHandle SendOnClose$VH() {
        return IOleAdviseHolderVtbl.SendOnClose$VH;
    }
    public static MemoryAddress SendOnClose$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IOleAdviseHolderVtbl.SendOnClose$VH.get(seg);
    }
    public static void SendOnClose$set( MemorySegment seg, MemoryAddress x) {
        IOleAdviseHolderVtbl.SendOnClose$VH.set(seg, x);
    }
    public static MemoryAddress SendOnClose$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IOleAdviseHolderVtbl.SendOnClose$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SendOnClose$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleAdviseHolderVtbl.SendOnClose$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SendOnClose SendOnClose (MemorySegment segment) {
        return SendOnClose.ofAddress(SendOnClose$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


