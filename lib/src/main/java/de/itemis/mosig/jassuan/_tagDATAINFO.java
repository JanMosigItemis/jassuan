// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _tagDATAINFO {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("ulTotalSize"),
        C_LONG.withName("ulavrPacketSize"),
        C_LONG.withName("ulConnectSpeed"),
        C_LONG.withName("ulProcessorSpeed")
    ).withName("_tagDATAINFO");
    public static MemoryLayout $LAYOUT() {
        return _tagDATAINFO.$struct$LAYOUT;
    }
    static final VarHandle ulTotalSize$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulTotalSize"));
    public static VarHandle ulTotalSize$VH() {
        return _tagDATAINFO.ulTotalSize$VH;
    }
    public static int ulTotalSize$get(MemorySegment seg) {
        return (int)_tagDATAINFO.ulTotalSize$VH.get(seg);
    }
    public static void ulTotalSize$set( MemorySegment seg, int x) {
        _tagDATAINFO.ulTotalSize$VH.set(seg, x);
    }
    public static int ulTotalSize$get(MemorySegment seg, long index) {
        return (int)_tagDATAINFO.ulTotalSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ulTotalSize$set(MemorySegment seg, long index, int x) {
        _tagDATAINFO.ulTotalSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ulavrPacketSize$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulavrPacketSize"));
    public static VarHandle ulavrPacketSize$VH() {
        return _tagDATAINFO.ulavrPacketSize$VH;
    }
    public static int ulavrPacketSize$get(MemorySegment seg) {
        return (int)_tagDATAINFO.ulavrPacketSize$VH.get(seg);
    }
    public static void ulavrPacketSize$set( MemorySegment seg, int x) {
        _tagDATAINFO.ulavrPacketSize$VH.set(seg, x);
    }
    public static int ulavrPacketSize$get(MemorySegment seg, long index) {
        return (int)_tagDATAINFO.ulavrPacketSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ulavrPacketSize$set(MemorySegment seg, long index, int x) {
        _tagDATAINFO.ulavrPacketSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ulConnectSpeed$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulConnectSpeed"));
    public static VarHandle ulConnectSpeed$VH() {
        return _tagDATAINFO.ulConnectSpeed$VH;
    }
    public static int ulConnectSpeed$get(MemorySegment seg) {
        return (int)_tagDATAINFO.ulConnectSpeed$VH.get(seg);
    }
    public static void ulConnectSpeed$set( MemorySegment seg, int x) {
        _tagDATAINFO.ulConnectSpeed$VH.set(seg, x);
    }
    public static int ulConnectSpeed$get(MemorySegment seg, long index) {
        return (int)_tagDATAINFO.ulConnectSpeed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ulConnectSpeed$set(MemorySegment seg, long index, int x) {
        _tagDATAINFO.ulConnectSpeed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ulProcessorSpeed$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulProcessorSpeed"));
    public static VarHandle ulProcessorSpeed$VH() {
        return _tagDATAINFO.ulProcessorSpeed$VH;
    }
    public static int ulProcessorSpeed$get(MemorySegment seg) {
        return (int)_tagDATAINFO.ulProcessorSpeed$VH.get(seg);
    }
    public static void ulProcessorSpeed$set( MemorySegment seg, int x) {
        _tagDATAINFO.ulProcessorSpeed$VH.set(seg, x);
    }
    public static int ulProcessorSpeed$get(MemorySegment seg, long index) {
        return (int)_tagDATAINFO.ulProcessorSpeed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ulProcessorSpeed$set(MemorySegment seg, long index, int x) {
        _tagDATAINFO.ulProcessorSpeed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


