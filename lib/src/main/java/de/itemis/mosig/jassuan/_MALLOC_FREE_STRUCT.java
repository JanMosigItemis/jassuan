// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _MALLOC_FREE_STRUCT {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("pfnAllocate"),
        C_POINTER.withName("pfnFree")
    ).withName("_MALLOC_FREE_STRUCT");
    public static MemoryLayout $LAYOUT() {
        return _MALLOC_FREE_STRUCT.$struct$LAYOUT;
    }
    static final FunctionDescriptor pfnAllocate$FUNC = FunctionDescriptor.of(C_POINTER,
        C_LONG_LONG
    );
    static final MethodHandle pfnAllocate$MH = RuntimeHelper.downcallHandle(
        "(J)Ljdk/incubator/foreign/MemoryAddress;",
        _MALLOC_FREE_STRUCT.pfnAllocate$FUNC, false
    );
    public interface pfnAllocate {

        jdk.incubator.foreign.MemoryAddress apply(long x0);
        static MemoryAddress allocate(pfnAllocate fi) {
            return RuntimeHelper.upcallStub(pfnAllocate.class, fi, _MALLOC_FREE_STRUCT.pfnAllocate$FUNC, "(J)Ljdk/incubator/foreign/MemoryAddress;");
        }
        static MemoryAddress allocate(pfnAllocate fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(pfnAllocate.class, fi, _MALLOC_FREE_STRUCT.pfnAllocate$FUNC, "(J)Ljdk/incubator/foreign/MemoryAddress;", scope);
        }
        static pfnAllocate ofAddress(MemoryAddress addr) {
            return (long x0) -> {
                try {
                    return (jdk.incubator.foreign.MemoryAddress)_MALLOC_FREE_STRUCT.pfnAllocate$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle pfnAllocate$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnAllocate")));
    public static VarHandle pfnAllocate$VH() {
        return _MALLOC_FREE_STRUCT.pfnAllocate$VH;
    }
    public static MemoryAddress pfnAllocate$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_MALLOC_FREE_STRUCT.pfnAllocate$VH.get(seg);
    }
    public static void pfnAllocate$set( MemorySegment seg, MemoryAddress x) {
        _MALLOC_FREE_STRUCT.pfnAllocate$VH.set(seg, x);
    }
    public static MemoryAddress pfnAllocate$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_MALLOC_FREE_STRUCT.pfnAllocate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnAllocate$set(MemorySegment seg, long index, MemoryAddress x) {
        _MALLOC_FREE_STRUCT.pfnAllocate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static pfnAllocate pfnAllocate (MemorySegment segment) {
        return pfnAllocate.ofAddress(pfnAllocate$get(segment));
    }
    static final FunctionDescriptor pfnFree$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle pfnFree$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        _MALLOC_FREE_STRUCT.pfnFree$FUNC, false
    );
    public interface pfnFree {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(pfnFree fi) {
            return RuntimeHelper.upcallStub(pfnFree.class, fi, _MALLOC_FREE_STRUCT.pfnFree$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        static MemoryAddress allocate(pfnFree fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(pfnFree.class, fi, _MALLOC_FREE_STRUCT.pfnFree$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static pfnFree ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    _MALLOC_FREE_STRUCT.pfnFree$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle pfnFree$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnFree")));
    public static VarHandle pfnFree$VH() {
        return _MALLOC_FREE_STRUCT.pfnFree$VH;
    }
    public static MemoryAddress pfnFree$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_MALLOC_FREE_STRUCT.pfnFree$VH.get(seg);
    }
    public static void pfnFree$set( MemorySegment seg, MemoryAddress x) {
        _MALLOC_FREE_STRUCT.pfnFree$VH.set(seg, x);
    }
    public static MemoryAddress pfnFree$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_MALLOC_FREE_STRUCT.pfnFree$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnFree$set(MemorySegment seg, long index, MemoryAddress x) {
        _MALLOC_FREE_STRUCT.pfnFree$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static pfnFree pfnFree (MemorySegment segment) {
        return pfnFree.ofAddress(pfnFree$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


