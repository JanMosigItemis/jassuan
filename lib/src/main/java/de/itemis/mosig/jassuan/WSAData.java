// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class WSAData {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_SHORT.withName("wVersion"),
        C_SHORT.withName("wHighVersion"),
        C_SHORT.withName("iMaxSockets"),
        C_SHORT.withName("iMaxUdpDg"),
        C_POINTER.withName("lpVendorInfo"),
        MemoryLayout.sequenceLayout(257, C_CHAR).withName("szDescription"),
        MemoryLayout.sequenceLayout(129, C_CHAR).withName("szSystemStatus"),
        MemoryLayout.paddingLayout(48)
    ).withName("WSAData");
    public static MemoryLayout $LAYOUT() {
        return WSAData.$struct$LAYOUT;
    }
    static final VarHandle wVersion$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("wVersion"));
    public static VarHandle wVersion$VH() {
        return WSAData.wVersion$VH;
    }
    public static short wVersion$get(MemorySegment seg) {
        return (short)WSAData.wVersion$VH.get(seg);
    }
    public static void wVersion$set( MemorySegment seg, short x) {
        WSAData.wVersion$VH.set(seg, x);
    }
    public static short wVersion$get(MemorySegment seg, long index) {
        return (short)WSAData.wVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wVersion$set(MemorySegment seg, long index, short x) {
        WSAData.wVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wHighVersion$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("wHighVersion"));
    public static VarHandle wHighVersion$VH() {
        return WSAData.wHighVersion$VH;
    }
    public static short wHighVersion$get(MemorySegment seg) {
        return (short)WSAData.wHighVersion$VH.get(seg);
    }
    public static void wHighVersion$set( MemorySegment seg, short x) {
        WSAData.wHighVersion$VH.set(seg, x);
    }
    public static short wHighVersion$get(MemorySegment seg, long index) {
        return (short)WSAData.wHighVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wHighVersion$set(MemorySegment seg, long index, short x) {
        WSAData.wHighVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iMaxSockets$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("iMaxSockets"));
    public static VarHandle iMaxSockets$VH() {
        return WSAData.iMaxSockets$VH;
    }
    public static short iMaxSockets$get(MemorySegment seg) {
        return (short)WSAData.iMaxSockets$VH.get(seg);
    }
    public static void iMaxSockets$set( MemorySegment seg, short x) {
        WSAData.iMaxSockets$VH.set(seg, x);
    }
    public static short iMaxSockets$get(MemorySegment seg, long index) {
        return (short)WSAData.iMaxSockets$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iMaxSockets$set(MemorySegment seg, long index, short x) {
        WSAData.iMaxSockets$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iMaxUdpDg$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("iMaxUdpDg"));
    public static VarHandle iMaxUdpDg$VH() {
        return WSAData.iMaxUdpDg$VH;
    }
    public static short iMaxUdpDg$get(MemorySegment seg) {
        return (short)WSAData.iMaxUdpDg$VH.get(seg);
    }
    public static void iMaxUdpDg$set( MemorySegment seg, short x) {
        WSAData.iMaxUdpDg$VH.set(seg, x);
    }
    public static short iMaxUdpDg$get(MemorySegment seg, long index) {
        return (short)WSAData.iMaxUdpDg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iMaxUdpDg$set(MemorySegment seg, long index, short x) {
        WSAData.iMaxUdpDg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpVendorInfo$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVendorInfo")));
    public static VarHandle lpVendorInfo$VH() {
        return WSAData.lpVendorInfo$VH;
    }
    public static MemoryAddress lpVendorInfo$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)WSAData.lpVendorInfo$VH.get(seg);
    }
    public static void lpVendorInfo$set( MemorySegment seg, MemoryAddress x) {
        WSAData.lpVendorInfo$VH.set(seg, x);
    }
    public static MemoryAddress lpVendorInfo$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)WSAData.lpVendorInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpVendorInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        WSAData.lpVendorInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment szDescription$slice(MemorySegment seg) {
        return seg.asSlice(16, 257);
    }
    public static MemorySegment szSystemStatus$slice(MemorySegment seg) {
        return seg.asSlice(273, 129);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


