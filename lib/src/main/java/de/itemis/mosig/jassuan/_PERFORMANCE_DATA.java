// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _PERFORMANCE_DATA {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_SHORT.withName("Size"),
        C_CHAR.withName("Version"),
        C_CHAR.withName("HwCountersCount"),
        C_LONG.withName("ContextSwitchCount"),
        C_LONG_LONG.withName("WaitReasonBitMap"),
        C_LONG_LONG.withName("CycleTime"),
        C_LONG.withName("RetryCount"),
        C_LONG.withName("Reserved"),
        MemoryLayout.sequenceLayout(16, MemoryLayout.structLayout(
            C_INT.withName("Type"),
            C_LONG.withName("Reserved"),
            C_LONG_LONG.withName("Value")
        ).withName("_HARDWARE_COUNTER_DATA")).withName("HwCounters")
    ).withName("_PERFORMANCE_DATA");
    public static MemoryLayout $LAYOUT() {
        return _PERFORMANCE_DATA.$struct$LAYOUT;
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _PERFORMANCE_DATA.Size$VH;
    }
    public static short Size$get(MemorySegment seg) {
        return (short)_PERFORMANCE_DATA.Size$VH.get(seg);
    }
    public static void Size$set( MemorySegment seg, short x) {
        _PERFORMANCE_DATA.Size$VH.set(seg, x);
    }
    public static short Size$get(MemorySegment seg, long index) {
        return (short)_PERFORMANCE_DATA.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, short x) {
        _PERFORMANCE_DATA.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _PERFORMANCE_DATA.Version$VH;
    }
    public static byte Version$get(MemorySegment seg) {
        return (byte)_PERFORMANCE_DATA.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, byte x) {
        _PERFORMANCE_DATA.Version$VH.set(seg, x);
    }
    public static byte Version$get(MemorySegment seg, long index) {
        return (byte)_PERFORMANCE_DATA.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, byte x) {
        _PERFORMANCE_DATA.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle HwCountersCount$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("HwCountersCount"));
    public static VarHandle HwCountersCount$VH() {
        return _PERFORMANCE_DATA.HwCountersCount$VH;
    }
    public static byte HwCountersCount$get(MemorySegment seg) {
        return (byte)_PERFORMANCE_DATA.HwCountersCount$VH.get(seg);
    }
    public static void HwCountersCount$set( MemorySegment seg, byte x) {
        _PERFORMANCE_DATA.HwCountersCount$VH.set(seg, x);
    }
    public static byte HwCountersCount$get(MemorySegment seg, long index) {
        return (byte)_PERFORMANCE_DATA.HwCountersCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void HwCountersCount$set(MemorySegment seg, long index, byte x) {
        _PERFORMANCE_DATA.HwCountersCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ContextSwitchCount$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ContextSwitchCount"));
    public static VarHandle ContextSwitchCount$VH() {
        return _PERFORMANCE_DATA.ContextSwitchCount$VH;
    }
    public static int ContextSwitchCount$get(MemorySegment seg) {
        return (int)_PERFORMANCE_DATA.ContextSwitchCount$VH.get(seg);
    }
    public static void ContextSwitchCount$set( MemorySegment seg, int x) {
        _PERFORMANCE_DATA.ContextSwitchCount$VH.set(seg, x);
    }
    public static int ContextSwitchCount$get(MemorySegment seg, long index) {
        return (int)_PERFORMANCE_DATA.ContextSwitchCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ContextSwitchCount$set(MemorySegment seg, long index, int x) {
        _PERFORMANCE_DATA.ContextSwitchCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle WaitReasonBitMap$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("WaitReasonBitMap"));
    public static VarHandle WaitReasonBitMap$VH() {
        return _PERFORMANCE_DATA.WaitReasonBitMap$VH;
    }
    public static long WaitReasonBitMap$get(MemorySegment seg) {
        return (long)_PERFORMANCE_DATA.WaitReasonBitMap$VH.get(seg);
    }
    public static void WaitReasonBitMap$set( MemorySegment seg, long x) {
        _PERFORMANCE_DATA.WaitReasonBitMap$VH.set(seg, x);
    }
    public static long WaitReasonBitMap$get(MemorySegment seg, long index) {
        return (long)_PERFORMANCE_DATA.WaitReasonBitMap$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void WaitReasonBitMap$set(MemorySegment seg, long index, long x) {
        _PERFORMANCE_DATA.WaitReasonBitMap$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CycleTime$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("CycleTime"));
    public static VarHandle CycleTime$VH() {
        return _PERFORMANCE_DATA.CycleTime$VH;
    }
    public static long CycleTime$get(MemorySegment seg) {
        return (long)_PERFORMANCE_DATA.CycleTime$VH.get(seg);
    }
    public static void CycleTime$set( MemorySegment seg, long x) {
        _PERFORMANCE_DATA.CycleTime$VH.set(seg, x);
    }
    public static long CycleTime$get(MemorySegment seg, long index) {
        return (long)_PERFORMANCE_DATA.CycleTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CycleTime$set(MemorySegment seg, long index, long x) {
        _PERFORMANCE_DATA.CycleTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RetryCount$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("RetryCount"));
    public static VarHandle RetryCount$VH() {
        return _PERFORMANCE_DATA.RetryCount$VH;
    }
    public static int RetryCount$get(MemorySegment seg) {
        return (int)_PERFORMANCE_DATA.RetryCount$VH.get(seg);
    }
    public static void RetryCount$set( MemorySegment seg, int x) {
        _PERFORMANCE_DATA.RetryCount$VH.set(seg, x);
    }
    public static int RetryCount$get(MemorySegment seg, long index) {
        return (int)_PERFORMANCE_DATA.RetryCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RetryCount$set(MemorySegment seg, long index, int x) {
        _PERFORMANCE_DATA.RetryCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Reserved$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    public static VarHandle Reserved$VH() {
        return _PERFORMANCE_DATA.Reserved$VH;
    }
    public static int Reserved$get(MemorySegment seg) {
        return (int)_PERFORMANCE_DATA.Reserved$VH.get(seg);
    }
    public static void Reserved$set( MemorySegment seg, int x) {
        _PERFORMANCE_DATA.Reserved$VH.set(seg, x);
    }
    public static int Reserved$get(MemorySegment seg, long index) {
        return (int)_PERFORMANCE_DATA.Reserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved$set(MemorySegment seg, long index, int x) {
        _PERFORMANCE_DATA.Reserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment HwCounters$slice(MemorySegment seg) {
        return seg.asSlice(32, 256);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


