// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _IMAGE_ROM_HEADERS {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            C_SHORT.withName("Machine"),
            C_SHORT.withName("NumberOfSections"),
            C_LONG.withName("TimeDateStamp"),
            C_LONG.withName("PointerToSymbolTable"),
            C_LONG.withName("NumberOfSymbols"),
            C_SHORT.withName("SizeOfOptionalHeader"),
            C_SHORT.withName("Characteristics")
        ).withName("FileHeader"),
        MemoryLayout.structLayout(
            C_SHORT.withName("Magic"),
            C_CHAR.withName("MajorLinkerVersion"),
            C_CHAR.withName("MinorLinkerVersion"),
            C_LONG.withName("SizeOfCode"),
            C_LONG.withName("SizeOfInitializedData"),
            C_LONG.withName("SizeOfUninitializedData"),
            C_LONG.withName("AddressOfEntryPoint"),
            C_LONG.withName("BaseOfCode"),
            C_LONG.withName("BaseOfData"),
            C_LONG.withName("BaseOfBss"),
            C_LONG.withName("GprMask"),
            MemoryLayout.sequenceLayout(4, C_LONG).withName("CprMask"),
            C_LONG.withName("GpValue")
        ).withName("OptionalHeader")
    ).withName("_IMAGE_ROM_HEADERS");
    public static MemoryLayout $LAYOUT() {
        return _IMAGE_ROM_HEADERS.$struct$LAYOUT;
    }
    public static MemorySegment FileHeader$slice(MemorySegment seg) {
        return seg.asSlice(0, 20);
    }
    public static MemorySegment OptionalHeader$slice(MemorySegment seg) {
        return seg.asSlice(20, 56);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


