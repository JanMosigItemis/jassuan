// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IXMLDocumentVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetTypeInfoCount"),
        C_POINTER.withName("GetTypeInfo"),
        C_POINTER.withName("GetIDsOfNames"),
        C_POINTER.withName("Invoke"),
        C_POINTER.withName("get_root"),
        C_POINTER.withName("get_fileSize"),
        C_POINTER.withName("get_fileModifiedDate"),
        C_POINTER.withName("get_fileUpdatedDate"),
        C_POINTER.withName("get_URL"),
        C_POINTER.withName("put_URL"),
        C_POINTER.withName("get_mimeType"),
        C_POINTER.withName("get_readyState"),
        C_POINTER.withName("get_charset"),
        C_POINTER.withName("put_charset"),
        C_POINTER.withName("get_version"),
        C_POINTER.withName("get_doctype"),
        C_POINTER.withName("get_dtdURL"),
        C_POINTER.withName("createElement")
    ).withName("IXMLDocumentVtbl");
    public static MemoryLayout $LAYOUT() {
        return IXMLDocumentVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDocumentVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IXMLDocumentVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IXMLDocumentVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IXMLDocumentVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IXMLDocumentVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocumentVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocumentVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDocumentVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IXMLDocumentVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IXMLDocumentVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IXMLDocumentVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IXMLDocumentVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocumentVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocumentVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDocumentVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IXMLDocumentVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IXMLDocumentVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IXMLDocumentVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IXMLDocumentVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocumentVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocumentVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor GetTypeInfoCount$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetTypeInfoCount$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDocumentVtbl.GetTypeInfoCount$FUNC, false
    );
    public interface GetTypeInfoCount {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetTypeInfoCount fi) {
            return RuntimeHelper.upcallStub(GetTypeInfoCount.class, fi, IXMLDocumentVtbl.GetTypeInfoCount$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetTypeInfoCount fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetTypeInfoCount.class, fi, IXMLDocumentVtbl.GetTypeInfoCount$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetTypeInfoCount ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDocumentVtbl.GetTypeInfoCount$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoCount$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfoCount")));
    public static VarHandle GetTypeInfoCount$VH() {
        return IXMLDocumentVtbl.GetTypeInfoCount$VH;
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.GetTypeInfoCount$VH.get(seg);
    }
    public static void GetTypeInfoCount$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocumentVtbl.GetTypeInfoCount$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.GetTypeInfoCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocumentVtbl.GetTypeInfoCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount (MemorySegment segment) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment));
    }
    static final FunctionDescriptor GetTypeInfo$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle GetTypeInfo$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        IXMLDocumentVtbl.GetTypeInfo$FUNC, false
    );
    public interface GetTypeInfo {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(GetTypeInfo fi) {
            return RuntimeHelper.upcallStub(GetTypeInfo.class, fi, IXMLDocumentVtbl.GetTypeInfo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetTypeInfo fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetTypeInfo.class, fi, IXMLDocumentVtbl.GetTypeInfo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetTypeInfo ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)IXMLDocumentVtbl.GetTypeInfo$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfo$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfo")));
    public static VarHandle GetTypeInfo$VH() {
        return IXMLDocumentVtbl.GetTypeInfo$VH;
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.GetTypeInfo$VH.get(seg);
    }
    public static void GetTypeInfo$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocumentVtbl.GetTypeInfo$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.GetTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocumentVtbl.GetTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo (MemorySegment segment) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment));
    }
    static final FunctionDescriptor GetIDsOfNames$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle GetIDsOfNames$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        IXMLDocumentVtbl.GetIDsOfNames$FUNC, false
    );
    public interface GetIDsOfNames {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, int x4, jdk.incubator.foreign.MemoryAddress x5);
        static MemoryAddress allocate(GetIDsOfNames fi) {
            return RuntimeHelper.upcallStub(GetIDsOfNames.class, fi, IXMLDocumentVtbl.GetIDsOfNames$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetIDsOfNames fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetIDsOfNames.class, fi, IXMLDocumentVtbl.GetIDsOfNames$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetIDsOfNames ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, int x4, jdk.incubator.foreign.MemoryAddress x5) -> {
                try {
                    return (int)IXMLDocumentVtbl.GetIDsOfNames$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetIDsOfNames$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetIDsOfNames")));
    public static VarHandle GetIDsOfNames$VH() {
        return IXMLDocumentVtbl.GetIDsOfNames$VH;
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.GetIDsOfNames$VH.get(seg);
    }
    public static void GetIDsOfNames$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocumentVtbl.GetIDsOfNames$VH.set(seg, x);
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.GetIDsOfNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocumentVtbl.GetIDsOfNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames (MemorySegment segment) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment));
    }
    static final FunctionDescriptor Invoke$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_SHORT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle Invoke$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ISLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDocumentVtbl.Invoke$FUNC, false
    );
    public interface Invoke {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3, short x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8);
        static MemoryAddress allocate(Invoke fi) {
            return RuntimeHelper.upcallStub(Invoke.class, fi, IXMLDocumentVtbl.Invoke$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ISLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Invoke fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Invoke.class, fi, IXMLDocumentVtbl.Invoke$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ISLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Invoke ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3, short x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8) -> {
                try {
                    return (int)IXMLDocumentVtbl.Invoke$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6, x7, x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Invoke$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Invoke")));
    public static VarHandle Invoke$VH() {
        return IXMLDocumentVtbl.Invoke$VH;
    }
    public static MemoryAddress Invoke$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.Invoke$VH.get(seg);
    }
    public static void Invoke$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocumentVtbl.Invoke$VH.set(seg, x);
    }
    public static MemoryAddress Invoke$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.Invoke$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocumentVtbl.Invoke$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke (MemorySegment segment) {
        return Invoke.ofAddress(Invoke$get(segment));
    }
    static final FunctionDescriptor get_root$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_root$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDocumentVtbl.get_root$FUNC, false
    );
    public interface get_root {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_root fi) {
            return RuntimeHelper.upcallStub(get_root.class, fi, IXMLDocumentVtbl.get_root$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_root fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_root.class, fi, IXMLDocumentVtbl.get_root$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_root ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDocumentVtbl.get_root$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_root$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_root")));
    public static VarHandle get_root$VH() {
        return IXMLDocumentVtbl.get_root$VH;
    }
    public static MemoryAddress get_root$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.get_root$VH.get(seg);
    }
    public static void get_root$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocumentVtbl.get_root$VH.set(seg, x);
    }
    public static MemoryAddress get_root$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.get_root$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_root$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocumentVtbl.get_root$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_root get_root (MemorySegment segment) {
        return get_root.ofAddress(get_root$get(segment));
    }
    static final FunctionDescriptor get_fileSize$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_fileSize$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDocumentVtbl.get_fileSize$FUNC, false
    );
    public interface get_fileSize {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_fileSize fi) {
            return RuntimeHelper.upcallStub(get_fileSize.class, fi, IXMLDocumentVtbl.get_fileSize$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_fileSize fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_fileSize.class, fi, IXMLDocumentVtbl.get_fileSize$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_fileSize ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDocumentVtbl.get_fileSize$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_fileSize$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_fileSize")));
    public static VarHandle get_fileSize$VH() {
        return IXMLDocumentVtbl.get_fileSize$VH;
    }
    public static MemoryAddress get_fileSize$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.get_fileSize$VH.get(seg);
    }
    public static void get_fileSize$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocumentVtbl.get_fileSize$VH.set(seg, x);
    }
    public static MemoryAddress get_fileSize$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.get_fileSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_fileSize$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocumentVtbl.get_fileSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_fileSize get_fileSize (MemorySegment segment) {
        return get_fileSize.ofAddress(get_fileSize$get(segment));
    }
    static final FunctionDescriptor get_fileModifiedDate$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_fileModifiedDate$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDocumentVtbl.get_fileModifiedDate$FUNC, false
    );
    public interface get_fileModifiedDate {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_fileModifiedDate fi) {
            return RuntimeHelper.upcallStub(get_fileModifiedDate.class, fi, IXMLDocumentVtbl.get_fileModifiedDate$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_fileModifiedDate fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_fileModifiedDate.class, fi, IXMLDocumentVtbl.get_fileModifiedDate$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_fileModifiedDate ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDocumentVtbl.get_fileModifiedDate$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_fileModifiedDate$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_fileModifiedDate")));
    public static VarHandle get_fileModifiedDate$VH() {
        return IXMLDocumentVtbl.get_fileModifiedDate$VH;
    }
    public static MemoryAddress get_fileModifiedDate$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.get_fileModifiedDate$VH.get(seg);
    }
    public static void get_fileModifiedDate$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocumentVtbl.get_fileModifiedDate$VH.set(seg, x);
    }
    public static MemoryAddress get_fileModifiedDate$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.get_fileModifiedDate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_fileModifiedDate$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocumentVtbl.get_fileModifiedDate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_fileModifiedDate get_fileModifiedDate (MemorySegment segment) {
        return get_fileModifiedDate.ofAddress(get_fileModifiedDate$get(segment));
    }
    static final FunctionDescriptor get_fileUpdatedDate$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_fileUpdatedDate$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDocumentVtbl.get_fileUpdatedDate$FUNC, false
    );
    public interface get_fileUpdatedDate {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_fileUpdatedDate fi) {
            return RuntimeHelper.upcallStub(get_fileUpdatedDate.class, fi, IXMLDocumentVtbl.get_fileUpdatedDate$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_fileUpdatedDate fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_fileUpdatedDate.class, fi, IXMLDocumentVtbl.get_fileUpdatedDate$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_fileUpdatedDate ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDocumentVtbl.get_fileUpdatedDate$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_fileUpdatedDate$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_fileUpdatedDate")));
    public static VarHandle get_fileUpdatedDate$VH() {
        return IXMLDocumentVtbl.get_fileUpdatedDate$VH;
    }
    public static MemoryAddress get_fileUpdatedDate$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.get_fileUpdatedDate$VH.get(seg);
    }
    public static void get_fileUpdatedDate$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocumentVtbl.get_fileUpdatedDate$VH.set(seg, x);
    }
    public static MemoryAddress get_fileUpdatedDate$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.get_fileUpdatedDate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_fileUpdatedDate$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocumentVtbl.get_fileUpdatedDate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_fileUpdatedDate get_fileUpdatedDate (MemorySegment segment) {
        return get_fileUpdatedDate.ofAddress(get_fileUpdatedDate$get(segment));
    }
    static final FunctionDescriptor get_URL$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_URL$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDocumentVtbl.get_URL$FUNC, false
    );
    public interface get_URL {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_URL fi) {
            return RuntimeHelper.upcallStub(get_URL.class, fi, IXMLDocumentVtbl.get_URL$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_URL fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_URL.class, fi, IXMLDocumentVtbl.get_URL$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_URL ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDocumentVtbl.get_URL$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_URL$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_URL")));
    public static VarHandle get_URL$VH() {
        return IXMLDocumentVtbl.get_URL$VH;
    }
    public static MemoryAddress get_URL$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.get_URL$VH.get(seg);
    }
    public static void get_URL$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocumentVtbl.get_URL$VH.set(seg, x);
    }
    public static MemoryAddress get_URL$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.get_URL$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_URL$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocumentVtbl.get_URL$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_URL get_URL (MemorySegment segment) {
        return get_URL.ofAddress(get_URL$get(segment));
    }
    static final FunctionDescriptor put_URL$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle put_URL$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDocumentVtbl.put_URL$FUNC, false
    );
    public interface put_URL {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(put_URL fi) {
            return RuntimeHelper.upcallStub(put_URL.class, fi, IXMLDocumentVtbl.put_URL$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(put_URL fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(put_URL.class, fi, IXMLDocumentVtbl.put_URL$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static put_URL ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDocumentVtbl.put_URL$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_URL$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("put_URL")));
    public static VarHandle put_URL$VH() {
        return IXMLDocumentVtbl.put_URL$VH;
    }
    public static MemoryAddress put_URL$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.put_URL$VH.get(seg);
    }
    public static void put_URL$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocumentVtbl.put_URL$VH.set(seg, x);
    }
    public static MemoryAddress put_URL$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.put_URL$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_URL$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocumentVtbl.put_URL$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_URL put_URL (MemorySegment segment) {
        return put_URL.ofAddress(put_URL$get(segment));
    }
    static final FunctionDescriptor get_mimeType$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_mimeType$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDocumentVtbl.get_mimeType$FUNC, false
    );
    public interface get_mimeType {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_mimeType fi) {
            return RuntimeHelper.upcallStub(get_mimeType.class, fi, IXMLDocumentVtbl.get_mimeType$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_mimeType fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_mimeType.class, fi, IXMLDocumentVtbl.get_mimeType$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_mimeType ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDocumentVtbl.get_mimeType$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_mimeType$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_mimeType")));
    public static VarHandle get_mimeType$VH() {
        return IXMLDocumentVtbl.get_mimeType$VH;
    }
    public static MemoryAddress get_mimeType$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.get_mimeType$VH.get(seg);
    }
    public static void get_mimeType$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocumentVtbl.get_mimeType$VH.set(seg, x);
    }
    public static MemoryAddress get_mimeType$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.get_mimeType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_mimeType$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocumentVtbl.get_mimeType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_mimeType get_mimeType (MemorySegment segment) {
        return get_mimeType.ofAddress(get_mimeType$get(segment));
    }
    static final FunctionDescriptor get_readyState$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_readyState$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDocumentVtbl.get_readyState$FUNC, false
    );
    public interface get_readyState {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_readyState fi) {
            return RuntimeHelper.upcallStub(get_readyState.class, fi, IXMLDocumentVtbl.get_readyState$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_readyState fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_readyState.class, fi, IXMLDocumentVtbl.get_readyState$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_readyState ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDocumentVtbl.get_readyState$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_readyState$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_readyState")));
    public static VarHandle get_readyState$VH() {
        return IXMLDocumentVtbl.get_readyState$VH;
    }
    public static MemoryAddress get_readyState$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.get_readyState$VH.get(seg);
    }
    public static void get_readyState$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocumentVtbl.get_readyState$VH.set(seg, x);
    }
    public static MemoryAddress get_readyState$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.get_readyState$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_readyState$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocumentVtbl.get_readyState$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_readyState get_readyState (MemorySegment segment) {
        return get_readyState.ofAddress(get_readyState$get(segment));
    }
    static final FunctionDescriptor get_charset$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_charset$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDocumentVtbl.get_charset$FUNC, false
    );
    public interface get_charset {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_charset fi) {
            return RuntimeHelper.upcallStub(get_charset.class, fi, IXMLDocumentVtbl.get_charset$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_charset fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_charset.class, fi, IXMLDocumentVtbl.get_charset$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_charset ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDocumentVtbl.get_charset$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_charset$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_charset")));
    public static VarHandle get_charset$VH() {
        return IXMLDocumentVtbl.get_charset$VH;
    }
    public static MemoryAddress get_charset$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.get_charset$VH.get(seg);
    }
    public static void get_charset$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocumentVtbl.get_charset$VH.set(seg, x);
    }
    public static MemoryAddress get_charset$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.get_charset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_charset$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocumentVtbl.get_charset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_charset get_charset (MemorySegment segment) {
        return get_charset.ofAddress(get_charset$get(segment));
    }
    static final FunctionDescriptor put_charset$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle put_charset$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDocumentVtbl.put_charset$FUNC, false
    );
    public interface put_charset {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(put_charset fi) {
            return RuntimeHelper.upcallStub(put_charset.class, fi, IXMLDocumentVtbl.put_charset$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(put_charset fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(put_charset.class, fi, IXMLDocumentVtbl.put_charset$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static put_charset ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDocumentVtbl.put_charset$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_charset$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("put_charset")));
    public static VarHandle put_charset$VH() {
        return IXMLDocumentVtbl.put_charset$VH;
    }
    public static MemoryAddress put_charset$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.put_charset$VH.get(seg);
    }
    public static void put_charset$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocumentVtbl.put_charset$VH.set(seg, x);
    }
    public static MemoryAddress put_charset$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.put_charset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_charset$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocumentVtbl.put_charset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_charset put_charset (MemorySegment segment) {
        return put_charset.ofAddress(put_charset$get(segment));
    }
    static final FunctionDescriptor get_version$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_version$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDocumentVtbl.get_version$FUNC, false
    );
    public interface get_version {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_version fi) {
            return RuntimeHelper.upcallStub(get_version.class, fi, IXMLDocumentVtbl.get_version$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_version fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_version.class, fi, IXMLDocumentVtbl.get_version$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_version ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDocumentVtbl.get_version$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_version$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_version")));
    public static VarHandle get_version$VH() {
        return IXMLDocumentVtbl.get_version$VH;
    }
    public static MemoryAddress get_version$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.get_version$VH.get(seg);
    }
    public static void get_version$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocumentVtbl.get_version$VH.set(seg, x);
    }
    public static MemoryAddress get_version$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.get_version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_version$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocumentVtbl.get_version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_version get_version (MemorySegment segment) {
        return get_version.ofAddress(get_version$get(segment));
    }
    static final FunctionDescriptor get_doctype$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_doctype$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDocumentVtbl.get_doctype$FUNC, false
    );
    public interface get_doctype {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_doctype fi) {
            return RuntimeHelper.upcallStub(get_doctype.class, fi, IXMLDocumentVtbl.get_doctype$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_doctype fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_doctype.class, fi, IXMLDocumentVtbl.get_doctype$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_doctype ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDocumentVtbl.get_doctype$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_doctype$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_doctype")));
    public static VarHandle get_doctype$VH() {
        return IXMLDocumentVtbl.get_doctype$VH;
    }
    public static MemoryAddress get_doctype$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.get_doctype$VH.get(seg);
    }
    public static void get_doctype$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocumentVtbl.get_doctype$VH.set(seg, x);
    }
    public static MemoryAddress get_doctype$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.get_doctype$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_doctype$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocumentVtbl.get_doctype$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_doctype get_doctype (MemorySegment segment) {
        return get_doctype.ofAddress(get_doctype$get(segment));
    }
    static final FunctionDescriptor get_dtdURL$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_dtdURL$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDocumentVtbl.get_dtdURL$FUNC, false
    );
    public interface get_dtdURL {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_dtdURL fi) {
            return RuntimeHelper.upcallStub(get_dtdURL.class, fi, IXMLDocumentVtbl.get_dtdURL$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_dtdURL fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_dtdURL.class, fi, IXMLDocumentVtbl.get_dtdURL$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_dtdURL ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDocumentVtbl.get_dtdURL$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_dtdURL$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_dtdURL")));
    public static VarHandle get_dtdURL$VH() {
        return IXMLDocumentVtbl.get_dtdURL$VH;
    }
    public static MemoryAddress get_dtdURL$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.get_dtdURL$VH.get(seg);
    }
    public static void get_dtdURL$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocumentVtbl.get_dtdURL$VH.set(seg, x);
    }
    public static MemoryAddress get_dtdURL$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.get_dtdURL$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_dtdURL$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocumentVtbl.get_dtdURL$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_dtdURL get_dtdURL (MemorySegment segment) {
        return get_dtdURL.ofAddress(get_dtdURL$get(segment));
    }
    static final FunctionDescriptor createElement$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    C_SHORT.withName("vt"),
                    C_SHORT.withName("wReserved1"),
                    C_SHORT.withName("wReserved2"),
                    C_SHORT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        C_LONG_LONG.withName("llVal"),
                        C_LONG.withName("lVal"),
                        C_CHAR.withName("bVal"),
                        C_SHORT.withName("iVal"),
                        C_FLOAT.withName("fltVal"),
                        C_DOUBLE.withName("dblVal"),
                        C_SHORT.withName("boolVal"),
                        C_LONG.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                C_LONG.withName("Lo"),
                                C_LONG.withName("Hi")
                            ).withName("$anon$0"),
                            C_LONG_LONG.withName("int64")
                        ).withName("cyVal"),
                        C_DOUBLE.withName("date"),
                        C_POINTER.withName("bstrVal"),
                        C_POINTER.withName("punkVal"),
                        C_POINTER.withName("pdispVal"),
                        C_POINTER.withName("parray"),
                        C_POINTER.withName("pbVal"),
                        C_POINTER.withName("piVal"),
                        C_POINTER.withName("plVal"),
                        C_POINTER.withName("pllVal"),
                        C_POINTER.withName("pfltVal"),
                        C_POINTER.withName("pdblVal"),
                        C_POINTER.withName("pboolVal"),
                        C_POINTER.withName("pscode"),
                        C_POINTER.withName("pcyVal"),
                        C_POINTER.withName("pdate"),
                        C_POINTER.withName("pbstrVal"),
                        C_POINTER.withName("ppunkVal"),
                        C_POINTER.withName("ppdispVal"),
                        C_POINTER.withName("pparray"),
                        C_POINTER.withName("pvarVal"),
                        C_POINTER.withName("byref"),
                        C_CHAR.withName("cVal"),
                        C_SHORT.withName("uiVal"),
                        C_LONG.withName("ulVal"),
                        C_LONG_LONG.withName("ullVal"),
                        C_INT.withName("intVal"),
                        C_INT.withName("uintVal"),
                        C_POINTER.withName("pdecVal"),
                        C_POINTER.withName("pcVal"),
                        C_POINTER.withName("puiVal"),
                        C_POINTER.withName("pulVal"),
                        C_POINTER.withName("pullVal"),
                        C_POINTER.withName("pintVal"),
                        C_POINTER.withName("puintVal"),
                        MemoryLayout.structLayout(
                            C_POINTER.withName("pvRecord"),
                            C_POINTER.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    C_SHORT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_CHAR.withName("scale"),
                            C_CHAR.withName("sign")
                        ).withName("$anon$0"),
                        C_SHORT.withName("signscale")
                    ).withName("$anon$0"),
                    C_LONG.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_LONG.withName("Lo32"),
                            C_LONG.withName("Mid32")
                        ).withName("$anon$0"),
                        C_LONG_LONG.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT"),
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    C_SHORT.withName("vt"),
                    C_SHORT.withName("wReserved1"),
                    C_SHORT.withName("wReserved2"),
                    C_SHORT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        C_LONG_LONG.withName("llVal"),
                        C_LONG.withName("lVal"),
                        C_CHAR.withName("bVal"),
                        C_SHORT.withName("iVal"),
                        C_FLOAT.withName("fltVal"),
                        C_DOUBLE.withName("dblVal"),
                        C_SHORT.withName("boolVal"),
                        C_LONG.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                C_LONG.withName("Lo"),
                                C_LONG.withName("Hi")
                            ).withName("$anon$0"),
                            C_LONG_LONG.withName("int64")
                        ).withName("cyVal"),
                        C_DOUBLE.withName("date"),
                        C_POINTER.withName("bstrVal"),
                        C_POINTER.withName("punkVal"),
                        C_POINTER.withName("pdispVal"),
                        C_POINTER.withName("parray"),
                        C_POINTER.withName("pbVal"),
                        C_POINTER.withName("piVal"),
                        C_POINTER.withName("plVal"),
                        C_POINTER.withName("pllVal"),
                        C_POINTER.withName("pfltVal"),
                        C_POINTER.withName("pdblVal"),
                        C_POINTER.withName("pboolVal"),
                        C_POINTER.withName("pscode"),
                        C_POINTER.withName("pcyVal"),
                        C_POINTER.withName("pdate"),
                        C_POINTER.withName("pbstrVal"),
                        C_POINTER.withName("ppunkVal"),
                        C_POINTER.withName("ppdispVal"),
                        C_POINTER.withName("pparray"),
                        C_POINTER.withName("pvarVal"),
                        C_POINTER.withName("byref"),
                        C_CHAR.withName("cVal"),
                        C_SHORT.withName("uiVal"),
                        C_LONG.withName("ulVal"),
                        C_LONG_LONG.withName("ullVal"),
                        C_INT.withName("intVal"),
                        C_INT.withName("uintVal"),
                        C_POINTER.withName("pdecVal"),
                        C_POINTER.withName("pcVal"),
                        C_POINTER.withName("puiVal"),
                        C_POINTER.withName("pulVal"),
                        C_POINTER.withName("pullVal"),
                        C_POINTER.withName("pintVal"),
                        C_POINTER.withName("puintVal"),
                        MemoryLayout.structLayout(
                            C_POINTER.withName("pvRecord"),
                            C_POINTER.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    C_SHORT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_CHAR.withName("scale"),
                            C_CHAR.withName("sign")
                        ).withName("$anon$0"),
                        C_SHORT.withName("signscale")
                    ).withName("$anon$0"),
                    C_LONG.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_LONG.withName("Lo32"),
                            C_LONG.withName("Mid32")
                        ).withName("$anon$0"),
                        C_LONG_LONG.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT"),
        C_POINTER
    );
    static final MethodHandle createElement$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDocumentVtbl.createElement$FUNC, false
    );
    public interface createElement {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemorySegment x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(createElement fi) {
            return RuntimeHelper.upcallStub(createElement.class, fi, IXMLDocumentVtbl.createElement$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(createElement fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(createElement.class, fi, IXMLDocumentVtbl.createElement$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static createElement ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemorySegment x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)IXMLDocumentVtbl.createElement$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle createElement$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("createElement")));
    public static VarHandle createElement$VH() {
        return IXMLDocumentVtbl.createElement$VH;
    }
    public static MemoryAddress createElement$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.createElement$VH.get(seg);
    }
    public static void createElement$set( MemorySegment seg, MemoryAddress x) {
        IXMLDocumentVtbl.createElement$VH.set(seg, x);
    }
    public static MemoryAddress createElement$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDocumentVtbl.createElement$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void createElement$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDocumentVtbl.createElement$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static createElement createElement (MemorySegment segment) {
        return createElement.ofAddress(createElement$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


