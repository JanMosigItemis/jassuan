// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
 class assuan_h_17 extends assuan_h_16 {

    public static int SIID_RECYCLERFULL() {
        return (int)32L;
    }
    public static int SIID_MEDIACDAUDIO() {
        return (int)40L;
    }
    public static int SIID_LOCK() {
        return (int)47L;
    }
    public static int SIID_AUTOLIST() {
        return (int)49L;
    }
    public static int SIID_PRINTERNET() {
        return (int)50L;
    }
    public static int SIID_SERVERSHARE() {
        return (int)51L;
    }
    public static int SIID_PRINTERFAX() {
        return (int)52L;
    }
    public static int SIID_PRINTERFAXNET() {
        return (int)53L;
    }
    public static int SIID_PRINTERFILE() {
        return (int)54L;
    }
    public static int SIID_STACK() {
        return (int)55L;
    }
    public static int SIID_MEDIASVCD() {
        return (int)56L;
    }
    public static int SIID_STUFFEDFOLDER() {
        return (int)57L;
    }
    public static int SIID_DRIVEUNKNOWN() {
        return (int)58L;
    }
    public static int SIID_DRIVEDVD() {
        return (int)59L;
    }
    public static int SIID_MEDIADVD() {
        return (int)60L;
    }
    public static int SIID_MEDIADVDRAM() {
        return (int)61L;
    }
    public static int SIID_MEDIADVDRW() {
        return (int)62L;
    }
    public static int SIID_MEDIADVDR() {
        return (int)63L;
    }
    public static int SIID_MEDIADVDROM() {
        return (int)64L;
    }
    public static int SIID_MEDIACDAUDIOPLUS() {
        return (int)65L;
    }
    public static int SIID_MEDIACDRW() {
        return (int)66L;
    }
    public static int SIID_MEDIACDR() {
        return (int)67L;
    }
    public static int SIID_MEDIACDBURN() {
        return (int)68L;
    }
    public static int SIID_MEDIABLANKCD() {
        return (int)69L;
    }
    public static int SIID_MEDIACDROM() {
        return (int)70L;
    }
    public static int SIID_AUDIOFILES() {
        return (int)71L;
    }
    public static int SIID_IMAGEFILES() {
        return (int)72L;
    }
    public static int SIID_VIDEOFILES() {
        return (int)73L;
    }
    public static int SIID_MIXEDFILES() {
        return (int)74L;
    }
    public static int SIID_FOLDERBACK() {
        return (int)75L;
    }
    public static int SIID_FOLDERFRONT() {
        return (int)76L;
    }
    public static int SIID_SHIELD() {
        return (int)77L;
    }
    public static int SIID_WARNING() {
        return (int)78L;
    }
    public static int SIID_INFO() {
        return (int)79L;
    }
    public static int SIID_ERROR() {
        return (int)80L;
    }
    public static int SIID_KEY() {
        return (int)81L;
    }
    public static int SIID_SOFTWARE() {
        return (int)82L;
    }
    public static int SIID_RENAME() {
        return (int)83L;
    }
    public static int SIID_DELETE() {
        return (int)84L;
    }
    public static int SIID_MEDIAAUDIODVD() {
        return (int)85L;
    }
    public static int SIID_MEDIAMOVIEDVD() {
        return (int)86L;
    }
    public static int SIID_MEDIAENHANCEDCD() {
        return (int)87L;
    }
    public static int SIID_MEDIAENHANCEDDVD() {
        return (int)88L;
    }
    public static int SIID_MEDIAHDDVD() {
        return (int)89L;
    }
    public static int SIID_MEDIABLURAY() {
        return (int)90L;
    }
    public static int SIID_MEDIAVCD() {
        return (int)91L;
    }
    public static int SIID_MEDIADVDPLUSR() {
        return (int)92L;
    }
    public static int SIID_MEDIADVDPLUSRW() {
        return (int)93L;
    }
    public static int SIID_DESKTOPPC() {
        return (int)94L;
    }
    public static int SIID_MOBILEPC() {
        return (int)95L;
    }
    public static int SIID_USERS() {
        return (int)96L;
    }
    public static int SIID_MEDIASMARTMEDIA() {
        return (int)97L;
    }
    public static int SIID_MEDIACOMPACTFLASH() {
        return (int)98L;
    }
    public static int SIID_DEVICECELLPHONE() {
        return (int)99L;
    }
    public static int SIID_DEVICECAMERA() {
        return (int)100L;
    }
    public static int SIID_DEVICEVIDEOCAMERA() {
        return (int)101L;
    }
    public static int SIID_DEVICEAUDIOPLAYER() {
        return (int)102L;
    }
    public static int SIID_NETWORKCONNECT() {
        return (int)103L;
    }
    public static int SIID_INTERNET() {
        return (int)104L;
    }
    public static int SIID_ZIPFILE() {
        return (int)105L;
    }
    public static int SIID_SETTINGS() {
        return (int)106L;
    }
    public static int SIID_DRIVEHDDVD() {
        return (int)132L;
    }
    public static int SIID_DRIVEBD() {
        return (int)133L;
    }
    public static int SIID_MEDIAHDDVDROM() {
        return (int)134L;
    }
    public static int SIID_MEDIAHDDVDR() {
        return (int)135L;
    }
    public static int SIID_MEDIAHDDVDRAM() {
        return (int)136L;
    }
    public static int SIID_MEDIABDROM() {
        return (int)137L;
    }
    public static int SIID_MEDIABDR() {
        return (int)138L;
    }
    public static int SIID_MEDIABDRE() {
        return (int)139L;
    }
    public static int SIID_CLUSTEREDDRIVE() {
        return (int)140L;
    }
    public static int SIID_MAX_ICONS() {
        return (int)175L;
    }
    public static MethodHandle SHGetStockIconInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$835.SHGetStockIconInfo$MH,"SHGetStockIconInfo");
    }
    public static int SHGetStockIconInfo ( int siid,  int uFlags,  Addressable psii) {
        var mh$ = RuntimeHelper.requireNonNull(constants$835.SHGetStockIconInfo$MH, "SHGetStockIconInfo");
        try {
            return (int)mh$.invokeExact(siid, uFlags, psii.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetDiskFreeSpaceExA$MH() {
        return RuntimeHelper.requireNonNull(constants$835.SHGetDiskFreeSpaceExA$MH,"SHGetDiskFreeSpaceExA");
    }
    public static int SHGetDiskFreeSpaceExA ( Addressable pszDirectoryName,  Addressable pulFreeBytesAvailableToCaller,  Addressable pulTotalNumberOfBytes,  Addressable pulTotalNumberOfFreeBytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$835.SHGetDiskFreeSpaceExA$MH, "SHGetDiskFreeSpaceExA");
        try {
            return (int)mh$.invokeExact(pszDirectoryName.address(), pulFreeBytesAvailableToCaller.address(), pulTotalNumberOfBytes.address(), pulTotalNumberOfFreeBytes.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetDiskFreeSpaceExW$MH() {
        return RuntimeHelper.requireNonNull(constants$835.SHGetDiskFreeSpaceExW$MH,"SHGetDiskFreeSpaceExW");
    }
    public static int SHGetDiskFreeSpaceExW ( Addressable pszDirectoryName,  Addressable pulFreeBytesAvailableToCaller,  Addressable pulTotalNumberOfBytes,  Addressable pulTotalNumberOfFreeBytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$835.SHGetDiskFreeSpaceExW$MH, "SHGetDiskFreeSpaceExW");
        try {
            return (int)mh$.invokeExact(pszDirectoryName.address(), pulFreeBytesAvailableToCaller.address(), pulTotalNumberOfBytes.address(), pulTotalNumberOfFreeBytes.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetNewLinkInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$835.SHGetNewLinkInfoA$MH,"SHGetNewLinkInfoA");
    }
    public static int SHGetNewLinkInfoA ( Addressable pszLinkTo,  Addressable pszDir,  Addressable pszName,  Addressable pfMustCopy,  int uFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$835.SHGetNewLinkInfoA$MH, "SHGetNewLinkInfoA");
        try {
            return (int)mh$.invokeExact(pszLinkTo.address(), pszDir.address(), pszName.address(), pfMustCopy.address(), uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetNewLinkInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$835.SHGetNewLinkInfoW$MH,"SHGetNewLinkInfoW");
    }
    public static int SHGetNewLinkInfoW ( Addressable pszLinkTo,  Addressable pszDir,  Addressable pszName,  Addressable pfMustCopy,  int uFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$835.SHGetNewLinkInfoW$MH, "SHGetNewLinkInfoW");
        try {
            return (int)mh$.invokeExact(pszLinkTo.address(), pszDir.address(), pszName.address(), pfMustCopy.address(), uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHInvokePrinterCommandA$MH() {
        return RuntimeHelper.requireNonNull(constants$836.SHInvokePrinterCommandA$MH,"SHInvokePrinterCommandA");
    }
    public static int SHInvokePrinterCommandA ( Addressable hwnd,  int uAction,  Addressable lpBuf1,  Addressable lpBuf2,  int fModal) {
        var mh$ = RuntimeHelper.requireNonNull(constants$836.SHInvokePrinterCommandA$MH, "SHInvokePrinterCommandA");
        try {
            return (int)mh$.invokeExact(hwnd.address(), uAction, lpBuf1.address(), lpBuf2.address(), fModal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHInvokePrinterCommandW$MH() {
        return RuntimeHelper.requireNonNull(constants$836.SHInvokePrinterCommandW$MH,"SHInvokePrinterCommandW");
    }
    public static int SHInvokePrinterCommandW ( Addressable hwnd,  int uAction,  Addressable lpBuf1,  Addressable lpBuf2,  int fModal) {
        var mh$ = RuntimeHelper.requireNonNull(constants$836.SHInvokePrinterCommandW$MH, "SHInvokePrinterCommandW");
        try {
            return (int)mh$.invokeExact(hwnd.address(), uAction, lpBuf1.address(), lpBuf2.address(), fModal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHLoadNonloadedIconOverlayIdentifiers$MH() {
        return RuntimeHelper.requireNonNull(constants$836.SHLoadNonloadedIconOverlayIdentifiers$MH,"SHLoadNonloadedIconOverlayIdentifiers");
    }
    public static int SHLoadNonloadedIconOverlayIdentifiers () {
        var mh$ = RuntimeHelper.requireNonNull(constants$836.SHLoadNonloadedIconOverlayIdentifiers$MH, "SHLoadNonloadedIconOverlayIdentifiers");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHIsFileAvailableOffline$MH() {
        return RuntimeHelper.requireNonNull(constants$836.SHIsFileAvailableOffline$MH,"SHIsFileAvailableOffline");
    }
    public static int SHIsFileAvailableOffline ( Addressable pwszPath,  Addressable pdwStatus) {
        var mh$ = RuntimeHelper.requireNonNull(constants$836.SHIsFileAvailableOffline$MH, "SHIsFileAvailableOffline");
        try {
            return (int)mh$.invokeExact(pwszPath.address(), pdwStatus.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHSetLocalizedName$MH() {
        return RuntimeHelper.requireNonNull(constants$836.SHSetLocalizedName$MH,"SHSetLocalizedName");
    }
    public static int SHSetLocalizedName ( Addressable pszPath,  Addressable pszResModule,  int idsRes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$836.SHSetLocalizedName$MH, "SHSetLocalizedName");
        try {
            return (int)mh$.invokeExact(pszPath.address(), pszResModule.address(), idsRes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHRemoveLocalizedName$MH() {
        return RuntimeHelper.requireNonNull(constants$836.SHRemoveLocalizedName$MH,"SHRemoveLocalizedName");
    }
    public static int SHRemoveLocalizedName ( Addressable pszPath) {
        var mh$ = RuntimeHelper.requireNonNull(constants$836.SHRemoveLocalizedName$MH, "SHRemoveLocalizedName");
        try {
            return (int)mh$.invokeExact(pszPath.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetLocalizedName$MH() {
        return RuntimeHelper.requireNonNull(constants$837.SHGetLocalizedName$MH,"SHGetLocalizedName");
    }
    public static int SHGetLocalizedName ( Addressable pszPath,  Addressable pszResModule,  int cch,  Addressable pidsRes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$837.SHGetLocalizedName$MH, "SHGetLocalizedName");
        try {
            return (int)mh$.invokeExact(pszPath.address(), pszResModule.address(), cch, pidsRes.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShellMessageBoxA$MH() {
        return RuntimeHelper.requireNonNull(constants$837.ShellMessageBoxA$MH,"ShellMessageBoxA");
    }
    public static int ShellMessageBoxA ( Addressable hAppInst,  Addressable hWnd,  Addressable lpcText,  Addressable lpcTitle,  int fuStyle, Object... x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$837.ShellMessageBoxA$MH, "ShellMessageBoxA");
        try {
            return (int)mh$.invokeExact(hAppInst.address(), hWnd.address(), lpcText.address(), lpcTitle.address(), fuStyle, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShellMessageBoxW$MH() {
        return RuntimeHelper.requireNonNull(constants$837.ShellMessageBoxW$MH,"ShellMessageBoxW");
    }
    public static int ShellMessageBoxW ( Addressable hAppInst,  Addressable hWnd,  Addressable lpcText,  Addressable lpcTitle,  int fuStyle, Object... x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$837.ShellMessageBoxW$MH, "ShellMessageBoxW");
        try {
            return (int)mh$.invokeExact(hAppInst.address(), hWnd.address(), lpcText.address(), lpcTitle.address(), fuStyle, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsLFNDriveA$MH() {
        return RuntimeHelper.requireNonNull(constants$837.IsLFNDriveA$MH,"IsLFNDriveA");
    }
    public static int IsLFNDriveA ( Addressable pszPath) {
        var mh$ = RuntimeHelper.requireNonNull(constants$837.IsLFNDriveA$MH, "IsLFNDriveA");
        try {
            return (int)mh$.invokeExact(pszPath.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsLFNDriveW$MH() {
        return RuntimeHelper.requireNonNull(constants$837.IsLFNDriveW$MH,"IsLFNDriveW");
    }
    public static int IsLFNDriveW ( Addressable pszPath) {
        var mh$ = RuntimeHelper.requireNonNull(constants$837.IsLFNDriveW$MH, "IsLFNDriveW");
        try {
            return (int)mh$.invokeExact(pszPath.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHEnumerateUnreadMailAccountsA$MH() {
        return RuntimeHelper.requireNonNull(constants$837.SHEnumerateUnreadMailAccountsA$MH,"SHEnumerateUnreadMailAccountsA");
    }
    public static int SHEnumerateUnreadMailAccountsA ( Addressable hKeyUser,  int dwIndex,  Addressable pszMailAddress,  int cchMailAddress) {
        var mh$ = RuntimeHelper.requireNonNull(constants$837.SHEnumerateUnreadMailAccountsA$MH, "SHEnumerateUnreadMailAccountsA");
        try {
            return (int)mh$.invokeExact(hKeyUser.address(), dwIndex, pszMailAddress.address(), cchMailAddress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHEnumerateUnreadMailAccountsW$MH() {
        return RuntimeHelper.requireNonNull(constants$838.SHEnumerateUnreadMailAccountsW$MH,"SHEnumerateUnreadMailAccountsW");
    }
    public static int SHEnumerateUnreadMailAccountsW ( Addressable hKeyUser,  int dwIndex,  Addressable pszMailAddress,  int cchMailAddress) {
        var mh$ = RuntimeHelper.requireNonNull(constants$838.SHEnumerateUnreadMailAccountsW$MH, "SHEnumerateUnreadMailAccountsW");
        try {
            return (int)mh$.invokeExact(hKeyUser.address(), dwIndex, pszMailAddress.address(), cchMailAddress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetUnreadMailCountA$MH() {
        return RuntimeHelper.requireNonNull(constants$838.SHGetUnreadMailCountA$MH,"SHGetUnreadMailCountA");
    }
    public static int SHGetUnreadMailCountA ( Addressable hKeyUser,  Addressable pszMailAddress,  Addressable pdwCount,  Addressable pFileTime,  Addressable pszShellExecuteCommand,  int cchShellExecuteCommand) {
        var mh$ = RuntimeHelper.requireNonNull(constants$838.SHGetUnreadMailCountA$MH, "SHGetUnreadMailCountA");
        try {
            return (int)mh$.invokeExact(hKeyUser.address(), pszMailAddress.address(), pdwCount.address(), pFileTime.address(), pszShellExecuteCommand.address(), cchShellExecuteCommand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetUnreadMailCountW$MH() {
        return RuntimeHelper.requireNonNull(constants$838.SHGetUnreadMailCountW$MH,"SHGetUnreadMailCountW");
    }
    public static int SHGetUnreadMailCountW ( Addressable hKeyUser,  Addressable pszMailAddress,  Addressable pdwCount,  Addressable pFileTime,  Addressable pszShellExecuteCommand,  int cchShellExecuteCommand) {
        var mh$ = RuntimeHelper.requireNonNull(constants$838.SHGetUnreadMailCountW$MH, "SHGetUnreadMailCountW");
        try {
            return (int)mh$.invokeExact(hKeyUser.address(), pszMailAddress.address(), pdwCount.address(), pFileTime.address(), pszShellExecuteCommand.address(), cchShellExecuteCommand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHSetUnreadMailCountA$MH() {
        return RuntimeHelper.requireNonNull(constants$838.SHSetUnreadMailCountA$MH,"SHSetUnreadMailCountA");
    }
    public static int SHSetUnreadMailCountA ( Addressable pszMailAddress,  int dwCount,  Addressable pszShellExecuteCommand) {
        var mh$ = RuntimeHelper.requireNonNull(constants$838.SHSetUnreadMailCountA$MH, "SHSetUnreadMailCountA");
        try {
            return (int)mh$.invokeExact(pszMailAddress.address(), dwCount, pszShellExecuteCommand.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHSetUnreadMailCountW$MH() {
        return RuntimeHelper.requireNonNull(constants$838.SHSetUnreadMailCountW$MH,"SHSetUnreadMailCountW");
    }
    public static int SHSetUnreadMailCountW ( Addressable pszMailAddress,  int dwCount,  Addressable pszShellExecuteCommand) {
        var mh$ = RuntimeHelper.requireNonNull(constants$838.SHSetUnreadMailCountW$MH, "SHSetUnreadMailCountW");
        try {
            return (int)mh$.invokeExact(pszMailAddress.address(), dwCount, pszShellExecuteCommand.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHTestTokenMembership$MH() {
        return RuntimeHelper.requireNonNull(constants$838.SHTestTokenMembership$MH,"SHTestTokenMembership");
    }
    public static int SHTestTokenMembership ( Addressable hToken,  int ulRID) {
        var mh$ = RuntimeHelper.requireNonNull(constants$838.SHTestTokenMembership$MH, "SHTestTokenMembership");
        try {
            return (int)mh$.invokeExact(hToken.address(), ulRID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetImageList$MH() {
        return RuntimeHelper.requireNonNull(constants$839.SHGetImageList$MH,"SHGetImageList");
    }
    public static int SHGetImageList ( int iImageList,  Addressable riid,  Addressable ppvObj) {
        var mh$ = RuntimeHelper.requireNonNull(constants$839.SHGetImageList$MH, "SHGetImageList");
        try {
            return (int)mh$.invokeExact(iImageList, riid.address(), ppvObj.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CommandLineToArgvW$MH() {
        return RuntimeHelper.requireNonNull(constants$839.CommandLineToArgvW$MH,"CommandLineToArgvW");
    }
    public static MemoryAddress CommandLineToArgvW ( Addressable lpCmdLine,  Addressable pNumArgs) {
        var mh$ = RuntimeHelper.requireNonNull(constants$839.CommandLineToArgvW$MH, "CommandLineToArgvW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpCmdLine.address(), pNumArgs.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitNetworkAddressControl$MH() {
        return RuntimeHelper.requireNonNull(constants$840.InitNetworkAddressControl$MH,"InitNetworkAddressControl");
    }
    public static int InitNetworkAddressControl () {
        var mh$ = RuntimeHelper.requireNonNull(constants$840.InitNetworkAddressControl$MH, "InitNetworkAddressControl");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SHGetDriveMedia$MH() {
        return RuntimeHelper.requireNonNull(constants$840.SHGetDriveMedia$MH,"SHGetDriveMedia");
    }
    public static int SHGetDriveMedia ( Addressable pszDrive,  Addressable pdwMediaContent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$840.SHGetDriveMedia$MH, "SHGetDriveMedia");
        try {
            return (int)mh$.invokeExact(pszDrive.address(), pdwMediaContent.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptAcquireContextA$MH() {
        return RuntimeHelper.requireNonNull(constants$841.CryptAcquireContextA$MH,"CryptAcquireContextA");
    }
    public static int CryptAcquireContextA ( Addressable phProv,  Addressable szContainer,  Addressable szProvider,  int dwProvType,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$841.CryptAcquireContextA$MH, "CryptAcquireContextA");
        try {
            return (int)mh$.invokeExact(phProv.address(), szContainer.address(), szProvider.address(), dwProvType, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptAcquireContextW$MH() {
        return RuntimeHelper.requireNonNull(constants$841.CryptAcquireContextW$MH,"CryptAcquireContextW");
    }
    public static int CryptAcquireContextW ( Addressable phProv,  Addressable szContainer,  Addressable szProvider,  int dwProvType,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$841.CryptAcquireContextW$MH, "CryptAcquireContextW");
        try {
            return (int)mh$.invokeExact(phProv.address(), szContainer.address(), szProvider.address(), dwProvType, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGenRandom$MH() {
        return RuntimeHelper.requireNonNull(constants$842.CryptGenRandom$MH,"CryptGenRandom");
    }
    public static int CryptGenRandom ( long hProv,  int dwLen,  Addressable pbBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$842.CryptGenRandom$MH, "CryptGenRandom");
        try {
            return (int)mh$.invokeExact(hProv, dwLen, pbBuffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptReleaseContext$MH() {
        return RuntimeHelper.requireNonNull(constants$842.CryptReleaseContext$MH,"CryptReleaseContext");
    }
    public static int CryptReleaseContext ( long hProv,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$842.CryptReleaseContext$MH, "CryptReleaseContext");
        try {
            return (int)mh$.invokeExact(hProv, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGenKey$MH() {
        return RuntimeHelper.requireNonNull(constants$842.CryptGenKey$MH,"CryptGenKey");
    }
    public static int CryptGenKey ( long hProv,  int Algid,  int dwFlags,  Addressable phKey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$842.CryptGenKey$MH, "CryptGenKey");
        try {
            return (int)mh$.invokeExact(hProv, Algid, dwFlags, phKey.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDeriveKey$MH() {
        return RuntimeHelper.requireNonNull(constants$842.CryptDeriveKey$MH,"CryptDeriveKey");
    }
    public static int CryptDeriveKey ( long hProv,  int Algid,  long hBaseData,  int dwFlags,  Addressable phKey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$842.CryptDeriveKey$MH, "CryptDeriveKey");
        try {
            return (int)mh$.invokeExact(hProv, Algid, hBaseData, dwFlags, phKey.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDestroyKey$MH() {
        return RuntimeHelper.requireNonNull(constants$842.CryptDestroyKey$MH,"CryptDestroyKey");
    }
    public static int CryptDestroyKey ( long hKey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$842.CryptDestroyKey$MH, "CryptDestroyKey");
        try {
            return (int)mh$.invokeExact(hKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetKeyParam$MH() {
        return RuntimeHelper.requireNonNull(constants$842.CryptSetKeyParam$MH,"CryptSetKeyParam");
    }
    public static int CryptSetKeyParam ( long hKey,  int dwParam,  Addressable pbData,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$842.CryptSetKeyParam$MH, "CryptSetKeyParam");
        try {
            return (int)mh$.invokeExact(hKey, dwParam, pbData.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetKeyParam$MH() {
        return RuntimeHelper.requireNonNull(constants$843.CryptGetKeyParam$MH,"CryptGetKeyParam");
    }
    public static int CryptGetKeyParam ( long hKey,  int dwParam,  Addressable pbData,  Addressable pdwDataLen,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$843.CryptGetKeyParam$MH, "CryptGetKeyParam");
        try {
            return (int)mh$.invokeExact(hKey, dwParam, pbData.address(), pdwDataLen.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetHashParam$MH() {
        return RuntimeHelper.requireNonNull(constants$843.CryptSetHashParam$MH,"CryptSetHashParam");
    }
    public static int CryptSetHashParam ( long hHash,  int dwParam,  Addressable pbData,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$843.CryptSetHashParam$MH, "CryptSetHashParam");
        try {
            return (int)mh$.invokeExact(hHash, dwParam, pbData.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetHashParam$MH() {
        return RuntimeHelper.requireNonNull(constants$843.CryptGetHashParam$MH,"CryptGetHashParam");
    }
    public static int CryptGetHashParam ( long hHash,  int dwParam,  Addressable pbData,  Addressable pdwDataLen,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$843.CryptGetHashParam$MH, "CryptGetHashParam");
        try {
            return (int)mh$.invokeExact(hHash, dwParam, pbData.address(), pdwDataLen.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetProvParam$MH() {
        return RuntimeHelper.requireNonNull(constants$843.CryptSetProvParam$MH,"CryptSetProvParam");
    }
    public static int CryptSetProvParam ( long hProv,  int dwParam,  Addressable pbData,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$843.CryptSetProvParam$MH, "CryptSetProvParam");
        try {
            return (int)mh$.invokeExact(hProv, dwParam, pbData.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetProvParam$MH() {
        return RuntimeHelper.requireNonNull(constants$843.CryptGetProvParam$MH,"CryptGetProvParam");
    }
    public static int CryptGetProvParam ( long hProv,  int dwParam,  Addressable pbData,  Addressable pdwDataLen,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$843.CryptGetProvParam$MH, "CryptGetProvParam");
        try {
            return (int)mh$.invokeExact(hProv, dwParam, pbData.address(), pdwDataLen.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetUserKey$MH() {
        return RuntimeHelper.requireNonNull(constants$843.CryptGetUserKey$MH,"CryptGetUserKey");
    }
    public static int CryptGetUserKey ( long hProv,  int dwKeySpec,  Addressable phUserKey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$843.CryptGetUserKey$MH, "CryptGetUserKey");
        try {
            return (int)mh$.invokeExact(hProv, dwKeySpec, phUserKey.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptExportKey$MH() {
        return RuntimeHelper.requireNonNull(constants$844.CryptExportKey$MH,"CryptExportKey");
    }
    public static int CryptExportKey ( long hKey,  long hExpKey,  int dwBlobType,  int dwFlags,  Addressable pbData,  Addressable pdwDataLen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$844.CryptExportKey$MH, "CryptExportKey");
        try {
            return (int)mh$.invokeExact(hKey, hExpKey, dwBlobType, dwFlags, pbData.address(), pdwDataLen.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptImportKey$MH() {
        return RuntimeHelper.requireNonNull(constants$844.CryptImportKey$MH,"CryptImportKey");
    }
    public static int CryptImportKey ( long hProv,  Addressable pbData,  int dwDataLen,  long hPubKey,  int dwFlags,  Addressable phKey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$844.CryptImportKey$MH, "CryptImportKey");
        try {
            return (int)mh$.invokeExact(hProv, pbData.address(), dwDataLen, hPubKey, dwFlags, phKey.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEncrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$844.CryptEncrypt$MH,"CryptEncrypt");
    }
    public static int CryptEncrypt ( long hKey,  long hHash,  int Final,  int dwFlags,  Addressable pbData,  Addressable pdwDataLen,  int dwBufLen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$844.CryptEncrypt$MH, "CryptEncrypt");
        try {
            return (int)mh$.invokeExact(hKey, hHash, Final, dwFlags, pbData.address(), pdwDataLen.address(), dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDecrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$844.CryptDecrypt$MH,"CryptDecrypt");
    }
    public static int CryptDecrypt ( long hKey,  long hHash,  int Final,  int dwFlags,  Addressable pbData,  Addressable pdwDataLen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$844.CryptDecrypt$MH, "CryptDecrypt");
        try {
            return (int)mh$.invokeExact(hKey, hHash, Final, dwFlags, pbData.address(), pdwDataLen.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptCreateHash$MH() {
        return RuntimeHelper.requireNonNull(constants$844.CryptCreateHash$MH,"CryptCreateHash");
    }
    public static int CryptCreateHash ( long hProv,  int Algid,  long hKey,  int dwFlags,  Addressable phHash) {
        var mh$ = RuntimeHelper.requireNonNull(constants$844.CryptCreateHash$MH, "CryptCreateHash");
        try {
            return (int)mh$.invokeExact(hProv, Algid, hKey, dwFlags, phHash.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashData$MH() {
        return RuntimeHelper.requireNonNull(constants$844.CryptHashData$MH,"CryptHashData");
    }
    public static int CryptHashData ( long hHash,  Addressable pbData,  int dwDataLen,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$844.CryptHashData$MH, "CryptHashData");
        try {
            return (int)mh$.invokeExact(hHash, pbData.address(), dwDataLen, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashSessionKey$MH() {
        return RuntimeHelper.requireNonNull(constants$845.CryptHashSessionKey$MH,"CryptHashSessionKey");
    }
    public static int CryptHashSessionKey ( long hHash,  long hKey,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$845.CryptHashSessionKey$MH, "CryptHashSessionKey");
        try {
            return (int)mh$.invokeExact(hHash, hKey, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDestroyHash$MH() {
        return RuntimeHelper.requireNonNull(constants$845.CryptDestroyHash$MH,"CryptDestroyHash");
    }
    public static int CryptDestroyHash ( long hHash) {
        var mh$ = RuntimeHelper.requireNonNull(constants$845.CryptDestroyHash$MH, "CryptDestroyHash");
        try {
            return (int)mh$.invokeExact(hHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSignHashA$MH() {
        return RuntimeHelper.requireNonNull(constants$845.CryptSignHashA$MH,"CryptSignHashA");
    }
    public static int CryptSignHashA ( long hHash,  int dwKeySpec,  Addressable szDescription,  int dwFlags,  Addressable pbSignature,  Addressable pdwSigLen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$845.CryptSignHashA$MH, "CryptSignHashA");
        try {
            return (int)mh$.invokeExact(hHash, dwKeySpec, szDescription.address(), dwFlags, pbSignature.address(), pdwSigLen.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSignHashW$MH() {
        return RuntimeHelper.requireNonNull(constants$845.CryptSignHashW$MH,"CryptSignHashW");
    }
    public static int CryptSignHashW ( long hHash,  int dwKeySpec,  Addressable szDescription,  int dwFlags,  Addressable pbSignature,  Addressable pdwSigLen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$845.CryptSignHashW$MH, "CryptSignHashW");
        try {
            return (int)mh$.invokeExact(hHash, dwKeySpec, szDescription.address(), dwFlags, pbSignature.address(), pdwSigLen.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifySignatureA$MH() {
        return RuntimeHelper.requireNonNull(constants$845.CryptVerifySignatureA$MH,"CryptVerifySignatureA");
    }
    public static int CryptVerifySignatureA ( long hHash,  Addressable pbSignature,  int dwSigLen,  long hPubKey,  Addressable szDescription,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$845.CryptVerifySignatureA$MH, "CryptVerifySignatureA");
        try {
            return (int)mh$.invokeExact(hHash, pbSignature.address(), dwSigLen, hPubKey, szDescription.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifySignatureW$MH() {
        return RuntimeHelper.requireNonNull(constants$845.CryptVerifySignatureW$MH,"CryptVerifySignatureW");
    }
    public static int CryptVerifySignatureW ( long hHash,  Addressable pbSignature,  int dwSigLen,  long hPubKey,  Addressable szDescription,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$845.CryptVerifySignatureW$MH, "CryptVerifySignatureW");
        try {
            return (int)mh$.invokeExact(hHash, pbSignature.address(), dwSigLen, hPubKey, szDescription.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetProviderA$MH() {
        return RuntimeHelper.requireNonNull(constants$846.CryptSetProviderA$MH,"CryptSetProviderA");
    }
    public static int CryptSetProviderA ( Addressable pszProvName,  int dwProvType) {
        var mh$ = RuntimeHelper.requireNonNull(constants$846.CryptSetProviderA$MH, "CryptSetProviderA");
        try {
            return (int)mh$.invokeExact(pszProvName.address(), dwProvType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetProviderW$MH() {
        return RuntimeHelper.requireNonNull(constants$846.CryptSetProviderW$MH,"CryptSetProviderW");
    }
    public static int CryptSetProviderW ( Addressable pszProvName,  int dwProvType) {
        var mh$ = RuntimeHelper.requireNonNull(constants$846.CryptSetProviderW$MH, "CryptSetProviderW");
        try {
            return (int)mh$.invokeExact(pszProvName.address(), dwProvType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetProviderExA$MH() {
        return RuntimeHelper.requireNonNull(constants$846.CryptSetProviderExA$MH,"CryptSetProviderExA");
    }
    public static int CryptSetProviderExA ( Addressable pszProvName,  int dwProvType,  Addressable pdwReserved,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$846.CryptSetProviderExA$MH, "CryptSetProviderExA");
        try {
            return (int)mh$.invokeExact(pszProvName.address(), dwProvType, pdwReserved.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetProviderExW$MH() {
        return RuntimeHelper.requireNonNull(constants$846.CryptSetProviderExW$MH,"CryptSetProviderExW");
    }
    public static int CryptSetProviderExW ( Addressable pszProvName,  int dwProvType,  Addressable pdwReserved,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$846.CryptSetProviderExW$MH, "CryptSetProviderExW");
        try {
            return (int)mh$.invokeExact(pszProvName.address(), dwProvType, pdwReserved.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetDefaultProviderA$MH() {
        return RuntimeHelper.requireNonNull(constants$846.CryptGetDefaultProviderA$MH,"CryptGetDefaultProviderA");
    }
    public static int CryptGetDefaultProviderA ( int dwProvType,  Addressable pdwReserved,  int dwFlags,  Addressable pszProvName,  Addressable pcbProvName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$846.CryptGetDefaultProviderA$MH, "CryptGetDefaultProviderA");
        try {
            return (int)mh$.invokeExact(dwProvType, pdwReserved.address(), dwFlags, pszProvName.address(), pcbProvName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetDefaultProviderW$MH() {
        return RuntimeHelper.requireNonNull(constants$846.CryptGetDefaultProviderW$MH,"CryptGetDefaultProviderW");
    }
    public static int CryptGetDefaultProviderW ( int dwProvType,  Addressable pdwReserved,  int dwFlags,  Addressable pszProvName,  Addressable pcbProvName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$846.CryptGetDefaultProviderW$MH, "CryptGetDefaultProviderW");
        try {
            return (int)mh$.invokeExact(dwProvType, pdwReserved.address(), dwFlags, pszProvName.address(), pcbProvName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEnumProviderTypesA$MH() {
        return RuntimeHelper.requireNonNull(constants$847.CryptEnumProviderTypesA$MH,"CryptEnumProviderTypesA");
    }
    public static int CryptEnumProviderTypesA ( int dwIndex,  Addressable pdwReserved,  int dwFlags,  Addressable pdwProvType,  Addressable szTypeName,  Addressable pcbTypeName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$847.CryptEnumProviderTypesA$MH, "CryptEnumProviderTypesA");
        try {
            return (int)mh$.invokeExact(dwIndex, pdwReserved.address(), dwFlags, pdwProvType.address(), szTypeName.address(), pcbTypeName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEnumProviderTypesW$MH() {
        return RuntimeHelper.requireNonNull(constants$847.CryptEnumProviderTypesW$MH,"CryptEnumProviderTypesW");
    }
    public static int CryptEnumProviderTypesW ( int dwIndex,  Addressable pdwReserved,  int dwFlags,  Addressable pdwProvType,  Addressable szTypeName,  Addressable pcbTypeName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$847.CryptEnumProviderTypesW$MH, "CryptEnumProviderTypesW");
        try {
            return (int)mh$.invokeExact(dwIndex, pdwReserved.address(), dwFlags, pdwProvType.address(), szTypeName.address(), pcbTypeName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEnumProvidersA$MH() {
        return RuntimeHelper.requireNonNull(constants$847.CryptEnumProvidersA$MH,"CryptEnumProvidersA");
    }
    public static int CryptEnumProvidersA ( int dwIndex,  Addressable pdwReserved,  int dwFlags,  Addressable pdwProvType,  Addressable szProvName,  Addressable pcbProvName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$847.CryptEnumProvidersA$MH, "CryptEnumProvidersA");
        try {
            return (int)mh$.invokeExact(dwIndex, pdwReserved.address(), dwFlags, pdwProvType.address(), szProvName.address(), pcbProvName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEnumProvidersW$MH() {
        return RuntimeHelper.requireNonNull(constants$847.CryptEnumProvidersW$MH,"CryptEnumProvidersW");
    }
    public static int CryptEnumProvidersW ( int dwIndex,  Addressable pdwReserved,  int dwFlags,  Addressable pdwProvType,  Addressable szProvName,  Addressable pcbProvName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$847.CryptEnumProvidersW$MH, "CryptEnumProvidersW");
        try {
            return (int)mh$.invokeExact(dwIndex, pdwReserved.address(), dwFlags, pdwProvType.address(), szProvName.address(), pcbProvName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptContextAddRef$MH() {
        return RuntimeHelper.requireNonNull(constants$847.CryptContextAddRef$MH,"CryptContextAddRef");
    }
    public static int CryptContextAddRef ( long hProv,  Addressable pdwReserved,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$847.CryptContextAddRef$MH, "CryptContextAddRef");
        try {
            return (int)mh$.invokeExact(hProv, pdwReserved.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDuplicateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$847.CryptDuplicateKey$MH,"CryptDuplicateKey");
    }
    public static int CryptDuplicateKey ( long hKey,  Addressable pdwReserved,  int dwFlags,  Addressable phKey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$847.CryptDuplicateKey$MH, "CryptDuplicateKey");
        try {
            return (int)mh$.invokeExact(hKey, pdwReserved.address(), dwFlags, phKey.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDuplicateHash$MH() {
        return RuntimeHelper.requireNonNull(constants$848.CryptDuplicateHash$MH,"CryptDuplicateHash");
    }
    public static int CryptDuplicateHash ( long hHash,  Addressable pdwReserved,  int dwFlags,  Addressable phHash) {
        var mh$ = RuntimeHelper.requireNonNull(constants$848.CryptDuplicateHash$MH, "CryptDuplicateHash");
        try {
            return (int)mh$.invokeExact(hHash, pdwReserved.address(), dwFlags, phHash.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEncSChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$848.GetEncSChannel$MH,"GetEncSChannel");
    }
    public static int GetEncSChannel ( Addressable pData,  Addressable dwDecSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$848.GetEncSChannel$MH, "GetEncSChannel");
        try {
            return (int)mh$.invokeExact(pData.address(), dwDecSize.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout NTSTATUS = C_LONG;
    public static int DSA_HASH_ALGORITHM_SHA1() {
        return (int)0L;
    }
    public static int DSA_HASH_ALGORITHM_SHA256() {
        return (int)1L;
    }
    public static int DSA_HASH_ALGORITHM_SHA512() {
        return (int)2L;
    }
    public static int DSA_FIPS186_2() {
        return (int)0L;
    }
    public static int DSA_FIPS186_3() {
        return (int)1L;
    }
    public static int BCRYPT_HASH_OPERATION_HASH_DATA() {
        return (int)1L;
    }
    public static int BCRYPT_HASH_OPERATION_FINISH_HASH() {
        return (int)2L;
    }
    public static int BCRYPT_OPERATION_TYPE_HASH() {
        return (int)1L;
    }
    public static MethodHandle BCryptOpenAlgorithmProvider$MH() {
        return RuntimeHelper.requireNonNull(constants$848.BCryptOpenAlgorithmProvider$MH,"BCryptOpenAlgorithmProvider");
    }
    public static int BCryptOpenAlgorithmProvider ( Addressable phAlgorithm,  Addressable pszAlgId,  Addressable pszImplementation,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$848.BCryptOpenAlgorithmProvider$MH, "BCryptOpenAlgorithmProvider");
        try {
            return (int)mh$.invokeExact(phAlgorithm.address(), pszAlgId.address(), pszImplementation.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEnumAlgorithms$MH() {
        return RuntimeHelper.requireNonNull(constants$848.BCryptEnumAlgorithms$MH,"BCryptEnumAlgorithms");
    }
    public static int BCryptEnumAlgorithms ( int dwAlgOperations,  Addressable pAlgCount,  Addressable ppAlgList,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$848.BCryptEnumAlgorithms$MH, "BCryptEnumAlgorithms");
        try {
            return (int)mh$.invokeExact(dwAlgOperations, pAlgCount.address(), ppAlgList.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEnumProviders$MH() {
        return RuntimeHelper.requireNonNull(constants$848.BCryptEnumProviders$MH,"BCryptEnumProviders");
    }
    public static int BCryptEnumProviders ( Addressable pszAlgId,  Addressable pImplCount,  Addressable ppImplList,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$848.BCryptEnumProviders$MH, "BCryptEnumProviders");
        try {
            return (int)mh$.invokeExact(pszAlgId.address(), pImplCount.address(), ppImplList.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptGetProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$848.BCryptGetProperty$MH,"BCryptGetProperty");
    }
    public static int BCryptGetProperty ( Addressable hObject,  Addressable pszProperty,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$848.BCryptGetProperty$MH, "BCryptGetProperty");
        try {
            return (int)mh$.invokeExact(hObject.address(), pszProperty.address(), pbOutput.address(), cbOutput, pcbResult.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptSetProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$849.BCryptSetProperty$MH,"BCryptSetProperty");
    }
    public static int BCryptSetProperty ( Addressable hObject,  Addressable pszProperty,  Addressable pbInput,  int cbInput,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$849.BCryptSetProperty$MH, "BCryptSetProperty");
        try {
            return (int)mh$.invokeExact(hObject.address(), pszProperty.address(), pbInput.address(), cbInput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptCloseAlgorithmProvider$MH() {
        return RuntimeHelper.requireNonNull(constants$849.BCryptCloseAlgorithmProvider$MH,"BCryptCloseAlgorithmProvider");
    }
    public static int BCryptCloseAlgorithmProvider ( Addressable hAlgorithm,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$849.BCryptCloseAlgorithmProvider$MH, "BCryptCloseAlgorithmProvider");
        try {
            return (int)mh$.invokeExact(hAlgorithm.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptFreeBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$849.BCryptFreeBuffer$MH,"BCryptFreeBuffer");
    }
    public static void BCryptFreeBuffer ( Addressable pvBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$849.BCryptFreeBuffer$MH, "BCryptFreeBuffer");
        try {
            mh$.invokeExact(pvBuffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptGenerateSymmetricKey$MH() {
        return RuntimeHelper.requireNonNull(constants$849.BCryptGenerateSymmetricKey$MH,"BCryptGenerateSymmetricKey");
    }
    public static int BCryptGenerateSymmetricKey ( Addressable hAlgorithm,  Addressable phKey,  Addressable pbKeyObject,  int cbKeyObject,  Addressable pbSecret,  int cbSecret,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$849.BCryptGenerateSymmetricKey$MH, "BCryptGenerateSymmetricKey");
        try {
            return (int)mh$.invokeExact(hAlgorithm.address(), phKey.address(), pbKeyObject.address(), cbKeyObject, pbSecret.address(), cbSecret, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptGenerateKeyPair$MH() {
        return RuntimeHelper.requireNonNull(constants$849.BCryptGenerateKeyPair$MH,"BCryptGenerateKeyPair");
    }
    public static int BCryptGenerateKeyPair ( Addressable hAlgorithm,  Addressable phKey,  int dwLength,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$849.BCryptGenerateKeyPair$MH, "BCryptGenerateKeyPair");
        try {
            return (int)mh$.invokeExact(hAlgorithm.address(), phKey.address(), dwLength, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEncrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$849.BCryptEncrypt$MH,"BCryptEncrypt");
    }
    public static int BCryptEncrypt ( Addressable hKey,  Addressable pbInput,  int cbInput,  Addressable pPaddingInfo,  Addressable pbIV,  int cbIV,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$849.BCryptEncrypt$MH, "BCryptEncrypt");
        try {
            return (int)mh$.invokeExact(hKey.address(), pbInput.address(), cbInput, pPaddingInfo.address(), pbIV.address(), cbIV, pbOutput.address(), cbOutput, pcbResult.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDecrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$850.BCryptDecrypt$MH,"BCryptDecrypt");
    }
    public static int BCryptDecrypt ( Addressable hKey,  Addressable pbInput,  int cbInput,  Addressable pPaddingInfo,  Addressable pbIV,  int cbIV,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$850.BCryptDecrypt$MH, "BCryptDecrypt");
        try {
            return (int)mh$.invokeExact(hKey.address(), pbInput.address(), cbInput, pPaddingInfo.address(), pbIV.address(), cbIV, pbOutput.address(), cbOutput, pcbResult.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptExportKey$MH() {
        return RuntimeHelper.requireNonNull(constants$850.BCryptExportKey$MH,"BCryptExportKey");
    }
    public static int BCryptExportKey ( Addressable hKey,  Addressable hExportKey,  Addressable pszBlobType,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$850.BCryptExportKey$MH, "BCryptExportKey");
        try {
            return (int)mh$.invokeExact(hKey.address(), hExportKey.address(), pszBlobType.address(), pbOutput.address(), cbOutput, pcbResult.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptImportKey$MH() {
        return RuntimeHelper.requireNonNull(constants$850.BCryptImportKey$MH,"BCryptImportKey");
    }
    public static int BCryptImportKey ( Addressable hAlgorithm,  Addressable hImportKey,  Addressable pszBlobType,  Addressable phKey,  Addressable pbKeyObject,  int cbKeyObject,  Addressable pbInput,  int cbInput,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$850.BCryptImportKey$MH, "BCryptImportKey");
        try {
            return (int)mh$.invokeExact(hAlgorithm.address(), hImportKey.address(), pszBlobType.address(), phKey.address(), pbKeyObject.address(), cbKeyObject, pbInput.address(), cbInput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptImportKeyPair$MH() {
        return RuntimeHelper.requireNonNull(constants$850.BCryptImportKeyPair$MH,"BCryptImportKeyPair");
    }
    public static int BCryptImportKeyPair ( Addressable hAlgorithm,  Addressable hImportKey,  Addressable pszBlobType,  Addressable phKey,  Addressable pbInput,  int cbInput,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$850.BCryptImportKeyPair$MH, "BCryptImportKeyPair");
        try {
            return (int)mh$.invokeExact(hAlgorithm.address(), hImportKey.address(), pszBlobType.address(), phKey.address(), pbInput.address(), cbInput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDuplicateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$850.BCryptDuplicateKey$MH,"BCryptDuplicateKey");
    }
    public static int BCryptDuplicateKey ( Addressable hKey,  Addressable phNewKey,  Addressable pbKeyObject,  int cbKeyObject,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$850.BCryptDuplicateKey$MH, "BCryptDuplicateKey");
        try {
            return (int)mh$.invokeExact(hKey.address(), phNewKey.address(), pbKeyObject.address(), cbKeyObject, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptFinalizeKeyPair$MH() {
        return RuntimeHelper.requireNonNull(constants$850.BCryptFinalizeKeyPair$MH,"BCryptFinalizeKeyPair");
    }
    public static int BCryptFinalizeKeyPair ( Addressable hKey,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$850.BCryptFinalizeKeyPair$MH, "BCryptFinalizeKeyPair");
        try {
            return (int)mh$.invokeExact(hKey.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDestroyKey$MH() {
        return RuntimeHelper.requireNonNull(constants$851.BCryptDestroyKey$MH,"BCryptDestroyKey");
    }
    public static int BCryptDestroyKey ( Addressable hKey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$851.BCryptDestroyKey$MH, "BCryptDestroyKey");
        try {
            return (int)mh$.invokeExact(hKey.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDestroySecret$MH() {
        return RuntimeHelper.requireNonNull(constants$851.BCryptDestroySecret$MH,"BCryptDestroySecret");
    }
    public static int BCryptDestroySecret ( Addressable hSecret) {
        var mh$ = RuntimeHelper.requireNonNull(constants$851.BCryptDestroySecret$MH, "BCryptDestroySecret");
        try {
            return (int)mh$.invokeExact(hSecret.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptSignHash$MH() {
        return RuntimeHelper.requireNonNull(constants$851.BCryptSignHash$MH,"BCryptSignHash");
    }
    public static int BCryptSignHash ( Addressable hKey,  Addressable pPaddingInfo,  Addressable pbInput,  int cbInput,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$851.BCryptSignHash$MH, "BCryptSignHash");
        try {
            return (int)mh$.invokeExact(hKey.address(), pPaddingInfo.address(), pbInput.address(), cbInput, pbOutput.address(), cbOutput, pcbResult.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptVerifySignature$MH() {
        return RuntimeHelper.requireNonNull(constants$851.BCryptVerifySignature$MH,"BCryptVerifySignature");
    }
    public static int BCryptVerifySignature ( Addressable hKey,  Addressable pPaddingInfo,  Addressable pbHash,  int cbHash,  Addressable pbSignature,  int cbSignature,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$851.BCryptVerifySignature$MH, "BCryptVerifySignature");
        try {
            return (int)mh$.invokeExact(hKey.address(), pPaddingInfo.address(), pbHash.address(), cbHash, pbSignature.address(), cbSignature, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptSecretAgreement$MH() {
        return RuntimeHelper.requireNonNull(constants$851.BCryptSecretAgreement$MH,"BCryptSecretAgreement");
    }
    public static int BCryptSecretAgreement ( Addressable hPrivKey,  Addressable hPubKey,  Addressable phAgreedSecret,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$851.BCryptSecretAgreement$MH, "BCryptSecretAgreement");
        try {
            return (int)mh$.invokeExact(hPrivKey.address(), hPubKey.address(), phAgreedSecret.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDeriveKey$MH() {
        return RuntimeHelper.requireNonNull(constants$851.BCryptDeriveKey$MH,"BCryptDeriveKey");
    }
    public static int BCryptDeriveKey ( Addressable hSharedSecret,  Addressable pwszKDF,  Addressable pParameterList,  Addressable pbDerivedKey,  int cbDerivedKey,  Addressable pcbResult,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$851.BCryptDeriveKey$MH, "BCryptDeriveKey");
        try {
            return (int)mh$.invokeExact(hSharedSecret.address(), pwszKDF.address(), pParameterList.address(), pbDerivedKey.address(), cbDerivedKey, pcbResult.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptKeyDerivation$MH() {
        return RuntimeHelper.requireNonNull(constants$852.BCryptKeyDerivation$MH,"BCryptKeyDerivation");
    }
    public static int BCryptKeyDerivation ( Addressable hKey,  Addressable pParameterList,  Addressable pbDerivedKey,  int cbDerivedKey,  Addressable pcbResult,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$852.BCryptKeyDerivation$MH, "BCryptKeyDerivation");
        try {
            return (int)mh$.invokeExact(hKey.address(), pParameterList.address(), pbDerivedKey.address(), cbDerivedKey, pcbResult.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptCreateHash$MH() {
        return RuntimeHelper.requireNonNull(constants$852.BCryptCreateHash$MH,"BCryptCreateHash");
    }
    public static int BCryptCreateHash ( Addressable hAlgorithm,  Addressable phHash,  Addressable pbHashObject,  int cbHashObject,  Addressable pbSecret,  int cbSecret,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$852.BCryptCreateHash$MH, "BCryptCreateHash");
        try {
            return (int)mh$.invokeExact(hAlgorithm.address(), phHash.address(), pbHashObject.address(), cbHashObject, pbSecret.address(), cbSecret, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptHashData$MH() {
        return RuntimeHelper.requireNonNull(constants$852.BCryptHashData$MH,"BCryptHashData");
    }
    public static int BCryptHashData ( Addressable hHash,  Addressable pbInput,  int cbInput,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$852.BCryptHashData$MH, "BCryptHashData");
        try {
            return (int)mh$.invokeExact(hHash.address(), pbInput.address(), cbInput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptFinishHash$MH() {
        return RuntimeHelper.requireNonNull(constants$852.BCryptFinishHash$MH,"BCryptFinishHash");
    }
    public static int BCryptFinishHash ( Addressable hHash,  Addressable pbOutput,  int cbOutput,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$852.BCryptFinishHash$MH, "BCryptFinishHash");
        try {
            return (int)mh$.invokeExact(hHash.address(), pbOutput.address(), cbOutput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDuplicateHash$MH() {
        return RuntimeHelper.requireNonNull(constants$852.BCryptDuplicateHash$MH,"BCryptDuplicateHash");
    }
    public static int BCryptDuplicateHash ( Addressable hHash,  Addressable phNewHash,  Addressable pbHashObject,  int cbHashObject,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$852.BCryptDuplicateHash$MH, "BCryptDuplicateHash");
        try {
            return (int)mh$.invokeExact(hHash.address(), phNewHash.address(), pbHashObject.address(), cbHashObject, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDestroyHash$MH() {
        return RuntimeHelper.requireNonNull(constants$852.BCryptDestroyHash$MH,"BCryptDestroyHash");
    }
    public static int BCryptDestroyHash ( Addressable hHash) {
        var mh$ = RuntimeHelper.requireNonNull(constants$852.BCryptDestroyHash$MH, "BCryptDestroyHash");
        try {
            return (int)mh$.invokeExact(hHash.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptGenRandom$MH() {
        return RuntimeHelper.requireNonNull(constants$853.BCryptGenRandom$MH,"BCryptGenRandom");
    }
    public static int BCryptGenRandom ( Addressable hAlgorithm,  Addressable pbBuffer,  int cbBuffer,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$853.BCryptGenRandom$MH, "BCryptGenRandom");
        try {
            return (int)mh$.invokeExact(hAlgorithm.address(), pbBuffer.address(), cbBuffer, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDeriveKeyCapi$MH() {
        return RuntimeHelper.requireNonNull(constants$853.BCryptDeriveKeyCapi$MH,"BCryptDeriveKeyCapi");
    }
    public static int BCryptDeriveKeyCapi ( Addressable hHash,  Addressable hTargetAlg,  Addressable pbDerivedKey,  int cbDerivedKey,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$853.BCryptDeriveKeyCapi$MH, "BCryptDeriveKeyCapi");
        try {
            return (int)mh$.invokeExact(hHash.address(), hTargetAlg.address(), pbDerivedKey.address(), cbDerivedKey, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDeriveKeyPBKDF2$MH() {
        return RuntimeHelper.requireNonNull(constants$853.BCryptDeriveKeyPBKDF2$MH,"BCryptDeriveKeyPBKDF2");
    }
    public static int BCryptDeriveKeyPBKDF2 ( Addressable hPrf,  Addressable pbPassword,  int cbPassword,  Addressable pbSalt,  int cbSalt,  long cIterations,  Addressable pbDerivedKey,  int cbDerivedKey,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$853.BCryptDeriveKeyPBKDF2$MH, "BCryptDeriveKeyPBKDF2");
        try {
            return (int)mh$.invokeExact(hPrf.address(), pbPassword.address(), cbPassword, pbSalt.address(), cbSalt, cIterations, pbDerivedKey.address(), cbDerivedKey, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptResolveProviders$MH() {
        return RuntimeHelper.requireNonNull(constants$853.BCryptResolveProviders$MH,"BCryptResolveProviders");
    }
    public static int BCryptResolveProviders ( Addressable pszContext,  int dwInterface,  Addressable pszFunction,  Addressable pszProvider,  int dwMode,  int dwFlags,  Addressable pcbBuffer,  Addressable ppBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$853.BCryptResolveProviders$MH, "BCryptResolveProviders");
        try {
            return (int)mh$.invokeExact(pszContext.address(), dwInterface, pszFunction.address(), pszProvider.address(), dwMode, dwFlags, pcbBuffer.address(), ppBuffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptGetFipsAlgorithmMode$MH() {
        return RuntimeHelper.requireNonNull(constants$853.BCryptGetFipsAlgorithmMode$MH,"BCryptGetFipsAlgorithmMode");
    }
    public static int BCryptGetFipsAlgorithmMode ( Addressable pfEnabled) {
        var mh$ = RuntimeHelper.requireNonNull(constants$853.BCryptGetFipsAlgorithmMode$MH, "BCryptGetFipsAlgorithmMode");
        try {
            return (int)mh$.invokeExact(pfEnabled.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptQueryProviderRegistration$MH() {
        return RuntimeHelper.requireNonNull(constants$853.BCryptQueryProviderRegistration$MH,"BCryptQueryProviderRegistration");
    }
    public static int BCryptQueryProviderRegistration ( Addressable pszProvider,  int dwMode,  int dwInterface,  Addressable pcbBuffer,  Addressable ppBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$853.BCryptQueryProviderRegistration$MH, "BCryptQueryProviderRegistration");
        try {
            return (int)mh$.invokeExact(pszProvider.address(), dwMode, dwInterface, pcbBuffer.address(), ppBuffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEnumRegisteredProviders$MH() {
        return RuntimeHelper.requireNonNull(constants$854.BCryptEnumRegisteredProviders$MH,"BCryptEnumRegisteredProviders");
    }
    public static int BCryptEnumRegisteredProviders ( Addressable pcbBuffer,  Addressable ppBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$854.BCryptEnumRegisteredProviders$MH, "BCryptEnumRegisteredProviders");
        try {
            return (int)mh$.invokeExact(pcbBuffer.address(), ppBuffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptCreateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$854.BCryptCreateContext$MH,"BCryptCreateContext");
    }
    public static int BCryptCreateContext ( int dwTable,  Addressable pszContext,  Addressable pConfig) {
        var mh$ = RuntimeHelper.requireNonNull(constants$854.BCryptCreateContext$MH, "BCryptCreateContext");
        try {
            return (int)mh$.invokeExact(dwTable, pszContext.address(), pConfig.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDeleteContext$MH() {
        return RuntimeHelper.requireNonNull(constants$854.BCryptDeleteContext$MH,"BCryptDeleteContext");
    }
    public static int BCryptDeleteContext ( int dwTable,  Addressable pszContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$854.BCryptDeleteContext$MH, "BCryptDeleteContext");
        try {
            return (int)mh$.invokeExact(dwTable, pszContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEnumContexts$MH() {
        return RuntimeHelper.requireNonNull(constants$854.BCryptEnumContexts$MH,"BCryptEnumContexts");
    }
    public static int BCryptEnumContexts ( int dwTable,  Addressable pcbBuffer,  Addressable ppBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$854.BCryptEnumContexts$MH, "BCryptEnumContexts");
        try {
            return (int)mh$.invokeExact(dwTable, pcbBuffer.address(), ppBuffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptConfigureContext$MH() {
        return RuntimeHelper.requireNonNull(constants$854.BCryptConfigureContext$MH,"BCryptConfigureContext");
    }
    public static int BCryptConfigureContext ( int dwTable,  Addressable pszContext,  Addressable pConfig) {
        var mh$ = RuntimeHelper.requireNonNull(constants$854.BCryptConfigureContext$MH, "BCryptConfigureContext");
        try {
            return (int)mh$.invokeExact(dwTable, pszContext.address(), pConfig.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptQueryContextConfiguration$MH() {
        return RuntimeHelper.requireNonNull(constants$854.BCryptQueryContextConfiguration$MH,"BCryptQueryContextConfiguration");
    }
    public static int BCryptQueryContextConfiguration ( int dwTable,  Addressable pszContext,  Addressable pcbBuffer,  Addressable ppBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$854.BCryptQueryContextConfiguration$MH, "BCryptQueryContextConfiguration");
        try {
            return (int)mh$.invokeExact(dwTable, pszContext.address(), pcbBuffer.address(), ppBuffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptAddContextFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$855.BCryptAddContextFunction$MH,"BCryptAddContextFunction");
    }
    public static int BCryptAddContextFunction ( int dwTable,  Addressable pszContext,  int dwInterface,  Addressable pszFunction,  int dwPosition) {
        var mh$ = RuntimeHelper.requireNonNull(constants$855.BCryptAddContextFunction$MH, "BCryptAddContextFunction");
        try {
            return (int)mh$.invokeExact(dwTable, pszContext.address(), dwInterface, pszFunction.address(), dwPosition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptRemoveContextFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$855.BCryptRemoveContextFunction$MH,"BCryptRemoveContextFunction");
    }
    public static int BCryptRemoveContextFunction ( int dwTable,  Addressable pszContext,  int dwInterface,  Addressable pszFunction) {
        var mh$ = RuntimeHelper.requireNonNull(constants$855.BCryptRemoveContextFunction$MH, "BCryptRemoveContextFunction");
        try {
            return (int)mh$.invokeExact(dwTable, pszContext.address(), dwInterface, pszFunction.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEnumContextFunctions$MH() {
        return RuntimeHelper.requireNonNull(constants$855.BCryptEnumContextFunctions$MH,"BCryptEnumContextFunctions");
    }
    public static int BCryptEnumContextFunctions ( int dwTable,  Addressable pszContext,  int dwInterface,  Addressable pcbBuffer,  Addressable ppBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$855.BCryptEnumContextFunctions$MH, "BCryptEnumContextFunctions");
        try {
            return (int)mh$.invokeExact(dwTable, pszContext.address(), dwInterface, pcbBuffer.address(), ppBuffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptConfigureContextFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$855.BCryptConfigureContextFunction$MH,"BCryptConfigureContextFunction");
    }
    public static int BCryptConfigureContextFunction ( int dwTable,  Addressable pszContext,  int dwInterface,  Addressable pszFunction,  Addressable pConfig) {
        var mh$ = RuntimeHelper.requireNonNull(constants$855.BCryptConfigureContextFunction$MH, "BCryptConfigureContextFunction");
        try {
            return (int)mh$.invokeExact(dwTable, pszContext.address(), dwInterface, pszFunction.address(), pConfig.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptQueryContextFunctionConfiguration$MH() {
        return RuntimeHelper.requireNonNull(constants$855.BCryptQueryContextFunctionConfiguration$MH,"BCryptQueryContextFunctionConfiguration");
    }
    public static int BCryptQueryContextFunctionConfiguration ( int dwTable,  Addressable pszContext,  int dwInterface,  Addressable pszFunction,  Addressable pcbBuffer,  Addressable ppBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$855.BCryptQueryContextFunctionConfiguration$MH, "BCryptQueryContextFunctionConfiguration");
        try {
            return (int)mh$.invokeExact(dwTable, pszContext.address(), dwInterface, pszFunction.address(), pcbBuffer.address(), ppBuffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEnumContextFunctionProviders$MH() {
        return RuntimeHelper.requireNonNull(constants$855.BCryptEnumContextFunctionProviders$MH,"BCryptEnumContextFunctionProviders");
    }
    public static int BCryptEnumContextFunctionProviders ( int dwTable,  Addressable pszContext,  int dwInterface,  Addressable pszFunction,  Addressable pcbBuffer,  Addressable ppBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$855.BCryptEnumContextFunctionProviders$MH, "BCryptEnumContextFunctionProviders");
        try {
            return (int)mh$.invokeExact(dwTable, pszContext.address(), dwInterface, pszFunction.address(), pcbBuffer.address(), ppBuffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptSetContextFunctionProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$856.BCryptSetContextFunctionProperty$MH,"BCryptSetContextFunctionProperty");
    }
    public static int BCryptSetContextFunctionProperty ( int dwTable,  Addressable pszContext,  int dwInterface,  Addressable pszFunction,  Addressable pszProperty,  int cbValue,  Addressable pbValue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$856.BCryptSetContextFunctionProperty$MH, "BCryptSetContextFunctionProperty");
        try {
            return (int)mh$.invokeExact(dwTable, pszContext.address(), dwInterface, pszFunction.address(), pszProperty.address(), cbValue, pbValue.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptQueryContextFunctionProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$856.BCryptQueryContextFunctionProperty$MH,"BCryptQueryContextFunctionProperty");
    }
    public static int BCryptQueryContextFunctionProperty ( int dwTable,  Addressable pszContext,  int dwInterface,  Addressable pszFunction,  Addressable pszProperty,  Addressable pcbValue,  Addressable ppbValue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$856.BCryptQueryContextFunctionProperty$MH, "BCryptQueryContextFunctionProperty");
        try {
            return (int)mh$.invokeExact(dwTable, pszContext.address(), dwInterface, pszFunction.address(), pszProperty.address(), pcbValue.address(), ppbValue.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptRegisterConfigChangeNotify$MH() {
        return RuntimeHelper.requireNonNull(constants$856.BCryptRegisterConfigChangeNotify$MH,"BCryptRegisterConfigChangeNotify");
    }
    public static int BCryptRegisterConfigChangeNotify ( Addressable phEvent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$856.BCryptRegisterConfigChangeNotify$MH, "BCryptRegisterConfigChangeNotify");
        try {
            return (int)mh$.invokeExact(phEvent.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptUnregisterConfigChangeNotify$MH() {
        return RuntimeHelper.requireNonNull(constants$856.BCryptUnregisterConfigChangeNotify$MH,"BCryptUnregisterConfigChangeNotify");
    }
    public static int BCryptUnregisterConfigChangeNotify ( Addressable hEvent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$856.BCryptUnregisterConfigChangeNotify$MH, "BCryptUnregisterConfigChangeNotify");
        try {
            return (int)mh$.invokeExact(hEvent.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout SECURITY_STATUS = C_LONG;
    public static MethodHandle NCryptOpenStorageProvider$MH() {
        return RuntimeHelper.requireNonNull(constants$857.NCryptOpenStorageProvider$MH,"NCryptOpenStorageProvider");
    }
    public static int NCryptOpenStorageProvider ( Addressable phProvider,  Addressable pszProviderName,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$857.NCryptOpenStorageProvider$MH, "NCryptOpenStorageProvider");
        try {
            return (int)mh$.invokeExact(phProvider.address(), pszProviderName.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptEnumAlgorithms$MH() {
        return RuntimeHelper.requireNonNull(constants$857.NCryptEnumAlgorithms$MH,"NCryptEnumAlgorithms");
    }
    public static int NCryptEnumAlgorithms ( long hProvider,  int dwAlgOperations,  Addressable pdwAlgCount,  Addressable ppAlgList,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$857.NCryptEnumAlgorithms$MH, "NCryptEnumAlgorithms");
        try {
            return (int)mh$.invokeExact(hProvider, dwAlgOperations, pdwAlgCount.address(), ppAlgList.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptIsAlgSupported$MH() {
        return RuntimeHelper.requireNonNull(constants$857.NCryptIsAlgSupported$MH,"NCryptIsAlgSupported");
    }
    public static int NCryptIsAlgSupported ( long hProvider,  Addressable pszAlgId,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$857.NCryptIsAlgSupported$MH, "NCryptIsAlgSupported");
        try {
            return (int)mh$.invokeExact(hProvider, pszAlgId.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptEnumKeys$MH() {
        return RuntimeHelper.requireNonNull(constants$857.NCryptEnumKeys$MH,"NCryptEnumKeys");
    }
    public static int NCryptEnumKeys ( long hProvider,  Addressable pszScope,  Addressable ppKeyName,  Addressable ppEnumState,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$857.NCryptEnumKeys$MH, "NCryptEnumKeys");
        try {
            return (int)mh$.invokeExact(hProvider, pszScope.address(), ppKeyName.address(), ppEnumState.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptEnumStorageProviders$MH() {
        return RuntimeHelper.requireNonNull(constants$858.NCryptEnumStorageProviders$MH,"NCryptEnumStorageProviders");
    }
    public static int NCryptEnumStorageProviders ( Addressable pdwProviderCount,  Addressable ppProviderList,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$858.NCryptEnumStorageProviders$MH, "NCryptEnumStorageProviders");
        try {
            return (int)mh$.invokeExact(pdwProviderCount.address(), ppProviderList.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptFreeBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$858.NCryptFreeBuffer$MH,"NCryptFreeBuffer");
    }
    public static int NCryptFreeBuffer ( Addressable pvInput) {
        var mh$ = RuntimeHelper.requireNonNull(constants$858.NCryptFreeBuffer$MH, "NCryptFreeBuffer");
        try {
            return (int)mh$.invokeExact(pvInput.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptOpenKey$MH() {
        return RuntimeHelper.requireNonNull(constants$858.NCryptOpenKey$MH,"NCryptOpenKey");
    }
    public static int NCryptOpenKey ( long hProvider,  Addressable phKey,  Addressable pszKeyName,  int dwLegacyKeySpec,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$858.NCryptOpenKey$MH, "NCryptOpenKey");
        try {
            return (int)mh$.invokeExact(hProvider, phKey.address(), pszKeyName.address(), dwLegacyKeySpec, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptCreatePersistedKey$MH() {
        return RuntimeHelper.requireNonNull(constants$858.NCryptCreatePersistedKey$MH,"NCryptCreatePersistedKey");
    }
    public static int NCryptCreatePersistedKey ( long hProvider,  Addressable phKey,  Addressable pszAlgId,  Addressable pszKeyName,  int dwLegacyKeySpec,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$858.NCryptCreatePersistedKey$MH, "NCryptCreatePersistedKey");
        try {
            return (int)mh$.invokeExact(hProvider, phKey.address(), pszAlgId.address(), pszKeyName.address(), dwLegacyKeySpec, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptGetProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$858.NCryptGetProperty$MH,"NCryptGetProperty");
    }
    public static int NCryptGetProperty ( long hObject,  Addressable pszProperty,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$858.NCryptGetProperty$MH, "NCryptGetProperty");
        try {
            return (int)mh$.invokeExact(hObject, pszProperty.address(), pbOutput.address(), cbOutput, pcbResult.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptSetProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$858.NCryptSetProperty$MH,"NCryptSetProperty");
    }
    public static int NCryptSetProperty ( long hObject,  Addressable pszProperty,  Addressable pbInput,  int cbInput,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$858.NCryptSetProperty$MH, "NCryptSetProperty");
        try {
            return (int)mh$.invokeExact(hObject, pszProperty.address(), pbInput.address(), cbInput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptFinalizeKey$MH() {
        return RuntimeHelper.requireNonNull(constants$859.NCryptFinalizeKey$MH,"NCryptFinalizeKey");
    }
    public static int NCryptFinalizeKey ( long hKey,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$859.NCryptFinalizeKey$MH, "NCryptFinalizeKey");
        try {
            return (int)mh$.invokeExact(hKey, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptEncrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$859.NCryptEncrypt$MH,"NCryptEncrypt");
    }
    public static int NCryptEncrypt ( long hKey,  Addressable pbInput,  int cbInput,  Addressable pPaddingInfo,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$859.NCryptEncrypt$MH, "NCryptEncrypt");
        try {
            return (int)mh$.invokeExact(hKey, pbInput.address(), cbInput, pPaddingInfo.address(), pbOutput.address(), cbOutput, pcbResult.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptDecrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$859.NCryptDecrypt$MH,"NCryptDecrypt");
    }
    public static int NCryptDecrypt ( long hKey,  Addressable pbInput,  int cbInput,  Addressable pPaddingInfo,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$859.NCryptDecrypt$MH, "NCryptDecrypt");
        try {
            return (int)mh$.invokeExact(hKey, pbInput.address(), cbInput, pPaddingInfo.address(), pbOutput.address(), cbOutput, pcbResult.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptImportKey$MH() {
        return RuntimeHelper.requireNonNull(constants$859.NCryptImportKey$MH,"NCryptImportKey");
    }
    public static int NCryptImportKey ( long hProvider,  long hImportKey,  Addressable pszBlobType,  Addressable pParameterList,  Addressable phKey,  Addressable pbData,  int cbData,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$859.NCryptImportKey$MH, "NCryptImportKey");
        try {
            return (int)mh$.invokeExact(hProvider, hImportKey, pszBlobType.address(), pParameterList.address(), phKey.address(), pbData.address(), cbData, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptExportKey$MH() {
        return RuntimeHelper.requireNonNull(constants$859.NCryptExportKey$MH,"NCryptExportKey");
    }
    public static int NCryptExportKey ( long hKey,  long hExportKey,  Addressable pszBlobType,  Addressable pParameterList,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$859.NCryptExportKey$MH, "NCryptExportKey");
        try {
            return (int)mh$.invokeExact(hKey, hExportKey, pszBlobType.address(), pParameterList.address(), pbOutput.address(), cbOutput, pcbResult.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptSignHash$MH() {
        return RuntimeHelper.requireNonNull(constants$859.NCryptSignHash$MH,"NCryptSignHash");
    }
    public static int NCryptSignHash ( long hKey,  Addressable pPaddingInfo,  Addressable pbHashValue,  int cbHashValue,  Addressable pbSignature,  int cbSignature,  Addressable pcbResult,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$859.NCryptSignHash$MH, "NCryptSignHash");
        try {
            return (int)mh$.invokeExact(hKey, pPaddingInfo.address(), pbHashValue.address(), cbHashValue, pbSignature.address(), cbSignature, pcbResult.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptVerifySignature$MH() {
        return RuntimeHelper.requireNonNull(constants$860.NCryptVerifySignature$MH,"NCryptVerifySignature");
    }
    public static int NCryptVerifySignature ( long hKey,  Addressable pPaddingInfo,  Addressable pbHashValue,  int cbHashValue,  Addressable pbSignature,  int cbSignature,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$860.NCryptVerifySignature$MH, "NCryptVerifySignature");
        try {
            return (int)mh$.invokeExact(hKey, pPaddingInfo.address(), pbHashValue.address(), cbHashValue, pbSignature.address(), cbSignature, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptDeleteKey$MH() {
        return RuntimeHelper.requireNonNull(constants$860.NCryptDeleteKey$MH,"NCryptDeleteKey");
    }
    public static int NCryptDeleteKey ( long hKey,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$860.NCryptDeleteKey$MH, "NCryptDeleteKey");
        try {
            return (int)mh$.invokeExact(hKey, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptFreeObject$MH() {
        return RuntimeHelper.requireNonNull(constants$860.NCryptFreeObject$MH,"NCryptFreeObject");
    }
    public static int NCryptFreeObject ( long hObject) {
        var mh$ = RuntimeHelper.requireNonNull(constants$860.NCryptFreeObject$MH, "NCryptFreeObject");
        try {
            return (int)mh$.invokeExact(hObject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptIsKeyHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$860.NCryptIsKeyHandle$MH,"NCryptIsKeyHandle");
    }
    public static int NCryptIsKeyHandle ( long hKey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$860.NCryptIsKeyHandle$MH, "NCryptIsKeyHandle");
        try {
            return (int)mh$.invokeExact(hKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptTranslateHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$860.NCryptTranslateHandle$MH,"NCryptTranslateHandle");
    }
    public static int NCryptTranslateHandle ( Addressable phProvider,  Addressable phKey,  long hLegacyProv,  long hLegacyKey,  int dwLegacyKeySpec,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$860.NCryptTranslateHandle$MH, "NCryptTranslateHandle");
        try {
            return (int)mh$.invokeExact(phProvider.address(), phKey.address(), hLegacyProv, hLegacyKey, dwLegacyKeySpec, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptNotifyChangeKey$MH() {
        return RuntimeHelper.requireNonNull(constants$860.NCryptNotifyChangeKey$MH,"NCryptNotifyChangeKey");
    }
    public static int NCryptNotifyChangeKey ( long hProvider,  Addressable phEvent,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$860.NCryptNotifyChangeKey$MH, "NCryptNotifyChangeKey");
        try {
            return (int)mh$.invokeExact(hProvider, phEvent.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptSecretAgreement$MH() {
        return RuntimeHelper.requireNonNull(constants$861.NCryptSecretAgreement$MH,"NCryptSecretAgreement");
    }
    public static int NCryptSecretAgreement ( long hPrivKey,  long hPubKey,  Addressable phAgreedSecret,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$861.NCryptSecretAgreement$MH, "NCryptSecretAgreement");
        try {
            return (int)mh$.invokeExact(hPrivKey, hPubKey, phAgreedSecret.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptDeriveKey$MH() {
        return RuntimeHelper.requireNonNull(constants$861.NCryptDeriveKey$MH,"NCryptDeriveKey");
    }
    public static int NCryptDeriveKey ( long hSharedSecret,  Addressable pwszKDF,  Addressable pParameterList,  Addressable pbDerivedKey,  int cbDerivedKey,  Addressable pcbResult,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$861.NCryptDeriveKey$MH, "NCryptDeriveKey");
        try {
            return (int)mh$.invokeExact(hSharedSecret, pwszKDF.address(), pParameterList.address(), pbDerivedKey.address(), cbDerivedKey, pcbResult.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptFormatObject$MH() {
        return RuntimeHelper.requireNonNull(constants$862.CryptFormatObject$MH,"CryptFormatObject");
    }
    public static int CryptFormatObject ( int dwCertEncodingType,  int dwFormatType,  int dwFormatStrType,  Addressable pFormatStruct,  Addressable lpszStructType,  Addressable pbEncoded,  int cbEncoded,  Addressable pbFormat,  Addressable pcbFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$862.CryptFormatObject$MH, "CryptFormatObject");
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, dwFormatType, dwFormatStrType, pFormatStruct.address(), lpszStructType.address(), pbEncoded.address(), cbEncoded, pbFormat.address(), pcbFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEncodeObjectEx$MH() {
        return RuntimeHelper.requireNonNull(constants$863.CryptEncodeObjectEx$MH,"CryptEncodeObjectEx");
    }
    public static int CryptEncodeObjectEx ( int dwCertEncodingType,  Addressable lpszStructType,  Addressable pvStructInfo,  int dwFlags,  Addressable pEncodePara,  Addressable pvEncoded,  Addressable pcbEncoded) {
        var mh$ = RuntimeHelper.requireNonNull(constants$863.CryptEncodeObjectEx$MH, "CryptEncodeObjectEx");
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, lpszStructType.address(), pvStructInfo.address(), dwFlags, pEncodePara.address(), pvEncoded.address(), pcbEncoded.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEncodeObject$MH() {
        return RuntimeHelper.requireNonNull(constants$863.CryptEncodeObject$MH,"CryptEncodeObject");
    }
    public static int CryptEncodeObject ( int dwCertEncodingType,  Addressable lpszStructType,  Addressable pvStructInfo,  Addressable pbEncoded,  Addressable pcbEncoded) {
        var mh$ = RuntimeHelper.requireNonNull(constants$863.CryptEncodeObject$MH, "CryptEncodeObject");
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, lpszStructType.address(), pvStructInfo.address(), pbEncoded.address(), pcbEncoded.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDecodeObjectEx$MH() {
        return RuntimeHelper.requireNonNull(constants$863.CryptDecodeObjectEx$MH,"CryptDecodeObjectEx");
    }
    public static int CryptDecodeObjectEx ( int dwCertEncodingType,  Addressable lpszStructType,  Addressable pbEncoded,  int cbEncoded,  int dwFlags,  Addressable pDecodePara,  Addressable pvStructInfo,  Addressable pcbStructInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$863.CryptDecodeObjectEx$MH, "CryptDecodeObjectEx");
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, lpszStructType.address(), pbEncoded.address(), cbEncoded, dwFlags, pDecodePara.address(), pvStructInfo.address(), pcbStructInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDecodeObject$MH() {
        return RuntimeHelper.requireNonNull(constants$863.CryptDecodeObject$MH,"CryptDecodeObject");
    }
    public static int CryptDecodeObject ( int dwCertEncodingType,  Addressable lpszStructType,  Addressable pbEncoded,  int cbEncoded,  int dwFlags,  Addressable pvStructInfo,  Addressable pcbStructInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$863.CryptDecodeObject$MH, "CryptDecodeObject");
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, lpszStructType.address(), pbEncoded.address(), cbEncoded, dwFlags, pvStructInfo.address(), pcbStructInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptInstallOIDFunctionAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$863.CryptInstallOIDFunctionAddress$MH,"CryptInstallOIDFunctionAddress");
    }
    public static int CryptInstallOIDFunctionAddress ( Addressable hModule,  int dwEncodingType,  Addressable pszFuncName,  int cFuncEntry,  Addressable rgFuncEntry,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$863.CryptInstallOIDFunctionAddress$MH, "CryptInstallOIDFunctionAddress");
        try {
            return (int)mh$.invokeExact(hModule.address(), dwEncodingType, pszFuncName.address(), cFuncEntry, rgFuncEntry.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptInitOIDFunctionSet$MH() {
        return RuntimeHelper.requireNonNull(constants$864.CryptInitOIDFunctionSet$MH,"CryptInitOIDFunctionSet");
    }
    public static MemoryAddress CryptInitOIDFunctionSet ( Addressable pszFuncName,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$864.CryptInitOIDFunctionSet$MH, "CryptInitOIDFunctionSet");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pszFuncName.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetOIDFunctionAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$864.CryptGetOIDFunctionAddress$MH,"CryptGetOIDFunctionAddress");
    }
    public static int CryptGetOIDFunctionAddress ( Addressable hFuncSet,  int dwEncodingType,  Addressable pszOID,  int dwFlags,  Addressable ppvFuncAddr,  Addressable phFuncAddr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$864.CryptGetOIDFunctionAddress$MH, "CryptGetOIDFunctionAddress");
        try {
            return (int)mh$.invokeExact(hFuncSet.address(), dwEncodingType, pszOID.address(), dwFlags, ppvFuncAddr.address(), phFuncAddr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetDefaultOIDDllList$MH() {
        return RuntimeHelper.requireNonNull(constants$864.CryptGetDefaultOIDDllList$MH,"CryptGetDefaultOIDDllList");
    }
    public static int CryptGetDefaultOIDDllList ( Addressable hFuncSet,  int dwEncodingType,  Addressable pwszDllList,  Addressable pcchDllList) {
        var mh$ = RuntimeHelper.requireNonNull(constants$864.CryptGetDefaultOIDDllList$MH, "CryptGetDefaultOIDDllList");
        try {
            return (int)mh$.invokeExact(hFuncSet.address(), dwEncodingType, pwszDllList.address(), pcchDllList.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetDefaultOIDFunctionAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$864.CryptGetDefaultOIDFunctionAddress$MH,"CryptGetDefaultOIDFunctionAddress");
    }
    public static int CryptGetDefaultOIDFunctionAddress ( Addressable hFuncSet,  int dwEncodingType,  Addressable pwszDll,  int dwFlags,  Addressable ppvFuncAddr,  Addressable phFuncAddr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$864.CryptGetDefaultOIDFunctionAddress$MH, "CryptGetDefaultOIDFunctionAddress");
        try {
            return (int)mh$.invokeExact(hFuncSet.address(), dwEncodingType, pwszDll.address(), dwFlags, ppvFuncAddr.address(), phFuncAddr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptFreeOIDFunctionAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$864.CryptFreeOIDFunctionAddress$MH,"CryptFreeOIDFunctionAddress");
    }
    public static int CryptFreeOIDFunctionAddress ( Addressable hFuncAddr,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$864.CryptFreeOIDFunctionAddress$MH, "CryptFreeOIDFunctionAddress");
        try {
            return (int)mh$.invokeExact(hFuncAddr.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptRegisterOIDFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$864.CryptRegisterOIDFunction$MH,"CryptRegisterOIDFunction");
    }
    public static int CryptRegisterOIDFunction ( int dwEncodingType,  Addressable pszFuncName,  Addressable pszOID,  Addressable pwszDll,  Addressable pszOverrideFuncName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$864.CryptRegisterOIDFunction$MH, "CryptRegisterOIDFunction");
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName.address(), pszOID.address(), pwszDll.address(), pszOverrideFuncName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUnregisterOIDFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$865.CryptUnregisterOIDFunction$MH,"CryptUnregisterOIDFunction");
    }
    public static int CryptUnregisterOIDFunction ( int dwEncodingType,  Addressable pszFuncName,  Addressable pszOID) {
        var mh$ = RuntimeHelper.requireNonNull(constants$865.CryptUnregisterOIDFunction$MH, "CryptUnregisterOIDFunction");
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName.address(), pszOID.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptRegisterDefaultOIDFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$865.CryptRegisterDefaultOIDFunction$MH,"CryptRegisterDefaultOIDFunction");
    }
    public static int CryptRegisterDefaultOIDFunction ( int dwEncodingType,  Addressable pszFuncName,  int dwIndex,  Addressable pwszDll) {
        var mh$ = RuntimeHelper.requireNonNull(constants$865.CryptRegisterDefaultOIDFunction$MH, "CryptRegisterDefaultOIDFunction");
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName.address(), dwIndex, pwszDll.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUnregisterDefaultOIDFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$865.CryptUnregisterDefaultOIDFunction$MH,"CryptUnregisterDefaultOIDFunction");
    }
    public static int CryptUnregisterDefaultOIDFunction ( int dwEncodingType,  Addressable pszFuncName,  Addressable pwszDll) {
        var mh$ = RuntimeHelper.requireNonNull(constants$865.CryptUnregisterDefaultOIDFunction$MH, "CryptUnregisterDefaultOIDFunction");
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName.address(), pwszDll.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetOIDFunctionValue$MH() {
        return RuntimeHelper.requireNonNull(constants$865.CryptSetOIDFunctionValue$MH,"CryptSetOIDFunctionValue");
    }
    public static int CryptSetOIDFunctionValue ( int dwEncodingType,  Addressable pszFuncName,  Addressable pszOID,  Addressable pwszValueName,  int dwValueType,  Addressable pbValueData,  int cbValueData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$865.CryptSetOIDFunctionValue$MH, "CryptSetOIDFunctionValue");
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName.address(), pszOID.address(), pwszValueName.address(), dwValueType, pbValueData.address(), cbValueData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetOIDFunctionValue$MH() {
        return RuntimeHelper.requireNonNull(constants$865.CryptGetOIDFunctionValue$MH,"CryptGetOIDFunctionValue");
    }
    public static int CryptGetOIDFunctionValue ( int dwEncodingType,  Addressable pszFuncName,  Addressable pszOID,  Addressable pwszValueName,  Addressable pdwValueType,  Addressable pbValueData,  Addressable pcbValueData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$865.CryptGetOIDFunctionValue$MH, "CryptGetOIDFunctionValue");
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName.address(), pszOID.address(), pwszValueName.address(), pdwValueType.address(), pbValueData.address(), pcbValueData.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEnumOIDFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$866.CryptEnumOIDFunction$MH,"CryptEnumOIDFunction");
    }
    public static int CryptEnumOIDFunction ( int dwEncodingType,  Addressable pszFuncName,  Addressable pszOID,  int dwFlags,  Addressable pvArg,  Addressable pfnEnumOIDFunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$866.CryptEnumOIDFunction$MH, "CryptEnumOIDFunction");
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName.address(), pszOID.address(), dwFlags, pvArg.address(), pfnEnumOIDFunc.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptFindOIDInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$866.CryptFindOIDInfo$MH,"CryptFindOIDInfo");
    }
    public static MemoryAddress CryptFindOIDInfo ( int dwKeyType,  Addressable pvKey,  int dwGroupId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$866.CryptFindOIDInfo$MH, "CryptFindOIDInfo");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dwKeyType, pvKey.address(), dwGroupId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptRegisterOIDInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$866.CryptRegisterOIDInfo$MH,"CryptRegisterOIDInfo");
    }
    public static int CryptRegisterOIDInfo ( Addressable pInfo,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$866.CryptRegisterOIDInfo$MH, "CryptRegisterOIDInfo");
        try {
            return (int)mh$.invokeExact(pInfo.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUnregisterOIDInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$867.CryptUnregisterOIDInfo$MH,"CryptUnregisterOIDInfo");
    }
    public static int CryptUnregisterOIDInfo ( Addressable pInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$867.CryptUnregisterOIDInfo$MH, "CryptUnregisterOIDInfo");
        try {
            return (int)mh$.invokeExact(pInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEnumOIDInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$867.CryptEnumOIDInfo$MH,"CryptEnumOIDInfo");
    }
    public static int CryptEnumOIDInfo ( int dwGroupId,  int dwFlags,  Addressable pvArg,  Addressable pfnEnumOIDInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$867.CryptEnumOIDInfo$MH, "CryptEnumOIDInfo");
        try {
            return (int)mh$.invokeExact(dwGroupId, dwFlags, pvArg.address(), pfnEnumOIDInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptFindLocalizedName$MH() {
        return RuntimeHelper.requireNonNull(constants$867.CryptFindLocalizedName$MH,"CryptFindLocalizedName");
    }
    public static MemoryAddress CryptFindLocalizedName ( Addressable pwszCryptName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$867.CryptFindLocalizedName$MH, "CryptFindLocalizedName");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pwszCryptName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgOpenToEncode$MH() {
        return RuntimeHelper.requireNonNull(constants$867.CryptMsgOpenToEncode$MH,"CryptMsgOpenToEncode");
    }
    public static MemoryAddress CryptMsgOpenToEncode ( int dwMsgEncodingType,  int dwFlags,  int dwMsgType,  Addressable pvMsgEncodeInfo,  Addressable pszInnerContentObjID,  Addressable pStreamInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$867.CryptMsgOpenToEncode$MH, "CryptMsgOpenToEncode");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dwMsgEncodingType, dwFlags, dwMsgType, pvMsgEncodeInfo.address(), pszInnerContentObjID.address(), pStreamInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgCalculateEncodedLength$MH() {
        return RuntimeHelper.requireNonNull(constants$868.CryptMsgCalculateEncodedLength$MH,"CryptMsgCalculateEncodedLength");
    }
    public static int CryptMsgCalculateEncodedLength ( int dwMsgEncodingType,  int dwFlags,  int dwMsgType,  Addressable pvMsgEncodeInfo,  Addressable pszInnerContentObjID,  int cbData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$868.CryptMsgCalculateEncodedLength$MH, "CryptMsgCalculateEncodedLength");
        try {
            return (int)mh$.invokeExact(dwMsgEncodingType, dwFlags, dwMsgType, pvMsgEncodeInfo.address(), pszInnerContentObjID.address(), cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgOpenToDecode$MH() {
        return RuntimeHelper.requireNonNull(constants$868.CryptMsgOpenToDecode$MH,"CryptMsgOpenToDecode");
    }
    public static MemoryAddress CryptMsgOpenToDecode ( int dwMsgEncodingType,  int dwFlags,  int dwMsgType,  long hCryptProv,  Addressable pRecipientInfo,  Addressable pStreamInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$868.CryptMsgOpenToDecode$MH, "CryptMsgOpenToDecode");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dwMsgEncodingType, dwFlags, dwMsgType, hCryptProv, pRecipientInfo.address(), pStreamInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgDuplicate$MH() {
        return RuntimeHelper.requireNonNull(constants$868.CryptMsgDuplicate$MH,"CryptMsgDuplicate");
    }
    public static MemoryAddress CryptMsgDuplicate ( Addressable hCryptMsg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$868.CryptMsgDuplicate$MH, "CryptMsgDuplicate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hCryptMsg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgClose$MH() {
        return RuntimeHelper.requireNonNull(constants$868.CryptMsgClose$MH,"CryptMsgClose");
    }
    public static int CryptMsgClose ( Addressable hCryptMsg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$868.CryptMsgClose$MH, "CryptMsgClose");
        try {
            return (int)mh$.invokeExact(hCryptMsg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$868.CryptMsgUpdate$MH,"CryptMsgUpdate");
    }
    public static int CryptMsgUpdate ( Addressable hCryptMsg,  Addressable pbData,  int cbData,  int fFinal) {
        var mh$ = RuntimeHelper.requireNonNull(constants$868.CryptMsgUpdate$MH, "CryptMsgUpdate");
        try {
            return (int)mh$.invokeExact(hCryptMsg.address(), pbData.address(), cbData, fFinal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgGetParam$MH() {
        return RuntimeHelper.requireNonNull(constants$868.CryptMsgGetParam$MH,"CryptMsgGetParam");
    }
    public static int CryptMsgGetParam ( Addressable hCryptMsg,  int dwParamType,  int dwIndex,  Addressable pvData,  Addressable pcbData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$868.CryptMsgGetParam$MH, "CryptMsgGetParam");
        try {
            return (int)mh$.invokeExact(hCryptMsg.address(), dwParamType, dwIndex, pvData.address(), pcbData.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgControl$MH() {
        return RuntimeHelper.requireNonNull(constants$869.CryptMsgControl$MH,"CryptMsgControl");
    }
    public static int CryptMsgControl ( Addressable hCryptMsg,  int dwFlags,  int dwCtrlType,  Addressable pvCtrlPara) {
        var mh$ = RuntimeHelper.requireNonNull(constants$869.CryptMsgControl$MH, "CryptMsgControl");
        try {
            return (int)mh$.invokeExact(hCryptMsg.address(), dwFlags, dwCtrlType, pvCtrlPara.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgVerifyCountersignatureEncoded$MH() {
        return RuntimeHelper.requireNonNull(constants$869.CryptMsgVerifyCountersignatureEncoded$MH,"CryptMsgVerifyCountersignatureEncoded");
    }
    public static int CryptMsgVerifyCountersignatureEncoded ( long hCryptProv,  int dwEncodingType,  Addressable pbSignerInfo,  int cbSignerInfo,  Addressable pbSignerInfoCountersignature,  int cbSignerInfoCountersignature,  Addressable pciCountersigner) {
        var mh$ = RuntimeHelper.requireNonNull(constants$869.CryptMsgVerifyCountersignatureEncoded$MH, "CryptMsgVerifyCountersignatureEncoded");
        try {
            return (int)mh$.invokeExact(hCryptProv, dwEncodingType, pbSignerInfo.address(), cbSignerInfo, pbSignerInfoCountersignature.address(), cbSignerInfoCountersignature, pciCountersigner.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgVerifyCountersignatureEncodedEx$MH() {
        return RuntimeHelper.requireNonNull(constants$869.CryptMsgVerifyCountersignatureEncodedEx$MH,"CryptMsgVerifyCountersignatureEncodedEx");
    }
    public static int CryptMsgVerifyCountersignatureEncodedEx ( long hCryptProv,  int dwEncodingType,  Addressable pbSignerInfo,  int cbSignerInfo,  Addressable pbSignerInfoCountersignature,  int cbSignerInfoCountersignature,  int dwSignerType,  Addressable pvSigner,  int dwFlags,  Addressable pvExtra) {
        var mh$ = RuntimeHelper.requireNonNull(constants$869.CryptMsgVerifyCountersignatureEncodedEx$MH, "CryptMsgVerifyCountersignatureEncodedEx");
        try {
            return (int)mh$.invokeExact(hCryptProv, dwEncodingType, pbSignerInfo.address(), cbSignerInfo, pbSignerInfoCountersignature.address(), cbSignerInfoCountersignature, dwSignerType, pvSigner.address(), dwFlags, pvExtra.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgCountersign$MH() {
        return RuntimeHelper.requireNonNull(constants$869.CryptMsgCountersign$MH,"CryptMsgCountersign");
    }
    public static int CryptMsgCountersign ( Addressable hCryptMsg,  int dwIndex,  int cCountersigners,  Addressable rgCountersigners) {
        var mh$ = RuntimeHelper.requireNonNull(constants$869.CryptMsgCountersign$MH, "CryptMsgCountersign");
        try {
            return (int)mh$.invokeExact(hCryptMsg.address(), dwIndex, cCountersigners, rgCountersigners.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgCountersignEncoded$MH() {
        return RuntimeHelper.requireNonNull(constants$869.CryptMsgCountersignEncoded$MH,"CryptMsgCountersignEncoded");
    }
    public static int CryptMsgCountersignEncoded ( int dwEncodingType,  Addressable pbSignerInfo,  int cbSignerInfo,  int cCountersigners,  Addressable rgCountersigners,  Addressable pbCountersignature,  Addressable pcbCountersignature) {
        var mh$ = RuntimeHelper.requireNonNull(constants$869.CryptMsgCountersignEncoded$MH, "CryptMsgCountersignEncoded");
        try {
            return (int)mh$.invokeExact(dwEncodingType, pbSignerInfo.address(), cbSignerInfo, cCountersigners, rgCountersigners.address(), pbCountersignature.address(), pcbCountersignature.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int KeyTypeOther() {
        return (int)0L;
    }
    public static int KeyTypeVirtualSmartCard() {
        return (int)1L;
    }
    public static int KeyTypePhysicalSmartCard() {
        return (int)2L;
    }
    public static int KeyTypePassport() {
        return (int)3L;
    }
    public static int KeyTypePassportRemote() {
        return (int)4L;
    }
    public static int KeyTypePassportSmartCard() {
        return (int)5L;
    }
    public static int KeyTypeHardware() {
        return (int)6L;
    }
    public static int KeyTypeSoftware() {
        return (int)7L;
    }
    public static int KeyTypeSelfSigned() {
        return (int)8L;
    }
    public static MethodHandle CertOpenStore$MH() {
        return RuntimeHelper.requireNonNull(constants$874.CertOpenStore$MH,"CertOpenStore");
    }
    public static MemoryAddress CertOpenStore ( Addressable lpszStoreProvider,  int dwEncodingType,  long hCryptProv,  int dwFlags,  Addressable pvPara) {
        var mh$ = RuntimeHelper.requireNonNull(constants$874.CertOpenStore$MH, "CertOpenStore");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpszStoreProvider.address(), dwEncodingType, hCryptProv, dwFlags, pvPara.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDuplicateStore$MH() {
        return RuntimeHelper.requireNonNull(constants$883.CertDuplicateStore$MH,"CertDuplicateStore");
    }
    public static MemoryAddress CertDuplicateStore ( Addressable hCertStore) {
        var mh$ = RuntimeHelper.requireNonNull(constants$883.CertDuplicateStore$MH, "CertDuplicateStore");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hCertStore.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSaveStore$MH() {
        return RuntimeHelper.requireNonNull(constants$883.CertSaveStore$MH,"CertSaveStore");
    }
    public static int CertSaveStore ( Addressable hCertStore,  int dwEncodingType,  int dwSaveAs,  int dwSaveTo,  Addressable pvSaveToPara,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$883.CertSaveStore$MH, "CertSaveStore");
        try {
            return (int)mh$.invokeExact(hCertStore.address(), dwEncodingType, dwSaveAs, dwSaveTo, pvSaveToPara.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCloseStore$MH() {
        return RuntimeHelper.requireNonNull(constants$883.CertCloseStore$MH,"CertCloseStore");
    }
    public static int CertCloseStore ( Addressable hCertStore,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$883.CertCloseStore$MH, "CertCloseStore");
        try {
            return (int)mh$.invokeExact(hCertStore.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetSubjectCertificateFromStore$MH() {
        return RuntimeHelper.requireNonNull(constants$883.CertGetSubjectCertificateFromStore$MH,"CertGetSubjectCertificateFromStore");
    }
    public static MemoryAddress CertGetSubjectCertificateFromStore ( Addressable hCertStore,  int dwCertEncodingType,  Addressable pCertId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$883.CertGetSubjectCertificateFromStore$MH, "CertGetSubjectCertificateFromStore");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hCertStore.address(), dwCertEncodingType, pCertId.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumCertificatesInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$883.CertEnumCertificatesInStore$MH,"CertEnumCertificatesInStore");
    }
    public static MemoryAddress CertEnumCertificatesInStore ( Addressable hCertStore,  Addressable pPrevCertContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$883.CertEnumCertificatesInStore$MH, "CertEnumCertificatesInStore");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hCertStore.address(), pPrevCertContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindCertificateInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$883.CertFindCertificateInStore$MH,"CertFindCertificateInStore");
    }
    public static MemoryAddress CertFindCertificateInStore ( Addressable hCertStore,  int dwCertEncodingType,  int dwFindFlags,  int dwFindType,  Addressable pvFindPara,  Addressable pPrevCertContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$883.CertFindCertificateInStore$MH, "CertFindCertificateInStore");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hCertStore.address(), dwCertEncodingType, dwFindFlags, dwFindType, pvFindPara.address(), pPrevCertContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetIssuerCertificateFromStore$MH() {
        return RuntimeHelper.requireNonNull(constants$884.CertGetIssuerCertificateFromStore$MH,"CertGetIssuerCertificateFromStore");
    }
    public static MemoryAddress CertGetIssuerCertificateFromStore ( Addressable hCertStore,  Addressable pSubjectContext,  Addressable pPrevIssuerContext,  Addressable pdwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$884.CertGetIssuerCertificateFromStore$MH, "CertGetIssuerCertificateFromStore");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hCertStore.address(), pSubjectContext.address(), pPrevIssuerContext.address(), pdwFlags.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertVerifySubjectCertificateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$884.CertVerifySubjectCertificateContext$MH,"CertVerifySubjectCertificateContext");
    }
    public static int CertVerifySubjectCertificateContext ( Addressable pSubject,  Addressable pIssuer,  Addressable pdwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$884.CertVerifySubjectCertificateContext$MH, "CertVerifySubjectCertificateContext");
        try {
            return (int)mh$.invokeExact(pSubject.address(), pIssuer.address(), pdwFlags.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDuplicateCertificateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$884.CertDuplicateCertificateContext$MH,"CertDuplicateCertificateContext");
    }
    public static MemoryAddress CertDuplicateCertificateContext ( Addressable pCertContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$884.CertDuplicateCertificateContext$MH, "CertDuplicateCertificateContext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pCertContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCreateCertificateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$884.CertCreateCertificateContext$MH,"CertCreateCertificateContext");
    }
    public static MemoryAddress CertCreateCertificateContext ( int dwCertEncodingType,  Addressable pbCertEncoded,  int cbCertEncoded) {
        var mh$ = RuntimeHelper.requireNonNull(constants$884.CertCreateCertificateContext$MH, "CertCreateCertificateContext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dwCertEncodingType, pbCertEncoded.address(), cbCertEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFreeCertificateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$884.CertFreeCertificateContext$MH,"CertFreeCertificateContext");
    }
    public static int CertFreeCertificateContext ( Addressable pCertContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$884.CertFreeCertificateContext$MH, "CertFreeCertificateContext");
        try {
            return (int)mh$.invokeExact(pCertContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSetCertificateContextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$884.CertSetCertificateContextProperty$MH,"CertSetCertificateContextProperty");
    }
    public static int CertSetCertificateContextProperty ( Addressable pCertContext,  int dwPropId,  int dwFlags,  Addressable pvData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$884.CertSetCertificateContextProperty$MH, "CertSetCertificateContextProperty");
        try {
            return (int)mh$.invokeExact(pCertContext.address(), dwPropId, dwFlags, pvData.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumCRLsInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$885.CertEnumCRLsInStore$MH,"CertEnumCRLsInStore");
    }
    public static MemoryAddress CertEnumCRLsInStore ( Addressable hCertStore,  Addressable pPrevCrlContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$885.CertEnumCRLsInStore$MH, "CertEnumCRLsInStore");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hCertStore.address(), pPrevCrlContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDeleteCRLFromStore$MH() {
        return RuntimeHelper.requireNonNull(constants$885.CertDeleteCRLFromStore$MH,"CertDeleteCRLFromStore");
    }
    public static int CertDeleteCRLFromStore ( Addressable pCrlContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$885.CertDeleteCRLFromStore$MH, "CertDeleteCRLFromStore");
        try {
            return (int)mh$.invokeExact(pCrlContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDuplicateCRLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$885.CertDuplicateCRLContext$MH,"CertDuplicateCRLContext");
    }
    public static MemoryAddress CertDuplicateCRLContext ( Addressable pCrlContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$885.CertDuplicateCRLContext$MH, "CertDuplicateCRLContext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pCrlContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindCRLInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$885.CertFindCRLInStore$MH,"CertFindCRLInStore");
    }
    public static MemoryAddress CertFindCRLInStore ( Addressable hCertStore,  int dwCertEncodingType,  int dwFindFlags,  int dwFindType,  Addressable pvFindPara,  Addressable pPrevCrlContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$885.CertFindCRLInStore$MH, "CertFindCRLInStore");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hCertStore.address(), dwCertEncodingType, dwFindFlags, dwFindType, pvFindPara.address(), pPrevCrlContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFreeCRLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$885.CertFreeCRLContext$MH,"CertFreeCRLContext");
    }
    public static int CertFreeCRLContext ( Addressable pCrlContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$885.CertFreeCRLContext$MH, "CertFreeCRLContext");
        try {
            return (int)mh$.invokeExact(pCrlContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetCertificateContextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$885.CertGetCertificateContextProperty$MH,"CertGetCertificateContextProperty");
    }
    public static int CertGetCertificateContextProperty ( Addressable pCertContext,  int dwPropId,  Addressable pvData,  Addressable pcbData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$885.CertGetCertificateContextProperty$MH, "CertGetCertificateContextProperty");
        try {
            return (int)mh$.invokeExact(pCertContext.address(), dwPropId, pvData.address(), pcbData.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumCertificateContextProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$886.CertEnumCertificateContextProperties$MH,"CertEnumCertificateContextProperties");
    }
    public static int CertEnumCertificateContextProperties ( Addressable pCertContext,  int dwPropId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$886.CertEnumCertificateContextProperties$MH, "CertEnumCertificateContextProperties");
        try {
            return (int)mh$.invokeExact(pCertContext.address(), dwPropId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDeleteCertificateFromStore$MH() {
        return RuntimeHelper.requireNonNull(constants$886.CertDeleteCertificateFromStore$MH,"CertDeleteCertificateFromStore");
    }
    public static int CertDeleteCertificateFromStore ( Addressable pCertContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$886.CertDeleteCertificateFromStore$MH, "CertDeleteCertificateFromStore");
        try {
            return (int)mh$.invokeExact(pCertContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCreateCTLEntryFromCertificateContextProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$886.CertCreateCTLEntryFromCertificateContextProperties$MH,"CertCreateCTLEntryFromCertificateContextProperties");
    }
    public static int CertCreateCTLEntryFromCertificateContextProperties ( Addressable pCertContext,  int cOptAttr,  Addressable rgOptAttr,  int dwFlags,  Addressable pvReserved,  Addressable pCtlEntry,  Addressable pcbCtlEntry) {
        var mh$ = RuntimeHelper.requireNonNull(constants$886.CertCreateCTLEntryFromCertificateContextProperties$MH, "CertCreateCTLEntryFromCertificateContextProperties");
        try {
            return (int)mh$.invokeExact(pCertContext.address(), cOptAttr, rgOptAttr.address(), dwFlags, pvReserved.address(), pCtlEntry.address(), pcbCtlEntry.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSetCertificateContextPropertiesFromCTLEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$886.CertSetCertificateContextPropertiesFromCTLEntry$MH,"CertSetCertificateContextPropertiesFromCTLEntry");
    }
    public static int CertSetCertificateContextPropertiesFromCTLEntry ( Addressable pCertContext,  Addressable pCtlEntry,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$886.CertSetCertificateContextPropertiesFromCTLEntry$MH, "CertSetCertificateContextPropertiesFromCTLEntry");
        try {
            return (int)mh$.invokeExact(pCertContext.address(), pCtlEntry.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetCRLFromStore$MH() {
        return RuntimeHelper.requireNonNull(constants$886.CertGetCRLFromStore$MH,"CertGetCRLFromStore");
    }
    public static MemoryAddress CertGetCRLFromStore ( Addressable hCertStore,  Addressable pIssuerContext,  Addressable pPrevCrlContext,  Addressable pdwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$886.CertGetCRLFromStore$MH, "CertGetCRLFromStore");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hCertStore.address(), pIssuerContext.address(), pPrevCrlContext.address(), pdwFlags.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCreateCRLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$886.CertCreateCRLContext$MH,"CertCreateCRLContext");
    }
    public static MemoryAddress CertCreateCRLContext ( int dwCertEncodingType,  Addressable pbCrlEncoded,  int cbCrlEncoded) {
        var mh$ = RuntimeHelper.requireNonNull(constants$886.CertCreateCRLContext$MH, "CertCreateCRLContext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dwCertEncodingType, pbCrlEncoded.address(), cbCrlEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSetCRLContextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$887.CertSetCRLContextProperty$MH,"CertSetCRLContextProperty");
    }
    public static int CertSetCRLContextProperty ( Addressable pCrlContext,  int dwPropId,  int dwFlags,  Addressable pvData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$887.CertSetCRLContextProperty$MH, "CertSetCRLContextProperty");
        try {
            return (int)mh$.invokeExact(pCrlContext.address(), dwPropId, dwFlags, pvData.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetCRLContextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$887.CertGetCRLContextProperty$MH,"CertGetCRLContextProperty");
    }
    public static int CertGetCRLContextProperty ( Addressable pCrlContext,  int dwPropId,  Addressable pvData,  Addressable pcbData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$887.CertGetCRLContextProperty$MH, "CertGetCRLContextProperty");
        try {
            return (int)mh$.invokeExact(pCrlContext.address(), dwPropId, pvData.address(), pcbData.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumCRLContextProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$887.CertEnumCRLContextProperties$MH,"CertEnumCRLContextProperties");
    }
    public static int CertEnumCRLContextProperties ( Addressable pCrlContext,  int dwPropId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$887.CertEnumCRLContextProperties$MH, "CertEnumCRLContextProperties");
        try {
            return (int)mh$.invokeExact(pCrlContext.address(), dwPropId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindCertificateInCRL$MH() {
        return RuntimeHelper.requireNonNull(constants$887.CertFindCertificateInCRL$MH,"CertFindCertificateInCRL");
    }
    public static int CertFindCertificateInCRL ( Addressable pCert,  Addressable pCrlContext,  int dwFlags,  Addressable pvReserved,  Addressable ppCrlEntry) {
        var mh$ = RuntimeHelper.requireNonNull(constants$887.CertFindCertificateInCRL$MH, "CertFindCertificateInCRL");
        try {
            return (int)mh$.invokeExact(pCert.address(), pCrlContext.address(), dwFlags, pvReserved.address(), ppCrlEntry.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertIsValidCRLForCertificate$MH() {
        return RuntimeHelper.requireNonNull(constants$887.CertIsValidCRLForCertificate$MH,"CertIsValidCRLForCertificate");
    }
    public static int CertIsValidCRLForCertificate ( Addressable pCert,  Addressable pCrl,  int dwFlags,  Addressable pvReserved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$887.CertIsValidCRLForCertificate$MH, "CertIsValidCRLForCertificate");
        try {
            return (int)mh$.invokeExact(pCert.address(), pCrl.address(), dwFlags, pvReserved.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddEncodedCertificateToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$887.CertAddEncodedCertificateToStore$MH,"CertAddEncodedCertificateToStore");
    }
    public static int CertAddEncodedCertificateToStore ( Addressable hCertStore,  int dwCertEncodingType,  Addressable pbCertEncoded,  int cbCertEncoded,  int dwAddDisposition,  Addressable ppCertContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$887.CertAddEncodedCertificateToStore$MH, "CertAddEncodedCertificateToStore");
        try {
            return (int)mh$.invokeExact(hCertStore.address(), dwCertEncodingType, pbCertEncoded.address(), cbCertEncoded, dwAddDisposition, ppCertContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddCertificateContextToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$888.CertAddCertificateContextToStore$MH,"CertAddCertificateContextToStore");
    }
    public static int CertAddCertificateContextToStore ( Addressable hCertStore,  Addressable pCertContext,  int dwAddDisposition,  Addressable ppStoreContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$888.CertAddCertificateContextToStore$MH, "CertAddCertificateContextToStore");
        try {
            return (int)mh$.invokeExact(hCertStore.address(), pCertContext.address(), dwAddDisposition, ppStoreContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddSerializedElementToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$888.CertAddSerializedElementToStore$MH,"CertAddSerializedElementToStore");
    }
    public static int CertAddSerializedElementToStore ( Addressable hCertStore,  Addressable pbElement,  int cbElement,  int dwAddDisposition,  int dwFlags,  int dwContextTypeFlags,  Addressable pdwContextType,  Addressable ppvContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$888.CertAddSerializedElementToStore$MH, "CertAddSerializedElementToStore");
        try {
            return (int)mh$.invokeExact(hCertStore.address(), pbElement.address(), cbElement, dwAddDisposition, dwFlags, dwContextTypeFlags, pdwContextType.address(), ppvContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddEncodedCRLToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$888.CertAddEncodedCRLToStore$MH,"CertAddEncodedCRLToStore");
    }
    public static int CertAddEncodedCRLToStore ( Addressable hCertStore,  int dwCertEncodingType,  Addressable pbCrlEncoded,  int cbCrlEncoded,  int dwAddDisposition,  Addressable ppCrlContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$888.CertAddEncodedCRLToStore$MH, "CertAddEncodedCRLToStore");
        try {
            return (int)mh$.invokeExact(hCertStore.address(), dwCertEncodingType, pbCrlEncoded.address(), cbCrlEncoded, dwAddDisposition, ppCrlContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddCRLContextToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$888.CertAddCRLContextToStore$MH,"CertAddCRLContextToStore");
    }
    public static int CertAddCRLContextToStore ( Addressable hCertStore,  Addressable pCrlContext,  int dwAddDisposition,  Addressable ppStoreContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$888.CertAddCRLContextToStore$MH, "CertAddCRLContextToStore");
        try {
            return (int)mh$.invokeExact(hCertStore.address(), pCrlContext.address(), dwAddDisposition, ppStoreContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSerializeCertificateStoreElement$MH() {
        return RuntimeHelper.requireNonNull(constants$888.CertSerializeCertificateStoreElement$MH,"CertSerializeCertificateStoreElement");
    }
    public static int CertSerializeCertificateStoreElement ( Addressable pCertContext,  int dwFlags,  Addressable pbElement,  Addressable pcbElement) {
        var mh$ = RuntimeHelper.requireNonNull(constants$888.CertSerializeCertificateStoreElement$MH, "CertSerializeCertificateStoreElement");
        try {
            return (int)mh$.invokeExact(pCertContext.address(), dwFlags, pbElement.address(), pcbElement.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSerializeCRLStoreElement$MH() {
        return RuntimeHelper.requireNonNull(constants$888.CertSerializeCRLStoreElement$MH,"CertSerializeCRLStoreElement");
    }
    public static int CertSerializeCRLStoreElement ( Addressable pCrlContext,  int dwFlags,  Addressable pbElement,  Addressable pcbElement) {
        var mh$ = RuntimeHelper.requireNonNull(constants$888.CertSerializeCRLStoreElement$MH, "CertSerializeCRLStoreElement");
        try {
            return (int)mh$.invokeExact(pCrlContext.address(), dwFlags, pbElement.address(), pcbElement.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDuplicateCTLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$889.CertDuplicateCTLContext$MH,"CertDuplicateCTLContext");
    }
    public static MemoryAddress CertDuplicateCTLContext ( Addressable pCtlContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$889.CertDuplicateCTLContext$MH, "CertDuplicateCTLContext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pCtlContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCreateCTLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$889.CertCreateCTLContext$MH,"CertCreateCTLContext");
    }
    public static MemoryAddress CertCreateCTLContext ( int dwMsgAndCertEncodingType,  Addressable pbCtlEncoded,  int cbCtlEncoded) {
        var mh$ = RuntimeHelper.requireNonNull(constants$889.CertCreateCTLContext$MH, "CertCreateCTLContext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dwMsgAndCertEncodingType, pbCtlEncoded.address(), cbCtlEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFreeCTLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$889.CertFreeCTLContext$MH,"CertFreeCTLContext");
    }
    public static int CertFreeCTLContext ( Addressable pCtlContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$889.CertFreeCTLContext$MH, "CertFreeCTLContext");
        try {
            return (int)mh$.invokeExact(pCtlContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSetCTLContextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$889.CertSetCTLContextProperty$MH,"CertSetCTLContextProperty");
    }
    public static int CertSetCTLContextProperty ( Addressable pCtlContext,  int dwPropId,  int dwFlags,  Addressable pvData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$889.CertSetCTLContextProperty$MH, "CertSetCTLContextProperty");
        try {
            return (int)mh$.invokeExact(pCtlContext.address(), dwPropId, dwFlags, pvData.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetCTLContextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$889.CertGetCTLContextProperty$MH,"CertGetCTLContextProperty");
    }
    public static int CertGetCTLContextProperty ( Addressable pCtlContext,  int dwPropId,  Addressable pvData,  Addressable pcbData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$889.CertGetCTLContextProperty$MH, "CertGetCTLContextProperty");
        try {
            return (int)mh$.invokeExact(pCtlContext.address(), dwPropId, pvData.address(), pcbData.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumCTLContextProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$889.CertEnumCTLContextProperties$MH,"CertEnumCTLContextProperties");
    }
    public static int CertEnumCTLContextProperties ( Addressable pCtlContext,  int dwPropId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$889.CertEnumCTLContextProperties$MH, "CertEnumCTLContextProperties");
        try {
            return (int)mh$.invokeExact(pCtlContext.address(), dwPropId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumCTLsInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$890.CertEnumCTLsInStore$MH,"CertEnumCTLsInStore");
    }
    public static MemoryAddress CertEnumCTLsInStore ( Addressable hCertStore,  Addressable pPrevCtlContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$890.CertEnumCTLsInStore$MH, "CertEnumCTLsInStore");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hCertStore.address(), pPrevCtlContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindSubjectInCTL$MH() {
        return RuntimeHelper.requireNonNull(constants$890.CertFindSubjectInCTL$MH,"CertFindSubjectInCTL");
    }
    public static MemoryAddress CertFindSubjectInCTL ( int dwEncodingType,  int dwSubjectType,  Addressable pvSubject,  Addressable pCtlContext,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$890.CertFindSubjectInCTL$MH, "CertFindSubjectInCTL");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dwEncodingType, dwSubjectType, pvSubject.address(), pCtlContext.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindCTLInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$890.CertFindCTLInStore$MH,"CertFindCTLInStore");
    }
    public static MemoryAddress CertFindCTLInStore ( Addressable hCertStore,  int dwMsgAndCertEncodingType,  int dwFindFlags,  int dwFindType,  Addressable pvFindPara,  Addressable pPrevCtlContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$890.CertFindCTLInStore$MH, "CertFindCTLInStore");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hCertStore.address(), dwMsgAndCertEncodingType, dwFindFlags, dwFindType, pvFindPara.address(), pPrevCtlContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddEncodedCTLToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$890.CertAddEncodedCTLToStore$MH,"CertAddEncodedCTLToStore");
    }
    public static int CertAddEncodedCTLToStore ( Addressable hCertStore,  int dwMsgAndCertEncodingType,  Addressable pbCtlEncoded,  int cbCtlEncoded,  int dwAddDisposition,  Addressable ppCtlContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$890.CertAddEncodedCTLToStore$MH, "CertAddEncodedCTLToStore");
        try {
            return (int)mh$.invokeExact(hCertStore.address(), dwMsgAndCertEncodingType, pbCtlEncoded.address(), cbCtlEncoded, dwAddDisposition, ppCtlContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddCTLContextToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$891.CertAddCTLContextToStore$MH,"CertAddCTLContextToStore");
    }
    public static int CertAddCTLContextToStore ( Addressable hCertStore,  Addressable pCtlContext,  int dwAddDisposition,  Addressable ppStoreContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$891.CertAddCTLContextToStore$MH, "CertAddCTLContextToStore");
        try {
            return (int)mh$.invokeExact(hCertStore.address(), pCtlContext.address(), dwAddDisposition, ppStoreContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSerializeCTLStoreElement$MH() {
        return RuntimeHelper.requireNonNull(constants$891.CertSerializeCTLStoreElement$MH,"CertSerializeCTLStoreElement");
    }
    public static int CertSerializeCTLStoreElement ( Addressable pCtlContext,  int dwFlags,  Addressable pbElement,  Addressable pcbElement) {
        var mh$ = RuntimeHelper.requireNonNull(constants$891.CertSerializeCTLStoreElement$MH, "CertSerializeCTLStoreElement");
        try {
            return (int)mh$.invokeExact(pCtlContext.address(), dwFlags, pbElement.address(), pcbElement.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDeleteCTLFromStore$MH() {
        return RuntimeHelper.requireNonNull(constants$891.CertDeleteCTLFromStore$MH,"CertDeleteCTLFromStore");
    }
    public static int CertDeleteCTLFromStore ( Addressable pCtlContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$891.CertDeleteCTLFromStore$MH, "CertDeleteCTLFromStore");
        try {
            return (int)mh$.invokeExact(pCtlContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddCertificateLinkToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$891.CertAddCertificateLinkToStore$MH,"CertAddCertificateLinkToStore");
    }
    public static int CertAddCertificateLinkToStore ( Addressable hCertStore,  Addressable pCertContext,  int dwAddDisposition,  Addressable ppStoreContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$891.CertAddCertificateLinkToStore$MH, "CertAddCertificateLinkToStore");
        try {
            return (int)mh$.invokeExact(hCertStore.address(), pCertContext.address(), dwAddDisposition, ppStoreContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddCRLLinkToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$891.CertAddCRLLinkToStore$MH,"CertAddCRLLinkToStore");
    }
    public static int CertAddCRLLinkToStore ( Addressable hCertStore,  Addressable pCrlContext,  int dwAddDisposition,  Addressable ppStoreContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$891.CertAddCRLLinkToStore$MH, "CertAddCRLLinkToStore");
        try {
            return (int)mh$.invokeExact(hCertStore.address(), pCrlContext.address(), dwAddDisposition, ppStoreContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddCTLLinkToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$891.CertAddCTLLinkToStore$MH,"CertAddCTLLinkToStore");
    }
    public static int CertAddCTLLinkToStore ( Addressable hCertStore,  Addressable pCtlContext,  int dwAddDisposition,  Addressable ppStoreContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$891.CertAddCTLLinkToStore$MH, "CertAddCTLLinkToStore");
        try {
            return (int)mh$.invokeExact(hCertStore.address(), pCtlContext.address(), dwAddDisposition, ppStoreContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddStoreToCollection$MH() {
        return RuntimeHelper.requireNonNull(constants$892.CertAddStoreToCollection$MH,"CertAddStoreToCollection");
    }
    public static int CertAddStoreToCollection ( Addressable hCollectionStore,  Addressable hSiblingStore,  int dwUpdateFlags,  int dwPriority) {
        var mh$ = RuntimeHelper.requireNonNull(constants$892.CertAddStoreToCollection$MH, "CertAddStoreToCollection");
        try {
            return (int)mh$.invokeExact(hCollectionStore.address(), hSiblingStore.address(), dwUpdateFlags, dwPriority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertRemoveStoreFromCollection$MH() {
        return RuntimeHelper.requireNonNull(constants$892.CertRemoveStoreFromCollection$MH,"CertRemoveStoreFromCollection");
    }
    public static void CertRemoveStoreFromCollection ( Addressable hCollectionStore,  Addressable hSiblingStore) {
        var mh$ = RuntimeHelper.requireNonNull(constants$892.CertRemoveStoreFromCollection$MH, "CertRemoveStoreFromCollection");
        try {
            mh$.invokeExact(hCollectionStore.address(), hSiblingStore.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertControlStore$MH() {
        return RuntimeHelper.requireNonNull(constants$892.CertControlStore$MH,"CertControlStore");
    }
    public static int CertControlStore ( Addressable hCertStore,  int dwFlags,  int dwCtrlType,  Addressable pvCtrlPara) {
        var mh$ = RuntimeHelper.requireNonNull(constants$892.CertControlStore$MH, "CertControlStore");
        try {
            return (int)mh$.invokeExact(hCertStore.address(), dwFlags, dwCtrlType, pvCtrlPara.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSetStoreProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$892.CertSetStoreProperty$MH,"CertSetStoreProperty");
    }
    public static int CertSetStoreProperty ( Addressable hCertStore,  int dwPropId,  int dwFlags,  Addressable pvData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$892.CertSetStoreProperty$MH, "CertSetStoreProperty");
        try {
            return (int)mh$.invokeExact(hCertStore.address(), dwPropId, dwFlags, pvData.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetStoreProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$892.CertGetStoreProperty$MH,"CertGetStoreProperty");
    }
    public static int CertGetStoreProperty ( Addressable hCertStore,  int dwPropId,  Addressable pvData,  Addressable pcbData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$892.CertGetStoreProperty$MH, "CertGetStoreProperty");
        try {
            return (int)mh$.invokeExact(hCertStore.address(), dwPropId, pvData.address(), pcbData.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCreateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$892.CertCreateContext$MH,"CertCreateContext");
    }
    public static MemoryAddress CertCreateContext ( int dwContextType,  int dwEncodingType,  Addressable pbEncoded,  int cbEncoded,  int dwFlags,  Addressable pCreatePara) {
        var mh$ = RuntimeHelper.requireNonNull(constants$892.CertCreateContext$MH, "CertCreateContext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dwContextType, dwEncodingType, pbEncoded.address(), cbEncoded, dwFlags, pCreatePara.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertRegisterSystemStore$MH() {
        return RuntimeHelper.requireNonNull(constants$893.CertRegisterSystemStore$MH,"CertRegisterSystemStore");
    }
    public static int CertRegisterSystemStore ( Addressable pvSystemStore,  int dwFlags,  Addressable pStoreInfo,  Addressable pvReserved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$893.CertRegisterSystemStore$MH, "CertRegisterSystemStore");
        try {
            return (int)mh$.invokeExact(pvSystemStore.address(), dwFlags, pStoreInfo.address(), pvReserved.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertRegisterPhysicalStore$MH() {
        return RuntimeHelper.requireNonNull(constants$893.CertRegisterPhysicalStore$MH,"CertRegisterPhysicalStore");
    }
    public static int CertRegisterPhysicalStore ( Addressable pvSystemStore,  int dwFlags,  Addressable pwszStoreName,  Addressable pStoreInfo,  Addressable pvReserved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$893.CertRegisterPhysicalStore$MH, "CertRegisterPhysicalStore");
        try {
            return (int)mh$.invokeExact(pvSystemStore.address(), dwFlags, pwszStoreName.address(), pStoreInfo.address(), pvReserved.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertUnregisterSystemStore$MH() {
        return RuntimeHelper.requireNonNull(constants$893.CertUnregisterSystemStore$MH,"CertUnregisterSystemStore");
    }
    public static int CertUnregisterSystemStore ( Addressable pvSystemStore,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$893.CertUnregisterSystemStore$MH, "CertUnregisterSystemStore");
        try {
            return (int)mh$.invokeExact(pvSystemStore.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertUnregisterPhysicalStore$MH() {
        return RuntimeHelper.requireNonNull(constants$893.CertUnregisterPhysicalStore$MH,"CertUnregisterPhysicalStore");
    }
    public static int CertUnregisterPhysicalStore ( Addressable pvSystemStore,  int dwFlags,  Addressable pwszStoreName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$893.CertUnregisterPhysicalStore$MH, "CertUnregisterPhysicalStore");
        try {
            return (int)mh$.invokeExact(pvSystemStore.address(), dwFlags, pwszStoreName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumSystemStoreLocation$MH() {
        return RuntimeHelper.requireNonNull(constants$894.CertEnumSystemStoreLocation$MH,"CertEnumSystemStoreLocation");
    }
    public static int CertEnumSystemStoreLocation ( int dwFlags,  Addressable pvArg,  Addressable pfnEnum) {
        var mh$ = RuntimeHelper.requireNonNull(constants$894.CertEnumSystemStoreLocation$MH, "CertEnumSystemStoreLocation");
        try {
            return (int)mh$.invokeExact(dwFlags, pvArg.address(), pfnEnum.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumSystemStore$MH() {
        return RuntimeHelper.requireNonNull(constants$894.CertEnumSystemStore$MH,"CertEnumSystemStore");
    }
    public static int CertEnumSystemStore ( int dwFlags,  Addressable pvSystemStoreLocationPara,  Addressable pvArg,  Addressable pfnEnum) {
        var mh$ = RuntimeHelper.requireNonNull(constants$894.CertEnumSystemStore$MH, "CertEnumSystemStore");
        try {
            return (int)mh$.invokeExact(dwFlags, pvSystemStoreLocationPara.address(), pvArg.address(), pfnEnum.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumPhysicalStore$MH() {
        return RuntimeHelper.requireNonNull(constants$895.CertEnumPhysicalStore$MH,"CertEnumPhysicalStore");
    }
    public static int CertEnumPhysicalStore ( Addressable pvSystemStore,  int dwFlags,  Addressable pvArg,  Addressable pfnEnum) {
        var mh$ = RuntimeHelper.requireNonNull(constants$895.CertEnumPhysicalStore$MH, "CertEnumPhysicalStore");
        try {
            return (int)mh$.invokeExact(pvSystemStore.address(), dwFlags, pvArg.address(), pfnEnum.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetEnhancedKeyUsage$MH() {
        return RuntimeHelper.requireNonNull(constants$895.CertGetEnhancedKeyUsage$MH,"CertGetEnhancedKeyUsage");
    }
    public static int CertGetEnhancedKeyUsage ( Addressable pCertContext,  int dwFlags,  Addressable pUsage,  Addressable pcbUsage) {
        var mh$ = RuntimeHelper.requireNonNull(constants$895.CertGetEnhancedKeyUsage$MH, "CertGetEnhancedKeyUsage");
        try {
            return (int)mh$.invokeExact(pCertContext.address(), dwFlags, pUsage.address(), pcbUsage.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSetEnhancedKeyUsage$MH() {
        return RuntimeHelper.requireNonNull(constants$895.CertSetEnhancedKeyUsage$MH,"CertSetEnhancedKeyUsage");
    }
    public static int CertSetEnhancedKeyUsage ( Addressable pCertContext,  Addressable pUsage) {
        var mh$ = RuntimeHelper.requireNonNull(constants$895.CertSetEnhancedKeyUsage$MH, "CertSetEnhancedKeyUsage");
        try {
            return (int)mh$.invokeExact(pCertContext.address(), pUsage.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddEnhancedKeyUsageIdentifier$MH() {
        return RuntimeHelper.requireNonNull(constants$895.CertAddEnhancedKeyUsageIdentifier$MH,"CertAddEnhancedKeyUsageIdentifier");
    }
    public static int CertAddEnhancedKeyUsageIdentifier ( Addressable pCertContext,  Addressable pszUsageIdentifier) {
        var mh$ = RuntimeHelper.requireNonNull(constants$895.CertAddEnhancedKeyUsageIdentifier$MH, "CertAddEnhancedKeyUsageIdentifier");
        try {
            return (int)mh$.invokeExact(pCertContext.address(), pszUsageIdentifier.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertRemoveEnhancedKeyUsageIdentifier$MH() {
        return RuntimeHelper.requireNonNull(constants$895.CertRemoveEnhancedKeyUsageIdentifier$MH,"CertRemoveEnhancedKeyUsageIdentifier");
    }
    public static int CertRemoveEnhancedKeyUsageIdentifier ( Addressable pCertContext,  Addressable pszUsageIdentifier) {
        var mh$ = RuntimeHelper.requireNonNull(constants$895.CertRemoveEnhancedKeyUsageIdentifier$MH, "CertRemoveEnhancedKeyUsageIdentifier");
        try {
            return (int)mh$.invokeExact(pCertContext.address(), pszUsageIdentifier.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetValidUsages$MH() {
        return RuntimeHelper.requireNonNull(constants$895.CertGetValidUsages$MH,"CertGetValidUsages");
    }
    public static int CertGetValidUsages ( int cCerts,  Addressable rghCerts,  Addressable cNumOIDs,  Addressable rghOIDs,  Addressable pcbOIDs) {
        var mh$ = RuntimeHelper.requireNonNull(constants$895.CertGetValidUsages$MH, "CertGetValidUsages");
        try {
            return (int)mh$.invokeExact(cCerts, rghCerts.address(), cNumOIDs.address(), rghOIDs.address(), pcbOIDs.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgGetAndVerifySigner$MH() {
        return RuntimeHelper.requireNonNull(constants$896.CryptMsgGetAndVerifySigner$MH,"CryptMsgGetAndVerifySigner");
    }
    public static int CryptMsgGetAndVerifySigner ( Addressable hCryptMsg,  int cSignerStore,  Addressable rghSignerStore,  int dwFlags,  Addressable ppSigner,  Addressable pdwSignerIndex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$896.CryptMsgGetAndVerifySigner$MH, "CryptMsgGetAndVerifySigner");
        try {
            return (int)mh$.invokeExact(hCryptMsg.address(), cSignerStore, rghSignerStore.address(), dwFlags, ppSigner.address(), pdwSignerIndex.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgSignCTL$MH() {
        return RuntimeHelper.requireNonNull(constants$896.CryptMsgSignCTL$MH,"CryptMsgSignCTL");
    }
    public static int CryptMsgSignCTL ( int dwMsgEncodingType,  Addressable pbCtlContent,  int cbCtlContent,  Addressable pSignInfo,  int dwFlags,  Addressable pbEncoded,  Addressable pcbEncoded) {
        var mh$ = RuntimeHelper.requireNonNull(constants$896.CryptMsgSignCTL$MH, "CryptMsgSignCTL");
        try {
            return (int)mh$.invokeExact(dwMsgEncodingType, pbCtlContent.address(), cbCtlContent, pSignInfo.address(), dwFlags, pbEncoded.address(), pcbEncoded.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgEncodeAndSignCTL$MH() {
        return RuntimeHelper.requireNonNull(constants$896.CryptMsgEncodeAndSignCTL$MH,"CryptMsgEncodeAndSignCTL");
    }
    public static int CryptMsgEncodeAndSignCTL ( int dwMsgEncodingType,  Addressable pCtlInfo,  Addressable pSignInfo,  int dwFlags,  Addressable pbEncoded,  Addressable pcbEncoded) {
        var mh$ = RuntimeHelper.requireNonNull(constants$896.CryptMsgEncodeAndSignCTL$MH, "CryptMsgEncodeAndSignCTL");
        try {
            return (int)mh$.invokeExact(dwMsgEncodingType, pCtlInfo.address(), pSignInfo.address(), dwFlags, pbEncoded.address(), pcbEncoded.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindSubjectInSortedCTL$MH() {
        return RuntimeHelper.requireNonNull(constants$896.CertFindSubjectInSortedCTL$MH,"CertFindSubjectInSortedCTL");
    }
    public static int CertFindSubjectInSortedCTL ( Addressable pSubjectIdentifier,  Addressable pCtlContext,  int dwFlags,  Addressable pvReserved,  Addressable pEncodedAttributes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$896.CertFindSubjectInSortedCTL$MH, "CertFindSubjectInSortedCTL");
        try {
            return (int)mh$.invokeExact(pSubjectIdentifier.address(), pCtlContext.address(), dwFlags, pvReserved.address(), pEncodedAttributes.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumSubjectInSortedCTL$MH() {
        return RuntimeHelper.requireNonNull(constants$896.CertEnumSubjectInSortedCTL$MH,"CertEnumSubjectInSortedCTL");
    }
    public static int CertEnumSubjectInSortedCTL ( Addressable pCtlContext,  Addressable ppvNextSubject,  Addressable pSubjectIdentifier,  Addressable pEncodedAttributes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$896.CertEnumSubjectInSortedCTL$MH, "CertEnumSubjectInSortedCTL");
        try {
            return (int)mh$.invokeExact(pCtlContext.address(), ppvNextSubject.address(), pSubjectIdentifier.address(), pEncodedAttributes.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertVerifyCTLUsage$MH() {
        return RuntimeHelper.requireNonNull(constants$896.CertVerifyCTLUsage$MH,"CertVerifyCTLUsage");
    }
    public static int CertVerifyCTLUsage ( int dwEncodingType,  int dwSubjectType,  Addressable pvSubject,  Addressable pSubjectUsage,  int dwFlags,  Addressable pVerifyUsagePara,  Addressable pVerifyUsageStatus) {
        var mh$ = RuntimeHelper.requireNonNull(constants$896.CertVerifyCTLUsage$MH, "CertVerifyCTLUsage");
        try {
            return (int)mh$.invokeExact(dwEncodingType, dwSubjectType, pvSubject.address(), pSubjectUsage.address(), dwFlags, pVerifyUsagePara.address(), pVerifyUsageStatus.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertVerifyRevocation$MH() {
        return RuntimeHelper.requireNonNull(constants$898.CertVerifyRevocation$MH,"CertVerifyRevocation");
    }
    public static int CertVerifyRevocation ( int dwEncodingType,  int dwRevType,  int cContext,  Addressable rgpvContext,  int dwFlags,  Addressable pRevPara,  Addressable pRevStatus) {
        var mh$ = RuntimeHelper.requireNonNull(constants$898.CertVerifyRevocation$MH, "CertVerifyRevocation");
        try {
            return (int)mh$.invokeExact(dwEncodingType, dwRevType, cContext, rgpvContext.address(), dwFlags, pRevPara.address(), pRevStatus.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCompareIntegerBlob$MH() {
        return RuntimeHelper.requireNonNull(constants$898.CertCompareIntegerBlob$MH,"CertCompareIntegerBlob");
    }
    public static int CertCompareIntegerBlob ( Addressable pInt1,  Addressable pInt2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$898.CertCompareIntegerBlob$MH, "CertCompareIntegerBlob");
        try {
            return (int)mh$.invokeExact(pInt1.address(), pInt2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCompareCertificate$MH() {
        return RuntimeHelper.requireNonNull(constants$898.CertCompareCertificate$MH,"CertCompareCertificate");
    }
    public static int CertCompareCertificate ( int dwCertEncodingType,  Addressable pCertId1,  Addressable pCertId2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$898.CertCompareCertificate$MH, "CertCompareCertificate");
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pCertId1.address(), pCertId2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCompareCertificateName$MH() {
        return RuntimeHelper.requireNonNull(constants$898.CertCompareCertificateName$MH,"CertCompareCertificateName");
    }
    public static int CertCompareCertificateName ( int dwCertEncodingType,  Addressable pCertName1,  Addressable pCertName2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$898.CertCompareCertificateName$MH, "CertCompareCertificateName");
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pCertName1.address(), pCertName2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertIsRDNAttrsInCertificateName$MH() {
        return RuntimeHelper.requireNonNull(constants$898.CertIsRDNAttrsInCertificateName$MH,"CertIsRDNAttrsInCertificateName");
    }
    public static int CertIsRDNAttrsInCertificateName ( int dwCertEncodingType,  int dwFlags,  Addressable pCertName,  Addressable pRDN) {
        var mh$ = RuntimeHelper.requireNonNull(constants$898.CertIsRDNAttrsInCertificateName$MH, "CertIsRDNAttrsInCertificateName");
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, dwFlags, pCertName.address(), pRDN.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertComparePublicKeyInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$898.CertComparePublicKeyInfo$MH,"CertComparePublicKeyInfo");
    }
    public static int CertComparePublicKeyInfo ( int dwCertEncodingType,  Addressable pPublicKey1,  Addressable pPublicKey2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$898.CertComparePublicKeyInfo$MH, "CertComparePublicKeyInfo");
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pPublicKey1.address(), pPublicKey2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetPublicKeyLength$MH() {
        return RuntimeHelper.requireNonNull(constants$899.CertGetPublicKeyLength$MH,"CertGetPublicKeyLength");
    }
    public static int CertGetPublicKeyLength ( int dwCertEncodingType,  Addressable pPublicKey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$899.CertGetPublicKeyLength$MH, "CertGetPublicKeyLength");
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pPublicKey.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyCertificateSignature$MH() {
        return RuntimeHelper.requireNonNull(constants$899.CryptVerifyCertificateSignature$MH,"CryptVerifyCertificateSignature");
    }
    public static int CryptVerifyCertificateSignature ( long hCryptProv,  int dwCertEncodingType,  Addressable pbEncoded,  int cbEncoded,  Addressable pPublicKey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$899.CryptVerifyCertificateSignature$MH, "CryptVerifyCertificateSignature");
        try {
            return (int)mh$.invokeExact(hCryptProv, dwCertEncodingType, pbEncoded.address(), cbEncoded, pPublicKey.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyCertificateSignatureEx$MH() {
        return RuntimeHelper.requireNonNull(constants$899.CryptVerifyCertificateSignatureEx$MH,"CryptVerifyCertificateSignatureEx");
    }
    public static int CryptVerifyCertificateSignatureEx ( long hCryptProv,  int dwCertEncodingType,  int dwSubjectType,  Addressable pvSubject,  int dwIssuerType,  Addressable pvIssuer,  int dwFlags,  Addressable pvExtra) {
        var mh$ = RuntimeHelper.requireNonNull(constants$899.CryptVerifyCertificateSignatureEx$MH, "CryptVerifyCertificateSignatureEx");
        try {
            return (int)mh$.invokeExact(hCryptProv, dwCertEncodingType, dwSubjectType, pvSubject.address(), dwIssuerType, pvIssuer.address(), dwFlags, pvExtra.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertIsStrongHashToSign$MH() {
        return RuntimeHelper.requireNonNull(constants$899.CertIsStrongHashToSign$MH,"CertIsStrongHashToSign");
    }
    public static int CertIsStrongHashToSign ( Addressable pStrongSignPara,  Addressable pwszCNGHashAlgid,  Addressable pSigningCert) {
        var mh$ = RuntimeHelper.requireNonNull(constants$899.CertIsStrongHashToSign$MH, "CertIsStrongHashToSign");
        try {
            return (int)mh$.invokeExact(pStrongSignPara.address(), pwszCNGHashAlgid.address(), pSigningCert.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashToBeSigned$MH() {
        return RuntimeHelper.requireNonNull(constants$899.CryptHashToBeSigned$MH,"CryptHashToBeSigned");
    }
    public static int CryptHashToBeSigned ( long hCryptProv,  int dwCertEncodingType,  Addressable pbEncoded,  int cbEncoded,  Addressable pbComputedHash,  Addressable pcbComputedHash) {
        var mh$ = RuntimeHelper.requireNonNull(constants$899.CryptHashToBeSigned$MH, "CryptHashToBeSigned");
        try {
            return (int)mh$.invokeExact(hCryptProv, dwCertEncodingType, pbEncoded.address(), cbEncoded, pbComputedHash.address(), pcbComputedHash.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashCertificate$MH() {
        return RuntimeHelper.requireNonNull(constants$899.CryptHashCertificate$MH,"CryptHashCertificate");
    }
    public static int CryptHashCertificate ( long hCryptProv,  int Algid,  int dwFlags,  Addressable pbEncoded,  int cbEncoded,  Addressable pbComputedHash,  Addressable pcbComputedHash) {
        var mh$ = RuntimeHelper.requireNonNull(constants$899.CryptHashCertificate$MH, "CryptHashCertificate");
        try {
            return (int)mh$.invokeExact(hCryptProv, Algid, dwFlags, pbEncoded.address(), cbEncoded, pbComputedHash.address(), pcbComputedHash.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashCertificate2$MH() {
        return RuntimeHelper.requireNonNull(constants$900.CryptHashCertificate2$MH,"CryptHashCertificate2");
    }
    public static int CryptHashCertificate2 ( Addressable pwszCNGHashAlgid,  int dwFlags,  Addressable pvReserved,  Addressable pbEncoded,  int cbEncoded,  Addressable pbComputedHash,  Addressable pcbComputedHash) {
        var mh$ = RuntimeHelper.requireNonNull(constants$900.CryptHashCertificate2$MH, "CryptHashCertificate2");
        try {
            return (int)mh$.invokeExact(pwszCNGHashAlgid.address(), dwFlags, pvReserved.address(), pbEncoded.address(), cbEncoded, pbComputedHash.address(), pcbComputedHash.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSignCertificate$MH() {
        return RuntimeHelper.requireNonNull(constants$900.CryptSignCertificate$MH,"CryptSignCertificate");
    }
    public static int CryptSignCertificate ( long hCryptProvOrNCryptKey,  int dwKeySpec,  int dwCertEncodingType,  Addressable pbEncodedToBeSigned,  int cbEncodedToBeSigned,  Addressable pSignatureAlgorithm,  Addressable pvHashAuxInfo,  Addressable pbSignature,  Addressable pcbSignature) {
        var mh$ = RuntimeHelper.requireNonNull(constants$900.CryptSignCertificate$MH, "CryptSignCertificate");
        try {
            return (int)mh$.invokeExact(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, pbEncodedToBeSigned.address(), cbEncodedToBeSigned, pSignatureAlgorithm.address(), pvHashAuxInfo.address(), pbSignature.address(), pcbSignature.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSignAndEncodeCertificate$MH() {
        return RuntimeHelper.requireNonNull(constants$900.CryptSignAndEncodeCertificate$MH,"CryptSignAndEncodeCertificate");
    }
    public static int CryptSignAndEncodeCertificate ( long hCryptProvOrNCryptKey,  int dwKeySpec,  int dwCertEncodingType,  Addressable lpszStructType,  Addressable pvStructInfo,  Addressable pSignatureAlgorithm,  Addressable pvHashAuxInfo,  Addressable pbEncoded,  Addressable pcbEncoded) {
        var mh$ = RuntimeHelper.requireNonNull(constants$900.CryptSignAndEncodeCertificate$MH, "CryptSignAndEncodeCertificate");
        try {
            return (int)mh$.invokeExact(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, lpszStructType.address(), pvStructInfo.address(), pSignatureAlgorithm.address(), pvHashAuxInfo.address(), pbEncoded.address(), pcbEncoded.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertVerifyTimeValidity$MH() {
        return RuntimeHelper.requireNonNull(constants$900.CertVerifyTimeValidity$MH,"CertVerifyTimeValidity");
    }
    public static int CertVerifyTimeValidity ( Addressable pTimeToVerify,  Addressable pCertInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$900.CertVerifyTimeValidity$MH, "CertVerifyTimeValidity");
        try {
            return (int)mh$.invokeExact(pTimeToVerify.address(), pCertInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertVerifyCRLTimeValidity$MH() {
        return RuntimeHelper.requireNonNull(constants$900.CertVerifyCRLTimeValidity$MH,"CertVerifyCRLTimeValidity");
    }
    public static int CertVerifyCRLTimeValidity ( Addressable pTimeToVerify,  Addressable pCrlInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$900.CertVerifyCRLTimeValidity$MH, "CertVerifyCRLTimeValidity");
        try {
            return (int)mh$.invokeExact(pTimeToVerify.address(), pCrlInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertVerifyValidityNesting$MH() {
        return RuntimeHelper.requireNonNull(constants$900.CertVerifyValidityNesting$MH,"CertVerifyValidityNesting");
    }
    public static int CertVerifyValidityNesting ( Addressable pSubjectInfo,  Addressable pIssuerInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$900.CertVerifyValidityNesting$MH, "CertVerifyValidityNesting");
        try {
            return (int)mh$.invokeExact(pSubjectInfo.address(), pIssuerInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertVerifyCRLRevocation$MH() {
        return RuntimeHelper.requireNonNull(constants$901.CertVerifyCRLRevocation$MH,"CertVerifyCRLRevocation");
    }
    public static int CertVerifyCRLRevocation ( int dwCertEncodingType,  Addressable pCertId,  int cCrlInfo,  Addressable rgpCrlInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$901.CertVerifyCRLRevocation$MH, "CertVerifyCRLRevocation");
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pCertId.address(), cCrlInfo, rgpCrlInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAlgIdToOID$MH() {
        return RuntimeHelper.requireNonNull(constants$901.CertAlgIdToOID$MH,"CertAlgIdToOID");
    }
    public static MemoryAddress CertAlgIdToOID ( int dwAlgId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$901.CertAlgIdToOID$MH, "CertAlgIdToOID");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dwAlgId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertOIDToAlgId$MH() {
        return RuntimeHelper.requireNonNull(constants$901.CertOIDToAlgId$MH,"CertOIDToAlgId");
    }
    public static int CertOIDToAlgId ( Addressable pszObjId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$901.CertOIDToAlgId$MH, "CertOIDToAlgId");
        try {
            return (int)mh$.invokeExact(pszObjId.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindExtension$MH() {
        return RuntimeHelper.requireNonNull(constants$901.CertFindExtension$MH,"CertFindExtension");
    }
    public static MemoryAddress CertFindExtension ( Addressable pszObjId,  int cExtensions,  Addressable rgExtensions) {
        var mh$ = RuntimeHelper.requireNonNull(constants$901.CertFindExtension$MH, "CertFindExtension");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pszObjId.address(), cExtensions, rgExtensions.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$901.CertFindAttribute$MH,"CertFindAttribute");
    }
    public static MemoryAddress CertFindAttribute ( Addressable pszObjId,  int cAttr,  Addressable rgAttr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$901.CertFindAttribute$MH, "CertFindAttribute");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pszObjId.address(), cAttr, rgAttr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindRDNAttr$MH() {
        return RuntimeHelper.requireNonNull(constants$901.CertFindRDNAttr$MH,"CertFindRDNAttr");
    }
    public static MemoryAddress CertFindRDNAttr ( Addressable pszObjId,  Addressable pName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$901.CertFindRDNAttr$MH, "CertFindRDNAttr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pszObjId.address(), pName.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetIntendedKeyUsage$MH() {
        return RuntimeHelper.requireNonNull(constants$902.CertGetIntendedKeyUsage$MH,"CertGetIntendedKeyUsage");
    }
    public static int CertGetIntendedKeyUsage ( int dwCertEncodingType,  Addressable pCertInfo,  Addressable pbKeyUsage,  int cbKeyUsage) {
        var mh$ = RuntimeHelper.requireNonNull(constants$902.CertGetIntendedKeyUsage$MH, "CertGetIntendedKeyUsage");
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pCertInfo.address(), pbKeyUsage.address(), cbKeyUsage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptInstallDefaultContext$MH() {
        return RuntimeHelper.requireNonNull(constants$902.CryptInstallDefaultContext$MH,"CryptInstallDefaultContext");
    }
    public static int CryptInstallDefaultContext ( long hCryptProv,  int dwDefaultType,  Addressable pvDefaultPara,  int dwFlags,  Addressable pvReserved,  Addressable phDefaultContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$902.CryptInstallDefaultContext$MH, "CryptInstallDefaultContext");
        try {
            return (int)mh$.invokeExact(hCryptProv, dwDefaultType, pvDefaultPara.address(), dwFlags, pvReserved.address(), phDefaultContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUninstallDefaultContext$MH() {
        return RuntimeHelper.requireNonNull(constants$902.CryptUninstallDefaultContext$MH,"CryptUninstallDefaultContext");
    }
    public static int CryptUninstallDefaultContext ( Addressable hDefaultContext,  int dwFlags,  Addressable pvReserved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$902.CryptUninstallDefaultContext$MH, "CryptUninstallDefaultContext");
        try {
            return (int)mh$.invokeExact(hDefaultContext.address(), dwFlags, pvReserved.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptExportPublicKeyInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$902.CryptExportPublicKeyInfo$MH,"CryptExportPublicKeyInfo");
    }
    public static int CryptExportPublicKeyInfo ( long hCryptProvOrNCryptKey,  int dwKeySpec,  int dwCertEncodingType,  Addressable pInfo,  Addressable pcbInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$902.CryptExportPublicKeyInfo$MH, "CryptExportPublicKeyInfo");
        try {
            return (int)mh$.invokeExact(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, pInfo.address(), pcbInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptExportPublicKeyInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$902.CryptExportPublicKeyInfoEx$MH,"CryptExportPublicKeyInfoEx");
    }
    public static int CryptExportPublicKeyInfoEx ( long hCryptProvOrNCryptKey,  int dwKeySpec,  int dwCertEncodingType,  Addressable pszPublicKeyObjId,  int dwFlags,  Addressable pvAuxInfo,  Addressable pInfo,  Addressable pcbInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$902.CryptExportPublicKeyInfoEx$MH, "CryptExportPublicKeyInfoEx");
        try {
            return (int)mh$.invokeExact(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, pszPublicKeyObjId.address(), dwFlags, pvAuxInfo.address(), pInfo.address(), pcbInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptExportPublicKeyInfoFromBCryptKeyHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$903.CryptExportPublicKeyInfoFromBCryptKeyHandle$MH,"CryptExportPublicKeyInfoFromBCryptKeyHandle");
    }
    public static int CryptExportPublicKeyInfoFromBCryptKeyHandle ( Addressable hBCryptKey,  int dwCertEncodingType,  Addressable pszPublicKeyObjId,  int dwFlags,  Addressable pvAuxInfo,  Addressable pInfo,  Addressable pcbInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$903.CryptExportPublicKeyInfoFromBCryptKeyHandle$MH, "CryptExportPublicKeyInfoFromBCryptKeyHandle");
        try {
            return (int)mh$.invokeExact(hBCryptKey.address(), dwCertEncodingType, pszPublicKeyObjId.address(), dwFlags, pvAuxInfo.address(), pInfo.address(), pcbInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptImportPublicKeyInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$904.CryptImportPublicKeyInfo$MH,"CryptImportPublicKeyInfo");
    }
    public static int CryptImportPublicKeyInfo ( long hCryptProv,  int dwCertEncodingType,  Addressable pInfo,  Addressable phKey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$904.CryptImportPublicKeyInfo$MH, "CryptImportPublicKeyInfo");
        try {
            return (int)mh$.invokeExact(hCryptProv, dwCertEncodingType, pInfo.address(), phKey.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptImportPublicKeyInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$904.CryptImportPublicKeyInfoEx$MH,"CryptImportPublicKeyInfoEx");
    }
    public static int CryptImportPublicKeyInfoEx ( long hCryptProv,  int dwCertEncodingType,  Addressable pInfo,  int aiKeyAlg,  int dwFlags,  Addressable pvAuxInfo,  Addressable phKey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$904.CryptImportPublicKeyInfoEx$MH, "CryptImportPublicKeyInfoEx");
        try {
            return (int)mh$.invokeExact(hCryptProv, dwCertEncodingType, pInfo.address(), aiKeyAlg, dwFlags, pvAuxInfo.address(), phKey.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptImportPublicKeyInfoEx2$MH() {
        return RuntimeHelper.requireNonNull(constants$905.CryptImportPublicKeyInfoEx2$MH,"CryptImportPublicKeyInfoEx2");
    }
    public static int CryptImportPublicKeyInfoEx2 ( int dwCertEncodingType,  Addressable pInfo,  int dwFlags,  Addressable pvAuxInfo,  Addressable phKey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$905.CryptImportPublicKeyInfoEx2$MH, "CryptImportPublicKeyInfoEx2");
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pInfo.address(), dwFlags, pvAuxInfo.address(), phKey.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptAcquireCertificatePrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$905.CryptAcquireCertificatePrivateKey$MH,"CryptAcquireCertificatePrivateKey");
    }
    public static int CryptAcquireCertificatePrivateKey ( Addressable pCert,  int dwFlags,  Addressable pvParameters,  Addressable phCryptProvOrNCryptKey,  Addressable pdwKeySpec,  Addressable pfCallerFreeProvOrNCryptKey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$905.CryptAcquireCertificatePrivateKey$MH, "CryptAcquireCertificatePrivateKey");
        try {
            return (int)mh$.invokeExact(pCert.address(), dwFlags, pvParameters.address(), phCryptProvOrNCryptKey.address(), pdwKeySpec.address(), pfCallerFreeProvOrNCryptKey.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptFindCertificateKeyProvInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$905.CryptFindCertificateKeyProvInfo$MH,"CryptFindCertificateKeyProvInfo");
    }
    public static int CryptFindCertificateKeyProvInfo ( Addressable pCert,  int dwFlags,  Addressable pvReserved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$905.CryptFindCertificateKeyProvInfo$MH, "CryptFindCertificateKeyProvInfo");
        try {
            return (int)mh$.invokeExact(pCert.address(), dwFlags, pvReserved.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptImportPKCS8$MH() {
        return RuntimeHelper.requireNonNull(constants$905.CryptImportPKCS8$MH,"CryptImportPKCS8");
    }
    public static int CryptImportPKCS8 ( MemorySegment sPrivateKeyAndParams,  int dwFlags,  Addressable phCryptProv,  Addressable pvAuxInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$905.CryptImportPKCS8$MH, "CryptImportPKCS8");
        try {
            return (int)mh$.invokeExact(sPrivateKeyAndParams, dwFlags, phCryptProv.address(), pvAuxInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptExportPKCS8$MH() {
        return RuntimeHelper.requireNonNull(constants$905.CryptExportPKCS8$MH,"CryptExportPKCS8");
    }
    public static int CryptExportPKCS8 ( long hCryptProv,  int dwKeySpec,  Addressable pszPrivateKeyObjId,  int dwFlags,  Addressable pvAuxInfo,  Addressable pbPrivateKeyBlob,  Addressable pcbPrivateKeyBlob) {
        var mh$ = RuntimeHelper.requireNonNull(constants$905.CryptExportPKCS8$MH, "CryptExportPKCS8");
        try {
            return (int)mh$.invokeExact(hCryptProv, dwKeySpec, pszPrivateKeyObjId.address(), dwFlags, pvAuxInfo.address(), pbPrivateKeyBlob.address(), pcbPrivateKeyBlob.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptExportPKCS8Ex$MH() {
        return RuntimeHelper.requireNonNull(constants$905.CryptExportPKCS8Ex$MH,"CryptExportPKCS8Ex");
    }
    public static int CryptExportPKCS8Ex ( Addressable psExportParams,  int dwFlags,  Addressable pvAuxInfo,  Addressable pbPrivateKeyBlob,  Addressable pcbPrivateKeyBlob) {
        var mh$ = RuntimeHelper.requireNonNull(constants$905.CryptExportPKCS8Ex$MH, "CryptExportPKCS8Ex");
        try {
            return (int)mh$.invokeExact(psExportParams.address(), dwFlags, pvAuxInfo.address(), pbPrivateKeyBlob.address(), pcbPrivateKeyBlob.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashPublicKeyInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$906.CryptHashPublicKeyInfo$MH,"CryptHashPublicKeyInfo");
    }
    public static int CryptHashPublicKeyInfo ( long hCryptProv,  int Algid,  int dwFlags,  int dwCertEncodingType,  Addressable pInfo,  Addressable pbComputedHash,  Addressable pcbComputedHash) {
        var mh$ = RuntimeHelper.requireNonNull(constants$906.CryptHashPublicKeyInfo$MH, "CryptHashPublicKeyInfo");
        try {
            return (int)mh$.invokeExact(hCryptProv, Algid, dwFlags, dwCertEncodingType, pInfo.address(), pbComputedHash.address(), pcbComputedHash.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertRDNValueToStrA$MH() {
        return RuntimeHelper.requireNonNull(constants$906.CertRDNValueToStrA$MH,"CertRDNValueToStrA");
    }
    public static int CertRDNValueToStrA ( int dwValueType,  Addressable pValue,  Addressable psz,  int csz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$906.CertRDNValueToStrA$MH, "CertRDNValueToStrA");
        try {
            return (int)mh$.invokeExact(dwValueType, pValue.address(), psz.address(), csz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertRDNValueToStrW$MH() {
        return RuntimeHelper.requireNonNull(constants$906.CertRDNValueToStrW$MH,"CertRDNValueToStrW");
    }
    public static int CertRDNValueToStrW ( int dwValueType,  Addressable pValue,  Addressable psz,  int csz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$906.CertRDNValueToStrW$MH, "CertRDNValueToStrW");
        try {
            return (int)mh$.invokeExact(dwValueType, pValue.address(), psz.address(), csz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertNameToStrA$MH() {
        return RuntimeHelper.requireNonNull(constants$906.CertNameToStrA$MH,"CertNameToStrA");
    }
    public static int CertNameToStrA ( int dwCertEncodingType,  Addressable pName,  int dwStrType,  Addressable psz,  int csz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$906.CertNameToStrA$MH, "CertNameToStrA");
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pName.address(), dwStrType, psz.address(), csz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertNameToStrW$MH() {
        return RuntimeHelper.requireNonNull(constants$906.CertNameToStrW$MH,"CertNameToStrW");
    }
    public static int CertNameToStrW ( int dwCertEncodingType,  Addressable pName,  int dwStrType,  Addressable psz,  int csz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$906.CertNameToStrW$MH, "CertNameToStrW");
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pName.address(), dwStrType, psz.address(), csz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertStrToNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$906.CertStrToNameA$MH,"CertStrToNameA");
    }
    public static int CertStrToNameA ( int dwCertEncodingType,  Addressable pszX500,  int dwStrType,  Addressable pvReserved,  Addressable pbEncoded,  Addressable pcbEncoded,  Addressable ppszError) {
        var mh$ = RuntimeHelper.requireNonNull(constants$906.CertStrToNameA$MH, "CertStrToNameA");
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pszX500.address(), dwStrType, pvReserved.address(), pbEncoded.address(), pcbEncoded.address(), ppszError.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertStrToNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$907.CertStrToNameW$MH,"CertStrToNameW");
    }
    public static int CertStrToNameW ( int dwCertEncodingType,  Addressable pszX500,  int dwStrType,  Addressable pvReserved,  Addressable pbEncoded,  Addressable pcbEncoded,  Addressable ppszError) {
        var mh$ = RuntimeHelper.requireNonNull(constants$907.CertStrToNameW$MH, "CertStrToNameW");
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pszX500.address(), dwStrType, pvReserved.address(), pbEncoded.address(), pcbEncoded.address(), ppszError.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetNameStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$907.CertGetNameStringA$MH,"CertGetNameStringA");
    }
    public static int CertGetNameStringA ( Addressable pCertContext,  int dwType,  int dwFlags,  Addressable pvTypePara,  Addressable pszNameString,  int cchNameString) {
        var mh$ = RuntimeHelper.requireNonNull(constants$907.CertGetNameStringA$MH, "CertGetNameStringA");
        try {
            return (int)mh$.invokeExact(pCertContext.address(), dwType, dwFlags, pvTypePara.address(), pszNameString.address(), cchNameString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetNameStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$907.CertGetNameStringW$MH,"CertGetNameStringW");
    }
    public static int CertGetNameStringW ( Addressable pCertContext,  int dwType,  int dwFlags,  Addressable pvTypePara,  Addressable pszNameString,  int cchNameString) {
        var mh$ = RuntimeHelper.requireNonNull(constants$907.CertGetNameStringW$MH, "CertGetNameStringW");
        try {
            return (int)mh$.invokeExact(pCertContext.address(), dwType, dwFlags, pvTypePara.address(), pszNameString.address(), cchNameString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSignMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$907.CryptSignMessage$MH,"CryptSignMessage");
    }
    public static int CryptSignMessage ( Addressable pSignPara,  int fDetachedSignature,  int cToBeSigned,  Addressable rgpbToBeSigned,  Addressable rgcbToBeSigned,  Addressable pbSignedBlob,  Addressable pcbSignedBlob) {
        var mh$ = RuntimeHelper.requireNonNull(constants$907.CryptSignMessage$MH, "CryptSignMessage");
        try {
            return (int)mh$.invokeExact(pSignPara.address(), fDetachedSignature, cToBeSigned, rgpbToBeSigned.address(), rgcbToBeSigned.address(), pbSignedBlob.address(), pcbSignedBlob.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyMessageSignature$MH() {
        return RuntimeHelper.requireNonNull(constants$908.CryptVerifyMessageSignature$MH,"CryptVerifyMessageSignature");
    }
    public static int CryptVerifyMessageSignature ( Addressable pVerifyPara,  int dwSignerIndex,  Addressable pbSignedBlob,  int cbSignedBlob,  Addressable pbDecoded,  Addressable pcbDecoded,  Addressable ppSignerCert) {
        var mh$ = RuntimeHelper.requireNonNull(constants$908.CryptVerifyMessageSignature$MH, "CryptVerifyMessageSignature");
        try {
            return (int)mh$.invokeExact(pVerifyPara.address(), dwSignerIndex, pbSignedBlob.address(), cbSignedBlob, pbDecoded.address(), pcbDecoded.address(), ppSignerCert.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetMessageSignerCount$MH() {
        return RuntimeHelper.requireNonNull(constants$908.CryptGetMessageSignerCount$MH,"CryptGetMessageSignerCount");
    }
    public static int CryptGetMessageSignerCount ( int dwMsgEncodingType,  Addressable pbSignedBlob,  int cbSignedBlob) {
        var mh$ = RuntimeHelper.requireNonNull(constants$908.CryptGetMessageSignerCount$MH, "CryptGetMessageSignerCount");
        try {
            return (int)mh$.invokeExact(dwMsgEncodingType, pbSignedBlob.address(), cbSignedBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetMessageCertificates$MH() {
        return RuntimeHelper.requireNonNull(constants$908.CryptGetMessageCertificates$MH,"CryptGetMessageCertificates");
    }
    public static MemoryAddress CryptGetMessageCertificates ( int dwMsgAndCertEncodingType,  long hCryptProv,  int dwFlags,  Addressable pbSignedBlob,  int cbSignedBlob) {
        var mh$ = RuntimeHelper.requireNonNull(constants$908.CryptGetMessageCertificates$MH, "CryptGetMessageCertificates");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dwMsgAndCertEncodingType, hCryptProv, dwFlags, pbSignedBlob.address(), cbSignedBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyDetachedMessageSignature$MH() {
        return RuntimeHelper.requireNonNull(constants$908.CryptVerifyDetachedMessageSignature$MH,"CryptVerifyDetachedMessageSignature");
    }
    public static int CryptVerifyDetachedMessageSignature ( Addressable pVerifyPara,  int dwSignerIndex,  Addressable pbDetachedSignBlob,  int cbDetachedSignBlob,  int cToBeSigned,  Addressable rgpbToBeSigned,  Addressable rgcbToBeSigned,  Addressable ppSignerCert) {
        var mh$ = RuntimeHelper.requireNonNull(constants$908.CryptVerifyDetachedMessageSignature$MH, "CryptVerifyDetachedMessageSignature");
        try {
            return (int)mh$.invokeExact(pVerifyPara.address(), dwSignerIndex, pbDetachedSignBlob.address(), cbDetachedSignBlob, cToBeSigned, rgpbToBeSigned.address(), rgcbToBeSigned.address(), ppSignerCert.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEncryptMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$908.CryptEncryptMessage$MH,"CryptEncryptMessage");
    }
    public static int CryptEncryptMessage ( Addressable pEncryptPara,  int cRecipientCert,  Addressable rgpRecipientCert,  Addressable pbToBeEncrypted,  int cbToBeEncrypted,  Addressable pbEncryptedBlob,  Addressable pcbEncryptedBlob) {
        var mh$ = RuntimeHelper.requireNonNull(constants$908.CryptEncryptMessage$MH, "CryptEncryptMessage");
        try {
            return (int)mh$.invokeExact(pEncryptPara.address(), cRecipientCert, rgpRecipientCert.address(), pbToBeEncrypted.address(), cbToBeEncrypted, pbEncryptedBlob.address(), pcbEncryptedBlob.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDecryptMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$908.CryptDecryptMessage$MH,"CryptDecryptMessage");
    }
    public static int CryptDecryptMessage ( Addressable pDecryptPara,  Addressable pbEncryptedBlob,  int cbEncryptedBlob,  Addressable pbDecrypted,  Addressable pcbDecrypted,  Addressable ppXchgCert) {
        var mh$ = RuntimeHelper.requireNonNull(constants$908.CryptDecryptMessage$MH, "CryptDecryptMessage");
        try {
            return (int)mh$.invokeExact(pDecryptPara.address(), pbEncryptedBlob.address(), cbEncryptedBlob, pbDecrypted.address(), pcbDecrypted.address(), ppXchgCert.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSignAndEncryptMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$909.CryptSignAndEncryptMessage$MH,"CryptSignAndEncryptMessage");
    }
    public static int CryptSignAndEncryptMessage ( Addressable pSignPara,  Addressable pEncryptPara,  int cRecipientCert,  Addressable rgpRecipientCert,  Addressable pbToBeSignedAndEncrypted,  int cbToBeSignedAndEncrypted,  Addressable pbSignedAndEncryptedBlob,  Addressable pcbSignedAndEncryptedBlob) {
        var mh$ = RuntimeHelper.requireNonNull(constants$909.CryptSignAndEncryptMessage$MH, "CryptSignAndEncryptMessage");
        try {
            return (int)mh$.invokeExact(pSignPara.address(), pEncryptPara.address(), cRecipientCert, rgpRecipientCert.address(), pbToBeSignedAndEncrypted.address(), cbToBeSignedAndEncrypted, pbSignedAndEncryptedBlob.address(), pcbSignedAndEncryptedBlob.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDecryptAndVerifyMessageSignature$MH() {
        return RuntimeHelper.requireNonNull(constants$909.CryptDecryptAndVerifyMessageSignature$MH,"CryptDecryptAndVerifyMessageSignature");
    }
    public static int CryptDecryptAndVerifyMessageSignature ( Addressable pDecryptPara,  Addressable pVerifyPara,  int dwSignerIndex,  Addressable pbEncryptedBlob,  int cbEncryptedBlob,  Addressable pbDecrypted,  Addressable pcbDecrypted,  Addressable ppXchgCert,  Addressable ppSignerCert) {
        var mh$ = RuntimeHelper.requireNonNull(constants$909.CryptDecryptAndVerifyMessageSignature$MH, "CryptDecryptAndVerifyMessageSignature");
        try {
            return (int)mh$.invokeExact(pDecryptPara.address(), pVerifyPara.address(), dwSignerIndex, pbEncryptedBlob.address(), cbEncryptedBlob, pbDecrypted.address(), pcbDecrypted.address(), ppXchgCert.address(), ppSignerCert.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDecodeMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$909.CryptDecodeMessage$MH,"CryptDecodeMessage");
    }
    public static int CryptDecodeMessage ( int dwMsgTypeFlags,  Addressable pDecryptPara,  Addressable pVerifyPara,  int dwSignerIndex,  Addressable pbEncodedBlob,  int cbEncodedBlob,  int dwPrevInnerContentType,  Addressable pdwMsgType,  Addressable pdwInnerContentType,  Addressable pbDecoded,  Addressable pcbDecoded,  Addressable ppXchgCert,  Addressable ppSignerCert) {
        var mh$ = RuntimeHelper.requireNonNull(constants$909.CryptDecodeMessage$MH, "CryptDecodeMessage");
        try {
            return (int)mh$.invokeExact(dwMsgTypeFlags, pDecryptPara.address(), pVerifyPara.address(), dwSignerIndex, pbEncodedBlob.address(), cbEncodedBlob, dwPrevInnerContentType, pdwMsgType.address(), pdwInnerContentType.address(), pbDecoded.address(), pcbDecoded.address(), ppXchgCert.address(), ppSignerCert.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$909.CryptHashMessage$MH,"CryptHashMessage");
    }
    public static int CryptHashMessage ( Addressable pHashPara,  int fDetachedHash,  int cToBeHashed,  Addressable rgpbToBeHashed,  Addressable rgcbToBeHashed,  Addressable pbHashedBlob,  Addressable pcbHashedBlob,  Addressable pbComputedHash,  Addressable pcbComputedHash) {
        var mh$ = RuntimeHelper.requireNonNull(constants$909.CryptHashMessage$MH, "CryptHashMessage");
        try {
            return (int)mh$.invokeExact(pHashPara.address(), fDetachedHash, cToBeHashed, rgpbToBeHashed.address(), rgcbToBeHashed.address(), pbHashedBlob.address(), pcbHashedBlob.address(), pbComputedHash.address(), pcbComputedHash.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyMessageHash$MH() {
        return RuntimeHelper.requireNonNull(constants$909.CryptVerifyMessageHash$MH,"CryptVerifyMessageHash");
    }
    public static int CryptVerifyMessageHash ( Addressable pHashPara,  Addressable pbHashedBlob,  int cbHashedBlob,  Addressable pbToBeHashed,  Addressable pcbToBeHashed,  Addressable pbComputedHash,  Addressable pcbComputedHash) {
        var mh$ = RuntimeHelper.requireNonNull(constants$909.CryptVerifyMessageHash$MH, "CryptVerifyMessageHash");
        try {
            return (int)mh$.invokeExact(pHashPara.address(), pbHashedBlob.address(), cbHashedBlob, pbToBeHashed.address(), pcbToBeHashed.address(), pbComputedHash.address(), pcbComputedHash.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyDetachedMessageHash$MH() {
        return RuntimeHelper.requireNonNull(constants$909.CryptVerifyDetachedMessageHash$MH,"CryptVerifyDetachedMessageHash");
    }
    public static int CryptVerifyDetachedMessageHash ( Addressable pHashPara,  Addressable pbDetachedHashBlob,  int cbDetachedHashBlob,  int cToBeHashed,  Addressable rgpbToBeHashed,  Addressable rgcbToBeHashed,  Addressable pbComputedHash,  Addressable pcbComputedHash) {
        var mh$ = RuntimeHelper.requireNonNull(constants$909.CryptVerifyDetachedMessageHash$MH, "CryptVerifyDetachedMessageHash");
        try {
            return (int)mh$.invokeExact(pHashPara.address(), pbDetachedHashBlob.address(), cbDetachedHashBlob, cToBeHashed, rgpbToBeHashed.address(), rgcbToBeHashed.address(), pbComputedHash.address(), pcbComputedHash.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSignMessageWithKey$MH() {
        return RuntimeHelper.requireNonNull(constants$910.CryptSignMessageWithKey$MH,"CryptSignMessageWithKey");
    }
    public static int CryptSignMessageWithKey ( Addressable pSignPara,  Addressable pbToBeSigned,  int cbToBeSigned,  Addressable pbSignedBlob,  Addressable pcbSignedBlob) {
        var mh$ = RuntimeHelper.requireNonNull(constants$910.CryptSignMessageWithKey$MH, "CryptSignMessageWithKey");
        try {
            return (int)mh$.invokeExact(pSignPara.address(), pbToBeSigned.address(), cbToBeSigned, pbSignedBlob.address(), pcbSignedBlob.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyMessageSignatureWithKey$MH() {
        return RuntimeHelper.requireNonNull(constants$910.CryptVerifyMessageSignatureWithKey$MH,"CryptVerifyMessageSignatureWithKey");
    }
    public static int CryptVerifyMessageSignatureWithKey ( Addressable pVerifyPara,  Addressable pPublicKeyInfo,  Addressable pbSignedBlob,  int cbSignedBlob,  Addressable pbDecoded,  Addressable pcbDecoded) {
        var mh$ = RuntimeHelper.requireNonNull(constants$910.CryptVerifyMessageSignatureWithKey$MH, "CryptVerifyMessageSignatureWithKey");
        try {
            return (int)mh$.invokeExact(pVerifyPara.address(), pPublicKeyInfo.address(), pbSignedBlob.address(), cbSignedBlob, pbDecoded.address(), pcbDecoded.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertOpenSystemStoreA$MH() {
        return RuntimeHelper.requireNonNull(constants$910.CertOpenSystemStoreA$MH,"CertOpenSystemStoreA");
    }
    public static MemoryAddress CertOpenSystemStoreA ( long hProv,  Addressable szSubsystemProtocol) {
        var mh$ = RuntimeHelper.requireNonNull(constants$910.CertOpenSystemStoreA$MH, "CertOpenSystemStoreA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hProv, szSubsystemProtocol.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertOpenSystemStoreW$MH() {
        return RuntimeHelper.requireNonNull(constants$910.CertOpenSystemStoreW$MH,"CertOpenSystemStoreW");
    }
    public static MemoryAddress CertOpenSystemStoreW ( long hProv,  Addressable szSubsystemProtocol) {
        var mh$ = RuntimeHelper.requireNonNull(constants$910.CertOpenSystemStoreW$MH, "CertOpenSystemStoreW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hProv, szSubsystemProtocol.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddEncodedCertificateToSystemStoreA$MH() {
        return RuntimeHelper.requireNonNull(constants$910.CertAddEncodedCertificateToSystemStoreA$MH,"CertAddEncodedCertificateToSystemStoreA");
    }
    public static int CertAddEncodedCertificateToSystemStoreA ( Addressable szCertStoreName,  Addressable pbCertEncoded,  int cbCertEncoded) {
        var mh$ = RuntimeHelper.requireNonNull(constants$910.CertAddEncodedCertificateToSystemStoreA$MH, "CertAddEncodedCertificateToSystemStoreA");
        try {
            return (int)mh$.invokeExact(szCertStoreName.address(), pbCertEncoded.address(), cbCertEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddEncodedCertificateToSystemStoreW$MH() {
        return RuntimeHelper.requireNonNull(constants$910.CertAddEncodedCertificateToSystemStoreW$MH,"CertAddEncodedCertificateToSystemStoreW");
    }
    public static int CertAddEncodedCertificateToSystemStoreW ( Addressable szCertStoreName,  Addressable pbCertEncoded,  int cbCertEncoded) {
        var mh$ = RuntimeHelper.requireNonNull(constants$910.CertAddEncodedCertificateToSystemStoreW$MH, "CertAddEncodedCertificateToSystemStoreW");
        try {
            return (int)mh$.invokeExact(szCertStoreName.address(), pbCertEncoded.address(), cbCertEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindCertsByIssuer$MH() {
        return RuntimeHelper.requireNonNull(constants$911.FindCertsByIssuer$MH,"FindCertsByIssuer");
    }
    public static int FindCertsByIssuer ( Addressable pCertChains,  Addressable pcbCertChains,  Addressable pcCertChains,  Addressable pbEncodedIssuerName,  int cbEncodedIssuerName,  Addressable pwszPurpose,  int dwKeySpec) {
        var mh$ = RuntimeHelper.requireNonNull(constants$911.FindCertsByIssuer$MH, "FindCertsByIssuer");
        try {
            return (int)mh$.invokeExact(pCertChains.address(), pcbCertChains.address(), pcCertChains.address(), pbEncodedIssuerName.address(), cbEncodedIssuerName, pwszPurpose.address(), dwKeySpec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptQueryObject$MH() {
        return RuntimeHelper.requireNonNull(constants$911.CryptQueryObject$MH,"CryptQueryObject");
    }
    public static int CryptQueryObject ( int dwObjectType,  Addressable pvObject,  int dwExpectedContentTypeFlags,  int dwExpectedFormatTypeFlags,  int dwFlags,  Addressable pdwMsgAndCertEncodingType,  Addressable pdwContentType,  Addressable pdwFormatType,  Addressable phCertStore,  Addressable phMsg,  Addressable ppvContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$911.CryptQueryObject$MH, "CryptQueryObject");
        try {
            return (int)mh$.invokeExact(dwObjectType, pvObject.address(), dwExpectedContentTypeFlags, dwExpectedFormatTypeFlags, dwFlags, pdwMsgAndCertEncodingType.address(), pdwContentType.address(), pdwFormatType.address(), phCertStore.address(), phMsg.address(), ppvContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMemAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$911.CryptMemAlloc$MH,"CryptMemAlloc");
    }
    public static MemoryAddress CryptMemAlloc ( int cbSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$911.CryptMemAlloc$MH, "CryptMemAlloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMemRealloc$MH() {
        return RuntimeHelper.requireNonNull(constants$911.CryptMemRealloc$MH,"CryptMemRealloc");
    }
    public static MemoryAddress CryptMemRealloc ( Addressable pv,  int cbSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$911.CryptMemRealloc$MH, "CryptMemRealloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pv.address(), cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMemFree$MH() {
        return RuntimeHelper.requireNonNull(constants$912.CryptMemFree$MH,"CryptMemFree");
    }
    public static void CryptMemFree ( Addressable pv) {
        var mh$ = RuntimeHelper.requireNonNull(constants$912.CryptMemFree$MH, "CryptMemFree");
        try {
            mh$.invokeExact(pv.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptCreateAsyncHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$912.CryptCreateAsyncHandle$MH,"CryptCreateAsyncHandle");
    }
    public static int CryptCreateAsyncHandle ( int dwFlags,  Addressable phAsync) {
        var mh$ = RuntimeHelper.requireNonNull(constants$912.CryptCreateAsyncHandle$MH, "CryptCreateAsyncHandle");
        try {
            return (int)mh$.invokeExact(dwFlags, phAsync.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetAsyncParam$MH() {
        return RuntimeHelper.requireNonNull(constants$912.CryptSetAsyncParam$MH,"CryptSetAsyncParam");
    }
    public static int CryptSetAsyncParam ( Addressable hAsync,  Addressable pszParamOid,  Addressable pvParam,  Addressable pfnFree) {
        var mh$ = RuntimeHelper.requireNonNull(constants$912.CryptSetAsyncParam$MH, "CryptSetAsyncParam");
        try {
            return (int)mh$.invokeExact(hAsync.address(), pszParamOid.address(), pvParam.address(), pfnFree.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetAsyncParam$MH() {
        return RuntimeHelper.requireNonNull(constants$912.CryptGetAsyncParam$MH,"CryptGetAsyncParam");
    }
    public static int CryptGetAsyncParam ( Addressable hAsync,  Addressable pszParamOid,  Addressable ppvParam,  Addressable ppfnFree) {
        var mh$ = RuntimeHelper.requireNonNull(constants$912.CryptGetAsyncParam$MH, "CryptGetAsyncParam");
        try {
            return (int)mh$.invokeExact(hAsync.address(), pszParamOid.address(), ppvParam.address(), ppfnFree.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptCloseAsyncHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$912.CryptCloseAsyncHandle$MH,"CryptCloseAsyncHandle");
    }
    public static int CryptCloseAsyncHandle ( Addressable hAsync) {
        var mh$ = RuntimeHelper.requireNonNull(constants$912.CryptCloseAsyncHandle$MH, "CryptCloseAsyncHandle");
        try {
            return (int)mh$.invokeExact(hAsync.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptRetrieveObjectByUrlA$MH() {
        return RuntimeHelper.requireNonNull(constants$913.CryptRetrieveObjectByUrlA$MH,"CryptRetrieveObjectByUrlA");
    }
    public static int CryptRetrieveObjectByUrlA ( Addressable pszUrl,  Addressable pszObjectOid,  int dwRetrievalFlags,  int dwTimeout,  Addressable ppvObject,  Addressable hAsyncRetrieve,  Addressable pCredentials,  Addressable pvVerify,  Addressable pAuxInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$913.CryptRetrieveObjectByUrlA$MH, "CryptRetrieveObjectByUrlA");
        try {
            return (int)mh$.invokeExact(pszUrl.address(), pszObjectOid.address(), dwRetrievalFlags, dwTimeout, ppvObject.address(), hAsyncRetrieve.address(), pCredentials.address(), pvVerify.address(), pAuxInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptRetrieveObjectByUrlW$MH() {
        return RuntimeHelper.requireNonNull(constants$913.CryptRetrieveObjectByUrlW$MH,"CryptRetrieveObjectByUrlW");
    }
    public static int CryptRetrieveObjectByUrlW ( Addressable pszUrl,  Addressable pszObjectOid,  int dwRetrievalFlags,  int dwTimeout,  Addressable ppvObject,  Addressable hAsyncRetrieve,  Addressable pCredentials,  Addressable pvVerify,  Addressable pAuxInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$913.CryptRetrieveObjectByUrlW$MH, "CryptRetrieveObjectByUrlW");
        try {
            return (int)mh$.invokeExact(pszUrl.address(), pszObjectOid.address(), dwRetrievalFlags, dwTimeout, ppvObject.address(), hAsyncRetrieve.address(), pCredentials.address(), pvVerify.address(), pAuxInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptInstallCancelRetrieval$MH() {
        return RuntimeHelper.requireNonNull(constants$913.CryptInstallCancelRetrieval$MH,"CryptInstallCancelRetrieval");
    }
    public static int CryptInstallCancelRetrieval ( Addressable pfnCancel,  Addressable pvArg,  int dwFlags,  Addressable pvReserved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$913.CryptInstallCancelRetrieval$MH, "CryptInstallCancelRetrieval");
        try {
            return (int)mh$.invokeExact(pfnCancel.address(), pvArg.address(), dwFlags, pvReserved.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUninstallCancelRetrieval$MH() {
        return RuntimeHelper.requireNonNull(constants$914.CryptUninstallCancelRetrieval$MH,"CryptUninstallCancelRetrieval");
    }
    public static int CryptUninstallCancelRetrieval ( int dwFlags,  Addressable pvReserved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$914.CryptUninstallCancelRetrieval$MH, "CryptUninstallCancelRetrieval");
        try {
            return (int)mh$.invokeExact(dwFlags, pvReserved.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptCancelAsyncRetrieval$MH() {
        return RuntimeHelper.requireNonNull(constants$914.CryptCancelAsyncRetrieval$MH,"CryptCancelAsyncRetrieval");
    }
    public static int CryptCancelAsyncRetrieval ( Addressable hAsyncRetrieval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$914.CryptCancelAsyncRetrieval$MH, "CryptCancelAsyncRetrieval");
        try {
            return (int)mh$.invokeExact(hAsyncRetrieval.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetObjectUrl$MH() {
        return RuntimeHelper.requireNonNull(constants$915.CryptGetObjectUrl$MH,"CryptGetObjectUrl");
    }
    public static int CryptGetObjectUrl ( Addressable pszUrlOid,  Addressable pvPara,  int dwFlags,  Addressable pUrlArray,  Addressable pcbUrlArray,  Addressable pUrlInfo,  Addressable pcbUrlInfo,  Addressable pvReserved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$915.CryptGetObjectUrl$MH, "CryptGetObjectUrl");
        try {
            return (int)mh$.invokeExact(pszUrlOid.address(), pvPara.address(), dwFlags, pUrlArray.address(), pcbUrlArray.address(), pUrlInfo.address(), pcbUrlInfo.address(), pvReserved.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetTimeValidObject$MH() {
        return RuntimeHelper.requireNonNull(constants$915.CryptGetTimeValidObject$MH,"CryptGetTimeValidObject");
    }
    public static int CryptGetTimeValidObject ( Addressable pszTimeValidOid,  Addressable pvPara,  Addressable pIssuer,  Addressable pftValidFor,  int dwFlags,  int dwTimeout,  Addressable ppvObject,  Addressable pCredentials,  Addressable pExtraInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$915.CryptGetTimeValidObject$MH, "CryptGetTimeValidObject");
        try {
            return (int)mh$.invokeExact(pszTimeValidOid.address(), pvPara.address(), pIssuer.address(), pftValidFor.address(), dwFlags, dwTimeout, ppvObject.address(), pCredentials.address(), pExtraInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptFlushTimeValidObject$MH() {
        return RuntimeHelper.requireNonNull(constants$915.CryptFlushTimeValidObject$MH,"CryptFlushTimeValidObject");
    }
    public static int CryptFlushTimeValidObject ( Addressable pszFlushTimeValidOid,  Addressable pvPara,  Addressable pIssuer,  int dwFlags,  Addressable pvReserved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$915.CryptFlushTimeValidObject$MH, "CryptFlushTimeValidObject");
        try {
            return (int)mh$.invokeExact(pszFlushTimeValidOid.address(), pvPara.address(), pIssuer.address(), dwFlags, pvReserved.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCreateSelfSignCertificate$MH() {
        return RuntimeHelper.requireNonNull(constants$915.CertCreateSelfSignCertificate$MH,"CertCreateSelfSignCertificate");
    }
    public static MemoryAddress CertCreateSelfSignCertificate ( long hCryptProvOrNCryptKey,  Addressable pSubjectIssuerBlob,  int dwFlags,  Addressable pKeyProvInfo,  Addressable pSignatureAlgorithm,  Addressable pStartTime,  Addressable pEndTime,  Addressable pExtensions) {
        var mh$ = RuntimeHelper.requireNonNull(constants$915.CertCreateSelfSignCertificate$MH, "CertCreateSelfSignCertificate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hCryptProvOrNCryptKey, pSubjectIssuerBlob.address(), dwFlags, pKeyProvInfo.address(), pSignatureAlgorithm.address(), pStartTime.address(), pEndTime.address(), pExtensions.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetKeyIdentifierProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$916.CryptGetKeyIdentifierProperty$MH,"CryptGetKeyIdentifierProperty");
    }
    public static int CryptGetKeyIdentifierProperty ( Addressable pKeyIdentifier,  int dwPropId,  int dwFlags,  Addressable pwszComputerName,  Addressable pvReserved,  Addressable pvData,  Addressable pcbData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$916.CryptGetKeyIdentifierProperty$MH, "CryptGetKeyIdentifierProperty");
        try {
            return (int)mh$.invokeExact(pKeyIdentifier.address(), dwPropId, dwFlags, pwszComputerName.address(), pvReserved.address(), pvData.address(), pcbData.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetKeyIdentifierProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$916.CryptSetKeyIdentifierProperty$MH,"CryptSetKeyIdentifierProperty");
    }
    public static int CryptSetKeyIdentifierProperty ( Addressable pKeyIdentifier,  int dwPropId,  int dwFlags,  Addressable pwszComputerName,  Addressable pvReserved,  Addressable pvData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$916.CryptSetKeyIdentifierProperty$MH, "CryptSetKeyIdentifierProperty");
        try {
            return (int)mh$.invokeExact(pKeyIdentifier.address(), dwPropId, dwFlags, pwszComputerName.address(), pvReserved.address(), pvData.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEnumKeyIdentifierProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$916.CryptEnumKeyIdentifierProperties$MH,"CryptEnumKeyIdentifierProperties");
    }
    public static int CryptEnumKeyIdentifierProperties ( Addressable pKeyIdentifier,  int dwPropId,  int dwFlags,  Addressable pwszComputerName,  Addressable pvReserved,  Addressable pvArg,  Addressable pfnEnum) {
        var mh$ = RuntimeHelper.requireNonNull(constants$916.CryptEnumKeyIdentifierProperties$MH, "CryptEnumKeyIdentifierProperties");
        try {
            return (int)mh$.invokeExact(pKeyIdentifier.address(), dwPropId, dwFlags, pwszComputerName.address(), pvReserved.address(), pvArg.address(), pfnEnum.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptCreateKeyIdentifierFromCSP$MH() {
        return RuntimeHelper.requireNonNull(constants$916.CryptCreateKeyIdentifierFromCSP$MH,"CryptCreateKeyIdentifierFromCSP");
    }
    public static int CryptCreateKeyIdentifierFromCSP ( int dwCertEncodingType,  Addressable pszPubKeyOID,  Addressable pPubKeyStruc,  int cbPubKeyStruc,  int dwFlags,  Addressable pvReserved,  Addressable pbHash,  Addressable pcbHash) {
        var mh$ = RuntimeHelper.requireNonNull(constants$916.CryptCreateKeyIdentifierFromCSP$MH, "CryptCreateKeyIdentifierFromCSP");
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pszPubKeyOID.address(), pPubKeyStruc.address(), cbPubKeyStruc, dwFlags, pvReserved.address(), pbHash.address(), pcbHash.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCreateCertificateChainEngine$MH() {
        return RuntimeHelper.requireNonNull(constants$916.CertCreateCertificateChainEngine$MH,"CertCreateCertificateChainEngine");
    }
    public static int CertCreateCertificateChainEngine ( Addressable pConfig,  Addressable phChainEngine) {
        var mh$ = RuntimeHelper.requireNonNull(constants$916.CertCreateCertificateChainEngine$MH, "CertCreateCertificateChainEngine");
        try {
            return (int)mh$.invokeExact(pConfig.address(), phChainEngine.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFreeCertificateChainEngine$MH() {
        return RuntimeHelper.requireNonNull(constants$916.CertFreeCertificateChainEngine$MH,"CertFreeCertificateChainEngine");
    }
    public static void CertFreeCertificateChainEngine ( Addressable hChainEngine) {
        var mh$ = RuntimeHelper.requireNonNull(constants$916.CertFreeCertificateChainEngine$MH, "CertFreeCertificateChainEngine");
        try {
            mh$.invokeExact(hChainEngine.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertResyncCertificateChainEngine$MH() {
        return RuntimeHelper.requireNonNull(constants$917.CertResyncCertificateChainEngine$MH,"CertResyncCertificateChainEngine");
    }
    public static int CertResyncCertificateChainEngine ( Addressable hChainEngine) {
        var mh$ = RuntimeHelper.requireNonNull(constants$917.CertResyncCertificateChainEngine$MH, "CertResyncCertificateChainEngine");
        try {
            return (int)mh$.invokeExact(hChainEngine.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetCertificateChain$MH() {
        return RuntimeHelper.requireNonNull(constants$917.CertGetCertificateChain$MH,"CertGetCertificateChain");
    }
    public static int CertGetCertificateChain ( Addressable hChainEngine,  Addressable pCertContext,  Addressable pTime,  Addressable hAdditionalStore,  Addressable pChainPara,  int dwFlags,  Addressable pvReserved,  Addressable ppChainContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$917.CertGetCertificateChain$MH, "CertGetCertificateChain");
        try {
            return (int)mh$.invokeExact(hChainEngine.address(), pCertContext.address(), pTime.address(), hAdditionalStore.address(), pChainPara.address(), dwFlags, pvReserved.address(), ppChainContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFreeCertificateChain$MH() {
        return RuntimeHelper.requireNonNull(constants$917.CertFreeCertificateChain$MH,"CertFreeCertificateChain");
    }
    public static void CertFreeCertificateChain ( Addressable pChainContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$917.CertFreeCertificateChain$MH, "CertFreeCertificateChain");
        try {
            mh$.invokeExact(pChainContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDuplicateCertificateChain$MH() {
        return RuntimeHelper.requireNonNull(constants$917.CertDuplicateCertificateChain$MH,"CertDuplicateCertificateChain");
    }
    public static MemoryAddress CertDuplicateCertificateChain ( Addressable pChainContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$917.CertDuplicateCertificateChain$MH, "CertDuplicateCertificateChain");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pChainContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindChainInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$917.CertFindChainInStore$MH,"CertFindChainInStore");
    }
    public static MemoryAddress CertFindChainInStore ( Addressable hCertStore,  int dwCertEncodingType,  int dwFindFlags,  int dwFindType,  Addressable pvFindPara,  Addressable pPrevChainContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$917.CertFindChainInStore$MH, "CertFindChainInStore");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hCertStore.address(), dwCertEncodingType, dwFindFlags, dwFindType, pvFindPara.address(), pPrevChainContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertVerifyCertificateChainPolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$918.CertVerifyCertificateChainPolicy$MH,"CertVerifyCertificateChainPolicy");
    }
    public static int CertVerifyCertificateChainPolicy ( Addressable pszPolicyOID,  Addressable pChainContext,  Addressable pPolicyPara,  Addressable pPolicyStatus) {
        var mh$ = RuntimeHelper.requireNonNull(constants$918.CertVerifyCertificateChainPolicy$MH, "CertVerifyCertificateChainPolicy");
        try {
            return (int)mh$.invokeExact(pszPolicyOID.address(), pChainContext.address(), pPolicyPara.address(), pPolicyStatus.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptStringToBinaryA$MH() {
        return RuntimeHelper.requireNonNull(constants$918.CryptStringToBinaryA$MH,"CryptStringToBinaryA");
    }
    public static int CryptStringToBinaryA ( Addressable pszString,  int cchString,  int dwFlags,  Addressable pbBinary,  Addressable pcbBinary,  Addressable pdwSkip,  Addressable pdwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$918.CryptStringToBinaryA$MH, "CryptStringToBinaryA");
        try {
            return (int)mh$.invokeExact(pszString.address(), cchString, dwFlags, pbBinary.address(), pcbBinary.address(), pdwSkip.address(), pdwFlags.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptStringToBinaryW$MH() {
        return RuntimeHelper.requireNonNull(constants$918.CryptStringToBinaryW$MH,"CryptStringToBinaryW");
    }
    public static int CryptStringToBinaryW ( Addressable pszString,  int cchString,  int dwFlags,  Addressable pbBinary,  Addressable pcbBinary,  Addressable pdwSkip,  Addressable pdwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$918.CryptStringToBinaryW$MH, "CryptStringToBinaryW");
        try {
            return (int)mh$.invokeExact(pszString.address(), cchString, dwFlags, pbBinary.address(), pcbBinary.address(), pdwSkip.address(), pdwFlags.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptBinaryToStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$918.CryptBinaryToStringA$MH,"CryptBinaryToStringA");
    }
    public static int CryptBinaryToStringA ( Addressable pbBinary,  int cbBinary,  int dwFlags,  Addressable pszString,  Addressable pcchString) {
        var mh$ = RuntimeHelper.requireNonNull(constants$918.CryptBinaryToStringA$MH, "CryptBinaryToStringA");
        try {
            return (int)mh$.invokeExact(pbBinary.address(), cbBinary, dwFlags, pszString.address(), pcchString.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptBinaryToStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$918.CryptBinaryToStringW$MH,"CryptBinaryToStringW");
    }
    public static int CryptBinaryToStringW ( Addressable pbBinary,  int cbBinary,  int dwFlags,  Addressable pszString,  Addressable pcchString) {
        var mh$ = RuntimeHelper.requireNonNull(constants$918.CryptBinaryToStringW$MH, "CryptBinaryToStringW");
        try {
            return (int)mh$.invokeExact(pbBinary.address(), cbBinary, dwFlags, pszString.address(), pcchString.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PFXImportCertStore$MH() {
        return RuntimeHelper.requireNonNull(constants$919.PFXImportCertStore$MH,"PFXImportCertStore");
    }
    public static MemoryAddress PFXImportCertStore ( Addressable pPFX,  Addressable szPassword,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$919.PFXImportCertStore$MH, "PFXImportCertStore");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pPFX.address(), szPassword.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PFXIsPFXBlob$MH() {
        return RuntimeHelper.requireNonNull(constants$919.PFXIsPFXBlob$MH,"PFXIsPFXBlob");
    }
    public static int PFXIsPFXBlob ( Addressable pPFX) {
        var mh$ = RuntimeHelper.requireNonNull(constants$919.PFXIsPFXBlob$MH, "PFXIsPFXBlob");
        try {
            return (int)mh$.invokeExact(pPFX.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PFXVerifyPassword$MH() {
        return RuntimeHelper.requireNonNull(constants$919.PFXVerifyPassword$MH,"PFXVerifyPassword");
    }
    public static int PFXVerifyPassword ( Addressable pPFX,  Addressable szPassword,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$919.PFXVerifyPassword$MH, "PFXVerifyPassword");
        try {
            return (int)mh$.invokeExact(pPFX.address(), szPassword.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PFXExportCertStoreEx$MH() {
        return RuntimeHelper.requireNonNull(constants$919.PFXExportCertStoreEx$MH,"PFXExportCertStoreEx");
    }
    public static int PFXExportCertStoreEx ( Addressable hStore,  Addressable pPFX,  Addressable szPassword,  Addressable pvPara,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$919.PFXExportCertStoreEx$MH, "PFXExportCertStoreEx");
        try {
            return (int)mh$.invokeExact(hStore.address(), pPFX.address(), szPassword.address(), pvPara.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PFXExportCertStore$MH() {
        return RuntimeHelper.requireNonNull(constants$919.PFXExportCertStore$MH,"PFXExportCertStore");
    }
    public static int PFXExportCertStore ( Addressable hStore,  Addressable pPFX,  Addressable szPassword,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$919.PFXExportCertStore$MH, "PFXExportCertStore");
        try {
            return (int)mh$.invokeExact(hStore.address(), pPFX.address(), szPassword.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertOpenServerOcspResponse$MH() {
        return RuntimeHelper.requireNonNull(constants$919.CertOpenServerOcspResponse$MH,"CertOpenServerOcspResponse");
    }
    public static MemoryAddress CertOpenServerOcspResponse ( Addressable pChainContext,  int dwFlags,  Addressable pvReserved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$919.CertOpenServerOcspResponse$MH, "CertOpenServerOcspResponse");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pChainContext.address(), dwFlags, pvReserved.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddRefServerOcspResponse$MH() {
        return RuntimeHelper.requireNonNull(constants$920.CertAddRefServerOcspResponse$MH,"CertAddRefServerOcspResponse");
    }
    public static void CertAddRefServerOcspResponse ( Addressable hServerOcspResponse) {
        var mh$ = RuntimeHelper.requireNonNull(constants$920.CertAddRefServerOcspResponse$MH, "CertAddRefServerOcspResponse");
        try {
            mh$.invokeExact(hServerOcspResponse.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCloseServerOcspResponse$MH() {
        return RuntimeHelper.requireNonNull(constants$920.CertCloseServerOcspResponse$MH,"CertCloseServerOcspResponse");
    }
    public static void CertCloseServerOcspResponse ( Addressable hServerOcspResponse,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$920.CertCloseServerOcspResponse$MH, "CertCloseServerOcspResponse");
        try {
            mh$.invokeExact(hServerOcspResponse.address(), dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetServerOcspResponseContext$MH() {
        return RuntimeHelper.requireNonNull(constants$920.CertGetServerOcspResponseContext$MH,"CertGetServerOcspResponseContext");
    }
    public static MemoryAddress CertGetServerOcspResponseContext ( Addressable hServerOcspResponse,  int dwFlags,  Addressable pvReserved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$920.CertGetServerOcspResponseContext$MH, "CertGetServerOcspResponseContext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hServerOcspResponse.address(), dwFlags, pvReserved.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddRefServerOcspResponseContext$MH() {
        return RuntimeHelper.requireNonNull(constants$920.CertAddRefServerOcspResponseContext$MH,"CertAddRefServerOcspResponseContext");
    }
    public static void CertAddRefServerOcspResponseContext ( Addressable pServerOcspResponseContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$920.CertAddRefServerOcspResponseContext$MH, "CertAddRefServerOcspResponseContext");
        try {
            mh$.invokeExact(pServerOcspResponseContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFreeServerOcspResponseContext$MH() {
        return RuntimeHelper.requireNonNull(constants$921.CertFreeServerOcspResponseContext$MH,"CertFreeServerOcspResponseContext");
    }
    public static void CertFreeServerOcspResponseContext ( Addressable pServerOcspResponseContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$921.CertFreeServerOcspResponseContext$MH, "CertFreeServerOcspResponseContext");
        try {
            mh$.invokeExact(pServerOcspResponseContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertRetrieveLogoOrBiometricInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$921.CertRetrieveLogoOrBiometricInfo$MH,"CertRetrieveLogoOrBiometricInfo");
    }
    public static int CertRetrieveLogoOrBiometricInfo ( Addressable pCertContext,  Addressable lpszLogoOrBiometricType,  int dwRetrievalFlags,  int dwTimeout,  int dwFlags,  Addressable pvReserved,  Addressable ppbData,  Addressable pcbData,  Addressable ppwszMimeType) {
        var mh$ = RuntimeHelper.requireNonNull(constants$921.CertRetrieveLogoOrBiometricInfo$MH, "CertRetrieveLogoOrBiometricInfo");
        try {
            return (int)mh$.invokeExact(pCertContext.address(), lpszLogoOrBiometricType.address(), dwRetrievalFlags, dwTimeout, dwFlags, pvReserved.address(), ppbData.address(), pcbData.address(), ppwszMimeType.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSelectCertificateChains$MH() {
        return RuntimeHelper.requireNonNull(constants$921.CertSelectCertificateChains$MH,"CertSelectCertificateChains");
    }
    public static int CertSelectCertificateChains ( Addressable pSelectionContext,  int dwFlags,  Addressable pChainParameters,  int cCriteria,  Addressable rgpCriteria,  Addressable hStore,  Addressable pcSelection,  Addressable pprgpSelection) {
        var mh$ = RuntimeHelper.requireNonNull(constants$921.CertSelectCertificateChains$MH, "CertSelectCertificateChains");
        try {
            return (int)mh$.invokeExact(pSelectionContext.address(), dwFlags, pChainParameters.address(), cCriteria, rgpCriteria.address(), hStore.address(), pcSelection.address(), pprgpSelection.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFreeCertificateChainList$MH() {
        return RuntimeHelper.requireNonNull(constants$921.CertFreeCertificateChainList$MH,"CertFreeCertificateChainList");
    }
    public static void CertFreeCertificateChainList ( Addressable prgpSelection) {
        var mh$ = RuntimeHelper.requireNonNull(constants$921.CertFreeCertificateChainList$MH, "CertFreeCertificateChainList");
        try {
            mh$.invokeExact(prgpSelection.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptRetrieveTimeStamp$MH() {
        return RuntimeHelper.requireNonNull(constants$921.CryptRetrieveTimeStamp$MH,"CryptRetrieveTimeStamp");
    }
    public static int CryptRetrieveTimeStamp ( Addressable wszUrl,  int dwRetrievalFlags,  int dwTimeout,  Addressable pszHashId,  Addressable pPara,  Addressable pbData,  int cbData,  Addressable ppTsContext,  Addressable ppTsSigner,  Addressable phStore) {
        var mh$ = RuntimeHelper.requireNonNull(constants$921.CryptRetrieveTimeStamp$MH, "CryptRetrieveTimeStamp");
        try {
            return (int)mh$.invokeExact(wszUrl.address(), dwRetrievalFlags, dwTimeout, pszHashId.address(), pPara.address(), pbData.address(), cbData, ppTsContext.address(), ppTsSigner.address(), phStore.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyTimeStampSignature$MH() {
        return RuntimeHelper.requireNonNull(constants$921.CryptVerifyTimeStampSignature$MH,"CryptVerifyTimeStampSignature");
    }
    public static int CryptVerifyTimeStampSignature ( Addressable pbTSContentInfo,  int cbTSContentInfo,  Addressable pbData,  int cbData,  Addressable hAdditionalStore,  Addressable ppTsContext,  Addressable ppTsSigner,  Addressable phStore) {
        var mh$ = RuntimeHelper.requireNonNull(constants$921.CryptVerifyTimeStampSignature$MH, "CryptVerifyTimeStampSignature");
        try {
            return (int)mh$.invokeExact(pbTSContentInfo.address(), cbTSContentInfo, pbData.address(), cbData, hAdditionalStore.address(), ppTsContext.address(), ppTsSigner.address(), phStore.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptProtectData$MH() {
        return RuntimeHelper.requireNonNull(constants$922.CryptProtectData$MH,"CryptProtectData");
    }
    public static int CryptProtectData ( Addressable pDataIn,  Addressable szDataDescr,  Addressable pOptionalEntropy,  Addressable pvReserved,  Addressable pPromptStruct,  int dwFlags,  Addressable pDataOut) {
        var mh$ = RuntimeHelper.requireNonNull(constants$922.CryptProtectData$MH, "CryptProtectData");
        try {
            return (int)mh$.invokeExact(pDataIn.address(), szDataDescr.address(), pOptionalEntropy.address(), pvReserved.address(), pPromptStruct.address(), dwFlags, pDataOut.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUnprotectData$MH() {
        return RuntimeHelper.requireNonNull(constants$922.CryptUnprotectData$MH,"CryptUnprotectData");
    }
    public static int CryptUnprotectData ( Addressable pDataIn,  Addressable ppszDataDescr,  Addressable pOptionalEntropy,  Addressable pvReserved,  Addressable pPromptStruct,  int dwFlags,  Addressable pDataOut) {
        var mh$ = RuntimeHelper.requireNonNull(constants$922.CryptUnprotectData$MH, "CryptUnprotectData");
        try {
            return (int)mh$.invokeExact(pDataIn.address(), ppszDataDescr.address(), pOptionalEntropy.address(), pvReserved.address(), pPromptStruct.address(), dwFlags, pDataOut.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUpdateProtectedState$MH() {
        return RuntimeHelper.requireNonNull(constants$922.CryptUpdateProtectedState$MH,"CryptUpdateProtectedState");
    }
    public static int CryptUpdateProtectedState ( Addressable pOldSid,  Addressable pwszOldPassword,  int dwFlags,  Addressable pdwSuccessCount,  Addressable pdwFailureCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$922.CryptUpdateProtectedState$MH, "CryptUpdateProtectedState");
        try {
            return (int)mh$.invokeExact(pOldSid.address(), pwszOldPassword.address(), dwFlags, pdwSuccessCount.address(), pdwFailureCount.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptProtectMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$922.CryptProtectMemory$MH,"CryptProtectMemory");
    }
    public static int CryptProtectMemory ( Addressable pDataIn,  int cbDataIn,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$922.CryptProtectMemory$MH, "CryptProtectMemory");
        try {
            return (int)mh$.invokeExact(pDataIn.address(), cbDataIn, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUnprotectMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$922.CryptUnprotectMemory$MH,"CryptUnprotectMemory");
    }
    public static int CryptUnprotectMemory ( Addressable pDataIn,  int cbDataIn,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$922.CryptUnprotectMemory$MH, "CryptUnprotectMemory");
        try {
            return (int)mh$.invokeExact(pDataIn.address(), cbDataIn, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryUsersOnEncryptedFile$MH() {
        return RuntimeHelper.requireNonNull(constants$922.QueryUsersOnEncryptedFile$MH,"QueryUsersOnEncryptedFile");
    }
    public static int QueryUsersOnEncryptedFile ( Addressable lpFileName,  Addressable pUsers) {
        var mh$ = RuntimeHelper.requireNonNull(constants$922.QueryUsersOnEncryptedFile$MH, "QueryUsersOnEncryptedFile");
        try {
            return (int)mh$.invokeExact(lpFileName.address(), pUsers.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryRecoveryAgentsOnEncryptedFile$MH() {
        return RuntimeHelper.requireNonNull(constants$923.QueryRecoveryAgentsOnEncryptedFile$MH,"QueryRecoveryAgentsOnEncryptedFile");
    }
    public static int QueryRecoveryAgentsOnEncryptedFile ( Addressable lpFileName,  Addressable pRecoveryAgents) {
        var mh$ = RuntimeHelper.requireNonNull(constants$923.QueryRecoveryAgentsOnEncryptedFile$MH, "QueryRecoveryAgentsOnEncryptedFile");
        try {
            return (int)mh$.invokeExact(lpFileName.address(), pRecoveryAgents.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveUsersFromEncryptedFile$MH() {
        return RuntimeHelper.requireNonNull(constants$923.RemoveUsersFromEncryptedFile$MH,"RemoveUsersFromEncryptedFile");
    }
    public static int RemoveUsersFromEncryptedFile ( Addressable lpFileName,  Addressable pHashes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$923.RemoveUsersFromEncryptedFile$MH, "RemoveUsersFromEncryptedFile");
        try {
            return (int)mh$.invokeExact(lpFileName.address(), pHashes.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddUsersToEncryptedFile$MH() {
        return RuntimeHelper.requireNonNull(constants$923.AddUsersToEncryptedFile$MH,"AddUsersToEncryptedFile");
    }
    public static int AddUsersToEncryptedFile ( Addressable lpFileName,  Addressable pUsers) {
        var mh$ = RuntimeHelper.requireNonNull(constants$923.AddUsersToEncryptedFile$MH, "AddUsersToEncryptedFile");
        try {
            return (int)mh$.invokeExact(lpFileName.address(), pUsers.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserFileEncryptionKey$MH() {
        return RuntimeHelper.requireNonNull(constants$923.SetUserFileEncryptionKey$MH,"SetUserFileEncryptionKey");
    }
    public static int SetUserFileEncryptionKey ( Addressable pEncryptionCertificate) {
        var mh$ = RuntimeHelper.requireNonNull(constants$923.SetUserFileEncryptionKey$MH, "SetUserFileEncryptionKey");
        try {
            return (int)mh$.invokeExact(pEncryptionCertificate.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeEncryptionCertificateHashList$MH() {
        return RuntimeHelper.requireNonNull(constants$923.FreeEncryptionCertificateHashList$MH,"FreeEncryptionCertificateHashList");
    }
    public static void FreeEncryptionCertificateHashList ( Addressable pHashes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$923.FreeEncryptionCertificateHashList$MH, "FreeEncryptionCertificateHashList");
        try {
            mh$.invokeExact(pHashes.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EncryptionDisable$MH() {
        return RuntimeHelper.requireNonNull(constants$923.EncryptionDisable$MH,"EncryptionDisable");
    }
    public static int EncryptionDisable ( Addressable DirPath,  int Disable) {
        var mh$ = RuntimeHelper.requireNonNull(constants$923.EncryptionDisable$MH, "EncryptionDisable");
        try {
            return (int)mh$.invokeExact(DirPath.address(), Disable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DuplicateEncryptionInfoFile$MH() {
        return RuntimeHelper.requireNonNull(constants$924.DuplicateEncryptionInfoFile$MH,"DuplicateEncryptionInfoFile");
    }
    public static int DuplicateEncryptionInfoFile ( Addressable SrcFileName,  Addressable DstFileName,  int dwCreationDistribution,  int dwAttributes,  Addressable lpSecurityAttributes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$924.DuplicateEncryptionInfoFile$MH, "DuplicateEncryptionInfoFile");
        try {
            return (int)mh$.invokeExact(SrcFileName.address(), DstFileName.address(), dwCreationDistribution, dwAttributes, lpSecurityAttributes.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcNsGetBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$924.I_RpcNsGetBuffer$MH,"I_RpcNsGetBuffer");
    }
    public static int I_RpcNsGetBuffer ( Addressable Message) {
        var mh$ = RuntimeHelper.requireNonNull(constants$924.I_RpcNsGetBuffer$MH, "I_RpcNsGetBuffer");
        try {
            return (int)mh$.invokeExact(Message.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcNsSendReceive$MH() {
        return RuntimeHelper.requireNonNull(constants$924.I_RpcNsSendReceive$MH,"I_RpcNsSendReceive");
    }
    public static int I_RpcNsSendReceive ( Addressable Message,  Addressable Handle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$924.I_RpcNsSendReceive$MH, "I_RpcNsSendReceive");
        try {
            return (int)mh$.invokeExact(Message.address(), Handle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcNsRaiseException$MH() {
        return RuntimeHelper.requireNonNull(constants$924.I_RpcNsRaiseException$MH,"I_RpcNsRaiseException");
    }
    public static void I_RpcNsRaiseException ( Addressable Message,  int Status) {
        var mh$ = RuntimeHelper.requireNonNull(constants$924.I_RpcNsRaiseException$MH, "I_RpcNsRaiseException");
        try {
            mh$.invokeExact(Message.address(), Status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcReBindBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$924.I_RpcReBindBuffer$MH,"I_RpcReBindBuffer");
    }
    public static int I_RpcReBindBuffer ( Addressable Message) {
        var mh$ = RuntimeHelper.requireNonNull(constants$924.I_RpcReBindBuffer$MH, "I_RpcReBindBuffer");
        try {
            return (int)mh$.invokeExact(Message.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_NsServerBindSearch$MH() {
        return RuntimeHelper.requireNonNull(constants$924.I_NsServerBindSearch$MH,"I_NsServerBindSearch");
    }
    public static int I_NsServerBindSearch () {
        var mh$ = RuntimeHelper.requireNonNull(constants$924.I_NsServerBindSearch$MH, "I_NsServerBindSearch");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_NsClientBindSearch$MH() {
        return RuntimeHelper.requireNonNull(constants$925.I_NsClientBindSearch$MH,"I_NsClientBindSearch");
    }
    public static int I_NsClientBindSearch () {
        var mh$ = RuntimeHelper.requireNonNull(constants$925.I_NsClientBindSearch$MH, "I_NsClientBindSearch");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_NsClientBindDone$MH() {
        return RuntimeHelper.requireNonNull(constants$925.I_NsClientBindDone$MH,"I_NsClientBindDone");
    }
    public static void I_NsClientBindDone () {
        var mh$ = RuntimeHelper.requireNonNull(constants$925.I_NsClientBindDone$MH, "I_NsClientBindDone");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MIDL_user_allocate$MH() {
        return RuntimeHelper.requireNonNull(constants$925.MIDL_user_allocate$MH,"MIDL_user_allocate");
    }
    public static MemoryAddress MIDL_user_allocate ( long x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$925.MIDL_user_allocate$MH, "MIDL_user_allocate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MIDL_user_free$MH() {
        return RuntimeHelper.requireNonNull(constants$925.MIDL_user_free$MH,"MIDL_user_free");
    }
    public static void MIDL_user_free ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$925.MIDL_user_free$MH, "MIDL_user_free");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRCContextBinding$MH() {
        return RuntimeHelper.requireNonNull(constants$926.NDRCContextBinding$MH,"NDRCContextBinding");
    }
    public static MemoryAddress NDRCContextBinding ( Addressable CContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$926.NDRCContextBinding$MH, "NDRCContextBinding");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(CContext.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRCContextMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$926.NDRCContextMarshall$MH,"NDRCContextMarshall");
    }
    public static void NDRCContextMarshall ( Addressable CContext,  Addressable pBuff) {
        var mh$ = RuntimeHelper.requireNonNull(constants$926.NDRCContextMarshall$MH, "NDRCContextMarshall");
        try {
            mh$.invokeExact(CContext.address(), pBuff.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRCContextUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$927.NDRCContextUnmarshall$MH,"NDRCContextUnmarshall");
    }
    public static void NDRCContextUnmarshall ( Addressable pCContext,  Addressable hBinding,  Addressable pBuff,  int DataRepresentation) {
        var mh$ = RuntimeHelper.requireNonNull(constants$927.NDRCContextUnmarshall$MH, "NDRCContextUnmarshall");
        try {
            mh$.invokeExact(pCContext.address(), hBinding.address(), pBuff.address(), DataRepresentation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRSContextMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$927.NDRSContextMarshall$MH,"NDRSContextMarshall");
    }
    public static void NDRSContextMarshall ( Addressable CContext,  Addressable pBuff,  Addressable userRunDownIn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$927.NDRSContextMarshall$MH, "NDRSContextMarshall");
        try {
            mh$.invokeExact(CContext.address(), pBuff.address(), userRunDownIn.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRSContextUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$927.NDRSContextUnmarshall$MH,"NDRSContextUnmarshall");
    }
    public static MemoryAddress NDRSContextUnmarshall ( Addressable pBuff,  int DataRepresentation) {
        var mh$ = RuntimeHelper.requireNonNull(constants$927.NDRSContextUnmarshall$MH, "NDRSContextUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pBuff.address(), DataRepresentation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRSContextMarshallEx$MH() {
        return RuntimeHelper.requireNonNull(constants$927.NDRSContextMarshallEx$MH,"NDRSContextMarshallEx");
    }
    public static void NDRSContextMarshallEx ( Addressable BindingHandle,  Addressable CContext,  Addressable pBuff,  Addressable userRunDownIn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$927.NDRSContextMarshallEx$MH, "NDRSContextMarshallEx");
        try {
            mh$.invokeExact(BindingHandle.address(), CContext.address(), pBuff.address(), userRunDownIn.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRSContextMarshall2$MH() {
        return RuntimeHelper.requireNonNull(constants$927.NDRSContextMarshall2$MH,"NDRSContextMarshall2");
    }
    public static void NDRSContextMarshall2 ( Addressable BindingHandle,  Addressable CContext,  Addressable pBuff,  Addressable userRunDownIn,  Addressable CtxGuard,  int Flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$927.NDRSContextMarshall2$MH, "NDRSContextMarshall2");
        try {
            mh$.invokeExact(BindingHandle.address(), CContext.address(), pBuff.address(), userRunDownIn.address(), CtxGuard.address(), Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRSContextUnmarshallEx$MH() {
        return RuntimeHelper.requireNonNull(constants$927.NDRSContextUnmarshallEx$MH,"NDRSContextUnmarshallEx");
    }
    public static MemoryAddress NDRSContextUnmarshallEx ( Addressable BindingHandle,  Addressable pBuff,  int DataRepresentation) {
        var mh$ = RuntimeHelper.requireNonNull(constants$927.NDRSContextUnmarshallEx$MH, "NDRSContextUnmarshallEx");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(BindingHandle.address(), pBuff.address(), DataRepresentation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRSContextUnmarshall2$MH() {
        return RuntimeHelper.requireNonNull(constants$928.NDRSContextUnmarshall2$MH,"NDRSContextUnmarshall2");
    }
    public static MemoryAddress NDRSContextUnmarshall2 ( Addressable BindingHandle,  Addressable pBuff,  int DataRepresentation,  Addressable CtxGuard,  int Flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$928.NDRSContextUnmarshall2$MH, "NDRSContextUnmarshall2");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(BindingHandle.address(), pBuff.address(), DataRepresentation, CtxGuard.address(), Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsDestroyClientContext$MH() {
        return RuntimeHelper.requireNonNull(constants$928.RpcSsDestroyClientContext$MH,"RpcSsDestroyClientContext");
    }
    public static void RpcSsDestroyClientContext ( Addressable ContextHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$928.RpcSsDestroyClientContext$MH, "RpcSsDestroyClientContext");
        try {
            mh$.invokeExact(ContextHandle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int USER_MARSHAL_CB_BUFFER_SIZE() {
        return (int)0L;
    }
    public static int USER_MARSHAL_CB_MARSHALL() {
        return (int)1L;
    }
    public static int USER_MARSHAL_CB_UNMARSHALL() {
        return (int)2L;
    }
    public static int USER_MARSHAL_CB_FREE() {
        return (int)3L;
    }
    public static int IDL_CS_NO_CONVERT() {
        return (int)0L;
    }
    public static int IDL_CS_IN_PLACE_CONVERT() {
        return (int)1L;
    }
    public static int IDL_CS_NEW_BUFFER_CONVERT() {
        return (int)2L;
    }
    public static MethodHandle RpcCsGetTags$MH() {
        return RuntimeHelper.requireNonNull(constants$932.RpcCsGetTags$MH,"RpcCsGetTags");
    }
    public static void RpcCsGetTags ( Addressable hBinding,  int fServerSide,  Addressable pulSendingTag,  Addressable pulDesiredReceivingTag,  Addressable pulReceivingTag,  Addressable pStatus) {
        var mh$ = RuntimeHelper.requireNonNull(constants$932.RpcCsGetTags$MH, "RpcCsGetTags");
        try {
            mh$.invokeExact(hBinding.address(), fServerSide, pulSendingTag.address(), pulDesiredReceivingTag.address(), pulReceivingTag.address(), pStatus.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int XLAT_SERVER() {
        return (int)1L;
    }
    public static int XLAT_CLIENT() {
        return (int)2L;
    }
    public static MethodHandle NdrClientGetSupportedSyntaxes$MH() {
        return RuntimeHelper.requireNonNull(constants$933.NdrClientGetSupportedSyntaxes$MH,"NdrClientGetSupportedSyntaxes");
    }
    public static int NdrClientGetSupportedSyntaxes ( Addressable pInf,  Addressable pCount,  Addressable pArr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$933.NdrClientGetSupportedSyntaxes$MH, "NdrClientGetSupportedSyntaxes");
        try {
            return (int)mh$.invokeExact(pInf.address(), pCount.address(), pArr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerGetSupportedSyntaxes$MH() {
        return RuntimeHelper.requireNonNull(constants$933.NdrServerGetSupportedSyntaxes$MH,"NdrServerGetSupportedSyntaxes");
    }
    public static int NdrServerGetSupportedSyntaxes ( Addressable pInf,  Addressable pCount,  Addressable pArr,  Addressable pPreferSyntaxIndex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$933.NdrServerGetSupportedSyntaxes$MH, "NdrServerGetSupportedSyntaxes");
        try {
            return (int)mh$.invokeExact(pInf.address(), pCount.address(), pArr.address(), pPreferSyntaxIndex.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleTypeMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$933.NdrSimpleTypeMarshall$MH,"NdrSimpleTypeMarshall");
    }
    public static void NdrSimpleTypeMarshall ( Addressable pStubMsg,  Addressable pMemory,  byte FormatChar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$933.NdrSimpleTypeMarshall$MH, "NdrSimpleTypeMarshall");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), FormatChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPointerMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$934.NdrPointerMarshall$MH,"NdrPointerMarshall");
    }
    public static MemoryAddress NdrPointerMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$934.NdrPointerMarshall$MH, "NdrPointerMarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsArrayMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$934.NdrCsArrayMarshall$MH,"NdrCsArrayMarshall");
    }
    public static MemoryAddress NdrCsArrayMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$934.NdrCsArrayMarshall$MH, "NdrCsArrayMarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsTagMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$934.NdrCsTagMarshall$MH,"NdrCsTagMarshall");
    }
    public static MemoryAddress NdrCsTagMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$934.NdrCsTagMarshall$MH, "NdrCsTagMarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleStructMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$934.NdrSimpleStructMarshall$MH,"NdrSimpleStructMarshall");
    }
    public static MemoryAddress NdrSimpleStructMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$934.NdrSimpleStructMarshall$MH, "NdrSimpleStructMarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStructMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$934.NdrConformantStructMarshall$MH,"NdrConformantStructMarshall");
    }
    public static MemoryAddress NdrConformantStructMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$934.NdrConformantStructMarshall$MH, "NdrConformantStructMarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingStructMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$934.NdrConformantVaryingStructMarshall$MH,"NdrConformantVaryingStructMarshall");
    }
    public static MemoryAddress NdrConformantVaryingStructMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$934.NdrConformantVaryingStructMarshall$MH, "NdrConformantVaryingStructMarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexStructMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$935.NdrComplexStructMarshall$MH,"NdrComplexStructMarshall");
    }
    public static MemoryAddress NdrComplexStructMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$935.NdrComplexStructMarshall$MH, "NdrComplexStructMarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFixedArrayMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$935.NdrFixedArrayMarshall$MH,"NdrFixedArrayMarshall");
    }
    public static MemoryAddress NdrFixedArrayMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$935.NdrFixedArrayMarshall$MH, "NdrFixedArrayMarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantArrayMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$935.NdrConformantArrayMarshall$MH,"NdrConformantArrayMarshall");
    }
    public static MemoryAddress NdrConformantArrayMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$935.NdrConformantArrayMarshall$MH, "NdrConformantArrayMarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingArrayMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$935.NdrConformantVaryingArrayMarshall$MH,"NdrConformantVaryingArrayMarshall");
    }
    public static MemoryAddress NdrConformantVaryingArrayMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$935.NdrConformantVaryingArrayMarshall$MH, "NdrConformantVaryingArrayMarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrVaryingArrayMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$935.NdrVaryingArrayMarshall$MH,"NdrVaryingArrayMarshall");
    }
    public static MemoryAddress NdrVaryingArrayMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$935.NdrVaryingArrayMarshall$MH, "NdrVaryingArrayMarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexArrayMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$935.NdrComplexArrayMarshall$MH,"NdrComplexArrayMarshall");
    }
    public static MemoryAddress NdrComplexArrayMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$935.NdrComplexArrayMarshall$MH, "NdrComplexArrayMarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonConformantStringMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$936.NdrNonConformantStringMarshall$MH,"NdrNonConformantStringMarshall");
    }
    public static MemoryAddress NdrNonConformantStringMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$936.NdrNonConformantStringMarshall$MH, "NdrNonConformantStringMarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStringMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$936.NdrConformantStringMarshall$MH,"NdrConformantStringMarshall");
    }
    public static MemoryAddress NdrConformantStringMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$936.NdrConformantStringMarshall$MH, "NdrConformantStringMarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrEncapsulatedUnionMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$936.NdrEncapsulatedUnionMarshall$MH,"NdrEncapsulatedUnionMarshall");
    }
    public static MemoryAddress NdrEncapsulatedUnionMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$936.NdrEncapsulatedUnionMarshall$MH, "NdrEncapsulatedUnionMarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonEncapsulatedUnionMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$936.NdrNonEncapsulatedUnionMarshall$MH,"NdrNonEncapsulatedUnionMarshall");
    }
    public static MemoryAddress NdrNonEncapsulatedUnionMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$936.NdrNonEncapsulatedUnionMarshall$MH, "NdrNonEncapsulatedUnionMarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrByteCountPointerMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$936.NdrByteCountPointerMarshall$MH,"NdrByteCountPointerMarshall");
    }
    public static MemoryAddress NdrByteCountPointerMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$936.NdrByteCountPointerMarshall$MH, "NdrByteCountPointerMarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrXmitOrRepAsMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$936.NdrXmitOrRepAsMarshall$MH,"NdrXmitOrRepAsMarshall");
    }
    public static MemoryAddress NdrXmitOrRepAsMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$936.NdrXmitOrRepAsMarshall$MH, "NdrXmitOrRepAsMarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrUserMarshalMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$937.NdrUserMarshalMarshall$MH,"NdrUserMarshalMarshall");
    }
    public static MemoryAddress NdrUserMarshalMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$937.NdrUserMarshalMarshall$MH, "NdrUserMarshalMarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrInterfacePointerMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$937.NdrInterfacePointerMarshall$MH,"NdrInterfacePointerMarshall");
    }
    public static MemoryAddress NdrInterfacePointerMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$937.NdrInterfacePointerMarshall$MH, "NdrInterfacePointerMarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientContextMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$937.NdrClientContextMarshall$MH,"NdrClientContextMarshall");
    }
    public static void NdrClientContextMarshall ( Addressable pStubMsg,  Addressable ContextHandle,  int fCheck) {
        var mh$ = RuntimeHelper.requireNonNull(constants$937.NdrClientContextMarshall$MH, "NdrClientContextMarshall");
        try {
            mh$.invokeExact(pStubMsg.address(), ContextHandle.address(), fCheck);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerContextMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$937.NdrServerContextMarshall$MH,"NdrServerContextMarshall");
    }
    public static void NdrServerContextMarshall ( Addressable pStubMsg,  Addressable ContextHandle,  Addressable RundownRoutine) {
        var mh$ = RuntimeHelper.requireNonNull(constants$937.NdrServerContextMarshall$MH, "NdrServerContextMarshall");
        try {
            mh$.invokeExact(pStubMsg.address(), ContextHandle.address(), RundownRoutine.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerContextNewMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$937.NdrServerContextNewMarshall$MH,"NdrServerContextNewMarshall");
    }
    public static void NdrServerContextNewMarshall ( Addressable pStubMsg,  Addressable ContextHandle,  Addressable RundownRoutine,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$937.NdrServerContextNewMarshall$MH, "NdrServerContextNewMarshall");
        try {
            mh$.invokeExact(pStubMsg.address(), ContextHandle.address(), RundownRoutine.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleTypeUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$937.NdrSimpleTypeUnmarshall$MH,"NdrSimpleTypeUnmarshall");
    }
    public static void NdrSimpleTypeUnmarshall ( Addressable pStubMsg,  Addressable pMemory,  byte FormatChar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$937.NdrSimpleTypeUnmarshall$MH, "NdrSimpleTypeUnmarshall");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), FormatChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsArrayUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$938.NdrCsArrayUnmarshall$MH,"NdrCsArrayUnmarshall");
    }
    public static MemoryAddress NdrCsArrayUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$938.NdrCsArrayUnmarshall$MH, "NdrCsArrayUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsTagUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$938.NdrCsTagUnmarshall$MH,"NdrCsTagUnmarshall");
    }
    public static MemoryAddress NdrCsTagUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$938.NdrCsTagUnmarshall$MH, "NdrCsTagUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRangeUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$938.NdrRangeUnmarshall$MH,"NdrRangeUnmarshall");
    }
    public static MemoryAddress NdrRangeUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$938.NdrRangeUnmarshall$MH, "NdrRangeUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCorrelationInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$938.NdrCorrelationInitialize$MH,"NdrCorrelationInitialize");
    }
    public static void NdrCorrelationInitialize ( Addressable pStubMsg,  Addressable pMemory,  int CacheSize,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$938.NdrCorrelationInitialize$MH, "NdrCorrelationInitialize");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), CacheSize, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCorrelationPass$MH() {
        return RuntimeHelper.requireNonNull(constants$938.NdrCorrelationPass$MH,"NdrCorrelationPass");
    }
    public static void NdrCorrelationPass ( Addressable pStubMsg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$938.NdrCorrelationPass$MH, "NdrCorrelationPass");
        try {
            mh$.invokeExact(pStubMsg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCorrelationFree$MH() {
        return RuntimeHelper.requireNonNull(constants$938.NdrCorrelationFree$MH,"NdrCorrelationFree");
    }
    public static void NdrCorrelationFree ( Addressable pStubMsg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$938.NdrCorrelationFree$MH, "NdrCorrelationFree");
        try {
            mh$.invokeExact(pStubMsg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPointerUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$939.NdrPointerUnmarshall$MH,"NdrPointerUnmarshall");
    }
    public static MemoryAddress NdrPointerUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$939.NdrPointerUnmarshall$MH, "NdrPointerUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleStructUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$939.NdrSimpleStructUnmarshall$MH,"NdrSimpleStructUnmarshall");
    }
    public static MemoryAddress NdrSimpleStructUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$939.NdrSimpleStructUnmarshall$MH, "NdrSimpleStructUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStructUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$939.NdrConformantStructUnmarshall$MH,"NdrConformantStructUnmarshall");
    }
    public static MemoryAddress NdrConformantStructUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$939.NdrConformantStructUnmarshall$MH, "NdrConformantStructUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingStructUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$939.NdrConformantVaryingStructUnmarshall$MH,"NdrConformantVaryingStructUnmarshall");
    }
    public static MemoryAddress NdrConformantVaryingStructUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$939.NdrConformantVaryingStructUnmarshall$MH, "NdrConformantVaryingStructUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexStructUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$939.NdrComplexStructUnmarshall$MH,"NdrComplexStructUnmarshall");
    }
    public static MemoryAddress NdrComplexStructUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$939.NdrComplexStructUnmarshall$MH, "NdrComplexStructUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFixedArrayUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$939.NdrFixedArrayUnmarshall$MH,"NdrFixedArrayUnmarshall");
    }
    public static MemoryAddress NdrFixedArrayUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$939.NdrFixedArrayUnmarshall$MH, "NdrFixedArrayUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantArrayUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$940.NdrConformantArrayUnmarshall$MH,"NdrConformantArrayUnmarshall");
    }
    public static MemoryAddress NdrConformantArrayUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$940.NdrConformantArrayUnmarshall$MH, "NdrConformantArrayUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingArrayUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$940.NdrConformantVaryingArrayUnmarshall$MH,"NdrConformantVaryingArrayUnmarshall");
    }
    public static MemoryAddress NdrConformantVaryingArrayUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$940.NdrConformantVaryingArrayUnmarshall$MH, "NdrConformantVaryingArrayUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrVaryingArrayUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$940.NdrVaryingArrayUnmarshall$MH,"NdrVaryingArrayUnmarshall");
    }
    public static MemoryAddress NdrVaryingArrayUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$940.NdrVaryingArrayUnmarshall$MH, "NdrVaryingArrayUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexArrayUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$940.NdrComplexArrayUnmarshall$MH,"NdrComplexArrayUnmarshall");
    }
    public static MemoryAddress NdrComplexArrayUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$940.NdrComplexArrayUnmarshall$MH, "NdrComplexArrayUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonConformantStringUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$940.NdrNonConformantStringUnmarshall$MH,"NdrNonConformantStringUnmarshall");
    }
    public static MemoryAddress NdrNonConformantStringUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$940.NdrNonConformantStringUnmarshall$MH, "NdrNonConformantStringUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStringUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$940.NdrConformantStringUnmarshall$MH,"NdrConformantStringUnmarshall");
    }
    public static MemoryAddress NdrConformantStringUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$940.NdrConformantStringUnmarshall$MH, "NdrConformantStringUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrEncapsulatedUnionUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$941.NdrEncapsulatedUnionUnmarshall$MH,"NdrEncapsulatedUnionUnmarshall");
    }
    public static MemoryAddress NdrEncapsulatedUnionUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$941.NdrEncapsulatedUnionUnmarshall$MH, "NdrEncapsulatedUnionUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonEncapsulatedUnionUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$941.NdrNonEncapsulatedUnionUnmarshall$MH,"NdrNonEncapsulatedUnionUnmarshall");
    }
    public static MemoryAddress NdrNonEncapsulatedUnionUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$941.NdrNonEncapsulatedUnionUnmarshall$MH, "NdrNonEncapsulatedUnionUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrByteCountPointerUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$941.NdrByteCountPointerUnmarshall$MH,"NdrByteCountPointerUnmarshall");
    }
    public static MemoryAddress NdrByteCountPointerUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$941.NdrByteCountPointerUnmarshall$MH, "NdrByteCountPointerUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrXmitOrRepAsUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$941.NdrXmitOrRepAsUnmarshall$MH,"NdrXmitOrRepAsUnmarshall");
    }
    public static MemoryAddress NdrXmitOrRepAsUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$941.NdrXmitOrRepAsUnmarshall$MH, "NdrXmitOrRepAsUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrUserMarshalUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$941.NdrUserMarshalUnmarshall$MH,"NdrUserMarshalUnmarshall");
    }
    public static MemoryAddress NdrUserMarshalUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$941.NdrUserMarshalUnmarshall$MH, "NdrUserMarshalUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrInterfacePointerUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$941.NdrInterfacePointerUnmarshall$MH,"NdrInterfacePointerUnmarshall");
    }
    public static MemoryAddress NdrInterfacePointerUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$941.NdrInterfacePointerUnmarshall$MH, "NdrInterfacePointerUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientContextUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$942.NdrClientContextUnmarshall$MH,"NdrClientContextUnmarshall");
    }
    public static void NdrClientContextUnmarshall ( Addressable pStubMsg,  Addressable pContextHandle,  Addressable BindHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$942.NdrClientContextUnmarshall$MH, "NdrClientContextUnmarshall");
        try {
            mh$.invokeExact(pStubMsg.address(), pContextHandle.address(), BindHandle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerContextUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$942.NdrServerContextUnmarshall$MH,"NdrServerContextUnmarshall");
    }
    public static MemoryAddress NdrServerContextUnmarshall ( Addressable pStubMsg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$942.NdrServerContextUnmarshall$MH, "NdrServerContextUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrContextHandleInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$942.NdrContextHandleInitialize$MH,"NdrContextHandleInitialize");
    }
    public static MemoryAddress NdrContextHandleInitialize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$942.NdrContextHandleInitialize$MH, "NdrContextHandleInitialize");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerContextNewUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$942.NdrServerContextNewUnmarshall$MH,"NdrServerContextNewUnmarshall");
    }
    public static MemoryAddress NdrServerContextNewUnmarshall ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$942.NdrServerContextNewUnmarshall$MH, "NdrServerContextNewUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPointerBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$942.NdrPointerBufferSize$MH,"NdrPointerBufferSize");
    }
    public static void NdrPointerBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$942.NdrPointerBufferSize$MH, "NdrPointerBufferSize");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsArrayBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$942.NdrCsArrayBufferSize$MH,"NdrCsArrayBufferSize");
    }
    public static void NdrCsArrayBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$942.NdrCsArrayBufferSize$MH, "NdrCsArrayBufferSize");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsTagBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$943.NdrCsTagBufferSize$MH,"NdrCsTagBufferSize");
    }
    public static void NdrCsTagBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$943.NdrCsTagBufferSize$MH, "NdrCsTagBufferSize");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleStructBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$943.NdrSimpleStructBufferSize$MH,"NdrSimpleStructBufferSize");
    }
    public static void NdrSimpleStructBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$943.NdrSimpleStructBufferSize$MH, "NdrSimpleStructBufferSize");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStructBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$943.NdrConformantStructBufferSize$MH,"NdrConformantStructBufferSize");
    }
    public static void NdrConformantStructBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$943.NdrConformantStructBufferSize$MH, "NdrConformantStructBufferSize");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingStructBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$943.NdrConformantVaryingStructBufferSize$MH,"NdrConformantVaryingStructBufferSize");
    }
    public static void NdrConformantVaryingStructBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$943.NdrConformantVaryingStructBufferSize$MH, "NdrConformantVaryingStructBufferSize");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexStructBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$943.NdrComplexStructBufferSize$MH,"NdrComplexStructBufferSize");
    }
    public static void NdrComplexStructBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$943.NdrComplexStructBufferSize$MH, "NdrComplexStructBufferSize");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFixedArrayBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$943.NdrFixedArrayBufferSize$MH,"NdrFixedArrayBufferSize");
    }
    public static void NdrFixedArrayBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$943.NdrFixedArrayBufferSize$MH, "NdrFixedArrayBufferSize");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantArrayBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$944.NdrConformantArrayBufferSize$MH,"NdrConformantArrayBufferSize");
    }
    public static void NdrConformantArrayBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$944.NdrConformantArrayBufferSize$MH, "NdrConformantArrayBufferSize");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingArrayBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$944.NdrConformantVaryingArrayBufferSize$MH,"NdrConformantVaryingArrayBufferSize");
    }
    public static void NdrConformantVaryingArrayBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$944.NdrConformantVaryingArrayBufferSize$MH, "NdrConformantVaryingArrayBufferSize");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrVaryingArrayBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$944.NdrVaryingArrayBufferSize$MH,"NdrVaryingArrayBufferSize");
    }
    public static void NdrVaryingArrayBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$944.NdrVaryingArrayBufferSize$MH, "NdrVaryingArrayBufferSize");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexArrayBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$944.NdrComplexArrayBufferSize$MH,"NdrComplexArrayBufferSize");
    }
    public static void NdrComplexArrayBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$944.NdrComplexArrayBufferSize$MH, "NdrComplexArrayBufferSize");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStringBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$944.NdrConformantStringBufferSize$MH,"NdrConformantStringBufferSize");
    }
    public static void NdrConformantStringBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$944.NdrConformantStringBufferSize$MH, "NdrConformantStringBufferSize");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonConformantStringBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$944.NdrNonConformantStringBufferSize$MH,"NdrNonConformantStringBufferSize");
    }
    public static void NdrNonConformantStringBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$944.NdrNonConformantStringBufferSize$MH, "NdrNonConformantStringBufferSize");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrEncapsulatedUnionBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$945.NdrEncapsulatedUnionBufferSize$MH,"NdrEncapsulatedUnionBufferSize");
    }
    public static void NdrEncapsulatedUnionBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$945.NdrEncapsulatedUnionBufferSize$MH, "NdrEncapsulatedUnionBufferSize");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonEncapsulatedUnionBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$945.NdrNonEncapsulatedUnionBufferSize$MH,"NdrNonEncapsulatedUnionBufferSize");
    }
    public static void NdrNonEncapsulatedUnionBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$945.NdrNonEncapsulatedUnionBufferSize$MH, "NdrNonEncapsulatedUnionBufferSize");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrByteCountPointerBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$945.NdrByteCountPointerBufferSize$MH,"NdrByteCountPointerBufferSize");
    }
    public static void NdrByteCountPointerBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$945.NdrByteCountPointerBufferSize$MH, "NdrByteCountPointerBufferSize");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrXmitOrRepAsBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$945.NdrXmitOrRepAsBufferSize$MH,"NdrXmitOrRepAsBufferSize");
    }
    public static void NdrXmitOrRepAsBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$945.NdrXmitOrRepAsBufferSize$MH, "NdrXmitOrRepAsBufferSize");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrUserMarshalBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$945.NdrUserMarshalBufferSize$MH,"NdrUserMarshalBufferSize");
    }
    public static void NdrUserMarshalBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$945.NdrUserMarshalBufferSize$MH, "NdrUserMarshalBufferSize");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrInterfacePointerBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$945.NdrInterfacePointerBufferSize$MH,"NdrInterfacePointerBufferSize");
    }
    public static void NdrInterfacePointerBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$945.NdrInterfacePointerBufferSize$MH, "NdrInterfacePointerBufferSize");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrContextHandleSize$MH() {
        return RuntimeHelper.requireNonNull(constants$946.NdrContextHandleSize$MH,"NdrContextHandleSize");
    }
    public static void NdrContextHandleSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$946.NdrContextHandleSize$MH, "NdrContextHandleSize");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPointerMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$946.NdrPointerMemorySize$MH,"NdrPointerMemorySize");
    }
    public static int NdrPointerMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$946.NdrPointerMemorySize$MH, "NdrPointerMemorySize");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsArrayMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$946.NdrCsArrayMemorySize$MH,"NdrCsArrayMemorySize");
    }
    public static int NdrCsArrayMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$946.NdrCsArrayMemorySize$MH, "NdrCsArrayMemorySize");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsTagMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$946.NdrCsTagMemorySize$MH,"NdrCsTagMemorySize");
    }
    public static int NdrCsTagMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$946.NdrCsTagMemorySize$MH, "NdrCsTagMemorySize");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleStructMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$946.NdrSimpleStructMemorySize$MH,"NdrSimpleStructMemorySize");
    }
    public static int NdrSimpleStructMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$946.NdrSimpleStructMemorySize$MH, "NdrSimpleStructMemorySize");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStructMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$946.NdrConformantStructMemorySize$MH,"NdrConformantStructMemorySize");
    }
    public static int NdrConformantStructMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$946.NdrConformantStructMemorySize$MH, "NdrConformantStructMemorySize");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingStructMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$947.NdrConformantVaryingStructMemorySize$MH,"NdrConformantVaryingStructMemorySize");
    }
    public static int NdrConformantVaryingStructMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$947.NdrConformantVaryingStructMemorySize$MH, "NdrConformantVaryingStructMemorySize");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexStructMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$947.NdrComplexStructMemorySize$MH,"NdrComplexStructMemorySize");
    }
    public static int NdrComplexStructMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$947.NdrComplexStructMemorySize$MH, "NdrComplexStructMemorySize");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFixedArrayMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$947.NdrFixedArrayMemorySize$MH,"NdrFixedArrayMemorySize");
    }
    public static int NdrFixedArrayMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$947.NdrFixedArrayMemorySize$MH, "NdrFixedArrayMemorySize");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantArrayMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$947.NdrConformantArrayMemorySize$MH,"NdrConformantArrayMemorySize");
    }
    public static int NdrConformantArrayMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$947.NdrConformantArrayMemorySize$MH, "NdrConformantArrayMemorySize");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingArrayMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$947.NdrConformantVaryingArrayMemorySize$MH,"NdrConformantVaryingArrayMemorySize");
    }
    public static int NdrConformantVaryingArrayMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$947.NdrConformantVaryingArrayMemorySize$MH, "NdrConformantVaryingArrayMemorySize");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrVaryingArrayMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$947.NdrVaryingArrayMemorySize$MH,"NdrVaryingArrayMemorySize");
    }
    public static int NdrVaryingArrayMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$947.NdrVaryingArrayMemorySize$MH, "NdrVaryingArrayMemorySize");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexArrayMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$948.NdrComplexArrayMemorySize$MH,"NdrComplexArrayMemorySize");
    }
    public static int NdrComplexArrayMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$948.NdrComplexArrayMemorySize$MH, "NdrComplexArrayMemorySize");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStringMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$948.NdrConformantStringMemorySize$MH,"NdrConformantStringMemorySize");
    }
    public static int NdrConformantStringMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$948.NdrConformantStringMemorySize$MH, "NdrConformantStringMemorySize");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonConformantStringMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$948.NdrNonConformantStringMemorySize$MH,"NdrNonConformantStringMemorySize");
    }
    public static int NdrNonConformantStringMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$948.NdrNonConformantStringMemorySize$MH, "NdrNonConformantStringMemorySize");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrEncapsulatedUnionMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$948.NdrEncapsulatedUnionMemorySize$MH,"NdrEncapsulatedUnionMemorySize");
    }
    public static int NdrEncapsulatedUnionMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$948.NdrEncapsulatedUnionMemorySize$MH, "NdrEncapsulatedUnionMemorySize");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonEncapsulatedUnionMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$948.NdrNonEncapsulatedUnionMemorySize$MH,"NdrNonEncapsulatedUnionMemorySize");
    }
    public static int NdrNonEncapsulatedUnionMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$948.NdrNonEncapsulatedUnionMemorySize$MH, "NdrNonEncapsulatedUnionMemorySize");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrXmitOrRepAsMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$948.NdrXmitOrRepAsMemorySize$MH,"NdrXmitOrRepAsMemorySize");
    }
    public static int NdrXmitOrRepAsMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$948.NdrXmitOrRepAsMemorySize$MH, "NdrXmitOrRepAsMemorySize");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrUserMarshalMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$949.NdrUserMarshalMemorySize$MH,"NdrUserMarshalMemorySize");
    }
    public static int NdrUserMarshalMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$949.NdrUserMarshalMemorySize$MH, "NdrUserMarshalMemorySize");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrInterfacePointerMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$949.NdrInterfacePointerMemorySize$MH,"NdrInterfacePointerMemorySize");
    }
    public static int NdrInterfacePointerMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$949.NdrInterfacePointerMemorySize$MH, "NdrInterfacePointerMemorySize");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPointerFree$MH() {
        return RuntimeHelper.requireNonNull(constants$949.NdrPointerFree$MH,"NdrPointerFree");
    }
    public static void NdrPointerFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$949.NdrPointerFree$MH, "NdrPointerFree");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsArrayFree$MH() {
        return RuntimeHelper.requireNonNull(constants$949.NdrCsArrayFree$MH,"NdrCsArrayFree");
    }
    public static void NdrCsArrayFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$949.NdrCsArrayFree$MH, "NdrCsArrayFree");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleStructFree$MH() {
        return RuntimeHelper.requireNonNull(constants$949.NdrSimpleStructFree$MH,"NdrSimpleStructFree");
    }
    public static void NdrSimpleStructFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$949.NdrSimpleStructFree$MH, "NdrSimpleStructFree");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStructFree$MH() {
        return RuntimeHelper.requireNonNull(constants$949.NdrConformantStructFree$MH,"NdrConformantStructFree");
    }
    public static void NdrConformantStructFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$949.NdrConformantStructFree$MH, "NdrConformantStructFree");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingStructFree$MH() {
        return RuntimeHelper.requireNonNull(constants$950.NdrConformantVaryingStructFree$MH,"NdrConformantVaryingStructFree");
    }
    public static void NdrConformantVaryingStructFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$950.NdrConformantVaryingStructFree$MH, "NdrConformantVaryingStructFree");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexStructFree$MH() {
        return RuntimeHelper.requireNonNull(constants$950.NdrComplexStructFree$MH,"NdrComplexStructFree");
    }
    public static void NdrComplexStructFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$950.NdrComplexStructFree$MH, "NdrComplexStructFree");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFixedArrayFree$MH() {
        return RuntimeHelper.requireNonNull(constants$950.NdrFixedArrayFree$MH,"NdrFixedArrayFree");
    }
    public static void NdrFixedArrayFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$950.NdrFixedArrayFree$MH, "NdrFixedArrayFree");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantArrayFree$MH() {
        return RuntimeHelper.requireNonNull(constants$950.NdrConformantArrayFree$MH,"NdrConformantArrayFree");
    }
    public static void NdrConformantArrayFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$950.NdrConformantArrayFree$MH, "NdrConformantArrayFree");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingArrayFree$MH() {
        return RuntimeHelper.requireNonNull(constants$950.NdrConformantVaryingArrayFree$MH,"NdrConformantVaryingArrayFree");
    }
    public static void NdrConformantVaryingArrayFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$950.NdrConformantVaryingArrayFree$MH, "NdrConformantVaryingArrayFree");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrVaryingArrayFree$MH() {
        return RuntimeHelper.requireNonNull(constants$950.NdrVaryingArrayFree$MH,"NdrVaryingArrayFree");
    }
    public static void NdrVaryingArrayFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$950.NdrVaryingArrayFree$MH, "NdrVaryingArrayFree");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexArrayFree$MH() {
        return RuntimeHelper.requireNonNull(constants$951.NdrComplexArrayFree$MH,"NdrComplexArrayFree");
    }
    public static void NdrComplexArrayFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$951.NdrComplexArrayFree$MH, "NdrComplexArrayFree");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrEncapsulatedUnionFree$MH() {
        return RuntimeHelper.requireNonNull(constants$951.NdrEncapsulatedUnionFree$MH,"NdrEncapsulatedUnionFree");
    }
    public static void NdrEncapsulatedUnionFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$951.NdrEncapsulatedUnionFree$MH, "NdrEncapsulatedUnionFree");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonEncapsulatedUnionFree$MH() {
        return RuntimeHelper.requireNonNull(constants$951.NdrNonEncapsulatedUnionFree$MH,"NdrNonEncapsulatedUnionFree");
    }
    public static void NdrNonEncapsulatedUnionFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$951.NdrNonEncapsulatedUnionFree$MH, "NdrNonEncapsulatedUnionFree");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrByteCountPointerFree$MH() {
        return RuntimeHelper.requireNonNull(constants$951.NdrByteCountPointerFree$MH,"NdrByteCountPointerFree");
    }
    public static void NdrByteCountPointerFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$951.NdrByteCountPointerFree$MH, "NdrByteCountPointerFree");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrXmitOrRepAsFree$MH() {
        return RuntimeHelper.requireNonNull(constants$951.NdrXmitOrRepAsFree$MH,"NdrXmitOrRepAsFree");
    }
    public static void NdrXmitOrRepAsFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$951.NdrXmitOrRepAsFree$MH, "NdrXmitOrRepAsFree");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrUserMarshalFree$MH() {
        return RuntimeHelper.requireNonNull(constants$951.NdrUserMarshalFree$MH,"NdrUserMarshalFree");
    }
    public static void NdrUserMarshalFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$951.NdrUserMarshalFree$MH, "NdrUserMarshalFree");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrInterfacePointerFree$MH() {
        return RuntimeHelper.requireNonNull(constants$952.NdrInterfacePointerFree$MH,"NdrInterfacePointerFree");
    }
    public static void NdrInterfacePointerFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$952.NdrInterfacePointerFree$MH, "NdrInterfacePointerFree");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConvert2$MH() {
        return RuntimeHelper.requireNonNull(constants$952.NdrConvert2$MH,"NdrConvert2");
    }
    public static void NdrConvert2 ( Addressable pStubMsg,  Addressable pFormat,  int NumberParams) {
        var mh$ = RuntimeHelper.requireNonNull(constants$952.NdrConvert2$MH, "NdrConvert2");
        try {
            mh$.invokeExact(pStubMsg.address(), pFormat.address(), NumberParams);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConvert$MH() {
        return RuntimeHelper.requireNonNull(constants$952.NdrConvert$MH,"NdrConvert");
    }
    public static void NdrConvert ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$952.NdrConvert$MH, "NdrConvert");
        try {
            mh$.invokeExact(pStubMsg.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrUserMarshalSimpleTypeConvert$MH() {
        return RuntimeHelper.requireNonNull(constants$952.NdrUserMarshalSimpleTypeConvert$MH,"NdrUserMarshalSimpleTypeConvert");
    }
    public static MemoryAddress NdrUserMarshalSimpleTypeConvert ( Addressable pFlags,  Addressable pBuffer,  byte FormatChar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$952.NdrUserMarshalSimpleTypeConvert$MH, "NdrUserMarshalSimpleTypeConvert");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pFlags.address(), pBuffer.address(), FormatChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientInitializeNew$MH() {
        return RuntimeHelper.requireNonNull(constants$952.NdrClientInitializeNew$MH,"NdrClientInitializeNew");
    }
    public static void NdrClientInitializeNew ( Addressable pRpcMsg,  Addressable pStubMsg,  Addressable pStubDescriptor,  int ProcNum) {
        var mh$ = RuntimeHelper.requireNonNull(constants$952.NdrClientInitializeNew$MH, "NdrClientInitializeNew");
        try {
            mh$.invokeExact(pRpcMsg.address(), pStubMsg.address(), pStubDescriptor.address(), ProcNum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerInitializeNew$MH() {
        return RuntimeHelper.requireNonNull(constants$952.NdrServerInitializeNew$MH,"NdrServerInitializeNew");
    }
    public static MemoryAddress NdrServerInitializeNew ( Addressable pRpcMsg,  Addressable pStubMsg,  Addressable pStubDescriptor) {
        var mh$ = RuntimeHelper.requireNonNull(constants$952.NdrServerInitializeNew$MH, "NdrServerInitializeNew");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pRpcMsg.address(), pStubMsg.address(), pStubDescriptor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerInitializePartial$MH() {
        return RuntimeHelper.requireNonNull(constants$953.NdrServerInitializePartial$MH,"NdrServerInitializePartial");
    }
    public static void NdrServerInitializePartial ( Addressable pRpcMsg,  Addressable pStubMsg,  Addressable pStubDescriptor,  int RequestedBufferSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$953.NdrServerInitializePartial$MH, "NdrServerInitializePartial");
        try {
            mh$.invokeExact(pRpcMsg.address(), pStubMsg.address(), pStubDescriptor.address(), RequestedBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$953.NdrClientInitialize$MH,"NdrClientInitialize");
    }
    public static void NdrClientInitialize ( Addressable pRpcMsg,  Addressable pStubMsg,  Addressable pStubDescriptor,  int ProcNum) {
        var mh$ = RuntimeHelper.requireNonNull(constants$953.NdrClientInitialize$MH, "NdrClientInitialize");
        try {
            mh$.invokeExact(pRpcMsg.address(), pStubMsg.address(), pStubDescriptor.address(), ProcNum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$953.NdrServerInitialize$MH,"NdrServerInitialize");
    }
    public static MemoryAddress NdrServerInitialize ( Addressable pRpcMsg,  Addressable pStubMsg,  Addressable pStubDescriptor) {
        var mh$ = RuntimeHelper.requireNonNull(constants$953.NdrServerInitialize$MH, "NdrServerInitialize");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pRpcMsg.address(), pStubMsg.address(), pStubDescriptor.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerInitializeUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$953.NdrServerInitializeUnmarshall$MH,"NdrServerInitializeUnmarshall");
    }
    public static MemoryAddress NdrServerInitializeUnmarshall ( Addressable pStubMsg,  Addressable pStubDescriptor,  Addressable pRpcMsg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$953.NdrServerInitializeUnmarshall$MH, "NdrServerInitializeUnmarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pStubDescriptor.address(), pRpcMsg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerInitializeMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$953.NdrServerInitializeMarshall$MH,"NdrServerInitializeMarshall");
    }
    public static void NdrServerInitializeMarshall ( Addressable pRpcMsg,  Addressable pStubMsg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$953.NdrServerInitializeMarshall$MH, "NdrServerInitializeMarshall");
        try {
            mh$.invokeExact(pRpcMsg.address(), pStubMsg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrGetBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$953.NdrGetBuffer$MH,"NdrGetBuffer");
    }
    public static MemoryAddress NdrGetBuffer ( Addressable pStubMsg,  int BufferLength,  Addressable Handle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$953.NdrGetBuffer$MH, "NdrGetBuffer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), BufferLength, Handle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNsGetBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$954.NdrNsGetBuffer$MH,"NdrNsGetBuffer");
    }
    public static MemoryAddress NdrNsGetBuffer ( Addressable pStubMsg,  int BufferLength,  Addressable Handle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$954.NdrNsGetBuffer$MH, "NdrNsGetBuffer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), BufferLength, Handle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSendReceive$MH() {
        return RuntimeHelper.requireNonNull(constants$954.NdrSendReceive$MH,"NdrSendReceive");
    }
    public static MemoryAddress NdrSendReceive ( Addressable pStubMsg,  Addressable pBufferEnd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$954.NdrSendReceive$MH, "NdrSendReceive");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pBufferEnd.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNsSendReceive$MH() {
        return RuntimeHelper.requireNonNull(constants$954.NdrNsSendReceive$MH,"NdrNsSendReceive");
    }
    public static MemoryAddress NdrNsSendReceive ( Addressable pStubMsg,  Addressable pBufferEnd,  Addressable pAutoHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$954.NdrNsSendReceive$MH, "NdrNsSendReceive");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pBufferEnd.address(), pAutoHandle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFreeBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$954.NdrFreeBuffer$MH,"NdrFreeBuffer");
    }
    public static void NdrFreeBuffer ( Addressable pStubMsg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$954.NdrFreeBuffer$MH, "NdrFreeBuffer");
        try {
            mh$.invokeExact(pStubMsg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrGetDcomProtocolVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$954.NdrGetDcomProtocolVersion$MH,"NdrGetDcomProtocolVersion");
    }
    public static int NdrGetDcomProtocolVersion ( Addressable pStubMsg,  Addressable pVersion) {
        var mh$ = RuntimeHelper.requireNonNull(constants$954.NdrGetDcomProtocolVersion$MH, "NdrGetDcomProtocolVersion");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pVersion.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientCall2$MH() {
        return RuntimeHelper.requireNonNull(constants$954.NdrClientCall2$MH,"NdrClientCall2");
    }
    public static MemorySegment NdrClientCall2 ( SegmentAllocator allocator,  Addressable pStubDescriptor,  Addressable pFormat, Object... x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$954.NdrClientCall2$MH, "NdrClientCall2");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, pStubDescriptor.address(), pFormat.address(), x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment NdrClientCall2 ( ResourceScope scope,  Addressable pStubDescriptor,  Addressable pFormat, Object... x3) {
        return NdrClientCall2(SegmentAllocator.ofScope(scope), pStubDescriptor.address(), pFormat.address(), x3);
    }
    public static MethodHandle NdrClientCall$MH() {
        return RuntimeHelper.requireNonNull(constants$955.NdrClientCall$MH,"NdrClientCall");
    }
    public static MemorySegment NdrClientCall ( SegmentAllocator allocator,  Addressable pStubDescriptor,  Addressable pFormat, Object... x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$955.NdrClientCall$MH, "NdrClientCall");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, pStubDescriptor.address(), pFormat.address(), x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment NdrClientCall ( ResourceScope scope,  Addressable pStubDescriptor,  Addressable pFormat, Object... x3) {
        return NdrClientCall(SegmentAllocator.ofScope(scope), pStubDescriptor.address(), pFormat.address(), x3);
    }
    public static MethodHandle NdrAsyncClientCall$MH() {
        return RuntimeHelper.requireNonNull(constants$955.NdrAsyncClientCall$MH,"NdrAsyncClientCall");
    }
    public static MemorySegment NdrAsyncClientCall ( SegmentAllocator allocator,  Addressable pStubDescriptor,  Addressable pFormat, Object... x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$955.NdrAsyncClientCall$MH, "NdrAsyncClientCall");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, pStubDescriptor.address(), pFormat.address(), x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment NdrAsyncClientCall ( ResourceScope scope,  Addressable pStubDescriptor,  Addressable pFormat, Object... x3) {
        return NdrAsyncClientCall(SegmentAllocator.ofScope(scope), pStubDescriptor.address(), pFormat.address(), x3);
    }
    public static MethodHandle NdrDcomAsyncClientCall$MH() {
        return RuntimeHelper.requireNonNull(constants$955.NdrDcomAsyncClientCall$MH,"NdrDcomAsyncClientCall");
    }
    public static MemorySegment NdrDcomAsyncClientCall ( SegmentAllocator allocator,  Addressable pStubDescriptor,  Addressable pFormat, Object... x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$955.NdrDcomAsyncClientCall$MH, "NdrDcomAsyncClientCall");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, pStubDescriptor.address(), pFormat.address(), x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment NdrDcomAsyncClientCall ( ResourceScope scope,  Addressable pStubDescriptor,  Addressable pFormat, Object... x3) {
        return NdrDcomAsyncClientCall(SegmentAllocator.ofScope(scope), pStubDescriptor.address(), pFormat.address(), x3);
    }
    public static int STUB_UNMARSHAL() {
        return (int)0L;
    }
    public static int STUB_CALL_SERVER() {
        return (int)1L;
    }
    public static int STUB_MARSHAL() {
        return (int)2L;
    }
    public static int STUB_CALL_SERVER_NO_HRESULT() {
        return (int)3L;
    }
    public static int PROXY_CALCSIZE() {
        return (int)0L;
    }
    public static int PROXY_GETBUFFER() {
        return (int)1L;
    }
    public static int PROXY_MARSHAL() {
        return (int)2L;
    }
    public static int PROXY_SENDRECEIVE() {
        return (int)3L;
    }
    public static int PROXY_UNMARSHAL() {
        return (int)4L;
    }
    public static MethodHandle NdrAsyncServerCall$MH() {
        return RuntimeHelper.requireNonNull(constants$955.NdrAsyncServerCall$MH,"NdrAsyncServerCall");
    }
    public static void NdrAsyncServerCall ( Addressable pRpcMsg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$955.NdrAsyncServerCall$MH, "NdrAsyncServerCall");
        try {
            mh$.invokeExact(pRpcMsg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrAsyncStubCall$MH() {
        return RuntimeHelper.requireNonNull(constants$955.NdrAsyncStubCall$MH,"NdrAsyncStubCall");
    }
    public static int NdrAsyncStubCall ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = RuntimeHelper.requireNonNull(constants$955.NdrAsyncStubCall$MH, "NdrAsyncStubCall");
        try {
            return (int)mh$.invokeExact(pThis.address(), pChannel.address(), pRpcMsg.address(), pdwStubPhase.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrDcomAsyncStubCall$MH() {
        return RuntimeHelper.requireNonNull(constants$955.NdrDcomAsyncStubCall$MH,"NdrDcomAsyncStubCall");
    }
    public static int NdrDcomAsyncStubCall ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = RuntimeHelper.requireNonNull(constants$955.NdrDcomAsyncStubCall$MH, "NdrDcomAsyncStubCall");
        try {
            return (int)mh$.invokeExact(pThis.address(), pChannel.address(), pRpcMsg.address(), pdwStubPhase.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrStubCall2$MH() {
        return RuntimeHelper.requireNonNull(constants$956.NdrStubCall2$MH,"NdrStubCall2");
    }
    public static int NdrStubCall2 ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = RuntimeHelper.requireNonNull(constants$956.NdrStubCall2$MH, "NdrStubCall2");
        try {
            return (int)mh$.invokeExact(pThis.address(), pChannel.address(), pRpcMsg.address(), pdwStubPhase.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerCall2$MH() {
        return RuntimeHelper.requireNonNull(constants$956.NdrServerCall2$MH,"NdrServerCall2");
    }
    public static void NdrServerCall2 ( Addressable pRpcMsg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$956.NdrServerCall2$MH, "NdrServerCall2");
        try {
            mh$.invokeExact(pRpcMsg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrStubCall$MH() {
        return RuntimeHelper.requireNonNull(constants$956.NdrStubCall$MH,"NdrStubCall");
    }
    public static int NdrStubCall ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = RuntimeHelper.requireNonNull(constants$956.NdrStubCall$MH, "NdrStubCall");
        try {
            return (int)mh$.invokeExact(pThis.address(), pChannel.address(), pRpcMsg.address(), pdwStubPhase.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerCall$MH() {
        return RuntimeHelper.requireNonNull(constants$956.NdrServerCall$MH,"NdrServerCall");
    }
    public static void NdrServerCall ( Addressable pRpcMsg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$956.NdrServerCall$MH, "NdrServerCall");
        try {
            mh$.invokeExact(pRpcMsg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$956.NdrServerUnmarshall$MH,"NdrServerUnmarshall");
    }
    public static int NdrServerUnmarshall ( Addressable pChannel,  Addressable pRpcMsg,  Addressable pStubMsg,  Addressable pStubDescriptor,  Addressable pFormat,  Addressable pParamList) {
        var mh$ = RuntimeHelper.requireNonNull(constants$956.NdrServerUnmarshall$MH, "NdrServerUnmarshall");
        try {
            return (int)mh$.invokeExact(pChannel.address(), pRpcMsg.address(), pStubMsg.address(), pStubDescriptor.address(), pFormat.address(), pParamList.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$956.NdrServerMarshall$MH,"NdrServerMarshall");
    }
    public static void NdrServerMarshall ( Addressable pThis,  Addressable pChannel,  Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$956.NdrServerMarshall$MH, "NdrServerMarshall");
        try {
            mh$.invokeExact(pThis.address(), pChannel.address(), pStubMsg.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrMapCommAndFaultStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$957.NdrMapCommAndFaultStatus$MH,"NdrMapCommAndFaultStatus");
    }
    public static int NdrMapCommAndFaultStatus ( Addressable pStubMsg,  Addressable pCommStatus,  Addressable pFaultStatus,  int Status) {
        var mh$ = RuntimeHelper.requireNonNull(constants$957.NdrMapCommAndFaultStatus$MH, "NdrMapCommAndFaultStatus");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pCommStatus.address(), pFaultStatus.address(), Status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSH_UPDecision$MH() {
        return RuntimeHelper.requireNonNull(constants$957.NdrSH_UPDecision$MH,"NdrSH_UPDecision");
    }
    public static int NdrSH_UPDecision ( Addressable pStubMsg,  Addressable pPtrInMem,  Addressable pBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$957.NdrSH_UPDecision$MH, "NdrSH_UPDecision");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pPtrInMem.address(), pBuffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSH_TLUPDecision$MH() {
        return RuntimeHelper.requireNonNull(constants$957.NdrSH_TLUPDecision$MH,"NdrSH_TLUPDecision");
    }
    public static int NdrSH_TLUPDecision ( Addressable pStubMsg,  Addressable pPtrInMem) {
        var mh$ = RuntimeHelper.requireNonNull(constants$957.NdrSH_TLUPDecision$MH, "NdrSH_TLUPDecision");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pPtrInMem.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSH_TLUPDecisionBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$957.NdrSH_TLUPDecisionBuffer$MH,"NdrSH_TLUPDecisionBuffer");
    }
    public static int NdrSH_TLUPDecisionBuffer ( Addressable pStubMsg,  Addressable pPtrInMem) {
        var mh$ = RuntimeHelper.requireNonNull(constants$957.NdrSH_TLUPDecisionBuffer$MH, "NdrSH_TLUPDecisionBuffer");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pPtrInMem.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSH_IfAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$957.NdrSH_IfAlloc$MH,"NdrSH_IfAlloc");
    }
    public static int NdrSH_IfAlloc ( Addressable pStubMsg,  Addressable pPtrInMem,  int Count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$957.NdrSH_IfAlloc$MH, "NdrSH_IfAlloc");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pPtrInMem.address(), Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSH_IfAllocRef$MH() {
        return RuntimeHelper.requireNonNull(constants$957.NdrSH_IfAllocRef$MH,"NdrSH_IfAllocRef");
    }
    public static int NdrSH_IfAllocRef ( Addressable pStubMsg,  Addressable pPtrInMem,  int Count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$957.NdrSH_IfAllocRef$MH, "NdrSH_IfAllocRef");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pPtrInMem.address(), Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSH_IfAllocSet$MH() {
        return RuntimeHelper.requireNonNull(constants$958.NdrSH_IfAllocSet$MH,"NdrSH_IfAllocSet");
    }
    public static int NdrSH_IfAllocSet ( Addressable pStubMsg,  Addressable pPtrInMem,  int Count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$958.NdrSH_IfAllocSet$MH, "NdrSH_IfAllocSet");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pPtrInMem.address(), Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSH_IfCopy$MH() {
        return RuntimeHelper.requireNonNull(constants$958.NdrSH_IfCopy$MH,"NdrSH_IfCopy");
    }
    public static MemoryAddress NdrSH_IfCopy ( Addressable pStubMsg,  Addressable pPtrInMem,  int Count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$958.NdrSH_IfCopy$MH, "NdrSH_IfCopy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pPtrInMem.address(), Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSH_IfAllocCopy$MH() {
        return RuntimeHelper.requireNonNull(constants$958.NdrSH_IfAllocCopy$MH,"NdrSH_IfAllocCopy");
    }
    public static MemoryAddress NdrSH_IfAllocCopy ( Addressable pStubMsg,  Addressable pPtrInMem,  int Count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$958.NdrSH_IfAllocCopy$MH, "NdrSH_IfAllocCopy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), pPtrInMem.address(), Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSH_Copy$MH() {
        return RuntimeHelper.requireNonNull(constants$958.NdrSH_Copy$MH,"NdrSH_Copy");
    }
    public static int NdrSH_Copy ( Addressable pStubMsg,  Addressable pPtrInMem,  int Count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$958.NdrSH_Copy$MH, "NdrSH_Copy");
        try {
            return (int)mh$.invokeExact(pStubMsg.address(), pPtrInMem.address(), Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSH_IfFree$MH() {
        return RuntimeHelper.requireNonNull(constants$958.NdrSH_IfFree$MH,"NdrSH_IfFree");
    }
    public static void NdrSH_IfFree ( Addressable pMessage,  Addressable pPtr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$958.NdrSH_IfFree$MH, "NdrSH_IfFree");
        try {
            mh$.invokeExact(pMessage.address(), pPtr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSH_StringMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$958.NdrSH_StringMarshall$MH,"NdrSH_StringMarshall");
    }
    public static MemoryAddress NdrSH_StringMarshall ( Addressable pMessage,  Addressable pMemory,  int Count,  int Size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$958.NdrSH_StringMarshall$MH, "NdrSH_StringMarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pMessage.address(), pMemory.address(), Count, Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSH_StringUnMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$959.NdrSH_StringUnMarshall$MH,"NdrSH_StringUnMarshall");
    }
    public static MemoryAddress NdrSH_StringUnMarshall ( Addressable pMessage,  Addressable pMemory,  int Size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$959.NdrSH_StringUnMarshall$MH, "NdrSH_StringUnMarshall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pMessage.address(), pMemory.address(), Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$959.RpcSsAllocate$MH,"RpcSsAllocate");
    }
    public static MemoryAddress RpcSsAllocate ( long Size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$959.RpcSsAllocate$MH, "RpcSsAllocate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsDisableAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$960.RpcSsDisableAllocate$MH,"RpcSsDisableAllocate");
    }
    public static void RpcSsDisableAllocate () {
        var mh$ = RuntimeHelper.requireNonNull(constants$960.RpcSsDisableAllocate$MH, "RpcSsDisableAllocate");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsEnableAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$960.RpcSsEnableAllocate$MH,"RpcSsEnableAllocate");
    }
    public static void RpcSsEnableAllocate () {
        var mh$ = RuntimeHelper.requireNonNull(constants$960.RpcSsEnableAllocate$MH, "RpcSsEnableAllocate");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsFree$MH() {
        return RuntimeHelper.requireNonNull(constants$960.RpcSsFree$MH,"RpcSsFree");
    }
    public static void RpcSsFree ( Addressable NodeToFree) {
        var mh$ = RuntimeHelper.requireNonNull(constants$960.RpcSsFree$MH, "RpcSsFree");
        try {
            mh$.invokeExact(NodeToFree.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsGetThreadHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$960.RpcSsGetThreadHandle$MH,"RpcSsGetThreadHandle");
    }
    public static MemoryAddress RpcSsGetThreadHandle () {
        var mh$ = RuntimeHelper.requireNonNull(constants$960.RpcSsGetThreadHandle$MH, "RpcSsGetThreadHandle");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsSetClientAllocFree$MH() {
        return RuntimeHelper.requireNonNull(constants$960.RpcSsSetClientAllocFree$MH,"RpcSsSetClientAllocFree");
    }
    public static void RpcSsSetClientAllocFree ( Addressable ClientAlloc,  Addressable ClientFree) {
        var mh$ = RuntimeHelper.requireNonNull(constants$960.RpcSsSetClientAllocFree$MH, "RpcSsSetClientAllocFree");
        try {
            mh$.invokeExact(ClientAlloc.address(), ClientFree.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsSetThreadHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$960.RpcSsSetThreadHandle$MH,"RpcSsSetThreadHandle");
    }
    public static void RpcSsSetThreadHandle ( Addressable Id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$960.RpcSsSetThreadHandle$MH, "RpcSsSetThreadHandle");
        try {
            mh$.invokeExact(Id.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsSwapClientAllocFree$MH() {
        return RuntimeHelper.requireNonNull(constants$961.RpcSsSwapClientAllocFree$MH,"RpcSsSwapClientAllocFree");
    }
    public static void RpcSsSwapClientAllocFree ( Addressable ClientAlloc,  Addressable ClientFree,  Addressable OldClientAlloc,  Addressable OldClientFree) {
        var mh$ = RuntimeHelper.requireNonNull(constants$961.RpcSsSwapClientAllocFree$MH, "RpcSsSwapClientAllocFree");
        try {
            mh$.invokeExact(ClientAlloc.address(), ClientFree.address(), OldClientAlloc.address(), OldClientFree.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$961.RpcSmAllocate$MH,"RpcSmAllocate");
    }
    public static MemoryAddress RpcSmAllocate ( long Size,  Addressable pStatus) {
        var mh$ = RuntimeHelper.requireNonNull(constants$961.RpcSmAllocate$MH, "RpcSmAllocate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Size, pStatus.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmClientFree$MH() {
        return RuntimeHelper.requireNonNull(constants$961.RpcSmClientFree$MH,"RpcSmClientFree");
    }
    public static int RpcSmClientFree ( Addressable pNodeToFree) {
        var mh$ = RuntimeHelper.requireNonNull(constants$961.RpcSmClientFree$MH, "RpcSmClientFree");
        try {
            return (int)mh$.invokeExact(pNodeToFree.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmDestroyClientContext$MH() {
        return RuntimeHelper.requireNonNull(constants$961.RpcSmDestroyClientContext$MH,"RpcSmDestroyClientContext");
    }
    public static int RpcSmDestroyClientContext ( Addressable ContextHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$961.RpcSmDestroyClientContext$MH, "RpcSmDestroyClientContext");
        try {
            return (int)mh$.invokeExact(ContextHandle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmDisableAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$961.RpcSmDisableAllocate$MH,"RpcSmDisableAllocate");
    }
    public static int RpcSmDisableAllocate () {
        var mh$ = RuntimeHelper.requireNonNull(constants$961.RpcSmDisableAllocate$MH, "RpcSmDisableAllocate");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmEnableAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$961.RpcSmEnableAllocate$MH,"RpcSmEnableAllocate");
    }
    public static int RpcSmEnableAllocate () {
        var mh$ = RuntimeHelper.requireNonNull(constants$961.RpcSmEnableAllocate$MH, "RpcSmEnableAllocate");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmFree$MH() {
        return RuntimeHelper.requireNonNull(constants$962.RpcSmFree$MH,"RpcSmFree");
    }
    public static int RpcSmFree ( Addressable NodeToFree) {
        var mh$ = RuntimeHelper.requireNonNull(constants$962.RpcSmFree$MH, "RpcSmFree");
        try {
            return (int)mh$.invokeExact(NodeToFree.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmGetThreadHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$962.RpcSmGetThreadHandle$MH,"RpcSmGetThreadHandle");
    }
    public static MemoryAddress RpcSmGetThreadHandle ( Addressable pStatus) {
        var mh$ = RuntimeHelper.requireNonNull(constants$962.RpcSmGetThreadHandle$MH, "RpcSmGetThreadHandle");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStatus.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmSetClientAllocFree$MH() {
        return RuntimeHelper.requireNonNull(constants$962.RpcSmSetClientAllocFree$MH,"RpcSmSetClientAllocFree");
    }
    public static int RpcSmSetClientAllocFree ( Addressable ClientAlloc,  Addressable ClientFree) {
        var mh$ = RuntimeHelper.requireNonNull(constants$962.RpcSmSetClientAllocFree$MH, "RpcSmSetClientAllocFree");
        try {
            return (int)mh$.invokeExact(ClientAlloc.address(), ClientFree.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmSetThreadHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$962.RpcSmSetThreadHandle$MH,"RpcSmSetThreadHandle");
    }
    public static int RpcSmSetThreadHandle ( Addressable Id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$962.RpcSmSetThreadHandle$MH, "RpcSmSetThreadHandle");
        try {
            return (int)mh$.invokeExact(Id.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmSwapClientAllocFree$MH() {
        return RuntimeHelper.requireNonNull(constants$962.RpcSmSwapClientAllocFree$MH,"RpcSmSwapClientAllocFree");
    }
    public static int RpcSmSwapClientAllocFree ( Addressable ClientAlloc,  Addressable ClientFree,  Addressable OldClientAlloc,  Addressable OldClientFree) {
        var mh$ = RuntimeHelper.requireNonNull(constants$962.RpcSmSwapClientAllocFree$MH, "RpcSmSwapClientAllocFree");
        try {
            return (int)mh$.invokeExact(ClientAlloc.address(), ClientFree.address(), OldClientAlloc.address(), OldClientFree.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSsEnableAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$962.NdrRpcSsEnableAllocate$MH,"NdrRpcSsEnableAllocate");
    }
    public static void NdrRpcSsEnableAllocate ( Addressable pMessage) {
        var mh$ = RuntimeHelper.requireNonNull(constants$962.NdrRpcSsEnableAllocate$MH, "NdrRpcSsEnableAllocate");
        try {
            mh$.invokeExact(pMessage.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSsDisableAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$963.NdrRpcSsDisableAllocate$MH,"NdrRpcSsDisableAllocate");
    }
    public static void NdrRpcSsDisableAllocate ( Addressable pMessage) {
        var mh$ = RuntimeHelper.requireNonNull(constants$963.NdrRpcSsDisableAllocate$MH, "NdrRpcSsDisableAllocate");
        try {
            mh$.invokeExact(pMessage.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSmSetClientToOsf$MH() {
        return RuntimeHelper.requireNonNull(constants$963.NdrRpcSmSetClientToOsf$MH,"NdrRpcSmSetClientToOsf");
    }
    public static void NdrRpcSmSetClientToOsf ( Addressable pMessage) {
        var mh$ = RuntimeHelper.requireNonNull(constants$963.NdrRpcSmSetClientToOsf$MH, "NdrRpcSmSetClientToOsf");
        try {
            mh$.invokeExact(pMessage.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSmClientAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$963.NdrRpcSmClientAllocate$MH,"NdrRpcSmClientAllocate");
    }
    public static MemoryAddress NdrRpcSmClientAllocate ( long Size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$963.NdrRpcSmClientAllocate$MH, "NdrRpcSmClientAllocate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSmClientFree$MH() {
        return RuntimeHelper.requireNonNull(constants$963.NdrRpcSmClientFree$MH,"NdrRpcSmClientFree");
    }
    public static void NdrRpcSmClientFree ( Addressable NodeToFree) {
        var mh$ = RuntimeHelper.requireNonNull(constants$963.NdrRpcSmClientFree$MH, "NdrRpcSmClientFree");
        try {
            mh$.invokeExact(NodeToFree.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSsDefaultAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$963.NdrRpcSsDefaultAllocate$MH,"NdrRpcSsDefaultAllocate");
    }
    public static MemoryAddress NdrRpcSsDefaultAllocate ( long Size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$963.NdrRpcSsDefaultAllocate$MH, "NdrRpcSsDefaultAllocate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSsDefaultFree$MH() {
        return RuntimeHelper.requireNonNull(constants$963.NdrRpcSsDefaultFree$MH,"NdrRpcSsDefaultFree");
    }
    public static void NdrRpcSsDefaultFree ( Addressable NodeToFree) {
        var mh$ = RuntimeHelper.requireNonNull(constants$963.NdrRpcSsDefaultFree$MH, "NdrRpcSsDefaultFree");
        try {
            mh$.invokeExact(NodeToFree.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFullPointerXlatInit$MH() {
        return RuntimeHelper.requireNonNull(constants$964.NdrFullPointerXlatInit$MH,"NdrFullPointerXlatInit");
    }
    public static MemoryAddress NdrFullPointerXlatInit ( int NumberOfPointers,  int XlatSide) {
        var mh$ = RuntimeHelper.requireNonNull(constants$964.NdrFullPointerXlatInit$MH, "NdrFullPointerXlatInit");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(NumberOfPointers, XlatSide);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFullPointerXlatFree$MH() {
        return RuntimeHelper.requireNonNull(constants$964.NdrFullPointerXlatFree$MH,"NdrFullPointerXlatFree");
    }
    public static void NdrFullPointerXlatFree ( Addressable pXlatTables) {
        var mh$ = RuntimeHelper.requireNonNull(constants$964.NdrFullPointerXlatFree$MH, "NdrFullPointerXlatFree");
        try {
            mh$.invokeExact(pXlatTables.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFullPointerQueryPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$964.NdrFullPointerQueryPointer$MH,"NdrFullPointerQueryPointer");
    }
    public static int NdrFullPointerQueryPointer ( Addressable pXlatTables,  Addressable pPointer,  byte QueryType,  Addressable pRefId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$964.NdrFullPointerQueryPointer$MH, "NdrFullPointerQueryPointer");
        try {
            return (int)mh$.invokeExact(pXlatTables.address(), pPointer.address(), QueryType, pRefId.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFullPointerQueryRefId$MH() {
        return RuntimeHelper.requireNonNull(constants$964.NdrFullPointerQueryRefId$MH,"NdrFullPointerQueryRefId");
    }
    public static int NdrFullPointerQueryRefId ( Addressable pXlatTables,  int RefId,  byte QueryType,  Addressable ppPointer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$964.NdrFullPointerQueryRefId$MH, "NdrFullPointerQueryRefId");
        try {
            return (int)mh$.invokeExact(pXlatTables.address(), RefId, QueryType, ppPointer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFullPointerInsertRefId$MH() {
        return RuntimeHelper.requireNonNull(constants$964.NdrFullPointerInsertRefId$MH,"NdrFullPointerInsertRefId");
    }
    public static void NdrFullPointerInsertRefId ( Addressable pXlatTables,  int RefId,  Addressable pPointer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$964.NdrFullPointerInsertRefId$MH, "NdrFullPointerInsertRefId");
        try {
            mh$.invokeExact(pXlatTables.address(), RefId, pPointer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFullPointerFree$MH() {
        return RuntimeHelper.requireNonNull(constants$964.NdrFullPointerFree$MH,"NdrFullPointerFree");
    }
    public static int NdrFullPointerFree ( Addressable pXlatTables,  Addressable Pointer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$964.NdrFullPointerFree$MH, "NdrFullPointerFree");
        try {
            return (int)mh$.invokeExact(pXlatTables.address(), Pointer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$965.NdrAllocate$MH,"NdrAllocate");
    }
    public static MemoryAddress NdrAllocate ( Addressable pStubMsg,  long Len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$965.NdrAllocate$MH, "NdrAllocate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pStubMsg.address(), Len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClearOutParameters$MH() {
        return RuntimeHelper.requireNonNull(constants$965.NdrClearOutParameters$MH,"NdrClearOutParameters");
    }
    public static void NdrClearOutParameters ( Addressable pStubMsg,  Addressable pFormat,  Addressable ArgAddr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$965.NdrClearOutParameters$MH, "NdrClearOutParameters");
        try {
            mh$.invokeExact(pStubMsg.address(), pFormat.address(), ArgAddr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrOleAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$965.NdrOleAllocate$MH,"NdrOleAllocate");
    }
    public static MemoryAddress NdrOleAllocate ( long Size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$965.NdrOleAllocate$MH, "NdrOleAllocate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrOleFree$MH() {
        return RuntimeHelper.requireNonNull(constants$965.NdrOleFree$MH,"NdrOleFree");
    }
    public static void NdrOleFree ( Addressable NodeToFree) {
        var mh$ = RuntimeHelper.requireNonNull(constants$965.NdrOleFree$MH, "NdrOleFree");
        try {
            mh$.invokeExact(NodeToFree.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrGetUserMarshalInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$965.NdrGetUserMarshalInfo$MH,"NdrGetUserMarshalInfo");
    }
    public static int NdrGetUserMarshalInfo ( Addressable pFlags,  int InformationLevel,  Addressable pMarshalInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$965.NdrGetUserMarshalInfo$MH, "NdrGetUserMarshalInfo");
        try {
            return (int)mh$.invokeExact(pFlags.address(), InformationLevel, pMarshalInfo.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCreateServerInterfaceFromStub$MH() {
        return RuntimeHelper.requireNonNull(constants$965.NdrCreateServerInterfaceFromStub$MH,"NdrCreateServerInterfaceFromStub");
    }
    public static int NdrCreateServerInterfaceFromStub ( Addressable pStub,  Addressable pServerIf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$965.NdrCreateServerInterfaceFromStub$MH, "NdrCreateServerInterfaceFromStub");
        try {
            return (int)mh$.invokeExact(pStub.address(), pServerIf.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientCall3$MH() {
        return RuntimeHelper.requireNonNull(constants$966.NdrClientCall3$MH,"NdrClientCall3");
    }
    public static MemorySegment NdrClientCall3 ( SegmentAllocator allocator,  Addressable pProxyInfo,  int nProcNum,  Addressable pReturnValue, Object... x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$966.NdrClientCall3$MH, "NdrClientCall3");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, pProxyInfo.address(), nProcNum, pReturnValue.address(), x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment NdrClientCall3 ( ResourceScope scope,  Addressable pProxyInfo,  int nProcNum,  Addressable pReturnValue, Object... x4) {
        return NdrClientCall3(SegmentAllocator.ofScope(scope), pProxyInfo.address(), nProcNum, pReturnValue.address(), x4);
    }
    public static MethodHandle Ndr64AsyncClientCall$MH() {
        return RuntimeHelper.requireNonNull(constants$966.Ndr64AsyncClientCall$MH,"Ndr64AsyncClientCall");
    }
    public static MemorySegment Ndr64AsyncClientCall ( SegmentAllocator allocator,  Addressable pProxyInfo,  int nProcNum,  Addressable pReturnValue, Object... x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$966.Ndr64AsyncClientCall$MH, "Ndr64AsyncClientCall");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, pProxyInfo.address(), nProcNum, pReturnValue.address(), x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment Ndr64AsyncClientCall ( ResourceScope scope,  Addressable pProxyInfo,  int nProcNum,  Addressable pReturnValue, Object... x4) {
        return Ndr64AsyncClientCall(SegmentAllocator.ofScope(scope), pProxyInfo.address(), nProcNum, pReturnValue.address(), x4);
    }
    public static MethodHandle Ndr64DcomAsyncClientCall$MH() {
        return RuntimeHelper.requireNonNull(constants$966.Ndr64DcomAsyncClientCall$MH,"Ndr64DcomAsyncClientCall");
    }
    public static MemorySegment Ndr64DcomAsyncClientCall ( SegmentAllocator allocator,  Addressable pProxyInfo,  int nProcNum,  Addressable pReturnValue, Object... x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$966.Ndr64DcomAsyncClientCall$MH, "Ndr64DcomAsyncClientCall");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, pProxyInfo.address(), nProcNum, pReturnValue.address(), x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment Ndr64DcomAsyncClientCall ( ResourceScope scope,  Addressable pProxyInfo,  int nProcNum,  Addressable pReturnValue, Object... x4) {
        return Ndr64DcomAsyncClientCall(SegmentAllocator.ofScope(scope), pProxyInfo.address(), nProcNum, pReturnValue.address(), x4);
    }
    public static MethodHandle Ndr64AsyncServerCall$MH() {
        return RuntimeHelper.requireNonNull(constants$966.Ndr64AsyncServerCall$MH,"Ndr64AsyncServerCall");
    }
    public static void Ndr64AsyncServerCall ( Addressable pRpcMsg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$966.Ndr64AsyncServerCall$MH, "Ndr64AsyncServerCall");
        try {
            mh$.invokeExact(pRpcMsg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64AsyncServerCall64$MH() {
        return RuntimeHelper.requireNonNull(constants$966.Ndr64AsyncServerCall64$MH,"Ndr64AsyncServerCall64");
    }
    public static void Ndr64AsyncServerCall64 ( Addressable pRpcMsg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$966.Ndr64AsyncServerCall64$MH, "Ndr64AsyncServerCall64");
        try {
            mh$.invokeExact(pRpcMsg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64AsyncServerCallAll$MH() {
        return RuntimeHelper.requireNonNull(constants$966.Ndr64AsyncServerCallAll$MH,"Ndr64AsyncServerCallAll");
    }
    public static void Ndr64AsyncServerCallAll ( Addressable pRpcMsg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$966.Ndr64AsyncServerCallAll$MH, "Ndr64AsyncServerCallAll");
        try {
            mh$.invokeExact(pRpcMsg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64AsyncStubCall$MH() {
        return RuntimeHelper.requireNonNull(constants$967.Ndr64AsyncStubCall$MH,"Ndr64AsyncStubCall");
    }
    public static int Ndr64AsyncStubCall ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = RuntimeHelper.requireNonNull(constants$967.Ndr64AsyncStubCall$MH, "Ndr64AsyncStubCall");
        try {
            return (int)mh$.invokeExact(pThis.address(), pChannel.address(), pRpcMsg.address(), pdwStubPhase.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64DcomAsyncStubCall$MH() {
        return RuntimeHelper.requireNonNull(constants$967.Ndr64DcomAsyncStubCall$MH,"Ndr64DcomAsyncStubCall");
    }
    public static int Ndr64DcomAsyncStubCall ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = RuntimeHelper.requireNonNull(constants$967.Ndr64DcomAsyncStubCall$MH, "Ndr64DcomAsyncStubCall");
        try {
            return (int)mh$.invokeExact(pThis.address(), pChannel.address(), pRpcMsg.address(), pdwStubPhase.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrStubCall3$MH() {
        return RuntimeHelper.requireNonNull(constants$967.NdrStubCall3$MH,"NdrStubCall3");
    }
    public static int NdrStubCall3 ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = RuntimeHelper.requireNonNull(constants$967.NdrStubCall3$MH, "NdrStubCall3");
        try {
            return (int)mh$.invokeExact(pThis.address(), pChannel.address(), pRpcMsg.address(), pdwStubPhase.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerCallAll$MH() {
        return RuntimeHelper.requireNonNull(constants$967.NdrServerCallAll$MH,"NdrServerCallAll");
    }
    public static void NdrServerCallAll ( Addressable pRpcMsg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$967.NdrServerCallAll$MH, "NdrServerCallAll");
        try {
            mh$.invokeExact(pRpcMsg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerCallNdr64$MH() {
        return RuntimeHelper.requireNonNull(constants$967.NdrServerCallNdr64$MH,"NdrServerCallNdr64");
    }
    public static void NdrServerCallNdr64 ( Addressable pRpcMsg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$967.NdrServerCallNdr64$MH, "NdrServerCallNdr64");
        try {
            mh$.invokeExact(pRpcMsg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerCall3$MH() {
        return RuntimeHelper.requireNonNull(constants$967.NdrServerCall3$MH,"NdrServerCall3");
    }
    public static void NdrServerCall3 ( Addressable pRpcMsg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$967.NdrServerCall3$MH, "NdrServerCall3");
        try {
            mh$.invokeExact(pRpcMsg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPartialIgnoreClientMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$968.NdrPartialIgnoreClientMarshall$MH,"NdrPartialIgnoreClientMarshall");
    }
    public static void NdrPartialIgnoreClientMarshall ( Addressable pStubMsg,  Addressable pMemory) {
        var mh$ = RuntimeHelper.requireNonNull(constants$968.NdrPartialIgnoreClientMarshall$MH, "NdrPartialIgnoreClientMarshall");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPartialIgnoreServerUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$968.NdrPartialIgnoreServerUnmarshall$MH,"NdrPartialIgnoreServerUnmarshall");
    }
    public static void NdrPartialIgnoreServerUnmarshall ( Addressable pStubMsg,  Addressable ppMemory) {
        var mh$ = RuntimeHelper.requireNonNull(constants$968.NdrPartialIgnoreServerUnmarshall$MH, "NdrPartialIgnoreServerUnmarshall");
        try {
            mh$.invokeExact(pStubMsg.address(), ppMemory.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPartialIgnoreClientBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$968.NdrPartialIgnoreClientBufferSize$MH,"NdrPartialIgnoreClientBufferSize");
    }
    public static void NdrPartialIgnoreClientBufferSize ( Addressable pStubMsg,  Addressable pMemory) {
        var mh$ = RuntimeHelper.requireNonNull(constants$968.NdrPartialIgnoreClientBufferSize$MH, "NdrPartialIgnoreClientBufferSize");
        try {
            mh$.invokeExact(pStubMsg.address(), pMemory.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPartialIgnoreServerInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$968.NdrPartialIgnoreServerInitialize$MH,"NdrPartialIgnoreServerInitialize");
    }
    public static void NdrPartialIgnoreServerInitialize ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$968.NdrPartialIgnoreServerInitialize$MH, "NdrPartialIgnoreServerInitialize");
        try {
            mh$.invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcUserFree$MH() {
        return RuntimeHelper.requireNonNull(constants$968.RpcUserFree$MH,"RpcUserFree");
    }
    public static void RpcUserFree ( Addressable AsyncHandle,  Addressable pBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$968.RpcUserFree$MH, "RpcUserFree");
        try {
            mh$.invokeExact(AsyncHandle.address(), pBuffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int REGCLS_SINGLEUSE() {
        return (int)0L;
    }
    public static int REGCLS_MULTIPLEUSE() {
        return (int)1L;
    }
    public static int REGCLS_MULTI_SEPARATE() {
        return (int)2L;
    }
    public static int REGCLS_SUSPENDED() {
        return (int)4L;
    }
    public static int REGCLS_SURROGATE() {
        return (int)8L;
    }
    public static int COINITBASE_MULTITHREADED() {
        return (int)0L;
    }
    public static MemoryLayout IWinTypesBase_v0_1_c_ifspec$LAYOUT() {
        return constants$968.IWinTypesBase_v0_1_c_ifspec$LAYOUT;
    }
    public static VarHandle IWinTypesBase_v0_1_c_ifspec$VH() {
        return constants$968.IWinTypesBase_v0_1_c_ifspec$VH;
    }
    public static MemorySegment IWinTypesBase_v0_1_c_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$968.IWinTypesBase_v0_1_c_ifspec$SEGMENT,"IWinTypesBase_v0_1_c_ifspec");
    }
    public static MemoryAddress IWinTypesBase_v0_1_c_ifspec$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$968.IWinTypesBase_v0_1_c_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$968.IWinTypesBase_v0_1_c_ifspec$SEGMENT, "IWinTypesBase_v0_1_c_ifspec"));
    }
    public static void IWinTypesBase_v0_1_c_ifspec$set( MemoryAddress x) {
        constants$968.IWinTypesBase_v0_1_c_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$968.IWinTypesBase_v0_1_c_ifspec$SEGMENT, "IWinTypesBase_v0_1_c_ifspec"), x);
    }
    public static MemoryLayout IWinTypesBase_v0_1_s_ifspec$LAYOUT() {
        return constants$969.IWinTypesBase_v0_1_s_ifspec$LAYOUT;
    }
    public static VarHandle IWinTypesBase_v0_1_s_ifspec$VH() {
        return constants$969.IWinTypesBase_v0_1_s_ifspec$VH;
    }
    public static MemorySegment IWinTypesBase_v0_1_s_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$969.IWinTypesBase_v0_1_s_ifspec$SEGMENT,"IWinTypesBase_v0_1_s_ifspec");
    }
    public static MemoryAddress IWinTypesBase_v0_1_s_ifspec$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$969.IWinTypesBase_v0_1_s_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$969.IWinTypesBase_v0_1_s_ifspec$SEGMENT, "IWinTypesBase_v0_1_s_ifspec"));
    }
    public static void IWinTypesBase_v0_1_s_ifspec$set( MemoryAddress x) {
        constants$969.IWinTypesBase_v0_1_s_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$969.IWinTypesBase_v0_1_s_ifspec$SEGMENT, "IWinTypesBase_v0_1_s_ifspec"), x);
    }
    public static ValueLayout SHORT = C_SHORT;
    public static ValueLayout DOUBLE = C_DOUBLE;
    public static ValueLayout SCODE = C_LONG;
    public static int MEMCTX_TASK() {
        return (int)1L;
    }
    public static int MEMCTX_SHARED() {
        return (int)2L;
    }
    public static int MEMCTX_MACSYSTEM() {
        return (int)3L;
    }
    public static int MEMCTX_UNKNOWN() {
        return (int)-1L;
    }
    public static int MEMCTX_SAME() {
        return (int)-2L;
    }
    public static int CLSCTX_INPROC_SERVER() {
        return (int)1L;
    }
    public static int CLSCTX_INPROC_HANDLER() {
        return (int)2L;
    }
    public static int CLSCTX_LOCAL_SERVER() {
        return (int)4L;
    }
    public static int CLSCTX_INPROC_SERVER16() {
        return (int)8L;
    }
    public static int CLSCTX_REMOTE_SERVER() {
        return (int)16L;
    }
    public static int CLSCTX_INPROC_HANDLER16() {
        return (int)32L;
    }
    public static int CLSCTX_RESERVED1() {
        return (int)64L;
    }
    public static int CLSCTX_RESERVED2() {
        return (int)128L;
    }
    public static int CLSCTX_RESERVED3() {
        return (int)256L;
    }
    public static int CLSCTX_RESERVED4() {
        return (int)512L;
    }
    public static int CLSCTX_NO_CODE_DOWNLOAD() {
        return (int)1024L;
    }
    public static int CLSCTX_RESERVED5() {
        return (int)2048L;
    }
    public static int CLSCTX_NO_CUSTOM_MARSHAL() {
        return (int)4096L;
    }
    public static int CLSCTX_ENABLE_CODE_DOWNLOAD() {
        return (int)8192L;
    }
    public static int CLSCTX_NO_FAILURE_LOG() {
        return (int)16384L;
    }
    public static int CLSCTX_DISABLE_AAA() {
        return (int)32768L;
    }
    public static int CLSCTX_ENABLE_AAA() {
        return (int)65536L;
    }
    public static int CLSCTX_FROM_DEFAULT_CONTEXT() {
        return (int)131072L;
    }
    public static int CLSCTX_ACTIVATE_32_BIT_SERVER() {
        return (int)262144L;
    }
    public static int CLSCTX_ACTIVATE_64_BIT_SERVER() {
        return (int)524288L;
    }
    public static int CLSCTX_ENABLE_CLOAKING() {
        return (int)1048576L;
    }
    public static int CLSCTX_APPCONTAINER() {
        return (int)4194304L;
    }
    public static int CLSCTX_ACTIVATE_AAA_AS_IU() {
        return (int)8388608L;
    }
    public static int CLSCTX_PS_DLL() {
        return (int)-2147483648L;
    }
    public static int MSHLFLAGS_NORMAL() {
        return (int)0L;
    }
    public static int MSHLFLAGS_TABLESTRONG() {
        return (int)1L;
    }
    public static int MSHLFLAGS_TABLEWEAK() {
        return (int)2L;
    }
    public static int MSHLFLAGS_NOPING() {
        return (int)4L;
    }
    public static int MSHLFLAGS_RESERVED1() {
        return (int)8L;
    }
    public static int MSHLFLAGS_RESERVED2() {
        return (int)16L;
    }
    public static int MSHLFLAGS_RESERVED3() {
        return (int)32L;
    }
    public static int MSHLFLAGS_RESERVED4() {
        return (int)64L;
    }
    public static int MSHCTX_LOCAL() {
        return (int)0L;
    }
    public static int MSHCTX_NOSHAREDMEM() {
        return (int)1L;
    }
    public static int MSHCTX_DIFFERENTMACHINE() {
        return (int)2L;
    }
    public static int MSHCTX_INPROC() {
        return (int)3L;
    }
    public static int MSHCTX_CROSSCTX() {
        return (int)4L;
    }
    public static MemorySegment IID_IUnknown$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$969.IID_IUnknown$SEGMENT,"IID_IUnknown");
    }
    public static MemorySegment IID_AsyncIUnknown$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$969.IID_AsyncIUnknown$SEGMENT,"IID_AsyncIUnknown");
    }
    public static MemorySegment IID_IClassFactory$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$969.IID_IClassFactory$SEGMENT,"IID_IClassFactory");
    }
    public static MethodHandle IClassFactory_RemoteCreateInstance_Proxy$MH() {
        return RuntimeHelper.requireNonNull(constants$969.IClassFactory_RemoteCreateInstance_Proxy$MH,"IClassFactory_RemoteCreateInstance_Proxy");
    }
    public static int IClassFactory_RemoteCreateInstance_Proxy ( Addressable This,  Addressable riid,  Addressable ppvObject) {
        var mh$ = RuntimeHelper.requireNonNull(constants$969.IClassFactory_RemoteCreateInstance_Proxy$MH, "IClassFactory_RemoteCreateInstance_Proxy");
        try {
            return (int)mh$.invokeExact(This.address(), riid.address(), ppvObject.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IClassFactory_RemoteCreateInstance_Stub$MH() {
        return RuntimeHelper.requireNonNull(constants$969.IClassFactory_RemoteCreateInstance_Stub$MH,"IClassFactory_RemoteCreateInstance_Stub");
    }
    public static void IClassFactory_RemoteCreateInstance_Stub ( Addressable This,  Addressable pRpcChannelBuffer,  Addressable pRpcMessage,  Addressable pdwStubPhase) {
        var mh$ = RuntimeHelper.requireNonNull(constants$969.IClassFactory_RemoteCreateInstance_Stub$MH, "IClassFactory_RemoteCreateInstance_Stub");
        try {
            mh$.invokeExact(This.address(), pRpcChannelBuffer.address(), pRpcMessage.address(), pdwStubPhase.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IClassFactory_RemoteLockServer_Proxy$MH() {
        return RuntimeHelper.requireNonNull(constants$970.IClassFactory_RemoteLockServer_Proxy$MH,"IClassFactory_RemoteLockServer_Proxy");
    }
    public static int IClassFactory_RemoteLockServer_Proxy ( Addressable This,  int fLock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$970.IClassFactory_RemoteLockServer_Proxy$MH, "IClassFactory_RemoteLockServer_Proxy");
        try {
            return (int)mh$.invokeExact(This.address(), fLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IClassFactory_RemoteLockServer_Stub$MH() {
        return RuntimeHelper.requireNonNull(constants$970.IClassFactory_RemoteLockServer_Stub$MH,"IClassFactory_RemoteLockServer_Stub");
    }
    public static void IClassFactory_RemoteLockServer_Stub ( Addressable This,  Addressable pRpcChannelBuffer,  Addressable pRpcMessage,  Addressable pdwStubPhase) {
        var mh$ = RuntimeHelper.requireNonNull(constants$970.IClassFactory_RemoteLockServer_Stub$MH, "IClassFactory_RemoteLockServer_Stub");
        try {
            mh$.invokeExact(This.address(), pRpcChannelBuffer.address(), pRpcMessage.address(), pdwStubPhase.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IClassFactory_CreateInstance_Proxy$MH() {
        return RuntimeHelper.requireNonNull(constants$970.IClassFactory_CreateInstance_Proxy$MH,"IClassFactory_CreateInstance_Proxy");
    }
    public static int IClassFactory_CreateInstance_Proxy ( Addressable This,  Addressable pUnkOuter,  Addressable riid,  Addressable ppvObject) {
        var mh$ = RuntimeHelper.requireNonNull(constants$970.IClassFactory_CreateInstance_Proxy$MH, "IClassFactory_CreateInstance_Proxy");
        try {
            return (int)mh$.invokeExact(This.address(), pUnkOuter.address(), riid.address(), ppvObject.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IClassFactory_CreateInstance_Stub$MH() {
        return RuntimeHelper.requireNonNull(constants$970.IClassFactory_CreateInstance_Stub$MH,"IClassFactory_CreateInstance_Stub");
    }
    public static int IClassFactory_CreateInstance_Stub ( Addressable This,  Addressable riid,  Addressable ppvObject) {
        var mh$ = RuntimeHelper.requireNonNull(constants$970.IClassFactory_CreateInstance_Stub$MH, "IClassFactory_CreateInstance_Stub");
        try {
            return (int)mh$.invokeExact(This.address(), riid.address(), ppvObject.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IClassFactory_LockServer_Proxy$MH() {
        return RuntimeHelper.requireNonNull(constants$970.IClassFactory_LockServer_Proxy$MH,"IClassFactory_LockServer_Proxy");
    }
    public static int IClassFactory_LockServer_Proxy ( Addressable This,  int fLock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$970.IClassFactory_LockServer_Proxy$MH, "IClassFactory_LockServer_Proxy");
        try {
            return (int)mh$.invokeExact(This.address(), fLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IClassFactory_LockServer_Stub$MH() {
        return RuntimeHelper.requireNonNull(constants$970.IClassFactory_LockServer_Stub$MH,"IClassFactory_LockServer_Stub");
    }
    public static int IClassFactory_LockServer_Stub ( Addressable This,  int fLock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$970.IClassFactory_LockServer_Stub$MH, "IClassFactory_LockServer_Stub");
        try {
            return (int)mh$.invokeExact(This.address(), fLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment IID_IMarshal$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$971.IID_IMarshal$SEGMENT,"IID_IMarshal");
    }
    public static MemorySegment IID_INoMarshal$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$971.IID_INoMarshal$SEGMENT,"IID_INoMarshal");
    }
    public static MemorySegment IID_IAgileObject$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$971.IID_IAgileObject$SEGMENT,"IID_IAgileObject");
    }
    public static MemorySegment IID_IAgileReference$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$971.IID_IAgileReference$SEGMENT,"IID_IAgileReference");
    }
    public static MemorySegment IID_IMarshal2$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$971.IID_IMarshal2$SEGMENT,"IID_IMarshal2");
    }
    public static MemorySegment IID_IMalloc$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$971.IID_IMalloc$SEGMENT,"IID_IMalloc");
    }
    public static MemorySegment IID_IStdMarshalInfo$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$972.IID_IStdMarshalInfo$SEGMENT,"IID_IStdMarshalInfo");
    }
    public static int EXTCONN_STRONG() {
        return (int)1L;
    }
    public static int EXTCONN_WEAK() {
        return (int)2L;
    }
    public static int EXTCONN_CALLABLE() {
        return (int)4L;
    }
    public static MemorySegment IID_IExternalConnection$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$972.IID_IExternalConnection$SEGMENT,"IID_IExternalConnection");
    }
    public static MemorySegment IID_IMultiQI$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$972.IID_IMultiQI$SEGMENT,"IID_IMultiQI");
    }
    public static MemorySegment IID_AsyncIMultiQI$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$972.IID_AsyncIMultiQI$SEGMENT,"IID_AsyncIMultiQI");
    }
    public static MemorySegment IID_IInternalUnknown$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$972.IID_IInternalUnknown$SEGMENT,"IID_IInternalUnknown");
    }
    public static MemorySegment IID_IEnumUnknown$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$972.IID_IEnumUnknown$SEGMENT,"IID_IEnumUnknown");
    }
    public static MethodHandle IEnumUnknown_RemoteNext_Proxy$MH() {
        return RuntimeHelper.requireNonNull(constants$973.IEnumUnknown_RemoteNext_Proxy$MH,"IEnumUnknown_RemoteNext_Proxy");
    }
    public static int IEnumUnknown_RemoteNext_Proxy ( Addressable This,  int celt,  Addressable rgelt,  Addressable pceltFetched) {
        var mh$ = RuntimeHelper.requireNonNull(constants$973.IEnumUnknown_RemoteNext_Proxy$MH, "IEnumUnknown_RemoteNext_Proxy");
        try {
            return (int)mh$.invokeExact(This.address(), celt, rgelt.address(), pceltFetched.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IEnumUnknown_RemoteNext_Stub$MH() {
        return RuntimeHelper.requireNonNull(constants$973.IEnumUnknown_RemoteNext_Stub$MH,"IEnumUnknown_RemoteNext_Stub");
    }
    public static void IEnumUnknown_RemoteNext_Stub ( Addressable This,  Addressable pRpcChannelBuffer,  Addressable pRpcMessage,  Addressable pdwStubPhase) {
        var mh$ = RuntimeHelper.requireNonNull(constants$973.IEnumUnknown_RemoteNext_Stub$MH, "IEnumUnknown_RemoteNext_Stub");
        try {
            mh$.invokeExact(This.address(), pRpcChannelBuffer.address(), pRpcMessage.address(), pdwStubPhase.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IEnumUnknown_Next_Proxy$MH() {
        return RuntimeHelper.requireNonNull(constants$973.IEnumUnknown_Next_Proxy$MH,"IEnumUnknown_Next_Proxy");
    }
    public static int IEnumUnknown_Next_Proxy ( Addressable This,  int celt,  Addressable rgelt,  Addressable pceltFetched) {
        var mh$ = RuntimeHelper.requireNonNull(constants$973.IEnumUnknown_Next_Proxy$MH, "IEnumUnknown_Next_Proxy");
        try {
            return (int)mh$.invokeExact(This.address(), celt, rgelt.address(), pceltFetched.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IEnumUnknown_Next_Stub$MH() {
        return RuntimeHelper.requireNonNull(constants$973.IEnumUnknown_Next_Stub$MH,"IEnumUnknown_Next_Stub");
    }
    public static int IEnumUnknown_Next_Stub ( Addressable This,  int celt,  Addressable rgelt,  Addressable pceltFetched) {
        var mh$ = RuntimeHelper.requireNonNull(constants$973.IEnumUnknown_Next_Stub$MH, "IEnumUnknown_Next_Stub");
        try {
            return (int)mh$.invokeExact(This.address(), celt, rgelt.address(), pceltFetched.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment IID_IEnumString$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$973.IID_IEnumString$SEGMENT,"IID_IEnumString");
    }
    public static MethodHandle IEnumString_RemoteNext_Proxy$MH() {
        return RuntimeHelper.requireNonNull(constants$973.IEnumString_RemoteNext_Proxy$MH,"IEnumString_RemoteNext_Proxy");
    }
    public static int IEnumString_RemoteNext_Proxy ( Addressable This,  int celt,  Addressable rgelt,  Addressable pceltFetched) {
        var mh$ = RuntimeHelper.requireNonNull(constants$973.IEnumString_RemoteNext_Proxy$MH, "IEnumString_RemoteNext_Proxy");
        try {
            return (int)mh$.invokeExact(This.address(), celt, rgelt.address(), pceltFetched.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IEnumString_RemoteNext_Stub$MH() {
        return RuntimeHelper.requireNonNull(constants$974.IEnumString_RemoteNext_Stub$MH,"IEnumString_RemoteNext_Stub");
    }
    public static void IEnumString_RemoteNext_Stub ( Addressable This,  Addressable pRpcChannelBuffer,  Addressable pRpcMessage,  Addressable pdwStubPhase) {
        var mh$ = RuntimeHelper.requireNonNull(constants$974.IEnumString_RemoteNext_Stub$MH, "IEnumString_RemoteNext_Stub");
        try {
            mh$.invokeExact(This.address(), pRpcChannelBuffer.address(), pRpcMessage.address(), pdwStubPhase.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IEnumString_Next_Proxy$MH() {
        return RuntimeHelper.requireNonNull(constants$974.IEnumString_Next_Proxy$MH,"IEnumString_Next_Proxy");
    }
    public static int IEnumString_Next_Proxy ( Addressable This,  int celt,  Addressable rgelt,  Addressable pceltFetched) {
        var mh$ = RuntimeHelper.requireNonNull(constants$974.IEnumString_Next_Proxy$MH, "IEnumString_Next_Proxy");
        try {
            return (int)mh$.invokeExact(This.address(), celt, rgelt.address(), pceltFetched.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IEnumString_Next_Stub$MH() {
        return RuntimeHelper.requireNonNull(constants$974.IEnumString_Next_Stub$MH,"IEnumString_Next_Stub");
    }
    public static int IEnumString_Next_Stub ( Addressable This,  int celt,  Addressable rgelt,  Addressable pceltFetched) {
        var mh$ = RuntimeHelper.requireNonNull(constants$974.IEnumString_Next_Stub$MH, "IEnumString_Next_Stub");
        try {
            return (int)mh$.invokeExact(This.address(), celt, rgelt.address(), pceltFetched.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment IID_ISequentialStream$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$974.IID_ISequentialStream$SEGMENT,"IID_ISequentialStream");
    }
    public static MethodHandle ISequentialStream_RemoteRead_Proxy$MH() {
        return RuntimeHelper.requireNonNull(constants$974.ISequentialStream_RemoteRead_Proxy$MH,"ISequentialStream_RemoteRead_Proxy");
    }
    public static int ISequentialStream_RemoteRead_Proxy ( Addressable This,  Addressable pv,  int cb,  Addressable pcbRead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$974.ISequentialStream_RemoteRead_Proxy$MH, "ISequentialStream_RemoteRead_Proxy");
        try {
            return (int)mh$.invokeExact(This.address(), pv.address(), cb, pcbRead.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ISequentialStream_RemoteRead_Stub$MH() {
        return RuntimeHelper.requireNonNull(constants$974.ISequentialStream_RemoteRead_Stub$MH,"ISequentialStream_RemoteRead_Stub");
    }
    public static void ISequentialStream_RemoteRead_Stub ( Addressable This,  Addressable pRpcChannelBuffer,  Addressable pRpcMessage,  Addressable pdwStubPhase) {
        var mh$ = RuntimeHelper.requireNonNull(constants$974.ISequentialStream_RemoteRead_Stub$MH, "ISequentialStream_RemoteRead_Stub");
        try {
            mh$.invokeExact(This.address(), pRpcChannelBuffer.address(), pRpcMessage.address(), pdwStubPhase.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ISequentialStream_RemoteWrite_Proxy$MH() {
        return RuntimeHelper.requireNonNull(constants$975.ISequentialStream_RemoteWrite_Proxy$MH,"ISequentialStream_RemoteWrite_Proxy");
    }
    public static int ISequentialStream_RemoteWrite_Proxy ( Addressable This,  Addressable pv,  int cb,  Addressable pcbWritten) {
        var mh$ = RuntimeHelper.requireNonNull(constants$975.ISequentialStream_RemoteWrite_Proxy$MH, "ISequentialStream_RemoteWrite_Proxy");
        try {
            return (int)mh$.invokeExact(This.address(), pv.address(), cb, pcbWritten.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ISequentialStream_RemoteWrite_Stub$MH() {
        return RuntimeHelper.requireNonNull(constants$975.ISequentialStream_RemoteWrite_Stub$MH,"ISequentialStream_RemoteWrite_Stub");
    }
    public static void ISequentialStream_RemoteWrite_Stub ( Addressable This,  Addressable pRpcChannelBuffer,  Addressable pRpcMessage,  Addressable pdwStubPhase) {
        var mh$ = RuntimeHelper.requireNonNull(constants$975.ISequentialStream_RemoteWrite_Stub$MH, "ISequentialStream_RemoteWrite_Stub");
        try {
            mh$.invokeExact(This.address(), pRpcChannelBuffer.address(), pRpcMessage.address(), pdwStubPhase.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ISequentialStream_Read_Proxy$MH() {
        return RuntimeHelper.requireNonNull(constants$975.ISequentialStream_Read_Proxy$MH,"ISequentialStream_Read_Proxy");
    }
    public static int ISequentialStream_Read_Proxy ( Addressable This,  Addressable pv,  int cb,  Addressable pcbRead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$975.ISequentialStream_Read_Proxy$MH, "ISequentialStream_Read_Proxy");
        try {
            return (int)mh$.invokeExact(This.address(), pv.address(), cb, pcbRead.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ISequentialStream_Read_Stub$MH() {
        return RuntimeHelper.requireNonNull(constants$975.ISequentialStream_Read_Stub$MH,"ISequentialStream_Read_Stub");
    }
    public static int ISequentialStream_Read_Stub ( Addressable This,  Addressable pv,  int cb,  Addressable pcbRead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$975.ISequentialStream_Read_Stub$MH, "ISequentialStream_Read_Stub");
        try {
            return (int)mh$.invokeExact(This.address(), pv.address(), cb, pcbRead.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ISequentialStream_Write_Proxy$MH() {
        return RuntimeHelper.requireNonNull(constants$975.ISequentialStream_Write_Proxy$MH,"ISequentialStream_Write_Proxy");
    }
    public static int ISequentialStream_Write_Proxy ( Addressable This,  Addressable pv,  int cb,  Addressable pcbWritten) {
        var mh$ = RuntimeHelper.requireNonNull(constants$975.ISequentialStream_Write_Proxy$MH, "ISequentialStream_Write_Proxy");
        try {
            return (int)mh$.invokeExact(This.address(), pv.address(), cb, pcbWritten.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ISequentialStream_Write_Stub$MH() {
        return RuntimeHelper.requireNonNull(constants$975.ISequentialStream_Write_Stub$MH,"ISequentialStream_Write_Stub");
    }
    public static int ISequentialStream_Write_Stub ( Addressable This,  Addressable pv,  int cb,  Addressable pcbWritten) {
        var mh$ = RuntimeHelper.requireNonNull(constants$975.ISequentialStream_Write_Stub$MH, "ISequentialStream_Write_Stub");
        try {
            return (int)mh$.invokeExact(This.address(), pv.address(), cb, pcbWritten.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int STGTY_STORAGE() {
        return (int)1L;
    }
    public static int STGTY_STREAM() {
        return (int)2L;
    }
    public static int STGTY_LOCKBYTES() {
        return (int)3L;
    }
    public static int STGTY_PROPERTY() {
        return (int)4L;
    }
    public static int STREAM_SEEK_SET() {
        return (int)0L;
    }
    public static int STREAM_SEEK_CUR() {
        return (int)1L;
    }
    public static int STREAM_SEEK_END() {
        return (int)2L;
    }
    public static int LOCK_WRITE() {
        return (int)1L;
    }
    public static int LOCK_EXCLUSIVE() {
        return (int)2L;
    }
    public static int LOCK_ONLYONCE() {
        return (int)4L;
    }
    public static MemorySegment IID_IStream$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$976.IID_IStream$SEGMENT,"IID_IStream");
    }
    public static MethodHandle IStream_RemoteSeek_Proxy$MH() {
        return RuntimeHelper.requireNonNull(constants$976.IStream_RemoteSeek_Proxy$MH,"IStream_RemoteSeek_Proxy");
    }
    public static int IStream_RemoteSeek_Proxy ( Addressable This,  MemorySegment dlibMove,  int dwOrigin,  Addressable plibNewPosition) {
        var mh$ = RuntimeHelper.requireNonNull(constants$976.IStream_RemoteSeek_Proxy$MH, "IStream_RemoteSeek_Proxy");
        try {
            return (int)mh$.invokeExact(This.address(), dlibMove, dwOrigin, plibNewPosition.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IStream_RemoteSeek_Stub$MH() {
        return RuntimeHelper.requireNonNull(constants$976.IStream_RemoteSeek_Stub$MH,"IStream_RemoteSeek_Stub");
    }
    public static void IStream_RemoteSeek_Stub ( Addressable This,  Addressable pRpcChannelBuffer,  Addressable pRpcMessage,  Addressable pdwStubPhase) {
        var mh$ = RuntimeHelper.requireNonNull(constants$976.IStream_RemoteSeek_Stub$MH, "IStream_RemoteSeek_Stub");
        try {
            mh$.invokeExact(This.address(), pRpcChannelBuffer.address(), pRpcMessage.address(), pdwStubPhase.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IStream_RemoteCopyTo_Proxy$MH() {
        return RuntimeHelper.requireNonNull(constants$976.IStream_RemoteCopyTo_Proxy$MH,"IStream_RemoteCopyTo_Proxy");
    }
    public static int IStream_RemoteCopyTo_Proxy ( Addressable This,  Addressable pstm,  MemorySegment cb,  Addressable pcbRead,  Addressable pcbWritten) {
        var mh$ = RuntimeHelper.requireNonNull(constants$976.IStream_RemoteCopyTo_Proxy$MH, "IStream_RemoteCopyTo_Proxy");
        try {
            return (int)mh$.invokeExact(This.address(), pstm.address(), cb, pcbRead.address(), pcbWritten.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IStream_RemoteCopyTo_Stub$MH() {
        return RuntimeHelper.requireNonNull(constants$976.IStream_RemoteCopyTo_Stub$MH,"IStream_RemoteCopyTo_Stub");
    }
    public static void IStream_RemoteCopyTo_Stub ( Addressable This,  Addressable pRpcChannelBuffer,  Addressable pRpcMessage,  Addressable pdwStubPhase) {
        var mh$ = RuntimeHelper.requireNonNull(constants$976.IStream_RemoteCopyTo_Stub$MH, "IStream_RemoteCopyTo_Stub");
        try {
            mh$.invokeExact(This.address(), pRpcChannelBuffer.address(), pRpcMessage.address(), pdwStubPhase.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IStream_Seek_Proxy$MH() {
        return RuntimeHelper.requireNonNull(constants$976.IStream_Seek_Proxy$MH,"IStream_Seek_Proxy");
    }
    public static int IStream_Seek_Proxy ( Addressable This,  MemorySegment dlibMove,  int dwOrigin,  Addressable plibNewPosition) {
        var mh$ = RuntimeHelper.requireNonNull(constants$976.IStream_Seek_Proxy$MH, "IStream_Seek_Proxy");
        try {
            return (int)mh$.invokeExact(This.address(), dlibMove, dwOrigin, plibNewPosition.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IStream_Seek_Stub$MH() {
        return RuntimeHelper.requireNonNull(constants$977.IStream_Seek_Stub$MH,"IStream_Seek_Stub");
    }
    public static int IStream_Seek_Stub ( Addressable This,  MemorySegment dlibMove,  int dwOrigin,  Addressable plibNewPosition) {
        var mh$ = RuntimeHelper.requireNonNull(constants$977.IStream_Seek_Stub$MH, "IStream_Seek_Stub");
        try {
            return (int)mh$.invokeExact(This.address(), dlibMove, dwOrigin, plibNewPosition.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IStream_CopyTo_Proxy$MH() {
        return RuntimeHelper.requireNonNull(constants$977.IStream_CopyTo_Proxy$MH,"IStream_CopyTo_Proxy");
    }
    public static int IStream_CopyTo_Proxy ( Addressable This,  Addressable pstm,  MemorySegment cb,  Addressable pcbRead,  Addressable pcbWritten) {
        var mh$ = RuntimeHelper.requireNonNull(constants$977.IStream_CopyTo_Proxy$MH, "IStream_CopyTo_Proxy");
        try {
            return (int)mh$.invokeExact(This.address(), pstm.address(), cb, pcbRead.address(), pcbWritten.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IStream_CopyTo_Stub$MH() {
        return RuntimeHelper.requireNonNull(constants$977.IStream_CopyTo_Stub$MH,"IStream_CopyTo_Stub");
    }
    public static int IStream_CopyTo_Stub ( Addressable This,  Addressable pstm,  MemorySegment cb,  Addressable pcbRead,  Addressable pcbWritten) {
        var mh$ = RuntimeHelper.requireNonNull(constants$977.IStream_CopyTo_Stub$MH, "IStream_CopyTo_Stub");
        try {
            return (int)mh$.invokeExact(This.address(), pstm.address(), cb, pcbRead.address(), pcbWritten.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment IID_IRpcChannelBuffer$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$977.IID_IRpcChannelBuffer$SEGMENT,"IID_IRpcChannelBuffer");
    }
    public static MemorySegment IID_IRpcChannelBuffer2$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$977.IID_IRpcChannelBuffer2$SEGMENT,"IID_IRpcChannelBuffer2");
    }
    public static MemorySegment IID_IAsyncRpcChannelBuffer$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$977.IID_IAsyncRpcChannelBuffer$SEGMENT,"IID_IAsyncRpcChannelBuffer");
    }
    public static MemorySegment IID_IRpcChannelBuffer3$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$978.IID_IRpcChannelBuffer3$SEGMENT,"IID_IRpcChannelBuffer3");
    }
    public static MemorySegment IID_IRpcSyntaxNegotiate$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$978.IID_IRpcSyntaxNegotiate$SEGMENT,"IID_IRpcSyntaxNegotiate");
    }
    public static MemorySegment IID_IRpcProxyBuffer$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$978.IID_IRpcProxyBuffer$SEGMENT,"IID_IRpcProxyBuffer");
    }
    public static MemorySegment IID_IRpcStubBuffer$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$978.IID_IRpcStubBuffer$SEGMENT,"IID_IRpcStubBuffer");
    }
    public static MemorySegment IID_IPSFactoryBuffer$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$978.IID_IPSFactoryBuffer$SEGMENT,"IID_IPSFactoryBuffer");
    }
    public static MemorySegment IID_IChannelHook$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$978.IID_IChannelHook$SEGMENT,"IID_IChannelHook");
    }
    public static int EOAC_NONE() {
        return (int)0L;
    }
    public static int EOAC_MUTUAL_AUTH() {
        return (int)1L;
    }
    public static int EOAC_STATIC_CLOAKING() {
        return (int)32L;
    }
    public static int EOAC_DYNAMIC_CLOAKING() {
        return (int)64L;
    }
    public static int EOAC_ANY_AUTHORITY() {
        return (int)128L;
    }
    public static int EOAC_MAKE_FULLSIC() {
        return (int)256L;
    }
    public static int EOAC_DEFAULT() {
        return (int)2048L;
    }
    public static int EOAC_SECURE_REFS() {
        return (int)2L;
    }
    public static int EOAC_ACCESS_CONTROL() {
        return (int)4L;
    }
    public static int EOAC_APPID() {
        return (int)8L;
    }
    public static int EOAC_DYNAMIC() {
        return (int)16L;
    }
    public static int EOAC_REQUIRE_FULLSIC() {
        return (int)512L;
    }
    public static int EOAC_AUTO_IMPERSONATE() {
        return (int)1024L;
    }
    public static int EOAC_NO_CUSTOM_MARSHAL() {
        return (int)8192L;
    }
    public static int EOAC_DISABLE_AAA() {
        return (int)4096L;
    }
    public static MemorySegment IID_IClientSecurity$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$979.IID_IClientSecurity$SEGMENT,"IID_IClientSecurity");
    }
    public static MemorySegment IID_IServerSecurity$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$979.IID_IServerSecurity$SEGMENT,"IID_IServerSecurity");
    }
    public static int COMBND_RPCTIMEOUT() {
        return (int)1L;
    }
    public static int COMBND_SERVER_LOCALITY() {
        return (int)2L;
    }
    public static int COMBND_RESERVED1() {
        return (int)4L;
    }
    public static int SERVER_LOCALITY_PROCESS_LOCAL() {
        return (int)0L;
    }
    public static int SERVER_LOCALITY_MACHINE_LOCAL() {
        return (int)1L;
    }
    public static int SERVER_LOCALITY_REMOTE() {
        return (int)2L;
    }
    public static MemorySegment IID_IRpcOptions$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$979.IID_IRpcOptions$SEGMENT,"IID_IRpcOptions");
    }
    public static int COMGLB_EXCEPTION_HANDLING() {
        return (int)1L;
    }
    public static int COMGLB_APPID() {
        return (int)2L;
    }
    public static int COMGLB_RPC_THREADPOOL_SETTING() {
        return (int)3L;
    }
    public static int COMGLB_RO_SETTINGS() {
        return (int)4L;
    }
    public static int COMGLB_UNMARSHALING_POLICY() {
        return (int)5L;
    }
    public static int COMGLB_EXCEPTION_HANDLE() {
        return (int)0L;
    }
    public static int COMGLB_EXCEPTION_DONOT_HANDLE_FATAL() {
        return (int)1L;
    }
    public static int COMGLB_EXCEPTION_DONOT_HANDLE() {
        return (int)1L;
    }
    public static int COMGLB_EXCEPTION_DONOT_HANDLE_ANY() {
        return (int)2L;
    }
    public static int COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL() {
        return (int)0L;
    }
    public static int COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL() {
        return (int)1L;
    }
    public static int COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES() {
        return (int)1L;
    }
    public static int COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES() {
        return (int)2L;
    }
    public static int COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES() {
        return (int)4L;
    }
    public static int COMGLB_FAST_RUNDOWN() {
        return (int)8L;
    }
    public static int COMGLB_RESERVED1() {
        return (int)16L;
    }
    public static int COMGLB_RESERVED2() {
        return (int)32L;
    }
    public static int COMGLB_RESERVED3() {
        return (int)64L;
    }
    public static int COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES() {
        return (int)128L;
    }
    public static int COMGLB_UNMARSHALING_POLICY_NORMAL() {
        return (int)0L;
    }
    public static int COMGLB_UNMARSHALING_POLICY_STRONG() {
        return (int)1L;
    }
    public static int COMGLB_UNMARSHALING_POLICY_HYBRID() {
        return (int)2L;
    }
    public static MemorySegment IID_IGlobalOptions$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$979.IID_IGlobalOptions$SEGMENT,"IID_IGlobalOptions");
    }
    public static MemorySegment IID_ISurrogate$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$979.IID_ISurrogate$SEGMENT,"IID_ISurrogate");
    }
    public static MemorySegment IID_IGlobalInterfaceTable$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$979.IID_IGlobalInterfaceTable$SEGMENT,"IID_IGlobalInterfaceTable");
    }
    public static MemorySegment IID_ISynchronize$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$980.IID_ISynchronize$SEGMENT,"IID_ISynchronize");
    }
    public static MemorySegment IID_ISynchronizeHandle$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$980.IID_ISynchronizeHandle$SEGMENT,"IID_ISynchronizeHandle");
    }
    public static MemorySegment IID_ISynchronizeEvent$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$980.IID_ISynchronizeEvent$SEGMENT,"IID_ISynchronizeEvent");
    }
    public static MemorySegment IID_ISynchronizeContainer$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$980.IID_ISynchronizeContainer$SEGMENT,"IID_ISynchronizeContainer");
    }
    public static MemorySegment IID_ISynchronizeMutex$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$980.IID_ISynchronizeMutex$SEGMENT,"IID_ISynchronizeMutex");
    }
    public static MemorySegment IID_ICancelMethodCalls$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$980.IID_ICancelMethodCalls$SEGMENT,"IID_ICancelMethodCalls");
    }
    public static int DCOM_NONE() {
        return (int)0L;
    }
    public static int DCOM_CALL_COMPLETE() {
        return (int)1L;
    }
    public static int DCOM_CALL_CANCELED() {
        return (int)2L;
    }
    public static MemorySegment IID_IAsyncManager$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$981.IID_IAsyncManager$SEGMENT,"IID_IAsyncManager");
    }
    public static MemorySegment IID_ICallFactory$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$981.IID_ICallFactory$SEGMENT,"IID_ICallFactory");
    }
    public static MemorySegment IID_IRpcHelper$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$981.IID_IRpcHelper$SEGMENT,"IID_IRpcHelper");
    }
    public static MemorySegment IID_IReleaseMarshalBuffers$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$981.IID_IReleaseMarshalBuffers$SEGMENT,"IID_IReleaseMarshalBuffers");
    }
    public static MemorySegment IID_IWaitMultiple$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$981.IID_IWaitMultiple$SEGMENT,"IID_IWaitMultiple");
    }
    public static MemorySegment IID_IAddrTrackingControl$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$981.IID_IAddrTrackingControl$SEGMENT,"IID_IAddrTrackingControl");
    }
    public static MemorySegment IID_IAddrExclusionControl$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$982.IID_IAddrExclusionControl$SEGMENT,"IID_IAddrExclusionControl");
    }
    public static MemorySegment IID_IPipeByte$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$982.IID_IPipeByte$SEGMENT,"IID_IPipeByte");
    }
    public static MemorySegment IID_IPipeLong$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$982.IID_IPipeLong$SEGMENT,"IID_IPipeLong");
    }
    public static MemorySegment IID_IPipeDouble$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$982.IID_IPipeDouble$SEGMENT,"IID_IPipeDouble");
    }
    public static int APTTYPEQUALIFIER_NONE() {
        return (int)0L;
    }
    public static int APTTYPEQUALIFIER_IMPLICIT_MTA() {
        return (int)1L;
    }
    public static int APTTYPEQUALIFIER_NA_ON_MTA() {
        return (int)2L;
    }
    public static int APTTYPEQUALIFIER_NA_ON_STA() {
        return (int)3L;
    }
    public static int APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA() {
        return (int)4L;
    }
    public static int APTTYPEQUALIFIER_NA_ON_MAINSTA() {
        return (int)5L;
    }
    public static int APTTYPEQUALIFIER_APPLICATION_STA() {
        return (int)6L;
    }
    public static int APTTYPE_CURRENT() {
        return (int)-1L;
    }
    public static int APTTYPE_STA() {
        return (int)0L;
    }
    public static int APTTYPE_MTA() {
        return (int)1L;
    }
    public static int APTTYPE_NA() {
        return (int)2L;
    }
    public static int APTTYPE_MAINSTA() {
        return (int)3L;
    }
    public static int THDTYPE_BLOCKMESSAGES() {
        return (int)0L;
    }
    public static int THDTYPE_PROCESSMESSAGES() {
        return (int)1L;
    }
    public static MemorySegment IID_IComThreadingInfo$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$982.IID_IComThreadingInfo$SEGMENT,"IID_IComThreadingInfo");
    }
    public static MemorySegment IID_IProcessInitControl$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$982.IID_IProcessInitControl$SEGMENT,"IID_IProcessInitControl");
    }
    public static MemorySegment IID_IFastRundown$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$983.IID_IFastRundown$SEGMENT,"IID_IFastRundown");
    }
    public static int CO_MARSHALING_SOURCE_IS_APP_CONTAINER() {
        return (int)0L;
    }
    public static MemorySegment IID_IMarshalingStream$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$983.IID_IMarshalingStream$SEGMENT,"IID_IMarshalingStream");
    }
    public static MemorySegment IID_ICallbackWithNoReentrancyToApplicationSTA$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$983.IID_ICallbackWithNoReentrancyToApplicationSTA$SEGMENT,"IID_ICallbackWithNoReentrancyToApplicationSTA");
    }
    public static MemorySegment GUID_NULL$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$983.GUID_NULL$SEGMENT,"GUID_NULL");
    }
    public static MemorySegment CATID_MARSHALER$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$983.CATID_MARSHALER$SEGMENT,"CATID_MARSHALER");
    }
    public static MemorySegment IID_IRpcChannel$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$983.IID_IRpcChannel$SEGMENT,"IID_IRpcChannel");
    }
    public static MemorySegment IID_IRpcStub$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$984.IID_IRpcStub$SEGMENT,"IID_IRpcStub");
    }
    public static MemorySegment IID_IStubManager$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$984.IID_IStubManager$SEGMENT,"IID_IStubManager");
    }
    public static MemorySegment IID_IRpcProxy$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$984.IID_IRpcProxy$SEGMENT,"IID_IRpcProxy");
    }
    public static MemorySegment IID_IProxyManager$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$984.IID_IProxyManager$SEGMENT,"IID_IProxyManager");
    }
    public static MemorySegment IID_IPSFactory$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$984.IID_IPSFactory$SEGMENT,"IID_IPSFactory");
    }
    public static MemorySegment IID_IInternalMoniker$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$984.IID_IInternalMoniker$SEGMENT,"IID_IInternalMoniker");
    }
    public static MemorySegment IID_IDfReserved1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$985.IID_IDfReserved1$SEGMENT,"IID_IDfReserved1");
    }
    public static MemorySegment IID_IDfReserved2$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$985.IID_IDfReserved2$SEGMENT,"IID_IDfReserved2");
    }
    public static MemorySegment IID_IDfReserved3$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$985.IID_IDfReserved3$SEGMENT,"IID_IDfReserved3");
    }
    public static MemorySegment CLSID_StdMarshal$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$985.CLSID_StdMarshal$SEGMENT,"CLSID_StdMarshal");
    }
    public static MemorySegment CLSID_AggStdMarshal$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$985.CLSID_AggStdMarshal$SEGMENT,"CLSID_AggStdMarshal");
    }
    public static MemorySegment CLSID_StdAsyncActManager$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$985.CLSID_StdAsyncActManager$SEGMENT,"CLSID_StdAsyncActManager");
    }
    public static MemorySegment IID_IStub$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$986.IID_IStub$SEGMENT,"IID_IStub");
    }
    public static MemorySegment IID_IProxy$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$986.IID_IProxy$SEGMENT,"IID_IProxy");
    }
    public static MemorySegment IID_IEnumGeneric$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$986.IID_IEnumGeneric$SEGMENT,"IID_IEnumGeneric");
    }
    public static MemorySegment IID_IEnumHolder$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$986.IID_IEnumHolder$SEGMENT,"IID_IEnumHolder");
    }
    public static MemorySegment IID_IEnumCallback$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$986.IID_IEnumCallback$SEGMENT,"IID_IEnumCallback");
    }
    public static MemorySegment IID_IOleManager$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$986.IID_IOleManager$SEGMENT,"IID_IOleManager");
    }
    public static MemorySegment IID_IOlePresObj$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$987.IID_IOlePresObj$SEGMENT,"IID_IOlePresObj");
    }
    public static MemorySegment IID_IDebug$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$987.IID_IDebug$SEGMENT,"IID_IDebug");
    }
    public static MemorySegment IID_IDebugStream$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$987.IID_IDebugStream$SEGMENT,"IID_IDebugStream");
    }
    public static MemorySegment CLSID_PSGenObject$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$987.CLSID_PSGenObject$SEGMENT,"CLSID_PSGenObject");
    }
    public static MemorySegment CLSID_PSClientSite$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$987.CLSID_PSClientSite$SEGMENT,"CLSID_PSClientSite");
    }
    public static MemorySegment CLSID_PSClassObject$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$987.CLSID_PSClassObject$SEGMENT,"CLSID_PSClassObject");
    }
    public static MemorySegment CLSID_PSInPlaceActive$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$988.CLSID_PSInPlaceActive$SEGMENT,"CLSID_PSInPlaceActive");
    }
    public static MemorySegment CLSID_PSInPlaceFrame$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$988.CLSID_PSInPlaceFrame$SEGMENT,"CLSID_PSInPlaceFrame");
    }
    public static MemorySegment CLSID_PSDragDrop$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$988.CLSID_PSDragDrop$SEGMENT,"CLSID_PSDragDrop");
    }
    public static MemorySegment CLSID_PSBindCtx$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$988.CLSID_PSBindCtx$SEGMENT,"CLSID_PSBindCtx");
    }
    public static MemorySegment CLSID_PSEnumerators$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$988.CLSID_PSEnumerators$SEGMENT,"CLSID_PSEnumerators");
    }
    public static MemorySegment CLSID_StaticMetafile$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$988.CLSID_StaticMetafile$SEGMENT,"CLSID_StaticMetafile");
    }
    public static MemorySegment CLSID_StaticDib$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$989.CLSID_StaticDib$SEGMENT,"CLSID_StaticDib");
    }
    public static MemorySegment CID_CDfsVolume$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$989.CID_CDfsVolume$SEGMENT,"CID_CDfsVolume");
    }
    public static MemorySegment CLSID_DCOMAccessControl$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$989.CLSID_DCOMAccessControl$SEGMENT,"CLSID_DCOMAccessControl");
    }
    public static MemorySegment CLSID_GlobalOptions$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$989.CLSID_GlobalOptions$SEGMENT,"CLSID_GlobalOptions");
    }
    public static MemorySegment CLSID_StdGlobalInterfaceTable$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$989.CLSID_StdGlobalInterfaceTable$SEGMENT,"CLSID_StdGlobalInterfaceTable");
    }
    public static MemorySegment CLSID_ComBinding$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$989.CLSID_ComBinding$SEGMENT,"CLSID_ComBinding");
    }
    public static MemorySegment CLSID_StdEvent$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$990.CLSID_StdEvent$SEGMENT,"CLSID_StdEvent");
    }
    public static MemorySegment CLSID_ManualResetEvent$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$990.CLSID_ManualResetEvent$SEGMENT,"CLSID_ManualResetEvent");
    }
    public static MemorySegment CLSID_SynchronizeContainer$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$990.CLSID_SynchronizeContainer$SEGMENT,"CLSID_SynchronizeContainer");
    }
    public static MemorySegment CLSID_AddrControl$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$990.CLSID_AddrControl$SEGMENT,"CLSID_AddrControl");
    }
    public static MemorySegment CLSID_CCDFormKrnl$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$990.CLSID_CCDFormKrnl$SEGMENT,"CLSID_CCDFormKrnl");
    }
    public static MemorySegment CLSID_CCDPropertyPage$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$990.CLSID_CCDPropertyPage$SEGMENT,"CLSID_CCDPropertyPage");
    }
    public static MemorySegment CLSID_CCDFormDialog$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$991.CLSID_CCDFormDialog$SEGMENT,"CLSID_CCDFormDialog");
    }
    public static MemorySegment CLSID_CCDCommandButton$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$991.CLSID_CCDCommandButton$SEGMENT,"CLSID_CCDCommandButton");
    }
    public static MemorySegment CLSID_CCDComboBox$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$991.CLSID_CCDComboBox$SEGMENT,"CLSID_CCDComboBox");
    }
    public static MemorySegment CLSID_CCDTextBox$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$991.CLSID_CCDTextBox$SEGMENT,"CLSID_CCDTextBox");
    }
    public static MemorySegment CLSID_CCDCheckBox$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$991.CLSID_CCDCheckBox$SEGMENT,"CLSID_CCDCheckBox");
    }
    public static MemorySegment CLSID_CCDLabel$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$991.CLSID_CCDLabel$SEGMENT,"CLSID_CCDLabel");
    }
    public static MemorySegment CLSID_CCDOptionButton$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$992.CLSID_CCDOptionButton$SEGMENT,"CLSID_CCDOptionButton");
    }
    public static MemorySegment CLSID_CCDListBox$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$992.CLSID_CCDListBox$SEGMENT,"CLSID_CCDListBox");
    }
    public static MemorySegment CLSID_CCDScrollBar$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$992.CLSID_CCDScrollBar$SEGMENT,"CLSID_CCDScrollBar");
    }
    public static MemorySegment CLSID_CCDGroupBox$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$992.CLSID_CCDGroupBox$SEGMENT,"CLSID_CCDGroupBox");
    }
    public static MemorySegment CLSID_CCDGeneralPropertyPage$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$992.CLSID_CCDGeneralPropertyPage$SEGMENT,"CLSID_CCDGeneralPropertyPage");
    }
    public static MemorySegment CLSID_CCDGenericPropertyPage$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$992.CLSID_CCDGenericPropertyPage$SEGMENT,"CLSID_CCDGenericPropertyPage");
    }
    public static MemorySegment CLSID_CCDFontPropertyPage$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$993.CLSID_CCDFontPropertyPage$SEGMENT,"CLSID_CCDFontPropertyPage");
    }
    public static MemorySegment CLSID_CCDColorPropertyPage$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$993.CLSID_CCDColorPropertyPage$SEGMENT,"CLSID_CCDColorPropertyPage");
    }
    public static MemorySegment CLSID_CCDLabelPropertyPage$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$993.CLSID_CCDLabelPropertyPage$SEGMENT,"CLSID_CCDLabelPropertyPage");
    }
    public static MemorySegment CLSID_CCDCheckBoxPropertyPage$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$993.CLSID_CCDCheckBoxPropertyPage$SEGMENT,"CLSID_CCDCheckBoxPropertyPage");
    }
    public static MemorySegment CLSID_CCDTextBoxPropertyPage$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$993.CLSID_CCDTextBoxPropertyPage$SEGMENT,"CLSID_CCDTextBoxPropertyPage");
    }
    public static MemorySegment CLSID_CCDOptionButtonPropertyPage$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$993.CLSID_CCDOptionButtonPropertyPage$SEGMENT,"CLSID_CCDOptionButtonPropertyPage");
    }
    public static MemorySegment CLSID_CCDListBoxPropertyPage$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$994.CLSID_CCDListBoxPropertyPage$SEGMENT,"CLSID_CCDListBoxPropertyPage");
    }
    public static MemorySegment CLSID_CCDCommandButtonPropertyPage$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$994.CLSID_CCDCommandButtonPropertyPage$SEGMENT,"CLSID_CCDCommandButtonPropertyPage");
    }
    public static MemorySegment CLSID_CCDComboBoxPropertyPage$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$994.CLSID_CCDComboBoxPropertyPage$SEGMENT,"CLSID_CCDComboBoxPropertyPage");
    }
    public static MemorySegment CLSID_CCDScrollBarPropertyPage$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$994.CLSID_CCDScrollBarPropertyPage$SEGMENT,"CLSID_CCDScrollBarPropertyPage");
    }
    public static MemorySegment CLSID_CCDGroupBoxPropertyPage$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$994.CLSID_CCDGroupBoxPropertyPage$SEGMENT,"CLSID_CCDGroupBoxPropertyPage");
    }
    public static MemorySegment CLSID_CCDXObjectPropertyPage$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$994.CLSID_CCDXObjectPropertyPage$SEGMENT,"CLSID_CCDXObjectPropertyPage");
    }
}


