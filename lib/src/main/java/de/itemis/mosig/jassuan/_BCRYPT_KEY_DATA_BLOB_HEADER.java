// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _BCRYPT_KEY_DATA_BLOB_HEADER {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("dwMagic"),
        C_LONG.withName("dwVersion"),
        C_LONG.withName("cbKeyData")
    ).withName("_BCRYPT_KEY_DATA_BLOB_HEADER");
    public static MemoryLayout $LAYOUT() {
        return _BCRYPT_KEY_DATA_BLOB_HEADER.$struct$LAYOUT;
    }
    static final VarHandle dwMagic$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMagic"));
    public static VarHandle dwMagic$VH() {
        return _BCRYPT_KEY_DATA_BLOB_HEADER.dwMagic$VH;
    }
    public static int dwMagic$get(MemorySegment seg) {
        return (int)_BCRYPT_KEY_DATA_BLOB_HEADER.dwMagic$VH.get(seg);
    }
    public static void dwMagic$set( MemorySegment seg, int x) {
        _BCRYPT_KEY_DATA_BLOB_HEADER.dwMagic$VH.set(seg, x);
    }
    public static int dwMagic$get(MemorySegment seg, long index) {
        return (int)_BCRYPT_KEY_DATA_BLOB_HEADER.dwMagic$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwMagic$set(MemorySegment seg, long index, int x) {
        _BCRYPT_KEY_DATA_BLOB_HEADER.dwMagic$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwVersion$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwVersion"));
    public static VarHandle dwVersion$VH() {
        return _BCRYPT_KEY_DATA_BLOB_HEADER.dwVersion$VH;
    }
    public static int dwVersion$get(MemorySegment seg) {
        return (int)_BCRYPT_KEY_DATA_BLOB_HEADER.dwVersion$VH.get(seg);
    }
    public static void dwVersion$set( MemorySegment seg, int x) {
        _BCRYPT_KEY_DATA_BLOB_HEADER.dwVersion$VH.set(seg, x);
    }
    public static int dwVersion$get(MemorySegment seg, long index) {
        return (int)_BCRYPT_KEY_DATA_BLOB_HEADER.dwVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwVersion$set(MemorySegment seg, long index, int x) {
        _BCRYPT_KEY_DATA_BLOB_HEADER.dwVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbKeyData$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbKeyData"));
    public static VarHandle cbKeyData$VH() {
        return _BCRYPT_KEY_DATA_BLOB_HEADER.cbKeyData$VH;
    }
    public static int cbKeyData$get(MemorySegment seg) {
        return (int)_BCRYPT_KEY_DATA_BLOB_HEADER.cbKeyData$VH.get(seg);
    }
    public static void cbKeyData$set( MemorySegment seg, int x) {
        _BCRYPT_KEY_DATA_BLOB_HEADER.cbKeyData$VH.set(seg, x);
    }
    public static int cbKeyData$get(MemorySegment seg, long index) {
        return (int)_BCRYPT_KEY_DATA_BLOB_HEADER.cbKeyData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbKeyData$set(MemorySegment seg, long index, int x) {
        _BCRYPT_KEY_DATA_BLOB_HEADER.cbKeyData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


