// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _RPC_ASYNC_STATE {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("Size"),
        C_LONG.withName("Signature"),
        C_LONG.withName("Lock"),
        C_LONG.withName("Flags"),
        C_POINTER.withName("StubInfo"),
        C_POINTER.withName("UserInfo"),
        C_POINTER.withName("RuntimeInfo"),
        C_INT.withName("Event"),
        C_INT.withName("NotificationType"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_POINTER.withName("NotificationRoutine"),
                C_POINTER.withName("hThread")
            ).withName("APC"),
            MemoryLayout.structLayout(
                C_POINTER.withName("hIOPort"),
                C_LONG.withName("dwNumberOfBytesTransferred"),
                MemoryLayout.paddingLayout(32),
                C_LONG_LONG.withName("dwCompletionKey"),
                C_POINTER.withName("lpOverlapped")
            ).withName("IOC"),
            MemoryLayout.structLayout(
                C_POINTER.withName("hWnd"),
                C_INT.withName("Msg"),
                MemoryLayout.paddingLayout(32)
            ).withName("HWND"),
            C_POINTER.withName("hEvent"),
            C_POINTER.withName("NotificationRoutine")
        ).withName("u"),
        MemoryLayout.sequenceLayout(4, C_LONG_LONG).withName("Reserved")
    ).withName("_RPC_ASYNC_STATE");
    public static MemoryLayout $LAYOUT() {
        return _RPC_ASYNC_STATE.$struct$LAYOUT;
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _RPC_ASYNC_STATE.Size$VH;
    }
    public static int Size$get(MemorySegment seg) {
        return (int)_RPC_ASYNC_STATE.Size$VH.get(seg);
    }
    public static void Size$set( MemorySegment seg, int x) {
        _RPC_ASYNC_STATE.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_RPC_ASYNC_STATE.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _RPC_ASYNC_STATE.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Signature$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Signature"));
    public static VarHandle Signature$VH() {
        return _RPC_ASYNC_STATE.Signature$VH;
    }
    public static int Signature$get(MemorySegment seg) {
        return (int)_RPC_ASYNC_STATE.Signature$VH.get(seg);
    }
    public static void Signature$set( MemorySegment seg, int x) {
        _RPC_ASYNC_STATE.Signature$VH.set(seg, x);
    }
    public static int Signature$get(MemorySegment seg, long index) {
        return (int)_RPC_ASYNC_STATE.Signature$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Signature$set(MemorySegment seg, long index, int x) {
        _RPC_ASYNC_STATE.Signature$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Lock$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Lock"));
    public static VarHandle Lock$VH() {
        return _RPC_ASYNC_STATE.Lock$VH;
    }
    public static int Lock$get(MemorySegment seg) {
        return (int)_RPC_ASYNC_STATE.Lock$VH.get(seg);
    }
    public static void Lock$set( MemorySegment seg, int x) {
        _RPC_ASYNC_STATE.Lock$VH.set(seg, x);
    }
    public static int Lock$get(MemorySegment seg, long index) {
        return (int)_RPC_ASYNC_STATE.Lock$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Lock$set(MemorySegment seg, long index, int x) {
        _RPC_ASYNC_STATE.Lock$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _RPC_ASYNC_STATE.Flags$VH;
    }
    public static int Flags$get(MemorySegment seg) {
        return (int)_RPC_ASYNC_STATE.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, int x) {
        _RPC_ASYNC_STATE.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_RPC_ASYNC_STATE.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _RPC_ASYNC_STATE.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle StubInfo$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("StubInfo")));
    public static VarHandle StubInfo$VH() {
        return _RPC_ASYNC_STATE.StubInfo$VH;
    }
    public static MemoryAddress StubInfo$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_RPC_ASYNC_STATE.StubInfo$VH.get(seg);
    }
    public static void StubInfo$set( MemorySegment seg, MemoryAddress x) {
        _RPC_ASYNC_STATE.StubInfo$VH.set(seg, x);
    }
    public static MemoryAddress StubInfo$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_RPC_ASYNC_STATE.StubInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StubInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        _RPC_ASYNC_STATE.StubInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle UserInfo$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("UserInfo")));
    public static VarHandle UserInfo$VH() {
        return _RPC_ASYNC_STATE.UserInfo$VH;
    }
    public static MemoryAddress UserInfo$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_RPC_ASYNC_STATE.UserInfo$VH.get(seg);
    }
    public static void UserInfo$set( MemorySegment seg, MemoryAddress x) {
        _RPC_ASYNC_STATE.UserInfo$VH.set(seg, x);
    }
    public static MemoryAddress UserInfo$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_RPC_ASYNC_STATE.UserInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UserInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        _RPC_ASYNC_STATE.UserInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RuntimeInfo$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("RuntimeInfo")));
    public static VarHandle RuntimeInfo$VH() {
        return _RPC_ASYNC_STATE.RuntimeInfo$VH;
    }
    public static MemoryAddress RuntimeInfo$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_RPC_ASYNC_STATE.RuntimeInfo$VH.get(seg);
    }
    public static void RuntimeInfo$set( MemorySegment seg, MemoryAddress x) {
        _RPC_ASYNC_STATE.RuntimeInfo$VH.set(seg, x);
    }
    public static MemoryAddress RuntimeInfo$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_RPC_ASYNC_STATE.RuntimeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RuntimeInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        _RPC_ASYNC_STATE.RuntimeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Event$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Event"));
    public static VarHandle Event$VH() {
        return _RPC_ASYNC_STATE.Event$VH;
    }
    public static int Event$get(MemorySegment seg) {
        return (int)_RPC_ASYNC_STATE.Event$VH.get(seg);
    }
    public static void Event$set( MemorySegment seg, int x) {
        _RPC_ASYNC_STATE.Event$VH.set(seg, x);
    }
    public static int Event$get(MemorySegment seg, long index) {
        return (int)_RPC_ASYNC_STATE.Event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Event$set(MemorySegment seg, long index, int x) {
        _RPC_ASYNC_STATE.Event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NotificationType$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("NotificationType"));
    public static VarHandle NotificationType$VH() {
        return _RPC_ASYNC_STATE.NotificationType$VH;
    }
    public static int NotificationType$get(MemorySegment seg) {
        return (int)_RPC_ASYNC_STATE.NotificationType$VH.get(seg);
    }
    public static void NotificationType$set( MemorySegment seg, int x) {
        _RPC_ASYNC_STATE.NotificationType$VH.set(seg, x);
    }
    public static int NotificationType$get(MemorySegment seg, long index) {
        return (int)_RPC_ASYNC_STATE.NotificationType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NotificationType$set(MemorySegment seg, long index, int x) {
        _RPC_ASYNC_STATE.NotificationType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class u {

        static final MemoryLayout u$union$LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_POINTER.withName("NotificationRoutine"),
                C_POINTER.withName("hThread")
            ).withName("APC"),
            MemoryLayout.structLayout(
                C_POINTER.withName("hIOPort"),
                C_LONG.withName("dwNumberOfBytesTransferred"),
                MemoryLayout.paddingLayout(32),
                C_LONG_LONG.withName("dwCompletionKey"),
                C_POINTER.withName("lpOverlapped")
            ).withName("IOC"),
            MemoryLayout.structLayout(
                C_POINTER.withName("hWnd"),
                C_INT.withName("Msg"),
                MemoryLayout.paddingLayout(32)
            ).withName("HWND"),
            C_POINTER.withName("hEvent"),
            C_POINTER.withName("NotificationRoutine")
        );
        public static MemoryLayout $LAYOUT() {
            return u.u$union$LAYOUT;
        }
        public static class APC {

            static final MemoryLayout u$APC$struct$LAYOUT = MemoryLayout.structLayout(
                C_POINTER.withName("NotificationRoutine"),
                C_POINTER.withName("hThread")
            );
            public static MemoryLayout $LAYOUT() {
                return APC.u$APC$struct$LAYOUT;
            }
            static final VarHandle NotificationRoutine$VH = MemoryHandles.asAddressVarHandle(u$APC$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("NotificationRoutine")));
            public static VarHandle NotificationRoutine$VH() {
                return APC.NotificationRoutine$VH;
            }
            public static MemoryAddress NotificationRoutine$get(MemorySegment seg) {
                return (jdk.incubator.foreign.MemoryAddress)APC.NotificationRoutine$VH.get(seg);
            }
            public static void NotificationRoutine$set( MemorySegment seg, MemoryAddress x) {
                APC.NotificationRoutine$VH.set(seg, x);
            }
            public static MemoryAddress NotificationRoutine$get(MemorySegment seg, long index) {
                return (jdk.incubator.foreign.MemoryAddress)APC.NotificationRoutine$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void NotificationRoutine$set(MemorySegment seg, long index, MemoryAddress x) {
                APC.NotificationRoutine$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine (MemorySegment segment) {
                return PFN_RPCNOTIFICATION_ROUTINE.ofAddress(NotificationRoutine$get(segment));
            }
            static final VarHandle hThread$VH = MemoryHandles.asAddressVarHandle(u$APC$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hThread")));
            public static VarHandle hThread$VH() {
                return APC.hThread$VH;
            }
            public static MemoryAddress hThread$get(MemorySegment seg) {
                return (jdk.incubator.foreign.MemoryAddress)APC.hThread$VH.get(seg);
            }
            public static void hThread$set( MemorySegment seg, MemoryAddress x) {
                APC.hThread$VH.set(seg, x);
            }
            public static MemoryAddress hThread$get(MemorySegment seg, long index) {
                return (jdk.incubator.foreign.MemoryAddress)APC.hThread$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void hThread$set(MemorySegment seg, long index, MemoryAddress x) {
                APC.hThread$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
            public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment allocateArray(int len, ResourceScope scope) {
                return allocateArray(len, SegmentAllocator.ofScope(scope));
            }
            public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment APC$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static class IOC {

            static final MemoryLayout u$IOC$struct$LAYOUT = MemoryLayout.structLayout(
                C_POINTER.withName("hIOPort"),
                C_LONG.withName("dwNumberOfBytesTransferred"),
                MemoryLayout.paddingLayout(32),
                C_LONG_LONG.withName("dwCompletionKey"),
                C_POINTER.withName("lpOverlapped")
            );
            public static MemoryLayout $LAYOUT() {
                return IOC.u$IOC$struct$LAYOUT;
            }
            static final VarHandle hIOPort$VH = MemoryHandles.asAddressVarHandle(u$IOC$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hIOPort")));
            public static VarHandle hIOPort$VH() {
                return IOC.hIOPort$VH;
            }
            public static MemoryAddress hIOPort$get(MemorySegment seg) {
                return (jdk.incubator.foreign.MemoryAddress)IOC.hIOPort$VH.get(seg);
            }
            public static void hIOPort$set( MemorySegment seg, MemoryAddress x) {
                IOC.hIOPort$VH.set(seg, x);
            }
            public static MemoryAddress hIOPort$get(MemorySegment seg, long index) {
                return (jdk.incubator.foreign.MemoryAddress)IOC.hIOPort$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void hIOPort$set(MemorySegment seg, long index, MemoryAddress x) {
                IOC.hIOPort$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle dwNumberOfBytesTransferred$VH = u$IOC$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwNumberOfBytesTransferred"));
            public static VarHandle dwNumberOfBytesTransferred$VH() {
                return IOC.dwNumberOfBytesTransferred$VH;
            }
            public static int dwNumberOfBytesTransferred$get(MemorySegment seg) {
                return (int)IOC.dwNumberOfBytesTransferred$VH.get(seg);
            }
            public static void dwNumberOfBytesTransferred$set( MemorySegment seg, int x) {
                IOC.dwNumberOfBytesTransferred$VH.set(seg, x);
            }
            public static int dwNumberOfBytesTransferred$get(MemorySegment seg, long index) {
                return (int)IOC.dwNumberOfBytesTransferred$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void dwNumberOfBytesTransferred$set(MemorySegment seg, long index, int x) {
                IOC.dwNumberOfBytesTransferred$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle dwCompletionKey$VH = u$IOC$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwCompletionKey"));
            public static VarHandle dwCompletionKey$VH() {
                return IOC.dwCompletionKey$VH;
            }
            public static long dwCompletionKey$get(MemorySegment seg) {
                return (long)IOC.dwCompletionKey$VH.get(seg);
            }
            public static void dwCompletionKey$set( MemorySegment seg, long x) {
                IOC.dwCompletionKey$VH.set(seg, x);
            }
            public static long dwCompletionKey$get(MemorySegment seg, long index) {
                return (long)IOC.dwCompletionKey$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void dwCompletionKey$set(MemorySegment seg, long index, long x) {
                IOC.dwCompletionKey$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle lpOverlapped$VH = MemoryHandles.asAddressVarHandle(u$IOC$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpOverlapped")));
            public static VarHandle lpOverlapped$VH() {
                return IOC.lpOverlapped$VH;
            }
            public static MemoryAddress lpOverlapped$get(MemorySegment seg) {
                return (jdk.incubator.foreign.MemoryAddress)IOC.lpOverlapped$VH.get(seg);
            }
            public static void lpOverlapped$set( MemorySegment seg, MemoryAddress x) {
                IOC.lpOverlapped$VH.set(seg, x);
            }
            public static MemoryAddress lpOverlapped$get(MemorySegment seg, long index) {
                return (jdk.incubator.foreign.MemoryAddress)IOC.lpOverlapped$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void lpOverlapped$set(MemorySegment seg, long index, MemoryAddress x) {
                IOC.lpOverlapped$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
            public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment allocateArray(int len, ResourceScope scope) {
                return allocateArray(len, SegmentAllocator.ofScope(scope));
            }
            public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment IOC$slice(MemorySegment seg) {
            return seg.asSlice(0, 32);
        }
        public static class HWND {

            static final MemoryLayout u$HWND$struct$LAYOUT = MemoryLayout.structLayout(
                C_POINTER.withName("hWnd"),
                C_INT.withName("Msg"),
                MemoryLayout.paddingLayout(32)
            );
            public static MemoryLayout $LAYOUT() {
                return HWND.u$HWND$struct$LAYOUT;
            }
            static final VarHandle hWnd$VH = MemoryHandles.asAddressVarHandle(u$HWND$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hWnd")));
            public static VarHandle hWnd$VH() {
                return HWND.hWnd$VH;
            }
            public static MemoryAddress hWnd$get(MemorySegment seg) {
                return (jdk.incubator.foreign.MemoryAddress)HWND.hWnd$VH.get(seg);
            }
            public static void hWnd$set( MemorySegment seg, MemoryAddress x) {
                HWND.hWnd$VH.set(seg, x);
            }
            public static MemoryAddress hWnd$get(MemorySegment seg, long index) {
                return (jdk.incubator.foreign.MemoryAddress)HWND.hWnd$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void hWnd$set(MemorySegment seg, long index, MemoryAddress x) {
                HWND.hWnd$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle Msg$VH = u$HWND$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Msg"));
            public static VarHandle Msg$VH() {
                return HWND.Msg$VH;
            }
            public static int Msg$get(MemorySegment seg) {
                return (int)HWND.Msg$VH.get(seg);
            }
            public static void Msg$set( MemorySegment seg, int x) {
                HWND.Msg$VH.set(seg, x);
            }
            public static int Msg$get(MemorySegment seg, long index) {
                return (int)HWND.Msg$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void Msg$set(MemorySegment seg, long index, int x) {
                HWND.Msg$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
            public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment allocateArray(int len, ResourceScope scope) {
                return allocateArray(len, SegmentAllocator.ofScope(scope));
            }
            public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment HWND$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        static final VarHandle hEvent$VH = MemoryHandles.asAddressVarHandle(u$union$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hEvent")));
        public static VarHandle hEvent$VH() {
            return u.hEvent$VH;
        }
        public static MemoryAddress hEvent$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)u.hEvent$VH.get(seg);
        }
        public static void hEvent$set( MemorySegment seg, MemoryAddress x) {
            u.hEvent$VH.set(seg, x);
        }
        public static MemoryAddress hEvent$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)u.hEvent$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void hEvent$set(MemorySegment seg, long index, MemoryAddress x) {
            u.hEvent$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle NotificationRoutine$VH = MemoryHandles.asAddressVarHandle(u$union$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("NotificationRoutine")));
        public static VarHandle NotificationRoutine$VH() {
            return u.NotificationRoutine$VH;
        }
        public static MemoryAddress NotificationRoutine$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)u.NotificationRoutine$VH.get(seg);
        }
        public static void NotificationRoutine$set( MemorySegment seg, MemoryAddress x) {
            u.NotificationRoutine$VH.set(seg, x);
        }
        public static MemoryAddress NotificationRoutine$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)u.NotificationRoutine$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void NotificationRoutine$set(MemorySegment seg, long index, MemoryAddress x) {
            u.NotificationRoutine$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine (MemorySegment segment) {
            return PFN_RPCNOTIFICATION_ROUTINE.ofAddress(NotificationRoutine$get(segment));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.ofScope(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment u$slice(MemorySegment seg) {
        return seg.asSlice(48, 32);
    }
    public static MemorySegment Reserved$slice(MemorySegment seg) {
        return seg.asSlice(80, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


