// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IXMLElement2Vtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetTypeInfoCount"),
        C_POINTER.withName("GetTypeInfo"),
        C_POINTER.withName("GetIDsOfNames"),
        C_POINTER.withName("Invoke"),
        C_POINTER.withName("get_tagName"),
        C_POINTER.withName("put_tagName"),
        C_POINTER.withName("get_parent"),
        C_POINTER.withName("setAttribute"),
        C_POINTER.withName("getAttribute"),
        C_POINTER.withName("removeAttribute"),
        C_POINTER.withName("get_children"),
        C_POINTER.withName("get_type"),
        C_POINTER.withName("get_text"),
        C_POINTER.withName("put_text"),
        C_POINTER.withName("addChild"),
        C_POINTER.withName("removeChild"),
        C_POINTER.withName("get_attributes")
    ).withName("IXMLElement2Vtbl");
    public static MemoryLayout $LAYOUT() {
        return IXMLElement2Vtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLElement2Vtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IXMLElement2Vtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IXMLElement2Vtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IXMLElement2Vtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IXMLElement2Vtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IXMLElement2Vtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElement2Vtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLElement2Vtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IXMLElement2Vtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IXMLElement2Vtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IXMLElement2Vtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IXMLElement2Vtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IXMLElement2Vtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElement2Vtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLElement2Vtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IXMLElement2Vtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IXMLElement2Vtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IXMLElement2Vtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IXMLElement2Vtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IXMLElement2Vtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElement2Vtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor GetTypeInfoCount$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetTypeInfoCount$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLElement2Vtbl.GetTypeInfoCount$FUNC, false
    );
    public interface GetTypeInfoCount {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetTypeInfoCount fi) {
            return RuntimeHelper.upcallStub(GetTypeInfoCount.class, fi, IXMLElement2Vtbl.GetTypeInfoCount$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetTypeInfoCount fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetTypeInfoCount.class, fi, IXMLElement2Vtbl.GetTypeInfoCount$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetTypeInfoCount ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLElement2Vtbl.GetTypeInfoCount$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoCount$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfoCount")));
    public static VarHandle GetTypeInfoCount$VH() {
        return IXMLElement2Vtbl.GetTypeInfoCount$VH;
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.GetTypeInfoCount$VH.get(seg);
    }
    public static void GetTypeInfoCount$set( MemorySegment seg, MemoryAddress x) {
        IXMLElement2Vtbl.GetTypeInfoCount$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.GetTypeInfoCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElement2Vtbl.GetTypeInfoCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount (MemorySegment segment) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment));
    }
    static final FunctionDescriptor GetTypeInfo$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle GetTypeInfo$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        IXMLElement2Vtbl.GetTypeInfo$FUNC, false
    );
    public interface GetTypeInfo {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(GetTypeInfo fi) {
            return RuntimeHelper.upcallStub(GetTypeInfo.class, fi, IXMLElement2Vtbl.GetTypeInfo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetTypeInfo fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetTypeInfo.class, fi, IXMLElement2Vtbl.GetTypeInfo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetTypeInfo ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)IXMLElement2Vtbl.GetTypeInfo$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfo$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfo")));
    public static VarHandle GetTypeInfo$VH() {
        return IXMLElement2Vtbl.GetTypeInfo$VH;
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.GetTypeInfo$VH.get(seg);
    }
    public static void GetTypeInfo$set( MemorySegment seg, MemoryAddress x) {
        IXMLElement2Vtbl.GetTypeInfo$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.GetTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElement2Vtbl.GetTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo (MemorySegment segment) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment));
    }
    static final FunctionDescriptor GetIDsOfNames$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle GetIDsOfNames$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        IXMLElement2Vtbl.GetIDsOfNames$FUNC, false
    );
    public interface GetIDsOfNames {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, int x4, jdk.incubator.foreign.MemoryAddress x5);
        static MemoryAddress allocate(GetIDsOfNames fi) {
            return RuntimeHelper.upcallStub(GetIDsOfNames.class, fi, IXMLElement2Vtbl.GetIDsOfNames$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetIDsOfNames fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetIDsOfNames.class, fi, IXMLElement2Vtbl.GetIDsOfNames$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetIDsOfNames ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, int x4, jdk.incubator.foreign.MemoryAddress x5) -> {
                try {
                    return (int)IXMLElement2Vtbl.GetIDsOfNames$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetIDsOfNames$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetIDsOfNames")));
    public static VarHandle GetIDsOfNames$VH() {
        return IXMLElement2Vtbl.GetIDsOfNames$VH;
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.GetIDsOfNames$VH.get(seg);
    }
    public static void GetIDsOfNames$set( MemorySegment seg, MemoryAddress x) {
        IXMLElement2Vtbl.GetIDsOfNames$VH.set(seg, x);
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.GetIDsOfNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElement2Vtbl.GetIDsOfNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames (MemorySegment segment) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment));
    }
    static final FunctionDescriptor Invoke$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_SHORT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle Invoke$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ISLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLElement2Vtbl.Invoke$FUNC, false
    );
    public interface Invoke {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3, short x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8);
        static MemoryAddress allocate(Invoke fi) {
            return RuntimeHelper.upcallStub(Invoke.class, fi, IXMLElement2Vtbl.Invoke$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ISLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Invoke fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Invoke.class, fi, IXMLElement2Vtbl.Invoke$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ISLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Invoke ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3, short x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8) -> {
                try {
                    return (int)IXMLElement2Vtbl.Invoke$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6, x7, x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Invoke$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Invoke")));
    public static VarHandle Invoke$VH() {
        return IXMLElement2Vtbl.Invoke$VH;
    }
    public static MemoryAddress Invoke$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.Invoke$VH.get(seg);
    }
    public static void Invoke$set( MemorySegment seg, MemoryAddress x) {
        IXMLElement2Vtbl.Invoke$VH.set(seg, x);
    }
    public static MemoryAddress Invoke$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.Invoke$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElement2Vtbl.Invoke$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke (MemorySegment segment) {
        return Invoke.ofAddress(Invoke$get(segment));
    }
    static final FunctionDescriptor get_tagName$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_tagName$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLElement2Vtbl.get_tagName$FUNC, false
    );
    public interface get_tagName {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_tagName fi) {
            return RuntimeHelper.upcallStub(get_tagName.class, fi, IXMLElement2Vtbl.get_tagName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_tagName fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_tagName.class, fi, IXMLElement2Vtbl.get_tagName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_tagName ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLElement2Vtbl.get_tagName$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_tagName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_tagName")));
    public static VarHandle get_tagName$VH() {
        return IXMLElement2Vtbl.get_tagName$VH;
    }
    public static MemoryAddress get_tagName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.get_tagName$VH.get(seg);
    }
    public static void get_tagName$set( MemorySegment seg, MemoryAddress x) {
        IXMLElement2Vtbl.get_tagName$VH.set(seg, x);
    }
    public static MemoryAddress get_tagName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.get_tagName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_tagName$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElement2Vtbl.get_tagName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_tagName get_tagName (MemorySegment segment) {
        return get_tagName.ofAddress(get_tagName$get(segment));
    }
    static final FunctionDescriptor put_tagName$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle put_tagName$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLElement2Vtbl.put_tagName$FUNC, false
    );
    public interface put_tagName {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(put_tagName fi) {
            return RuntimeHelper.upcallStub(put_tagName.class, fi, IXMLElement2Vtbl.put_tagName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(put_tagName fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(put_tagName.class, fi, IXMLElement2Vtbl.put_tagName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static put_tagName ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLElement2Vtbl.put_tagName$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_tagName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("put_tagName")));
    public static VarHandle put_tagName$VH() {
        return IXMLElement2Vtbl.put_tagName$VH;
    }
    public static MemoryAddress put_tagName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.put_tagName$VH.get(seg);
    }
    public static void put_tagName$set( MemorySegment seg, MemoryAddress x) {
        IXMLElement2Vtbl.put_tagName$VH.set(seg, x);
    }
    public static MemoryAddress put_tagName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.put_tagName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_tagName$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElement2Vtbl.put_tagName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_tagName put_tagName (MemorySegment segment) {
        return put_tagName.ofAddress(put_tagName$get(segment));
    }
    static final FunctionDescriptor get_parent$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_parent$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLElement2Vtbl.get_parent$FUNC, false
    );
    public interface get_parent {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_parent fi) {
            return RuntimeHelper.upcallStub(get_parent.class, fi, IXMLElement2Vtbl.get_parent$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_parent fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_parent.class, fi, IXMLElement2Vtbl.get_parent$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_parent ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLElement2Vtbl.get_parent$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_parent$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_parent")));
    public static VarHandle get_parent$VH() {
        return IXMLElement2Vtbl.get_parent$VH;
    }
    public static MemoryAddress get_parent$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.get_parent$VH.get(seg);
    }
    public static void get_parent$set( MemorySegment seg, MemoryAddress x) {
        IXMLElement2Vtbl.get_parent$VH.set(seg, x);
    }
    public static MemoryAddress get_parent$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.get_parent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_parent$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElement2Vtbl.get_parent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_parent get_parent (MemorySegment segment) {
        return get_parent.ofAddress(get_parent$get(segment));
    }
    static final FunctionDescriptor setAttribute$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    C_SHORT.withName("vt"),
                    C_SHORT.withName("wReserved1"),
                    C_SHORT.withName("wReserved2"),
                    C_SHORT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        C_LONG_LONG.withName("llVal"),
                        C_LONG.withName("lVal"),
                        C_CHAR.withName("bVal"),
                        C_SHORT.withName("iVal"),
                        C_FLOAT.withName("fltVal"),
                        C_DOUBLE.withName("dblVal"),
                        C_SHORT.withName("boolVal"),
                        C_LONG.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                C_LONG.withName("Lo"),
                                C_LONG.withName("Hi")
                            ).withName("$anon$0"),
                            C_LONG_LONG.withName("int64")
                        ).withName("cyVal"),
                        C_DOUBLE.withName("date"),
                        C_POINTER.withName("bstrVal"),
                        C_POINTER.withName("punkVal"),
                        C_POINTER.withName("pdispVal"),
                        C_POINTER.withName("parray"),
                        C_POINTER.withName("pbVal"),
                        C_POINTER.withName("piVal"),
                        C_POINTER.withName("plVal"),
                        C_POINTER.withName("pllVal"),
                        C_POINTER.withName("pfltVal"),
                        C_POINTER.withName("pdblVal"),
                        C_POINTER.withName("pboolVal"),
                        C_POINTER.withName("pscode"),
                        C_POINTER.withName("pcyVal"),
                        C_POINTER.withName("pdate"),
                        C_POINTER.withName("pbstrVal"),
                        C_POINTER.withName("ppunkVal"),
                        C_POINTER.withName("ppdispVal"),
                        C_POINTER.withName("pparray"),
                        C_POINTER.withName("pvarVal"),
                        C_POINTER.withName("byref"),
                        C_CHAR.withName("cVal"),
                        C_SHORT.withName("uiVal"),
                        C_LONG.withName("ulVal"),
                        C_LONG_LONG.withName("ullVal"),
                        C_INT.withName("intVal"),
                        C_INT.withName("uintVal"),
                        C_POINTER.withName("pdecVal"),
                        C_POINTER.withName("pcVal"),
                        C_POINTER.withName("puiVal"),
                        C_POINTER.withName("pulVal"),
                        C_POINTER.withName("pullVal"),
                        C_POINTER.withName("pintVal"),
                        C_POINTER.withName("puintVal"),
                        MemoryLayout.structLayout(
                            C_POINTER.withName("pvRecord"),
                            C_POINTER.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    C_SHORT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_CHAR.withName("scale"),
                            C_CHAR.withName("sign")
                        ).withName("$anon$0"),
                        C_SHORT.withName("signscale")
                    ).withName("$anon$0"),
                    C_LONG.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_LONG.withName("Lo32"),
                            C_LONG.withName("Mid32")
                        ).withName("$anon$0"),
                        C_LONG_LONG.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT")
    );
    static final MethodHandle setAttribute$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        IXMLElement2Vtbl.setAttribute$FUNC, false
    );
    public interface setAttribute {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemorySegment x2);
        static MemoryAddress allocate(setAttribute fi) {
            return RuntimeHelper.upcallStub(setAttribute.class, fi, IXMLElement2Vtbl.setAttribute$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I");
        }
        static MemoryAddress allocate(setAttribute fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(setAttribute.class, fi, IXMLElement2Vtbl.setAttribute$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I", scope);
        }
        static setAttribute ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemorySegment x2) -> {
                try {
                    return (int)IXMLElement2Vtbl.setAttribute$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle setAttribute$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("setAttribute")));
    public static VarHandle setAttribute$VH() {
        return IXMLElement2Vtbl.setAttribute$VH;
    }
    public static MemoryAddress setAttribute$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.setAttribute$VH.get(seg);
    }
    public static void setAttribute$set( MemorySegment seg, MemoryAddress x) {
        IXMLElement2Vtbl.setAttribute$VH.set(seg, x);
    }
    public static MemoryAddress setAttribute$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.setAttribute$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void setAttribute$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElement2Vtbl.setAttribute$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static setAttribute setAttribute (MemorySegment segment) {
        return setAttribute.ofAddress(setAttribute$get(segment));
    }
    static final FunctionDescriptor getAttribute$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle getAttribute$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLElement2Vtbl.getAttribute$FUNC, false
    );
    public interface getAttribute {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(getAttribute fi) {
            return RuntimeHelper.upcallStub(getAttribute.class, fi, IXMLElement2Vtbl.getAttribute$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(getAttribute fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(getAttribute.class, fi, IXMLElement2Vtbl.getAttribute$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static getAttribute ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IXMLElement2Vtbl.getAttribute$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle getAttribute$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("getAttribute")));
    public static VarHandle getAttribute$VH() {
        return IXMLElement2Vtbl.getAttribute$VH;
    }
    public static MemoryAddress getAttribute$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.getAttribute$VH.get(seg);
    }
    public static void getAttribute$set( MemorySegment seg, MemoryAddress x) {
        IXMLElement2Vtbl.getAttribute$VH.set(seg, x);
    }
    public static MemoryAddress getAttribute$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.getAttribute$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void getAttribute$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElement2Vtbl.getAttribute$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static getAttribute getAttribute (MemorySegment segment) {
        return getAttribute.ofAddress(getAttribute$get(segment));
    }
    static final FunctionDescriptor removeAttribute$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle removeAttribute$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLElement2Vtbl.removeAttribute$FUNC, false
    );
    public interface removeAttribute {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(removeAttribute fi) {
            return RuntimeHelper.upcallStub(removeAttribute.class, fi, IXMLElement2Vtbl.removeAttribute$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(removeAttribute fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(removeAttribute.class, fi, IXMLElement2Vtbl.removeAttribute$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static removeAttribute ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLElement2Vtbl.removeAttribute$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle removeAttribute$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("removeAttribute")));
    public static VarHandle removeAttribute$VH() {
        return IXMLElement2Vtbl.removeAttribute$VH;
    }
    public static MemoryAddress removeAttribute$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.removeAttribute$VH.get(seg);
    }
    public static void removeAttribute$set( MemorySegment seg, MemoryAddress x) {
        IXMLElement2Vtbl.removeAttribute$VH.set(seg, x);
    }
    public static MemoryAddress removeAttribute$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.removeAttribute$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void removeAttribute$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElement2Vtbl.removeAttribute$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static removeAttribute removeAttribute (MemorySegment segment) {
        return removeAttribute.ofAddress(removeAttribute$get(segment));
    }
    static final FunctionDescriptor get_children$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_children$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLElement2Vtbl.get_children$FUNC, false
    );
    public interface get_children {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_children fi) {
            return RuntimeHelper.upcallStub(get_children.class, fi, IXMLElement2Vtbl.get_children$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_children fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_children.class, fi, IXMLElement2Vtbl.get_children$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_children ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLElement2Vtbl.get_children$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_children$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_children")));
    public static VarHandle get_children$VH() {
        return IXMLElement2Vtbl.get_children$VH;
    }
    public static MemoryAddress get_children$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.get_children$VH.get(seg);
    }
    public static void get_children$set( MemorySegment seg, MemoryAddress x) {
        IXMLElement2Vtbl.get_children$VH.set(seg, x);
    }
    public static MemoryAddress get_children$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.get_children$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_children$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElement2Vtbl.get_children$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_children get_children (MemorySegment segment) {
        return get_children.ofAddress(get_children$get(segment));
    }
    static final FunctionDescriptor get_type$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_type$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLElement2Vtbl.get_type$FUNC, false
    );
    public interface get_type {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_type fi) {
            return RuntimeHelper.upcallStub(get_type.class, fi, IXMLElement2Vtbl.get_type$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_type fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_type.class, fi, IXMLElement2Vtbl.get_type$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_type ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLElement2Vtbl.get_type$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_type$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_type")));
    public static VarHandle get_type$VH() {
        return IXMLElement2Vtbl.get_type$VH;
    }
    public static MemoryAddress get_type$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.get_type$VH.get(seg);
    }
    public static void get_type$set( MemorySegment seg, MemoryAddress x) {
        IXMLElement2Vtbl.get_type$VH.set(seg, x);
    }
    public static MemoryAddress get_type$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.get_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_type$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElement2Vtbl.get_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_type get_type (MemorySegment segment) {
        return get_type.ofAddress(get_type$get(segment));
    }
    static final FunctionDescriptor get_text$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_text$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLElement2Vtbl.get_text$FUNC, false
    );
    public interface get_text {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_text fi) {
            return RuntimeHelper.upcallStub(get_text.class, fi, IXMLElement2Vtbl.get_text$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_text fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_text.class, fi, IXMLElement2Vtbl.get_text$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_text ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLElement2Vtbl.get_text$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_text$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_text")));
    public static VarHandle get_text$VH() {
        return IXMLElement2Vtbl.get_text$VH;
    }
    public static MemoryAddress get_text$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.get_text$VH.get(seg);
    }
    public static void get_text$set( MemorySegment seg, MemoryAddress x) {
        IXMLElement2Vtbl.get_text$VH.set(seg, x);
    }
    public static MemoryAddress get_text$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.get_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_text$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElement2Vtbl.get_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_text get_text (MemorySegment segment) {
        return get_text.ofAddress(get_text$get(segment));
    }
    static final FunctionDescriptor put_text$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle put_text$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLElement2Vtbl.put_text$FUNC, false
    );
    public interface put_text {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(put_text fi) {
            return RuntimeHelper.upcallStub(put_text.class, fi, IXMLElement2Vtbl.put_text$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(put_text fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(put_text.class, fi, IXMLElement2Vtbl.put_text$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static put_text ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLElement2Vtbl.put_text$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_text$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("put_text")));
    public static VarHandle put_text$VH() {
        return IXMLElement2Vtbl.put_text$VH;
    }
    public static MemoryAddress put_text$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.put_text$VH.get(seg);
    }
    public static void put_text$set( MemorySegment seg, MemoryAddress x) {
        IXMLElement2Vtbl.put_text$VH.set(seg, x);
    }
    public static MemoryAddress put_text$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.put_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_text$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElement2Vtbl.put_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_text put_text (MemorySegment segment) {
        return put_text.ofAddress(put_text$get(segment));
    }
    static final FunctionDescriptor addChild$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final MethodHandle addChild$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        IXMLElement2Vtbl.addChild$FUNC, false
    );
    public interface addChild {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, int x3);
        static MemoryAddress allocate(addChild fi) {
            return RuntimeHelper.upcallStub(addChild.class, fi, IXMLElement2Vtbl.addChild$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I");
        }
        static MemoryAddress allocate(addChild fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(addChild.class, fi, IXMLElement2Vtbl.addChild$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I", scope);
        }
        static addChild ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, int x3) -> {
                try {
                    return (int)IXMLElement2Vtbl.addChild$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle addChild$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("addChild")));
    public static VarHandle addChild$VH() {
        return IXMLElement2Vtbl.addChild$VH;
    }
    public static MemoryAddress addChild$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.addChild$VH.get(seg);
    }
    public static void addChild$set( MemorySegment seg, MemoryAddress x) {
        IXMLElement2Vtbl.addChild$VH.set(seg, x);
    }
    public static MemoryAddress addChild$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.addChild$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void addChild$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElement2Vtbl.addChild$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static addChild addChild (MemorySegment segment) {
        return addChild.ofAddress(addChild$get(segment));
    }
    static final FunctionDescriptor removeChild$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle removeChild$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLElement2Vtbl.removeChild$FUNC, false
    );
    public interface removeChild {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(removeChild fi) {
            return RuntimeHelper.upcallStub(removeChild.class, fi, IXMLElement2Vtbl.removeChild$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(removeChild fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(removeChild.class, fi, IXMLElement2Vtbl.removeChild$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static removeChild ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLElement2Vtbl.removeChild$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle removeChild$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("removeChild")));
    public static VarHandle removeChild$VH() {
        return IXMLElement2Vtbl.removeChild$VH;
    }
    public static MemoryAddress removeChild$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.removeChild$VH.get(seg);
    }
    public static void removeChild$set( MemorySegment seg, MemoryAddress x) {
        IXMLElement2Vtbl.removeChild$VH.set(seg, x);
    }
    public static MemoryAddress removeChild$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.removeChild$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void removeChild$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElement2Vtbl.removeChild$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static removeChild removeChild (MemorySegment segment) {
        return removeChild.ofAddress(removeChild$get(segment));
    }
    static final FunctionDescriptor get_attributes$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_attributes$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLElement2Vtbl.get_attributes$FUNC, false
    );
    public interface get_attributes {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_attributes fi) {
            return RuntimeHelper.upcallStub(get_attributes.class, fi, IXMLElement2Vtbl.get_attributes$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_attributes fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_attributes.class, fi, IXMLElement2Vtbl.get_attributes$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_attributes ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLElement2Vtbl.get_attributes$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_attributes$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_attributes")));
    public static VarHandle get_attributes$VH() {
        return IXMLElement2Vtbl.get_attributes$VH;
    }
    public static MemoryAddress get_attributes$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.get_attributes$VH.get(seg);
    }
    public static void get_attributes$set( MemorySegment seg, MemoryAddress x) {
        IXMLElement2Vtbl.get_attributes$VH.set(seg, x);
    }
    public static MemoryAddress get_attributes$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLElement2Vtbl.get_attributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_attributes$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLElement2Vtbl.get_attributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_attributes get_attributes (MemorySegment segment) {
        return get_attributes.ofAddress(get_attributes$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


