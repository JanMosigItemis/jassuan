// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$267 {

    static final MemoryLayout GUID_PROCESSOR_PARKING_CORE_OVERRIDE$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_PARKING_CORE_OVERRIDE$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "GUID_PROCESSOR_PARKING_CORE_OVERRIDE", constants$267.GUID_PROCESSOR_PARKING_CORE_OVERRIDE$LAYOUT);
    static final MemoryLayout GUID_PROCESSOR_PARKING_PERF_STATE$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_PARKING_PERF_STATE$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "GUID_PROCESSOR_PARKING_PERF_STATE", constants$267.GUID_PROCESSOR_PARKING_PERF_STATE$LAYOUT);
    static final MemoryLayout GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD", constants$267.GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$LAYOUT);
    static final MemoryLayout GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD", constants$267.GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$LAYOUT);
    static final MemoryLayout GUID_PROCESSOR_PERF_HISTORY$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_PERF_HISTORY$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "GUID_PROCESSOR_PERF_HISTORY", constants$267.GUID_PROCESSOR_PERF_HISTORY$LAYOUT);
    static final MemoryLayout GUID_PROCESSOR_PERF_LATENCY_HINT$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_PERF_LATENCY_HINT$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "GUID_PROCESSOR_PERF_LATENCY_HINT", constants$267.GUID_PROCESSOR_PERF_LATENCY_HINT$LAYOUT);
}


