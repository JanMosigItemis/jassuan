// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _RTL_VERIFIER_THUNK_DESCRIPTOR {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("ThunkName"),
        C_POINTER.withName("ThunkOldAddress"),
        C_POINTER.withName("ThunkNewAddress")
    ).withName("_RTL_VERIFIER_THUNK_DESCRIPTOR");
    public static MemoryLayout $LAYOUT() {
        return _RTL_VERIFIER_THUNK_DESCRIPTOR.$struct$LAYOUT;
    }
    static final VarHandle ThunkName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ThunkName")));
    public static VarHandle ThunkName$VH() {
        return _RTL_VERIFIER_THUNK_DESCRIPTOR.ThunkName$VH;
    }
    public static MemoryAddress ThunkName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_THUNK_DESCRIPTOR.ThunkName$VH.get(seg);
    }
    public static void ThunkName$set( MemorySegment seg, MemoryAddress x) {
        _RTL_VERIFIER_THUNK_DESCRIPTOR.ThunkName$VH.set(seg, x);
    }
    public static MemoryAddress ThunkName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_THUNK_DESCRIPTOR.ThunkName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ThunkName$set(MemorySegment seg, long index, MemoryAddress x) {
        _RTL_VERIFIER_THUNK_DESCRIPTOR.ThunkName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ThunkOldAddress$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ThunkOldAddress")));
    public static VarHandle ThunkOldAddress$VH() {
        return _RTL_VERIFIER_THUNK_DESCRIPTOR.ThunkOldAddress$VH;
    }
    public static MemoryAddress ThunkOldAddress$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_THUNK_DESCRIPTOR.ThunkOldAddress$VH.get(seg);
    }
    public static void ThunkOldAddress$set( MemorySegment seg, MemoryAddress x) {
        _RTL_VERIFIER_THUNK_DESCRIPTOR.ThunkOldAddress$VH.set(seg, x);
    }
    public static MemoryAddress ThunkOldAddress$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_THUNK_DESCRIPTOR.ThunkOldAddress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ThunkOldAddress$set(MemorySegment seg, long index, MemoryAddress x) {
        _RTL_VERIFIER_THUNK_DESCRIPTOR.ThunkOldAddress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ThunkNewAddress$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ThunkNewAddress")));
    public static VarHandle ThunkNewAddress$VH() {
        return _RTL_VERIFIER_THUNK_DESCRIPTOR.ThunkNewAddress$VH;
    }
    public static MemoryAddress ThunkNewAddress$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_THUNK_DESCRIPTOR.ThunkNewAddress$VH.get(seg);
    }
    public static void ThunkNewAddress$set( MemorySegment seg, MemoryAddress x) {
        _RTL_VERIFIER_THUNK_DESCRIPTOR.ThunkNewAddress$VH.set(seg, x);
    }
    public static MemoryAddress ThunkNewAddress$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_RTL_VERIFIER_THUNK_DESCRIPTOR.ThunkNewAddress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ThunkNewAddress$set(MemorySegment seg, long index, MemoryAddress x) {
        _RTL_VERIFIER_THUNK_DESCRIPTOR.ThunkNewAddress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


