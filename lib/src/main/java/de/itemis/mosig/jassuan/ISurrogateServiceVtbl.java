// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class ISurrogateServiceVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("Init"),
        C_POINTER.withName("ApplicationLaunch"),
        C_POINTER.withName("ApplicationFree"),
        C_POINTER.withName("CatalogRefresh"),
        C_POINTER.withName("ProcessShutdown")
    ).withName("ISurrogateServiceVtbl");
    public static MemoryLayout $LAYOUT() {
        return ISurrogateServiceVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ISurrogateServiceVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, ISurrogateServiceVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, ISurrogateServiceVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ISurrogateServiceVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return ISurrogateServiceVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ISurrogateServiceVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        ISurrogateServiceVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ISurrogateServiceVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        ISurrogateServiceVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ISurrogateServiceVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, ISurrogateServiceVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, ISurrogateServiceVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)ISurrogateServiceVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return ISurrogateServiceVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ISurrogateServiceVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        ISurrogateServiceVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ISurrogateServiceVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        ISurrogateServiceVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ISurrogateServiceVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, ISurrogateServiceVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, ISurrogateServiceVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)ISurrogateServiceVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return ISurrogateServiceVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ISurrogateServiceVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        ISurrogateServiceVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ISurrogateServiceVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        ISurrogateServiceVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor Init$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle Init$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ISurrogateServiceVtbl.Init$FUNC, false
    );
    public interface Init {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(Init fi) {
            return RuntimeHelper.upcallStub(Init.class, fi, ISurrogateServiceVtbl.Init$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Init fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Init.class, fi, ISurrogateServiceVtbl.Init$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Init ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)ISurrogateServiceVtbl.Init$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Init$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Init")));
    public static VarHandle Init$VH() {
        return ISurrogateServiceVtbl.Init$VH;
    }
    public static MemoryAddress Init$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ISurrogateServiceVtbl.Init$VH.get(seg);
    }
    public static void Init$set( MemorySegment seg, MemoryAddress x) {
        ISurrogateServiceVtbl.Init$VH.set(seg, x);
    }
    public static MemoryAddress Init$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ISurrogateServiceVtbl.Init$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Init$set(MemorySegment seg, long index, MemoryAddress x) {
        ISurrogateServiceVtbl.Init$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Init Init (MemorySegment segment) {
        return Init.ofAddress(Init$get(segment));
    }
    static final FunctionDescriptor ApplicationLaunch$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle ApplicationLaunch$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        ISurrogateServiceVtbl.ApplicationLaunch$FUNC, false
    );
    public interface ApplicationLaunch {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2);
        static MemoryAddress allocate(ApplicationLaunch fi) {
            return RuntimeHelper.upcallStub(ApplicationLaunch.class, fi, ISurrogateServiceVtbl.ApplicationLaunch$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(ApplicationLaunch fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(ApplicationLaunch.class, fi, ISurrogateServiceVtbl.ApplicationLaunch$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static ApplicationLaunch ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2) -> {
                try {
                    return (int)ISurrogateServiceVtbl.ApplicationLaunch$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ApplicationLaunch$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ApplicationLaunch")));
    public static VarHandle ApplicationLaunch$VH() {
        return ISurrogateServiceVtbl.ApplicationLaunch$VH;
    }
    public static MemoryAddress ApplicationLaunch$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ISurrogateServiceVtbl.ApplicationLaunch$VH.get(seg);
    }
    public static void ApplicationLaunch$set( MemorySegment seg, MemoryAddress x) {
        ISurrogateServiceVtbl.ApplicationLaunch$VH.set(seg, x);
    }
    public static MemoryAddress ApplicationLaunch$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ISurrogateServiceVtbl.ApplicationLaunch$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ApplicationLaunch$set(MemorySegment seg, long index, MemoryAddress x) {
        ISurrogateServiceVtbl.ApplicationLaunch$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ApplicationLaunch ApplicationLaunch (MemorySegment segment) {
        return ApplicationLaunch.ofAddress(ApplicationLaunch$get(segment));
    }
    static final FunctionDescriptor ApplicationFree$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle ApplicationFree$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ISurrogateServiceVtbl.ApplicationFree$FUNC, false
    );
    public interface ApplicationFree {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(ApplicationFree fi) {
            return RuntimeHelper.upcallStub(ApplicationFree.class, fi, ISurrogateServiceVtbl.ApplicationFree$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(ApplicationFree fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(ApplicationFree.class, fi, ISurrogateServiceVtbl.ApplicationFree$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static ApplicationFree ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)ISurrogateServiceVtbl.ApplicationFree$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ApplicationFree$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ApplicationFree")));
    public static VarHandle ApplicationFree$VH() {
        return ISurrogateServiceVtbl.ApplicationFree$VH;
    }
    public static MemoryAddress ApplicationFree$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ISurrogateServiceVtbl.ApplicationFree$VH.get(seg);
    }
    public static void ApplicationFree$set( MemorySegment seg, MemoryAddress x) {
        ISurrogateServiceVtbl.ApplicationFree$VH.set(seg, x);
    }
    public static MemoryAddress ApplicationFree$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ISurrogateServiceVtbl.ApplicationFree$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ApplicationFree$set(MemorySegment seg, long index, MemoryAddress x) {
        ISurrogateServiceVtbl.ApplicationFree$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ApplicationFree ApplicationFree (MemorySegment segment) {
        return ApplicationFree.ofAddress(ApplicationFree$get(segment));
    }
    static final FunctionDescriptor CatalogRefresh$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle CatalogRefresh$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        ISurrogateServiceVtbl.CatalogRefresh$FUNC, false
    );
    public interface CatalogRefresh {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
        static MemoryAddress allocate(CatalogRefresh fi) {
            return RuntimeHelper.upcallStub(CatalogRefresh.class, fi, ISurrogateServiceVtbl.CatalogRefresh$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(CatalogRefresh fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(CatalogRefresh.class, fi, ISurrogateServiceVtbl.CatalogRefresh$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static CatalogRefresh ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1) -> {
                try {
                    return (int)ISurrogateServiceVtbl.CatalogRefresh$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CatalogRefresh$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("CatalogRefresh")));
    public static VarHandle CatalogRefresh$VH() {
        return ISurrogateServiceVtbl.CatalogRefresh$VH;
    }
    public static MemoryAddress CatalogRefresh$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ISurrogateServiceVtbl.CatalogRefresh$VH.get(seg);
    }
    public static void CatalogRefresh$set( MemorySegment seg, MemoryAddress x) {
        ISurrogateServiceVtbl.CatalogRefresh$VH.set(seg, x);
    }
    public static MemoryAddress CatalogRefresh$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ISurrogateServiceVtbl.CatalogRefresh$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CatalogRefresh$set(MemorySegment seg, long index, MemoryAddress x) {
        ISurrogateServiceVtbl.CatalogRefresh$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CatalogRefresh CatalogRefresh (MemorySegment segment) {
        return CatalogRefresh.ofAddress(CatalogRefresh$get(segment));
    }
    static final FunctionDescriptor ProcessShutdown$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT
    );
    static final MethodHandle ProcessShutdown$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        ISurrogateServiceVtbl.ProcessShutdown$FUNC, false
    );
    public interface ProcessShutdown {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
        static MemoryAddress allocate(ProcessShutdown fi) {
            return RuntimeHelper.upcallStub(ProcessShutdown.class, fi, ISurrogateServiceVtbl.ProcessShutdown$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(ProcessShutdown fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(ProcessShutdown.class, fi, ISurrogateServiceVtbl.ProcessShutdown$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static ProcessShutdown ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1) -> {
                try {
                    return (int)ISurrogateServiceVtbl.ProcessShutdown$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ProcessShutdown$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ProcessShutdown")));
    public static VarHandle ProcessShutdown$VH() {
        return ISurrogateServiceVtbl.ProcessShutdown$VH;
    }
    public static MemoryAddress ProcessShutdown$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ISurrogateServiceVtbl.ProcessShutdown$VH.get(seg);
    }
    public static void ProcessShutdown$set( MemorySegment seg, MemoryAddress x) {
        ISurrogateServiceVtbl.ProcessShutdown$VH.set(seg, x);
    }
    public static MemoryAddress ProcessShutdown$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ISurrogateServiceVtbl.ProcessShutdown$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessShutdown$set(MemorySegment seg, long index, MemoryAddress x) {
        ISurrogateServiceVtbl.ProcessShutdown$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ProcessShutdown ProcessShutdown (MemorySegment segment) {
        return ProcessShutdown.ofAddress(ProcessShutdown$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


