// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _CERT_CHAIN_CONTEXT {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("cbSize"),
        MemoryLayout.structLayout(
            C_LONG.withName("dwErrorStatus"),
            C_LONG.withName("dwInfoStatus")
        ).withName("TrustStatus"),
        C_LONG.withName("cChain"),
        C_POINTER.withName("rgpChain"),
        C_LONG.withName("cLowerQualityChainContext"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("rgpLowerQualityChainContext"),
        C_INT.withName("fHasRevocationFreshnessTime"),
        C_LONG.withName("dwRevocationFreshnessTime"),
        C_LONG.withName("dwCreateFlags"),
        MemoryLayout.structLayout(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
        ).withName("ChainId"),
        MemoryLayout.paddingLayout(32)
    ).withName("_CERT_CHAIN_CONTEXT");
    public static MemoryLayout $LAYOUT() {
        return _CERT_CHAIN_CONTEXT.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return _CERT_CHAIN_CONTEXT.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)_CERT_CHAIN_CONTEXT.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        _CERT_CHAIN_CONTEXT.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)_CERT_CHAIN_CONTEXT.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        _CERT_CHAIN_CONTEXT.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment TrustStatus$slice(MemorySegment seg) {
        return seg.asSlice(4, 8);
    }
    static final VarHandle cChain$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cChain"));
    public static VarHandle cChain$VH() {
        return _CERT_CHAIN_CONTEXT.cChain$VH;
    }
    public static int cChain$get(MemorySegment seg) {
        return (int)_CERT_CHAIN_CONTEXT.cChain$VH.get(seg);
    }
    public static void cChain$set( MemorySegment seg, int x) {
        _CERT_CHAIN_CONTEXT.cChain$VH.set(seg, x);
    }
    public static int cChain$get(MemorySegment seg, long index) {
        return (int)_CERT_CHAIN_CONTEXT.cChain$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cChain$set(MemorySegment seg, long index, int x) {
        _CERT_CHAIN_CONTEXT.cChain$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rgpChain$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgpChain")));
    public static VarHandle rgpChain$VH() {
        return _CERT_CHAIN_CONTEXT.rgpChain$VH;
    }
    public static MemoryAddress rgpChain$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_CHAIN_CONTEXT.rgpChain$VH.get(seg);
    }
    public static void rgpChain$set( MemorySegment seg, MemoryAddress x) {
        _CERT_CHAIN_CONTEXT.rgpChain$VH.set(seg, x);
    }
    public static MemoryAddress rgpChain$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_CHAIN_CONTEXT.rgpChain$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rgpChain$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_CHAIN_CONTEXT.rgpChain$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cLowerQualityChainContext$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cLowerQualityChainContext"));
    public static VarHandle cLowerQualityChainContext$VH() {
        return _CERT_CHAIN_CONTEXT.cLowerQualityChainContext$VH;
    }
    public static int cLowerQualityChainContext$get(MemorySegment seg) {
        return (int)_CERT_CHAIN_CONTEXT.cLowerQualityChainContext$VH.get(seg);
    }
    public static void cLowerQualityChainContext$set( MemorySegment seg, int x) {
        _CERT_CHAIN_CONTEXT.cLowerQualityChainContext$VH.set(seg, x);
    }
    public static int cLowerQualityChainContext$get(MemorySegment seg, long index) {
        return (int)_CERT_CHAIN_CONTEXT.cLowerQualityChainContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cLowerQualityChainContext$set(MemorySegment seg, long index, int x) {
        _CERT_CHAIN_CONTEXT.cLowerQualityChainContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rgpLowerQualityChainContext$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgpLowerQualityChainContext")));
    public static VarHandle rgpLowerQualityChainContext$VH() {
        return _CERT_CHAIN_CONTEXT.rgpLowerQualityChainContext$VH;
    }
    public static MemoryAddress rgpLowerQualityChainContext$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_CHAIN_CONTEXT.rgpLowerQualityChainContext$VH.get(seg);
    }
    public static void rgpLowerQualityChainContext$set( MemorySegment seg, MemoryAddress x) {
        _CERT_CHAIN_CONTEXT.rgpLowerQualityChainContext$VH.set(seg, x);
    }
    public static MemoryAddress rgpLowerQualityChainContext$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_CHAIN_CONTEXT.rgpLowerQualityChainContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rgpLowerQualityChainContext$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_CHAIN_CONTEXT.rgpLowerQualityChainContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fHasRevocationFreshnessTime$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("fHasRevocationFreshnessTime"));
    public static VarHandle fHasRevocationFreshnessTime$VH() {
        return _CERT_CHAIN_CONTEXT.fHasRevocationFreshnessTime$VH;
    }
    public static int fHasRevocationFreshnessTime$get(MemorySegment seg) {
        return (int)_CERT_CHAIN_CONTEXT.fHasRevocationFreshnessTime$VH.get(seg);
    }
    public static void fHasRevocationFreshnessTime$set( MemorySegment seg, int x) {
        _CERT_CHAIN_CONTEXT.fHasRevocationFreshnessTime$VH.set(seg, x);
    }
    public static int fHasRevocationFreshnessTime$get(MemorySegment seg, long index) {
        return (int)_CERT_CHAIN_CONTEXT.fHasRevocationFreshnessTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fHasRevocationFreshnessTime$set(MemorySegment seg, long index, int x) {
        _CERT_CHAIN_CONTEXT.fHasRevocationFreshnessTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwRevocationFreshnessTime$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwRevocationFreshnessTime"));
    public static VarHandle dwRevocationFreshnessTime$VH() {
        return _CERT_CHAIN_CONTEXT.dwRevocationFreshnessTime$VH;
    }
    public static int dwRevocationFreshnessTime$get(MemorySegment seg) {
        return (int)_CERT_CHAIN_CONTEXT.dwRevocationFreshnessTime$VH.get(seg);
    }
    public static void dwRevocationFreshnessTime$set( MemorySegment seg, int x) {
        _CERT_CHAIN_CONTEXT.dwRevocationFreshnessTime$VH.set(seg, x);
    }
    public static int dwRevocationFreshnessTime$get(MemorySegment seg, long index) {
        return (int)_CERT_CHAIN_CONTEXT.dwRevocationFreshnessTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwRevocationFreshnessTime$set(MemorySegment seg, long index, int x) {
        _CERT_CHAIN_CONTEXT.dwRevocationFreshnessTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwCreateFlags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCreateFlags"));
    public static VarHandle dwCreateFlags$VH() {
        return _CERT_CHAIN_CONTEXT.dwCreateFlags$VH;
    }
    public static int dwCreateFlags$get(MemorySegment seg) {
        return (int)_CERT_CHAIN_CONTEXT.dwCreateFlags$VH.get(seg);
    }
    public static void dwCreateFlags$set( MemorySegment seg, int x) {
        _CERT_CHAIN_CONTEXT.dwCreateFlags$VH.set(seg, x);
    }
    public static int dwCreateFlags$get(MemorySegment seg, long index) {
        return (int)_CERT_CHAIN_CONTEXT.dwCreateFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwCreateFlags$set(MemorySegment seg, long index, int x) {
        _CERT_CHAIN_CONTEXT.dwCreateFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ChainId$slice(MemorySegment seg) {
        return seg.asSlice(52, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


