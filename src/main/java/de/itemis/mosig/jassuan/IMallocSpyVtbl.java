// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IMallocSpyVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("PreAlloc"),
        C_POINTER.withName("PostAlloc"),
        C_POINTER.withName("PreFree"),
        C_POINTER.withName("PostFree"),
        C_POINTER.withName("PreRealloc"),
        C_POINTER.withName("PostRealloc"),
        C_POINTER.withName("PreGetSize"),
        C_POINTER.withName("PostGetSize"),
        C_POINTER.withName("PreDidAlloc"),
        C_POINTER.withName("PostDidAlloc"),
        C_POINTER.withName("PreHeapMinimize"),
        C_POINTER.withName("PostHeapMinimize")
    ).withName("IMallocSpyVtbl");
    public static MemoryLayout $LAYOUT() {
        return IMallocSpyVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IMallocSpyVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IMallocSpyVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IMallocSpyVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IMallocSpyVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IMallocSpyVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IMallocSpyVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IMallocSpyVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IMallocSpyVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IMallocSpyVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IMallocSpyVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IMallocSpyVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IMallocSpyVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IMallocSpyVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IMallocSpyVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IMallocSpyVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor PreAlloc$FUNC = FunctionDescriptor.of(C_LONG_LONG,
        C_POINTER,
        C_LONG_LONG
    );
    static final MethodHandle PreAlloc$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;J)J",
        IMallocSpyVtbl.PreAlloc$FUNC, false
    );
    public interface PreAlloc {

        long apply(jdk.incubator.foreign.MemoryAddress x0, long x1);
        static MemoryAddress allocate(PreAlloc fi) {
            return RuntimeHelper.upcallStub(PreAlloc.class, fi, IMallocSpyVtbl.PreAlloc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;J)J");
        }
        static MemoryAddress allocate(PreAlloc fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(PreAlloc.class, fi, IMallocSpyVtbl.PreAlloc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;J)J", scope);
        }
        static PreAlloc ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, long x1) -> {
                try {
                    return (long)IMallocSpyVtbl.PreAlloc$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PreAlloc$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("PreAlloc")));
    public static VarHandle PreAlloc$VH() {
        return IMallocSpyVtbl.PreAlloc$VH;
    }
    public static MemoryAddress PreAlloc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PreAlloc$VH.get(seg);
    }
    public static void PreAlloc$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.PreAlloc$VH.set(seg, x);
    }
    public static MemoryAddress PreAlloc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PreAlloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PreAlloc$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.PreAlloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreAlloc PreAlloc (MemorySegment segment) {
        return PreAlloc.ofAddress(PreAlloc$get(segment));
    }
    static final FunctionDescriptor PostAlloc$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle PostAlloc$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        IMallocSpyVtbl.PostAlloc$FUNC, false
    );
    public interface PostAlloc {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(PostAlloc fi) {
            return RuntimeHelper.upcallStub(PostAlloc.class, fi, IMallocSpyVtbl.PostAlloc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        static MemoryAddress allocate(PostAlloc fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(PostAlloc.class, fi, IMallocSpyVtbl.PostAlloc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;", scope);
        }
        static PostAlloc ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PostAlloc$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PostAlloc$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("PostAlloc")));
    public static VarHandle PostAlloc$VH() {
        return IMallocSpyVtbl.PostAlloc$VH;
    }
    public static MemoryAddress PostAlloc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PostAlloc$VH.get(seg);
    }
    public static void PostAlloc$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.PostAlloc$VH.set(seg, x);
    }
    public static MemoryAddress PostAlloc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PostAlloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PostAlloc$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.PostAlloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostAlloc PostAlloc (MemorySegment segment) {
        return PostAlloc.ofAddress(PostAlloc$get(segment));
    }
    static final FunctionDescriptor PreFree$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle PreFree$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        IMallocSpyVtbl.PreFree$FUNC, false
    );
    public interface PreFree {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2);
        static MemoryAddress allocate(PreFree fi) {
            return RuntimeHelper.upcallStub(PreFree.class, fi, IMallocSpyVtbl.PreFree$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;");
        }
        static MemoryAddress allocate(PreFree fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(PreFree.class, fi, IMallocSpyVtbl.PreFree$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;", scope);
        }
        static PreFree ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2) -> {
                try {
                    return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PreFree$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PreFree$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("PreFree")));
    public static VarHandle PreFree$VH() {
        return IMallocSpyVtbl.PreFree$VH;
    }
    public static MemoryAddress PreFree$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PreFree$VH.get(seg);
    }
    public static void PreFree$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.PreFree$VH.set(seg, x);
    }
    public static MemoryAddress PreFree$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PreFree$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PreFree$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.PreFree$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreFree PreFree (MemorySegment segment) {
        return PreFree.ofAddress(PreFree$get(segment));
    }
    static final FunctionDescriptor PostFree$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    static final MethodHandle PostFree$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        IMallocSpyVtbl.PostFree$FUNC, false
    );
    public interface PostFree {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
        static MemoryAddress allocate(PostFree fi) {
            return RuntimeHelper.upcallStub(PostFree.class, fi, IMallocSpyVtbl.PostFree$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)V");
        }
        static MemoryAddress allocate(PostFree fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(PostFree.class, fi, IMallocSpyVtbl.PostFree$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)V", scope);
        }
        static PostFree ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1) -> {
                try {
                    IMallocSpyVtbl.PostFree$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PostFree$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("PostFree")));
    public static VarHandle PostFree$VH() {
        return IMallocSpyVtbl.PostFree$VH;
    }
    public static MemoryAddress PostFree$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PostFree$VH.get(seg);
    }
    public static void PostFree$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.PostFree$VH.set(seg, x);
    }
    public static MemoryAddress PostFree$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PostFree$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PostFree$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.PostFree$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostFree PostFree (MemorySegment segment) {
        return PostFree.ofAddress(PostFree$get(segment));
    }
    static final FunctionDescriptor PreRealloc$FUNC = FunctionDescriptor.of(C_LONG_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_INT
    );
    static final MethodHandle PreRealloc$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;I)J",
        IMallocSpyVtbl.PreRealloc$FUNC, false
    );
    public interface PreRealloc {

        long apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2, jdk.incubator.foreign.MemoryAddress x3, int x4);
        static MemoryAddress allocate(PreRealloc fi) {
            return RuntimeHelper.upcallStub(PreRealloc.class, fi, IMallocSpyVtbl.PreRealloc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;I)J");
        }
        static MemoryAddress allocate(PreRealloc fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(PreRealloc.class, fi, IMallocSpyVtbl.PreRealloc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;I)J", scope);
        }
        static PreRealloc ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2, jdk.incubator.foreign.MemoryAddress x3, int x4) -> {
                try {
                    return (long)IMallocSpyVtbl.PreRealloc$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PreRealloc$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("PreRealloc")));
    public static VarHandle PreRealloc$VH() {
        return IMallocSpyVtbl.PreRealloc$VH;
    }
    public static MemoryAddress PreRealloc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PreRealloc$VH.get(seg);
    }
    public static void PreRealloc$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.PreRealloc$VH.set(seg, x);
    }
    public static MemoryAddress PreRealloc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PreRealloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PreRealloc$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.PreRealloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreRealloc PreRealloc (MemorySegment segment) {
        return PreRealloc.ofAddress(PreRealloc$get(segment));
    }
    static final FunctionDescriptor PostRealloc$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle PostRealloc$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        IMallocSpyVtbl.PostRealloc$FUNC, false
    );
    public interface PostRealloc {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2);
        static MemoryAddress allocate(PostRealloc fi) {
            return RuntimeHelper.upcallStub(PostRealloc.class, fi, IMallocSpyVtbl.PostRealloc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;");
        }
        static MemoryAddress allocate(PostRealloc fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(PostRealloc.class, fi, IMallocSpyVtbl.PostRealloc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;", scope);
        }
        static PostRealloc ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2) -> {
                try {
                    return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PostRealloc$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PostRealloc$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("PostRealloc")));
    public static VarHandle PostRealloc$VH() {
        return IMallocSpyVtbl.PostRealloc$VH;
    }
    public static MemoryAddress PostRealloc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PostRealloc$VH.get(seg);
    }
    public static void PostRealloc$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.PostRealloc$VH.set(seg, x);
    }
    public static MemoryAddress PostRealloc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PostRealloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PostRealloc$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.PostRealloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostRealloc PostRealloc (MemorySegment segment) {
        return PostRealloc.ofAddress(PostRealloc$get(segment));
    }
    static final FunctionDescriptor PreGetSize$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle PreGetSize$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        IMallocSpyVtbl.PreGetSize$FUNC, false
    );
    public interface PreGetSize {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2);
        static MemoryAddress allocate(PreGetSize fi) {
            return RuntimeHelper.upcallStub(PreGetSize.class, fi, IMallocSpyVtbl.PreGetSize$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;");
        }
        static MemoryAddress allocate(PreGetSize fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(PreGetSize.class, fi, IMallocSpyVtbl.PreGetSize$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;", scope);
        }
        static PreGetSize ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2) -> {
                try {
                    return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PreGetSize$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PreGetSize$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("PreGetSize")));
    public static VarHandle PreGetSize$VH() {
        return IMallocSpyVtbl.PreGetSize$VH;
    }
    public static MemoryAddress PreGetSize$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PreGetSize$VH.get(seg);
    }
    public static void PreGetSize$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.PreGetSize$VH.set(seg, x);
    }
    public static MemoryAddress PreGetSize$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PreGetSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PreGetSize$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.PreGetSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreGetSize PreGetSize (MemorySegment segment) {
        return PreGetSize.ofAddress(PreGetSize$get(segment));
    }
    static final FunctionDescriptor PostGetSize$FUNC = FunctionDescriptor.of(C_LONG_LONG,
        C_POINTER,
        C_LONG_LONG,
        C_INT
    );
    static final MethodHandle PostGetSize$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;JI)J",
        IMallocSpyVtbl.PostGetSize$FUNC, false
    );
    public interface PostGetSize {

        long apply(jdk.incubator.foreign.MemoryAddress x0, long x1, int x2);
        static MemoryAddress allocate(PostGetSize fi) {
            return RuntimeHelper.upcallStub(PostGetSize.class, fi, IMallocSpyVtbl.PostGetSize$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;JI)J");
        }
        static MemoryAddress allocate(PostGetSize fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(PostGetSize.class, fi, IMallocSpyVtbl.PostGetSize$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;JI)J", scope);
        }
        static PostGetSize ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, long x1, int x2) -> {
                try {
                    return (long)IMallocSpyVtbl.PostGetSize$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PostGetSize$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("PostGetSize")));
    public static VarHandle PostGetSize$VH() {
        return IMallocSpyVtbl.PostGetSize$VH;
    }
    public static MemoryAddress PostGetSize$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PostGetSize$VH.get(seg);
    }
    public static void PostGetSize$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.PostGetSize$VH.set(seg, x);
    }
    public static MemoryAddress PostGetSize$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PostGetSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PostGetSize$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.PostGetSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostGetSize PostGetSize (MemorySegment segment) {
        return PostGetSize.ofAddress(PostGetSize$get(segment));
    }
    static final FunctionDescriptor PreDidAlloc$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle PreDidAlloc$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        IMallocSpyVtbl.PreDidAlloc$FUNC, false
    );
    public interface PreDidAlloc {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2);
        static MemoryAddress allocate(PreDidAlloc fi) {
            return RuntimeHelper.upcallStub(PreDidAlloc.class, fi, IMallocSpyVtbl.PreDidAlloc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;");
        }
        static MemoryAddress allocate(PreDidAlloc fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(PreDidAlloc.class, fi, IMallocSpyVtbl.PreDidAlloc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;", scope);
        }
        static PreDidAlloc ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2) -> {
                try {
                    return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PreDidAlloc$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PreDidAlloc$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("PreDidAlloc")));
    public static VarHandle PreDidAlloc$VH() {
        return IMallocSpyVtbl.PreDidAlloc$VH;
    }
    public static MemoryAddress PreDidAlloc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PreDidAlloc$VH.get(seg);
    }
    public static void PreDidAlloc$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.PreDidAlloc$VH.set(seg, x);
    }
    public static MemoryAddress PreDidAlloc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PreDidAlloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PreDidAlloc$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.PreDidAlloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreDidAlloc PreDidAlloc (MemorySegment segment) {
        return PreDidAlloc.ofAddress(PreDidAlloc$get(segment));
    }
    static final FunctionDescriptor PostDidAlloc$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final MethodHandle PostDidAlloc$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        IMallocSpyVtbl.PostDidAlloc$FUNC, false
    );
    public interface PostDidAlloc {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, int x3);
        static MemoryAddress allocate(PostDidAlloc fi) {
            return RuntimeHelper.upcallStub(PostDidAlloc.class, fi, IMallocSpyVtbl.PostDidAlloc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I");
        }
        static MemoryAddress allocate(PostDidAlloc fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(PostDidAlloc.class, fi, IMallocSpyVtbl.PostDidAlloc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I", scope);
        }
        static PostDidAlloc ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, int x3) -> {
                try {
                    return (int)IMallocSpyVtbl.PostDidAlloc$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PostDidAlloc$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("PostDidAlloc")));
    public static VarHandle PostDidAlloc$VH() {
        return IMallocSpyVtbl.PostDidAlloc$VH;
    }
    public static MemoryAddress PostDidAlloc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PostDidAlloc$VH.get(seg);
    }
    public static void PostDidAlloc$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.PostDidAlloc$VH.set(seg, x);
    }
    public static MemoryAddress PostDidAlloc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PostDidAlloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PostDidAlloc$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.PostDidAlloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostDidAlloc PostDidAlloc (MemorySegment segment) {
        return PostDidAlloc.ofAddress(PostDidAlloc$get(segment));
    }
    static final FunctionDescriptor PreHeapMinimize$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle PreHeapMinimize$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        IMallocSpyVtbl.PreHeapMinimize$FUNC, false
    );
    public interface PreHeapMinimize {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(PreHeapMinimize fi) {
            return RuntimeHelper.upcallStub(PreHeapMinimize.class, fi, IMallocSpyVtbl.PreHeapMinimize$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        static MemoryAddress allocate(PreHeapMinimize fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(PreHeapMinimize.class, fi, IMallocSpyVtbl.PreHeapMinimize$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static PreHeapMinimize ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    IMallocSpyVtbl.PreHeapMinimize$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PreHeapMinimize$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("PreHeapMinimize")));
    public static VarHandle PreHeapMinimize$VH() {
        return IMallocSpyVtbl.PreHeapMinimize$VH;
    }
    public static MemoryAddress PreHeapMinimize$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PreHeapMinimize$VH.get(seg);
    }
    public static void PreHeapMinimize$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.PreHeapMinimize$VH.set(seg, x);
    }
    public static MemoryAddress PreHeapMinimize$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PreHeapMinimize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PreHeapMinimize$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.PreHeapMinimize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreHeapMinimize PreHeapMinimize (MemorySegment segment) {
        return PreHeapMinimize.ofAddress(PreHeapMinimize$get(segment));
    }
    static final FunctionDescriptor PostHeapMinimize$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle PostHeapMinimize$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        IMallocSpyVtbl.PostHeapMinimize$FUNC, false
    );
    public interface PostHeapMinimize {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(PostHeapMinimize fi) {
            return RuntimeHelper.upcallStub(PostHeapMinimize.class, fi, IMallocSpyVtbl.PostHeapMinimize$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        static MemoryAddress allocate(PostHeapMinimize fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(PostHeapMinimize.class, fi, IMallocSpyVtbl.PostHeapMinimize$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static PostHeapMinimize ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    IMallocSpyVtbl.PostHeapMinimize$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PostHeapMinimize$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("PostHeapMinimize")));
    public static VarHandle PostHeapMinimize$VH() {
        return IMallocSpyVtbl.PostHeapMinimize$VH;
    }
    public static MemoryAddress PostHeapMinimize$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PostHeapMinimize$VH.get(seg);
    }
    public static void PostHeapMinimize$set( MemorySegment seg, MemoryAddress x) {
        IMallocSpyVtbl.PostHeapMinimize$VH.set(seg, x);
    }
    public static MemoryAddress PostHeapMinimize$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocSpyVtbl.PostHeapMinimize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PostHeapMinimize$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocSpyVtbl.PostHeapMinimize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostHeapMinimize PostHeapMinimize (MemorySegment segment) {
        return PostHeapMinimize.ofAddress(PostHeapMinimize$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


