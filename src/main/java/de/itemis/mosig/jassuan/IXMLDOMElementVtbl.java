// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IXMLDOMElementVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetTypeInfoCount"),
        C_POINTER.withName("GetTypeInfo"),
        C_POINTER.withName("GetIDsOfNames"),
        C_POINTER.withName("Invoke"),
        C_POINTER.withName("get_nodeName"),
        C_POINTER.withName("get_nodeValue"),
        C_POINTER.withName("put_nodeValue"),
        C_POINTER.withName("get_nodeType"),
        C_POINTER.withName("get_parentNode"),
        C_POINTER.withName("get_childNodes"),
        C_POINTER.withName("get_firstChild"),
        C_POINTER.withName("get_lastChild"),
        C_POINTER.withName("get_previousSibling"),
        C_POINTER.withName("get_nextSibling"),
        C_POINTER.withName("get_attributes"),
        C_POINTER.withName("insertBefore"),
        C_POINTER.withName("replaceChild"),
        C_POINTER.withName("removeChild"),
        C_POINTER.withName("appendChild"),
        C_POINTER.withName("hasChildNodes"),
        C_POINTER.withName("get_ownerDocument"),
        C_POINTER.withName("cloneNode"),
        C_POINTER.withName("get_nodeTypeString"),
        C_POINTER.withName("get_text"),
        C_POINTER.withName("put_text"),
        C_POINTER.withName("get_specified"),
        C_POINTER.withName("get_definition"),
        C_POINTER.withName("get_nodeTypedValue"),
        C_POINTER.withName("put_nodeTypedValue"),
        C_POINTER.withName("get_dataType"),
        C_POINTER.withName("put_dataType"),
        C_POINTER.withName("get_xml"),
        C_POINTER.withName("transformNode"),
        C_POINTER.withName("selectNodes"),
        C_POINTER.withName("selectSingleNode"),
        C_POINTER.withName("get_parsed"),
        C_POINTER.withName("get_namespaceURI"),
        C_POINTER.withName("get_prefix"),
        C_POINTER.withName("get_baseName"),
        C_POINTER.withName("transformNodeToObject"),
        C_POINTER.withName("get_tagName"),
        C_POINTER.withName("getAttribute"),
        C_POINTER.withName("setAttribute"),
        C_POINTER.withName("removeAttribute"),
        C_POINTER.withName("getAttributeNode"),
        C_POINTER.withName("setAttributeNode"),
        C_POINTER.withName("removeAttributeNode"),
        C_POINTER.withName("getElementsByTagName"),
        C_POINTER.withName("normalize")
    ).withName("IXMLDOMElementVtbl");
    public static MemoryLayout $LAYOUT() {
        return IXMLDOMElementVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IXMLDOMElementVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IXMLDOMElementVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IXMLDOMElementVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IXMLDOMElementVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IXMLDOMElementVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IXMLDOMElementVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IXMLDOMElementVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IXMLDOMElementVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IXMLDOMElementVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IXMLDOMElementVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IXMLDOMElementVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IXMLDOMElementVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor GetTypeInfoCount$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetTypeInfoCount$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.GetTypeInfoCount$FUNC, false
    );
    public interface GetTypeInfoCount {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetTypeInfoCount fi) {
            return RuntimeHelper.upcallStub(GetTypeInfoCount.class, fi, IXMLDOMElementVtbl.GetTypeInfoCount$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetTypeInfoCount fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetTypeInfoCount.class, fi, IXMLDOMElementVtbl.GetTypeInfoCount$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetTypeInfoCount ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.GetTypeInfoCount$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoCount$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfoCount")));
    public static VarHandle GetTypeInfoCount$VH() {
        return IXMLDOMElementVtbl.GetTypeInfoCount$VH;
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.GetTypeInfoCount$VH.get(seg);
    }
    public static void GetTypeInfoCount$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.GetTypeInfoCount$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.GetTypeInfoCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.GetTypeInfoCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount (MemorySegment segment) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment));
    }
    static final FunctionDescriptor GetTypeInfo$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle GetTypeInfo$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.GetTypeInfo$FUNC, false
    );
    public interface GetTypeInfo {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(GetTypeInfo fi) {
            return RuntimeHelper.upcallStub(GetTypeInfo.class, fi, IXMLDOMElementVtbl.GetTypeInfo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetTypeInfo fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetTypeInfo.class, fi, IXMLDOMElementVtbl.GetTypeInfo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetTypeInfo ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)IXMLDOMElementVtbl.GetTypeInfo$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfo$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfo")));
    public static VarHandle GetTypeInfo$VH() {
        return IXMLDOMElementVtbl.GetTypeInfo$VH;
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.GetTypeInfo$VH.get(seg);
    }
    public static void GetTypeInfo$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.GetTypeInfo$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.GetTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.GetTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo (MemorySegment segment) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment));
    }
    static final FunctionDescriptor GetIDsOfNames$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle GetIDsOfNames$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.GetIDsOfNames$FUNC, false
    );
    public interface GetIDsOfNames {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, int x4, jdk.incubator.foreign.MemoryAddress x5);
        static MemoryAddress allocate(GetIDsOfNames fi) {
            return RuntimeHelper.upcallStub(GetIDsOfNames.class, fi, IXMLDOMElementVtbl.GetIDsOfNames$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetIDsOfNames fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetIDsOfNames.class, fi, IXMLDOMElementVtbl.GetIDsOfNames$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetIDsOfNames ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, int x4, jdk.incubator.foreign.MemoryAddress x5) -> {
                try {
                    return (int)IXMLDOMElementVtbl.GetIDsOfNames$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetIDsOfNames$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetIDsOfNames")));
    public static VarHandle GetIDsOfNames$VH() {
        return IXMLDOMElementVtbl.GetIDsOfNames$VH;
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.GetIDsOfNames$VH.get(seg);
    }
    public static void GetIDsOfNames$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.GetIDsOfNames$VH.set(seg, x);
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.GetIDsOfNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.GetIDsOfNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames (MemorySegment segment) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment));
    }
    static final FunctionDescriptor Invoke$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_SHORT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle Invoke$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ISLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.Invoke$FUNC, false
    );
    public interface Invoke {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3, short x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8);
        static MemoryAddress allocate(Invoke fi) {
            return RuntimeHelper.upcallStub(Invoke.class, fi, IXMLDOMElementVtbl.Invoke$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ISLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Invoke fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Invoke.class, fi, IXMLDOMElementVtbl.Invoke$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ISLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Invoke ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3, short x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8) -> {
                try {
                    return (int)IXMLDOMElementVtbl.Invoke$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6, x7, x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Invoke$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Invoke")));
    public static VarHandle Invoke$VH() {
        return IXMLDOMElementVtbl.Invoke$VH;
    }
    public static MemoryAddress Invoke$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.Invoke$VH.get(seg);
    }
    public static void Invoke$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.Invoke$VH.set(seg, x);
    }
    public static MemoryAddress Invoke$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.Invoke$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.Invoke$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke (MemorySegment segment) {
        return Invoke.ofAddress(Invoke$get(segment));
    }
    static final FunctionDescriptor get_nodeName$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_nodeName$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.get_nodeName$FUNC, false
    );
    public interface get_nodeName {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_nodeName fi) {
            return RuntimeHelper.upcallStub(get_nodeName.class, fi, IXMLDOMElementVtbl.get_nodeName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_nodeName fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_nodeName.class, fi, IXMLDOMElementVtbl.get_nodeName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_nodeName ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.get_nodeName$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_nodeName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_nodeName")));
    public static VarHandle get_nodeName$VH() {
        return IXMLDOMElementVtbl.get_nodeName$VH;
    }
    public static MemoryAddress get_nodeName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_nodeName$VH.get(seg);
    }
    public static void get_nodeName$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.get_nodeName$VH.set(seg, x);
    }
    public static MemoryAddress get_nodeName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_nodeName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeName$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.get_nodeName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeName get_nodeName (MemorySegment segment) {
        return get_nodeName.ofAddress(get_nodeName$get(segment));
    }
    static final FunctionDescriptor get_nodeValue$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_nodeValue$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.get_nodeValue$FUNC, false
    );
    public interface get_nodeValue {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_nodeValue fi) {
            return RuntimeHelper.upcallStub(get_nodeValue.class, fi, IXMLDOMElementVtbl.get_nodeValue$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_nodeValue fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_nodeValue.class, fi, IXMLDOMElementVtbl.get_nodeValue$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_nodeValue ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.get_nodeValue$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_nodeValue$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_nodeValue")));
    public static VarHandle get_nodeValue$VH() {
        return IXMLDOMElementVtbl.get_nodeValue$VH;
    }
    public static MemoryAddress get_nodeValue$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_nodeValue$VH.get(seg);
    }
    public static void get_nodeValue$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.get_nodeValue$VH.set(seg, x);
    }
    public static MemoryAddress get_nodeValue$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_nodeValue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeValue$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.get_nodeValue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeValue get_nodeValue (MemorySegment segment) {
        return get_nodeValue.ofAddress(get_nodeValue$get(segment));
    }
    static final FunctionDescriptor put_nodeValue$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    C_SHORT.withName("vt"),
                    C_SHORT.withName("wReserved1"),
                    C_SHORT.withName("wReserved2"),
                    C_SHORT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        C_LONG_LONG.withName("llVal"),
                        C_LONG.withName("lVal"),
                        C_CHAR.withName("bVal"),
                        C_SHORT.withName("iVal"),
                        C_FLOAT.withName("fltVal"),
                        C_DOUBLE.withName("dblVal"),
                        C_SHORT.withName("boolVal"),
                        C_LONG.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                C_LONG.withName("Lo"),
                                C_LONG.withName("Hi")
                            ).withName("$anon$0"),
                            C_LONG_LONG.withName("int64")
                        ).withName("cyVal"),
                        C_DOUBLE.withName("date"),
                        C_POINTER.withName("bstrVal"),
                        C_POINTER.withName("punkVal"),
                        C_POINTER.withName("pdispVal"),
                        C_POINTER.withName("parray"),
                        C_POINTER.withName("pbVal"),
                        C_POINTER.withName("piVal"),
                        C_POINTER.withName("plVal"),
                        C_POINTER.withName("pllVal"),
                        C_POINTER.withName("pfltVal"),
                        C_POINTER.withName("pdblVal"),
                        C_POINTER.withName("pboolVal"),
                        C_POINTER.withName("pscode"),
                        C_POINTER.withName("pcyVal"),
                        C_POINTER.withName("pdate"),
                        C_POINTER.withName("pbstrVal"),
                        C_POINTER.withName("ppunkVal"),
                        C_POINTER.withName("ppdispVal"),
                        C_POINTER.withName("pparray"),
                        C_POINTER.withName("pvarVal"),
                        C_POINTER.withName("byref"),
                        C_CHAR.withName("cVal"),
                        C_SHORT.withName("uiVal"),
                        C_LONG.withName("ulVal"),
                        C_LONG_LONG.withName("ullVal"),
                        C_INT.withName("intVal"),
                        C_INT.withName("uintVal"),
                        C_POINTER.withName("pdecVal"),
                        C_POINTER.withName("pcVal"),
                        C_POINTER.withName("puiVal"),
                        C_POINTER.withName("pulVal"),
                        C_POINTER.withName("pullVal"),
                        C_POINTER.withName("pintVal"),
                        C_POINTER.withName("puintVal"),
                        MemoryLayout.structLayout(
                            C_POINTER.withName("pvRecord"),
                            C_POINTER.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    C_SHORT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_CHAR.withName("scale"),
                            C_CHAR.withName("sign")
                        ).withName("$anon$0"),
                        C_SHORT.withName("signscale")
                    ).withName("$anon$0"),
                    C_LONG.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_LONG.withName("Lo32"),
                            C_LONG.withName("Mid32")
                        ).withName("$anon$0"),
                        C_LONG_LONG.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT")
    );
    static final MethodHandle put_nodeValue$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        IXMLDOMElementVtbl.put_nodeValue$FUNC, false
    );
    public interface put_nodeValue {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1);
        static MemoryAddress allocate(put_nodeValue fi) {
            return RuntimeHelper.upcallStub(put_nodeValue.class, fi, IXMLDOMElementVtbl.put_nodeValue$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I");
        }
        static MemoryAddress allocate(put_nodeValue fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(put_nodeValue.class, fi, IXMLDOMElementVtbl.put_nodeValue$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I", scope);
        }
        static put_nodeValue ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.put_nodeValue$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_nodeValue$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("put_nodeValue")));
    public static VarHandle put_nodeValue$VH() {
        return IXMLDOMElementVtbl.put_nodeValue$VH;
    }
    public static MemoryAddress put_nodeValue$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.put_nodeValue$VH.get(seg);
    }
    public static void put_nodeValue$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.put_nodeValue$VH.set(seg, x);
    }
    public static MemoryAddress put_nodeValue$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.put_nodeValue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_nodeValue$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.put_nodeValue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_nodeValue put_nodeValue (MemorySegment segment) {
        return put_nodeValue.ofAddress(put_nodeValue$get(segment));
    }
    static final FunctionDescriptor get_nodeType$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_nodeType$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.get_nodeType$FUNC, false
    );
    public interface get_nodeType {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_nodeType fi) {
            return RuntimeHelper.upcallStub(get_nodeType.class, fi, IXMLDOMElementVtbl.get_nodeType$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_nodeType fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_nodeType.class, fi, IXMLDOMElementVtbl.get_nodeType$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_nodeType ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.get_nodeType$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_nodeType$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_nodeType")));
    public static VarHandle get_nodeType$VH() {
        return IXMLDOMElementVtbl.get_nodeType$VH;
    }
    public static MemoryAddress get_nodeType$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_nodeType$VH.get(seg);
    }
    public static void get_nodeType$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.get_nodeType$VH.set(seg, x);
    }
    public static MemoryAddress get_nodeType$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_nodeType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeType$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.get_nodeType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeType get_nodeType (MemorySegment segment) {
        return get_nodeType.ofAddress(get_nodeType$get(segment));
    }
    static final FunctionDescriptor get_parentNode$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_parentNode$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.get_parentNode$FUNC, false
    );
    public interface get_parentNode {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_parentNode fi) {
            return RuntimeHelper.upcallStub(get_parentNode.class, fi, IXMLDOMElementVtbl.get_parentNode$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_parentNode fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_parentNode.class, fi, IXMLDOMElementVtbl.get_parentNode$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_parentNode ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.get_parentNode$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_parentNode$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_parentNode")));
    public static VarHandle get_parentNode$VH() {
        return IXMLDOMElementVtbl.get_parentNode$VH;
    }
    public static MemoryAddress get_parentNode$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_parentNode$VH.get(seg);
    }
    public static void get_parentNode$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.get_parentNode$VH.set(seg, x);
    }
    public static MemoryAddress get_parentNode$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_parentNode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_parentNode$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.get_parentNode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_parentNode get_parentNode (MemorySegment segment) {
        return get_parentNode.ofAddress(get_parentNode$get(segment));
    }
    static final FunctionDescriptor get_childNodes$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_childNodes$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.get_childNodes$FUNC, false
    );
    public interface get_childNodes {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_childNodes fi) {
            return RuntimeHelper.upcallStub(get_childNodes.class, fi, IXMLDOMElementVtbl.get_childNodes$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_childNodes fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_childNodes.class, fi, IXMLDOMElementVtbl.get_childNodes$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_childNodes ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.get_childNodes$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_childNodes$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_childNodes")));
    public static VarHandle get_childNodes$VH() {
        return IXMLDOMElementVtbl.get_childNodes$VH;
    }
    public static MemoryAddress get_childNodes$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_childNodes$VH.get(seg);
    }
    public static void get_childNodes$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.get_childNodes$VH.set(seg, x);
    }
    public static MemoryAddress get_childNodes$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_childNodes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_childNodes$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.get_childNodes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_childNodes get_childNodes (MemorySegment segment) {
        return get_childNodes.ofAddress(get_childNodes$get(segment));
    }
    static final FunctionDescriptor get_firstChild$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_firstChild$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.get_firstChild$FUNC, false
    );
    public interface get_firstChild {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_firstChild fi) {
            return RuntimeHelper.upcallStub(get_firstChild.class, fi, IXMLDOMElementVtbl.get_firstChild$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_firstChild fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_firstChild.class, fi, IXMLDOMElementVtbl.get_firstChild$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_firstChild ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.get_firstChild$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_firstChild$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_firstChild")));
    public static VarHandle get_firstChild$VH() {
        return IXMLDOMElementVtbl.get_firstChild$VH;
    }
    public static MemoryAddress get_firstChild$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_firstChild$VH.get(seg);
    }
    public static void get_firstChild$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.get_firstChild$VH.set(seg, x);
    }
    public static MemoryAddress get_firstChild$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_firstChild$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_firstChild$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.get_firstChild$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_firstChild get_firstChild (MemorySegment segment) {
        return get_firstChild.ofAddress(get_firstChild$get(segment));
    }
    static final FunctionDescriptor get_lastChild$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_lastChild$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.get_lastChild$FUNC, false
    );
    public interface get_lastChild {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_lastChild fi) {
            return RuntimeHelper.upcallStub(get_lastChild.class, fi, IXMLDOMElementVtbl.get_lastChild$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_lastChild fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_lastChild.class, fi, IXMLDOMElementVtbl.get_lastChild$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_lastChild ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.get_lastChild$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_lastChild$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_lastChild")));
    public static VarHandle get_lastChild$VH() {
        return IXMLDOMElementVtbl.get_lastChild$VH;
    }
    public static MemoryAddress get_lastChild$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_lastChild$VH.get(seg);
    }
    public static void get_lastChild$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.get_lastChild$VH.set(seg, x);
    }
    public static MemoryAddress get_lastChild$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_lastChild$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_lastChild$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.get_lastChild$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_lastChild get_lastChild (MemorySegment segment) {
        return get_lastChild.ofAddress(get_lastChild$get(segment));
    }
    static final FunctionDescriptor get_previousSibling$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_previousSibling$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.get_previousSibling$FUNC, false
    );
    public interface get_previousSibling {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_previousSibling fi) {
            return RuntimeHelper.upcallStub(get_previousSibling.class, fi, IXMLDOMElementVtbl.get_previousSibling$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_previousSibling fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_previousSibling.class, fi, IXMLDOMElementVtbl.get_previousSibling$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_previousSibling ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.get_previousSibling$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_previousSibling$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_previousSibling")));
    public static VarHandle get_previousSibling$VH() {
        return IXMLDOMElementVtbl.get_previousSibling$VH;
    }
    public static MemoryAddress get_previousSibling$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_previousSibling$VH.get(seg);
    }
    public static void get_previousSibling$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.get_previousSibling$VH.set(seg, x);
    }
    public static MemoryAddress get_previousSibling$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_previousSibling$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_previousSibling$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.get_previousSibling$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_previousSibling get_previousSibling (MemorySegment segment) {
        return get_previousSibling.ofAddress(get_previousSibling$get(segment));
    }
    static final FunctionDescriptor get_nextSibling$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_nextSibling$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.get_nextSibling$FUNC, false
    );
    public interface get_nextSibling {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_nextSibling fi) {
            return RuntimeHelper.upcallStub(get_nextSibling.class, fi, IXMLDOMElementVtbl.get_nextSibling$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_nextSibling fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_nextSibling.class, fi, IXMLDOMElementVtbl.get_nextSibling$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_nextSibling ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.get_nextSibling$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_nextSibling$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_nextSibling")));
    public static VarHandle get_nextSibling$VH() {
        return IXMLDOMElementVtbl.get_nextSibling$VH;
    }
    public static MemoryAddress get_nextSibling$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_nextSibling$VH.get(seg);
    }
    public static void get_nextSibling$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.get_nextSibling$VH.set(seg, x);
    }
    public static MemoryAddress get_nextSibling$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_nextSibling$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nextSibling$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.get_nextSibling$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nextSibling get_nextSibling (MemorySegment segment) {
        return get_nextSibling.ofAddress(get_nextSibling$get(segment));
    }
    static final FunctionDescriptor get_attributes$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_attributes$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.get_attributes$FUNC, false
    );
    public interface get_attributes {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_attributes fi) {
            return RuntimeHelper.upcallStub(get_attributes.class, fi, IXMLDOMElementVtbl.get_attributes$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_attributes fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_attributes.class, fi, IXMLDOMElementVtbl.get_attributes$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_attributes ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.get_attributes$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_attributes$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_attributes")));
    public static VarHandle get_attributes$VH() {
        return IXMLDOMElementVtbl.get_attributes$VH;
    }
    public static MemoryAddress get_attributes$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_attributes$VH.get(seg);
    }
    public static void get_attributes$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.get_attributes$VH.set(seg, x);
    }
    public static MemoryAddress get_attributes$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_attributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_attributes$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.get_attributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_attributes get_attributes (MemorySegment segment) {
        return get_attributes.ofAddress(get_attributes$get(segment));
    }
    static final FunctionDescriptor insertBefore$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    C_SHORT.withName("vt"),
                    C_SHORT.withName("wReserved1"),
                    C_SHORT.withName("wReserved2"),
                    C_SHORT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        C_LONG_LONG.withName("llVal"),
                        C_LONG.withName("lVal"),
                        C_CHAR.withName("bVal"),
                        C_SHORT.withName("iVal"),
                        C_FLOAT.withName("fltVal"),
                        C_DOUBLE.withName("dblVal"),
                        C_SHORT.withName("boolVal"),
                        C_LONG.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                C_LONG.withName("Lo"),
                                C_LONG.withName("Hi")
                            ).withName("$anon$0"),
                            C_LONG_LONG.withName("int64")
                        ).withName("cyVal"),
                        C_DOUBLE.withName("date"),
                        C_POINTER.withName("bstrVal"),
                        C_POINTER.withName("punkVal"),
                        C_POINTER.withName("pdispVal"),
                        C_POINTER.withName("parray"),
                        C_POINTER.withName("pbVal"),
                        C_POINTER.withName("piVal"),
                        C_POINTER.withName("plVal"),
                        C_POINTER.withName("pllVal"),
                        C_POINTER.withName("pfltVal"),
                        C_POINTER.withName("pdblVal"),
                        C_POINTER.withName("pboolVal"),
                        C_POINTER.withName("pscode"),
                        C_POINTER.withName("pcyVal"),
                        C_POINTER.withName("pdate"),
                        C_POINTER.withName("pbstrVal"),
                        C_POINTER.withName("ppunkVal"),
                        C_POINTER.withName("ppdispVal"),
                        C_POINTER.withName("pparray"),
                        C_POINTER.withName("pvarVal"),
                        C_POINTER.withName("byref"),
                        C_CHAR.withName("cVal"),
                        C_SHORT.withName("uiVal"),
                        C_LONG.withName("ulVal"),
                        C_LONG_LONG.withName("ullVal"),
                        C_INT.withName("intVal"),
                        C_INT.withName("uintVal"),
                        C_POINTER.withName("pdecVal"),
                        C_POINTER.withName("pcVal"),
                        C_POINTER.withName("puiVal"),
                        C_POINTER.withName("pulVal"),
                        C_POINTER.withName("pullVal"),
                        C_POINTER.withName("pintVal"),
                        C_POINTER.withName("puintVal"),
                        MemoryLayout.structLayout(
                            C_POINTER.withName("pvRecord"),
                            C_POINTER.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    C_SHORT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_CHAR.withName("scale"),
                            C_CHAR.withName("sign")
                        ).withName("$anon$0"),
                        C_SHORT.withName("signscale")
                    ).withName("$anon$0"),
                    C_LONG.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_LONG.withName("Lo32"),
                            C_LONG.withName("Mid32")
                        ).withName("$anon$0"),
                        C_LONG_LONG.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT"),
        C_POINTER
    );
    static final MethodHandle insertBefore$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.insertBefore$FUNC, false
    );
    public interface insertBefore {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemorySegment x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(insertBefore fi) {
            return RuntimeHelper.upcallStub(insertBefore.class, fi, IXMLDOMElementVtbl.insertBefore$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(insertBefore fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(insertBefore.class, fi, IXMLDOMElementVtbl.insertBefore$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static insertBefore ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemorySegment x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)IXMLDOMElementVtbl.insertBefore$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle insertBefore$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("insertBefore")));
    public static VarHandle insertBefore$VH() {
        return IXMLDOMElementVtbl.insertBefore$VH;
    }
    public static MemoryAddress insertBefore$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.insertBefore$VH.get(seg);
    }
    public static void insertBefore$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.insertBefore$VH.set(seg, x);
    }
    public static MemoryAddress insertBefore$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.insertBefore$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void insertBefore$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.insertBefore$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static insertBefore insertBefore (MemorySegment segment) {
        return insertBefore.ofAddress(insertBefore$get(segment));
    }
    static final FunctionDescriptor replaceChild$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle replaceChild$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.replaceChild$FUNC, false
    );
    public interface replaceChild {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(replaceChild fi) {
            return RuntimeHelper.upcallStub(replaceChild.class, fi, IXMLDOMElementVtbl.replaceChild$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(replaceChild fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(replaceChild.class, fi, IXMLDOMElementVtbl.replaceChild$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static replaceChild ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)IXMLDOMElementVtbl.replaceChild$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle replaceChild$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("replaceChild")));
    public static VarHandle replaceChild$VH() {
        return IXMLDOMElementVtbl.replaceChild$VH;
    }
    public static MemoryAddress replaceChild$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.replaceChild$VH.get(seg);
    }
    public static void replaceChild$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.replaceChild$VH.set(seg, x);
    }
    public static MemoryAddress replaceChild$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.replaceChild$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void replaceChild$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.replaceChild$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static replaceChild replaceChild (MemorySegment segment) {
        return replaceChild.ofAddress(replaceChild$get(segment));
    }
    static final FunctionDescriptor removeChild$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle removeChild$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.removeChild$FUNC, false
    );
    public interface removeChild {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(removeChild fi) {
            return RuntimeHelper.upcallStub(removeChild.class, fi, IXMLDOMElementVtbl.removeChild$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(removeChild fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(removeChild.class, fi, IXMLDOMElementVtbl.removeChild$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static removeChild ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IXMLDOMElementVtbl.removeChild$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle removeChild$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("removeChild")));
    public static VarHandle removeChild$VH() {
        return IXMLDOMElementVtbl.removeChild$VH;
    }
    public static MemoryAddress removeChild$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.removeChild$VH.get(seg);
    }
    public static void removeChild$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.removeChild$VH.set(seg, x);
    }
    public static MemoryAddress removeChild$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.removeChild$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void removeChild$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.removeChild$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static removeChild removeChild (MemorySegment segment) {
        return removeChild.ofAddress(removeChild$get(segment));
    }
    static final FunctionDescriptor appendChild$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle appendChild$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.appendChild$FUNC, false
    );
    public interface appendChild {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(appendChild fi) {
            return RuntimeHelper.upcallStub(appendChild.class, fi, IXMLDOMElementVtbl.appendChild$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(appendChild fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(appendChild.class, fi, IXMLDOMElementVtbl.appendChild$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static appendChild ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IXMLDOMElementVtbl.appendChild$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle appendChild$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("appendChild")));
    public static VarHandle appendChild$VH() {
        return IXMLDOMElementVtbl.appendChild$VH;
    }
    public static MemoryAddress appendChild$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.appendChild$VH.get(seg);
    }
    public static void appendChild$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.appendChild$VH.set(seg, x);
    }
    public static MemoryAddress appendChild$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.appendChild$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void appendChild$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.appendChild$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static appendChild appendChild (MemorySegment segment) {
        return appendChild.ofAddress(appendChild$get(segment));
    }
    static final FunctionDescriptor hasChildNodes$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle hasChildNodes$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.hasChildNodes$FUNC, false
    );
    public interface hasChildNodes {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(hasChildNodes fi) {
            return RuntimeHelper.upcallStub(hasChildNodes.class, fi, IXMLDOMElementVtbl.hasChildNodes$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(hasChildNodes fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(hasChildNodes.class, fi, IXMLDOMElementVtbl.hasChildNodes$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static hasChildNodes ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.hasChildNodes$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle hasChildNodes$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hasChildNodes")));
    public static VarHandle hasChildNodes$VH() {
        return IXMLDOMElementVtbl.hasChildNodes$VH;
    }
    public static MemoryAddress hasChildNodes$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.hasChildNodes$VH.get(seg);
    }
    public static void hasChildNodes$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.hasChildNodes$VH.set(seg, x);
    }
    public static MemoryAddress hasChildNodes$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.hasChildNodes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hasChildNodes$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.hasChildNodes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static hasChildNodes hasChildNodes (MemorySegment segment) {
        return hasChildNodes.ofAddress(hasChildNodes$get(segment));
    }
    static final FunctionDescriptor get_ownerDocument$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_ownerDocument$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.get_ownerDocument$FUNC, false
    );
    public interface get_ownerDocument {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_ownerDocument fi) {
            return RuntimeHelper.upcallStub(get_ownerDocument.class, fi, IXMLDOMElementVtbl.get_ownerDocument$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_ownerDocument fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_ownerDocument.class, fi, IXMLDOMElementVtbl.get_ownerDocument$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_ownerDocument ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.get_ownerDocument$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_ownerDocument$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_ownerDocument")));
    public static VarHandle get_ownerDocument$VH() {
        return IXMLDOMElementVtbl.get_ownerDocument$VH;
    }
    public static MemoryAddress get_ownerDocument$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_ownerDocument$VH.get(seg);
    }
    public static void get_ownerDocument$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.get_ownerDocument$VH.set(seg, x);
    }
    public static MemoryAddress get_ownerDocument$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_ownerDocument$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_ownerDocument$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.get_ownerDocument$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_ownerDocument get_ownerDocument (MemorySegment segment) {
        return get_ownerDocument.ofAddress(get_ownerDocument$get(segment));
    }
    static final FunctionDescriptor cloneNode$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_SHORT,
        C_POINTER
    );
    static final MethodHandle cloneNode$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;SLjdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.cloneNode$FUNC, false
    );
    public interface cloneNode {

        int apply(jdk.incubator.foreign.MemoryAddress x0, short x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(cloneNode fi) {
            return RuntimeHelper.upcallStub(cloneNode.class, fi, IXMLDOMElementVtbl.cloneNode$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;SLjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(cloneNode fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(cloneNode.class, fi, IXMLDOMElementVtbl.cloneNode$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;SLjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static cloneNode ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, short x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IXMLDOMElementVtbl.cloneNode$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle cloneNode$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("cloneNode")));
    public static VarHandle cloneNode$VH() {
        return IXMLDOMElementVtbl.cloneNode$VH;
    }
    public static MemoryAddress cloneNode$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.cloneNode$VH.get(seg);
    }
    public static void cloneNode$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.cloneNode$VH.set(seg, x);
    }
    public static MemoryAddress cloneNode$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.cloneNode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cloneNode$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.cloneNode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static cloneNode cloneNode (MemorySegment segment) {
        return cloneNode.ofAddress(cloneNode$get(segment));
    }
    static final FunctionDescriptor get_nodeTypeString$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_nodeTypeString$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.get_nodeTypeString$FUNC, false
    );
    public interface get_nodeTypeString {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_nodeTypeString fi) {
            return RuntimeHelper.upcallStub(get_nodeTypeString.class, fi, IXMLDOMElementVtbl.get_nodeTypeString$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_nodeTypeString fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_nodeTypeString.class, fi, IXMLDOMElementVtbl.get_nodeTypeString$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_nodeTypeString ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.get_nodeTypeString$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_nodeTypeString$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_nodeTypeString")));
    public static VarHandle get_nodeTypeString$VH() {
        return IXMLDOMElementVtbl.get_nodeTypeString$VH;
    }
    public static MemoryAddress get_nodeTypeString$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_nodeTypeString$VH.get(seg);
    }
    public static void get_nodeTypeString$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.get_nodeTypeString$VH.set(seg, x);
    }
    public static MemoryAddress get_nodeTypeString$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_nodeTypeString$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeTypeString$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.get_nodeTypeString$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeTypeString get_nodeTypeString (MemorySegment segment) {
        return get_nodeTypeString.ofAddress(get_nodeTypeString$get(segment));
    }
    static final FunctionDescriptor get_text$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_text$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.get_text$FUNC, false
    );
    public interface get_text {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_text fi) {
            return RuntimeHelper.upcallStub(get_text.class, fi, IXMLDOMElementVtbl.get_text$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_text fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_text.class, fi, IXMLDOMElementVtbl.get_text$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_text ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.get_text$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_text$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_text")));
    public static VarHandle get_text$VH() {
        return IXMLDOMElementVtbl.get_text$VH;
    }
    public static MemoryAddress get_text$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_text$VH.get(seg);
    }
    public static void get_text$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.get_text$VH.set(seg, x);
    }
    public static MemoryAddress get_text$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_text$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.get_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_text get_text (MemorySegment segment) {
        return get_text.ofAddress(get_text$get(segment));
    }
    static final FunctionDescriptor put_text$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle put_text$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.put_text$FUNC, false
    );
    public interface put_text {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(put_text fi) {
            return RuntimeHelper.upcallStub(put_text.class, fi, IXMLDOMElementVtbl.put_text$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(put_text fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(put_text.class, fi, IXMLDOMElementVtbl.put_text$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static put_text ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.put_text$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_text$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("put_text")));
    public static VarHandle put_text$VH() {
        return IXMLDOMElementVtbl.put_text$VH;
    }
    public static MemoryAddress put_text$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.put_text$VH.get(seg);
    }
    public static void put_text$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.put_text$VH.set(seg, x);
    }
    public static MemoryAddress put_text$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.put_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_text$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.put_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_text put_text (MemorySegment segment) {
        return put_text.ofAddress(put_text$get(segment));
    }
    static final FunctionDescriptor get_specified$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_specified$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.get_specified$FUNC, false
    );
    public interface get_specified {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_specified fi) {
            return RuntimeHelper.upcallStub(get_specified.class, fi, IXMLDOMElementVtbl.get_specified$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_specified fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_specified.class, fi, IXMLDOMElementVtbl.get_specified$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_specified ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.get_specified$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_specified$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_specified")));
    public static VarHandle get_specified$VH() {
        return IXMLDOMElementVtbl.get_specified$VH;
    }
    public static MemoryAddress get_specified$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_specified$VH.get(seg);
    }
    public static void get_specified$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.get_specified$VH.set(seg, x);
    }
    public static MemoryAddress get_specified$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_specified$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_specified$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.get_specified$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_specified get_specified (MemorySegment segment) {
        return get_specified.ofAddress(get_specified$get(segment));
    }
    static final FunctionDescriptor get_definition$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_definition$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.get_definition$FUNC, false
    );
    public interface get_definition {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_definition fi) {
            return RuntimeHelper.upcallStub(get_definition.class, fi, IXMLDOMElementVtbl.get_definition$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_definition fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_definition.class, fi, IXMLDOMElementVtbl.get_definition$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_definition ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.get_definition$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_definition$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_definition")));
    public static VarHandle get_definition$VH() {
        return IXMLDOMElementVtbl.get_definition$VH;
    }
    public static MemoryAddress get_definition$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_definition$VH.get(seg);
    }
    public static void get_definition$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.get_definition$VH.set(seg, x);
    }
    public static MemoryAddress get_definition$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_definition$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_definition$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.get_definition$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_definition get_definition (MemorySegment segment) {
        return get_definition.ofAddress(get_definition$get(segment));
    }
    static final FunctionDescriptor get_nodeTypedValue$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_nodeTypedValue$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.get_nodeTypedValue$FUNC, false
    );
    public interface get_nodeTypedValue {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_nodeTypedValue fi) {
            return RuntimeHelper.upcallStub(get_nodeTypedValue.class, fi, IXMLDOMElementVtbl.get_nodeTypedValue$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_nodeTypedValue fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_nodeTypedValue.class, fi, IXMLDOMElementVtbl.get_nodeTypedValue$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_nodeTypedValue ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.get_nodeTypedValue$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_nodeTypedValue$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_nodeTypedValue")));
    public static VarHandle get_nodeTypedValue$VH() {
        return IXMLDOMElementVtbl.get_nodeTypedValue$VH;
    }
    public static MemoryAddress get_nodeTypedValue$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_nodeTypedValue$VH.get(seg);
    }
    public static void get_nodeTypedValue$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.get_nodeTypedValue$VH.set(seg, x);
    }
    public static MemoryAddress get_nodeTypedValue$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_nodeTypedValue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeTypedValue$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.get_nodeTypedValue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeTypedValue get_nodeTypedValue (MemorySegment segment) {
        return get_nodeTypedValue.ofAddress(get_nodeTypedValue$get(segment));
    }
    static final FunctionDescriptor put_nodeTypedValue$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    C_SHORT.withName("vt"),
                    C_SHORT.withName("wReserved1"),
                    C_SHORT.withName("wReserved2"),
                    C_SHORT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        C_LONG_LONG.withName("llVal"),
                        C_LONG.withName("lVal"),
                        C_CHAR.withName("bVal"),
                        C_SHORT.withName("iVal"),
                        C_FLOAT.withName("fltVal"),
                        C_DOUBLE.withName("dblVal"),
                        C_SHORT.withName("boolVal"),
                        C_LONG.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                C_LONG.withName("Lo"),
                                C_LONG.withName("Hi")
                            ).withName("$anon$0"),
                            C_LONG_LONG.withName("int64")
                        ).withName("cyVal"),
                        C_DOUBLE.withName("date"),
                        C_POINTER.withName("bstrVal"),
                        C_POINTER.withName("punkVal"),
                        C_POINTER.withName("pdispVal"),
                        C_POINTER.withName("parray"),
                        C_POINTER.withName("pbVal"),
                        C_POINTER.withName("piVal"),
                        C_POINTER.withName("plVal"),
                        C_POINTER.withName("pllVal"),
                        C_POINTER.withName("pfltVal"),
                        C_POINTER.withName("pdblVal"),
                        C_POINTER.withName("pboolVal"),
                        C_POINTER.withName("pscode"),
                        C_POINTER.withName("pcyVal"),
                        C_POINTER.withName("pdate"),
                        C_POINTER.withName("pbstrVal"),
                        C_POINTER.withName("ppunkVal"),
                        C_POINTER.withName("ppdispVal"),
                        C_POINTER.withName("pparray"),
                        C_POINTER.withName("pvarVal"),
                        C_POINTER.withName("byref"),
                        C_CHAR.withName("cVal"),
                        C_SHORT.withName("uiVal"),
                        C_LONG.withName("ulVal"),
                        C_LONG_LONG.withName("ullVal"),
                        C_INT.withName("intVal"),
                        C_INT.withName("uintVal"),
                        C_POINTER.withName("pdecVal"),
                        C_POINTER.withName("pcVal"),
                        C_POINTER.withName("puiVal"),
                        C_POINTER.withName("pulVal"),
                        C_POINTER.withName("pullVal"),
                        C_POINTER.withName("pintVal"),
                        C_POINTER.withName("puintVal"),
                        MemoryLayout.structLayout(
                            C_POINTER.withName("pvRecord"),
                            C_POINTER.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    C_SHORT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_CHAR.withName("scale"),
                            C_CHAR.withName("sign")
                        ).withName("$anon$0"),
                        C_SHORT.withName("signscale")
                    ).withName("$anon$0"),
                    C_LONG.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_LONG.withName("Lo32"),
                            C_LONG.withName("Mid32")
                        ).withName("$anon$0"),
                        C_LONG_LONG.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT")
    );
    static final MethodHandle put_nodeTypedValue$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        IXMLDOMElementVtbl.put_nodeTypedValue$FUNC, false
    );
    public interface put_nodeTypedValue {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1);
        static MemoryAddress allocate(put_nodeTypedValue fi) {
            return RuntimeHelper.upcallStub(put_nodeTypedValue.class, fi, IXMLDOMElementVtbl.put_nodeTypedValue$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I");
        }
        static MemoryAddress allocate(put_nodeTypedValue fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(put_nodeTypedValue.class, fi, IXMLDOMElementVtbl.put_nodeTypedValue$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I", scope);
        }
        static put_nodeTypedValue ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.put_nodeTypedValue$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_nodeTypedValue$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("put_nodeTypedValue")));
    public static VarHandle put_nodeTypedValue$VH() {
        return IXMLDOMElementVtbl.put_nodeTypedValue$VH;
    }
    public static MemoryAddress put_nodeTypedValue$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.put_nodeTypedValue$VH.get(seg);
    }
    public static void put_nodeTypedValue$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.put_nodeTypedValue$VH.set(seg, x);
    }
    public static MemoryAddress put_nodeTypedValue$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.put_nodeTypedValue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_nodeTypedValue$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.put_nodeTypedValue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_nodeTypedValue put_nodeTypedValue (MemorySegment segment) {
        return put_nodeTypedValue.ofAddress(put_nodeTypedValue$get(segment));
    }
    static final FunctionDescriptor get_dataType$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_dataType$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.get_dataType$FUNC, false
    );
    public interface get_dataType {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_dataType fi) {
            return RuntimeHelper.upcallStub(get_dataType.class, fi, IXMLDOMElementVtbl.get_dataType$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_dataType fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_dataType.class, fi, IXMLDOMElementVtbl.get_dataType$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_dataType ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.get_dataType$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_dataType$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_dataType")));
    public static VarHandle get_dataType$VH() {
        return IXMLDOMElementVtbl.get_dataType$VH;
    }
    public static MemoryAddress get_dataType$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_dataType$VH.get(seg);
    }
    public static void get_dataType$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.get_dataType$VH.set(seg, x);
    }
    public static MemoryAddress get_dataType$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_dataType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_dataType$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.get_dataType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_dataType get_dataType (MemorySegment segment) {
        return get_dataType.ofAddress(get_dataType$get(segment));
    }
    static final FunctionDescriptor put_dataType$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle put_dataType$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.put_dataType$FUNC, false
    );
    public interface put_dataType {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(put_dataType fi) {
            return RuntimeHelper.upcallStub(put_dataType.class, fi, IXMLDOMElementVtbl.put_dataType$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(put_dataType fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(put_dataType.class, fi, IXMLDOMElementVtbl.put_dataType$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static put_dataType ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.put_dataType$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_dataType$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("put_dataType")));
    public static VarHandle put_dataType$VH() {
        return IXMLDOMElementVtbl.put_dataType$VH;
    }
    public static MemoryAddress put_dataType$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.put_dataType$VH.get(seg);
    }
    public static void put_dataType$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.put_dataType$VH.set(seg, x);
    }
    public static MemoryAddress put_dataType$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.put_dataType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_dataType$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.put_dataType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_dataType put_dataType (MemorySegment segment) {
        return put_dataType.ofAddress(put_dataType$get(segment));
    }
    static final FunctionDescriptor get_xml$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_xml$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.get_xml$FUNC, false
    );
    public interface get_xml {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_xml fi) {
            return RuntimeHelper.upcallStub(get_xml.class, fi, IXMLDOMElementVtbl.get_xml$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_xml fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_xml.class, fi, IXMLDOMElementVtbl.get_xml$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_xml ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.get_xml$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_xml$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_xml")));
    public static VarHandle get_xml$VH() {
        return IXMLDOMElementVtbl.get_xml$VH;
    }
    public static MemoryAddress get_xml$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_xml$VH.get(seg);
    }
    public static void get_xml$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.get_xml$VH.set(seg, x);
    }
    public static MemoryAddress get_xml$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_xml$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_xml$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.get_xml$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_xml get_xml (MemorySegment segment) {
        return get_xml.ofAddress(get_xml$get(segment));
    }
    static final FunctionDescriptor transformNode$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle transformNode$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.transformNode$FUNC, false
    );
    public interface transformNode {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(transformNode fi) {
            return RuntimeHelper.upcallStub(transformNode.class, fi, IXMLDOMElementVtbl.transformNode$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(transformNode fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(transformNode.class, fi, IXMLDOMElementVtbl.transformNode$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static transformNode ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IXMLDOMElementVtbl.transformNode$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle transformNode$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("transformNode")));
    public static VarHandle transformNode$VH() {
        return IXMLDOMElementVtbl.transformNode$VH;
    }
    public static MemoryAddress transformNode$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.transformNode$VH.get(seg);
    }
    public static void transformNode$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.transformNode$VH.set(seg, x);
    }
    public static MemoryAddress transformNode$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.transformNode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void transformNode$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.transformNode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static transformNode transformNode (MemorySegment segment) {
        return transformNode.ofAddress(transformNode$get(segment));
    }
    static final FunctionDescriptor selectNodes$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle selectNodes$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.selectNodes$FUNC, false
    );
    public interface selectNodes {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(selectNodes fi) {
            return RuntimeHelper.upcallStub(selectNodes.class, fi, IXMLDOMElementVtbl.selectNodes$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(selectNodes fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(selectNodes.class, fi, IXMLDOMElementVtbl.selectNodes$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static selectNodes ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IXMLDOMElementVtbl.selectNodes$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle selectNodes$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("selectNodes")));
    public static VarHandle selectNodes$VH() {
        return IXMLDOMElementVtbl.selectNodes$VH;
    }
    public static MemoryAddress selectNodes$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.selectNodes$VH.get(seg);
    }
    public static void selectNodes$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.selectNodes$VH.set(seg, x);
    }
    public static MemoryAddress selectNodes$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.selectNodes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void selectNodes$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.selectNodes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static selectNodes selectNodes (MemorySegment segment) {
        return selectNodes.ofAddress(selectNodes$get(segment));
    }
    static final FunctionDescriptor selectSingleNode$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle selectSingleNode$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.selectSingleNode$FUNC, false
    );
    public interface selectSingleNode {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(selectSingleNode fi) {
            return RuntimeHelper.upcallStub(selectSingleNode.class, fi, IXMLDOMElementVtbl.selectSingleNode$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(selectSingleNode fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(selectSingleNode.class, fi, IXMLDOMElementVtbl.selectSingleNode$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static selectSingleNode ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IXMLDOMElementVtbl.selectSingleNode$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle selectSingleNode$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("selectSingleNode")));
    public static VarHandle selectSingleNode$VH() {
        return IXMLDOMElementVtbl.selectSingleNode$VH;
    }
    public static MemoryAddress selectSingleNode$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.selectSingleNode$VH.get(seg);
    }
    public static void selectSingleNode$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.selectSingleNode$VH.set(seg, x);
    }
    public static MemoryAddress selectSingleNode$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.selectSingleNode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void selectSingleNode$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.selectSingleNode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static selectSingleNode selectSingleNode (MemorySegment segment) {
        return selectSingleNode.ofAddress(selectSingleNode$get(segment));
    }
    static final FunctionDescriptor get_parsed$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_parsed$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.get_parsed$FUNC, false
    );
    public interface get_parsed {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_parsed fi) {
            return RuntimeHelper.upcallStub(get_parsed.class, fi, IXMLDOMElementVtbl.get_parsed$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_parsed fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_parsed.class, fi, IXMLDOMElementVtbl.get_parsed$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_parsed ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.get_parsed$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_parsed$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_parsed")));
    public static VarHandle get_parsed$VH() {
        return IXMLDOMElementVtbl.get_parsed$VH;
    }
    public static MemoryAddress get_parsed$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_parsed$VH.get(seg);
    }
    public static void get_parsed$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.get_parsed$VH.set(seg, x);
    }
    public static MemoryAddress get_parsed$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_parsed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_parsed$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.get_parsed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_parsed get_parsed (MemorySegment segment) {
        return get_parsed.ofAddress(get_parsed$get(segment));
    }
    static final FunctionDescriptor get_namespaceURI$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_namespaceURI$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.get_namespaceURI$FUNC, false
    );
    public interface get_namespaceURI {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_namespaceURI fi) {
            return RuntimeHelper.upcallStub(get_namespaceURI.class, fi, IXMLDOMElementVtbl.get_namespaceURI$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_namespaceURI fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_namespaceURI.class, fi, IXMLDOMElementVtbl.get_namespaceURI$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_namespaceURI ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.get_namespaceURI$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_namespaceURI$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_namespaceURI")));
    public static VarHandle get_namespaceURI$VH() {
        return IXMLDOMElementVtbl.get_namespaceURI$VH;
    }
    public static MemoryAddress get_namespaceURI$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_namespaceURI$VH.get(seg);
    }
    public static void get_namespaceURI$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.get_namespaceURI$VH.set(seg, x);
    }
    public static MemoryAddress get_namespaceURI$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_namespaceURI$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_namespaceURI$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.get_namespaceURI$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_namespaceURI get_namespaceURI (MemorySegment segment) {
        return get_namespaceURI.ofAddress(get_namespaceURI$get(segment));
    }
    static final FunctionDescriptor get_prefix$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_prefix$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.get_prefix$FUNC, false
    );
    public interface get_prefix {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_prefix fi) {
            return RuntimeHelper.upcallStub(get_prefix.class, fi, IXMLDOMElementVtbl.get_prefix$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_prefix fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_prefix.class, fi, IXMLDOMElementVtbl.get_prefix$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_prefix ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.get_prefix$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_prefix$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_prefix")));
    public static VarHandle get_prefix$VH() {
        return IXMLDOMElementVtbl.get_prefix$VH;
    }
    public static MemoryAddress get_prefix$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_prefix$VH.get(seg);
    }
    public static void get_prefix$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.get_prefix$VH.set(seg, x);
    }
    public static MemoryAddress get_prefix$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_prefix$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_prefix$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.get_prefix$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_prefix get_prefix (MemorySegment segment) {
        return get_prefix.ofAddress(get_prefix$get(segment));
    }
    static final FunctionDescriptor get_baseName$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_baseName$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.get_baseName$FUNC, false
    );
    public interface get_baseName {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_baseName fi) {
            return RuntimeHelper.upcallStub(get_baseName.class, fi, IXMLDOMElementVtbl.get_baseName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_baseName fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_baseName.class, fi, IXMLDOMElementVtbl.get_baseName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_baseName ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.get_baseName$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_baseName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_baseName")));
    public static VarHandle get_baseName$VH() {
        return IXMLDOMElementVtbl.get_baseName$VH;
    }
    public static MemoryAddress get_baseName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_baseName$VH.get(seg);
    }
    public static void get_baseName$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.get_baseName$VH.set(seg, x);
    }
    public static MemoryAddress get_baseName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_baseName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_baseName$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.get_baseName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_baseName get_baseName (MemorySegment segment) {
        return get_baseName.ofAddress(get_baseName$get(segment));
    }
    static final FunctionDescriptor transformNodeToObject$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    C_SHORT.withName("vt"),
                    C_SHORT.withName("wReserved1"),
                    C_SHORT.withName("wReserved2"),
                    C_SHORT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        C_LONG_LONG.withName("llVal"),
                        C_LONG.withName("lVal"),
                        C_CHAR.withName("bVal"),
                        C_SHORT.withName("iVal"),
                        C_FLOAT.withName("fltVal"),
                        C_DOUBLE.withName("dblVal"),
                        C_SHORT.withName("boolVal"),
                        C_LONG.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                C_LONG.withName("Lo"),
                                C_LONG.withName("Hi")
                            ).withName("$anon$0"),
                            C_LONG_LONG.withName("int64")
                        ).withName("cyVal"),
                        C_DOUBLE.withName("date"),
                        C_POINTER.withName("bstrVal"),
                        C_POINTER.withName("punkVal"),
                        C_POINTER.withName("pdispVal"),
                        C_POINTER.withName("parray"),
                        C_POINTER.withName("pbVal"),
                        C_POINTER.withName("piVal"),
                        C_POINTER.withName("plVal"),
                        C_POINTER.withName("pllVal"),
                        C_POINTER.withName("pfltVal"),
                        C_POINTER.withName("pdblVal"),
                        C_POINTER.withName("pboolVal"),
                        C_POINTER.withName("pscode"),
                        C_POINTER.withName("pcyVal"),
                        C_POINTER.withName("pdate"),
                        C_POINTER.withName("pbstrVal"),
                        C_POINTER.withName("ppunkVal"),
                        C_POINTER.withName("ppdispVal"),
                        C_POINTER.withName("pparray"),
                        C_POINTER.withName("pvarVal"),
                        C_POINTER.withName("byref"),
                        C_CHAR.withName("cVal"),
                        C_SHORT.withName("uiVal"),
                        C_LONG.withName("ulVal"),
                        C_LONG_LONG.withName("ullVal"),
                        C_INT.withName("intVal"),
                        C_INT.withName("uintVal"),
                        C_POINTER.withName("pdecVal"),
                        C_POINTER.withName("pcVal"),
                        C_POINTER.withName("puiVal"),
                        C_POINTER.withName("pulVal"),
                        C_POINTER.withName("pullVal"),
                        C_POINTER.withName("pintVal"),
                        C_POINTER.withName("puintVal"),
                        MemoryLayout.structLayout(
                            C_POINTER.withName("pvRecord"),
                            C_POINTER.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    C_SHORT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_CHAR.withName("scale"),
                            C_CHAR.withName("sign")
                        ).withName("$anon$0"),
                        C_SHORT.withName("signscale")
                    ).withName("$anon$0"),
                    C_LONG.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_LONG.withName("Lo32"),
                            C_LONG.withName("Mid32")
                        ).withName("$anon$0"),
                        C_LONG_LONG.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT")
    );
    static final MethodHandle transformNodeToObject$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        IXMLDOMElementVtbl.transformNodeToObject$FUNC, false
    );
    public interface transformNodeToObject {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemorySegment x2);
        static MemoryAddress allocate(transformNodeToObject fi) {
            return RuntimeHelper.upcallStub(transformNodeToObject.class, fi, IXMLDOMElementVtbl.transformNodeToObject$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I");
        }
        static MemoryAddress allocate(transformNodeToObject fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(transformNodeToObject.class, fi, IXMLDOMElementVtbl.transformNodeToObject$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I", scope);
        }
        static transformNodeToObject ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemorySegment x2) -> {
                try {
                    return (int)IXMLDOMElementVtbl.transformNodeToObject$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle transformNodeToObject$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("transformNodeToObject")));
    public static VarHandle transformNodeToObject$VH() {
        return IXMLDOMElementVtbl.transformNodeToObject$VH;
    }
    public static MemoryAddress transformNodeToObject$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.transformNodeToObject$VH.get(seg);
    }
    public static void transformNodeToObject$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.transformNodeToObject$VH.set(seg, x);
    }
    public static MemoryAddress transformNodeToObject$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.transformNodeToObject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void transformNodeToObject$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.transformNodeToObject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static transformNodeToObject transformNodeToObject (MemorySegment segment) {
        return transformNodeToObject.ofAddress(transformNodeToObject$get(segment));
    }
    static final FunctionDescriptor get_tagName$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_tagName$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.get_tagName$FUNC, false
    );
    public interface get_tagName {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_tagName fi) {
            return RuntimeHelper.upcallStub(get_tagName.class, fi, IXMLDOMElementVtbl.get_tagName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_tagName fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_tagName.class, fi, IXMLDOMElementVtbl.get_tagName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_tagName ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.get_tagName$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_tagName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_tagName")));
    public static VarHandle get_tagName$VH() {
        return IXMLDOMElementVtbl.get_tagName$VH;
    }
    public static MemoryAddress get_tagName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_tagName$VH.get(seg);
    }
    public static void get_tagName$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.get_tagName$VH.set(seg, x);
    }
    public static MemoryAddress get_tagName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.get_tagName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_tagName$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.get_tagName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_tagName get_tagName (MemorySegment segment) {
        return get_tagName.ofAddress(get_tagName$get(segment));
    }
    static final FunctionDescriptor getAttribute$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle getAttribute$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.getAttribute$FUNC, false
    );
    public interface getAttribute {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(getAttribute fi) {
            return RuntimeHelper.upcallStub(getAttribute.class, fi, IXMLDOMElementVtbl.getAttribute$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(getAttribute fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(getAttribute.class, fi, IXMLDOMElementVtbl.getAttribute$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static getAttribute ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IXMLDOMElementVtbl.getAttribute$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle getAttribute$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("getAttribute")));
    public static VarHandle getAttribute$VH() {
        return IXMLDOMElementVtbl.getAttribute$VH;
    }
    public static MemoryAddress getAttribute$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.getAttribute$VH.get(seg);
    }
    public static void getAttribute$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.getAttribute$VH.set(seg, x);
    }
    public static MemoryAddress getAttribute$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.getAttribute$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void getAttribute$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.getAttribute$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static getAttribute getAttribute (MemorySegment segment) {
        return getAttribute.ofAddress(getAttribute$get(segment));
    }
    static final FunctionDescriptor setAttribute$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    C_SHORT.withName("vt"),
                    C_SHORT.withName("wReserved1"),
                    C_SHORT.withName("wReserved2"),
                    C_SHORT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        C_LONG_LONG.withName("llVal"),
                        C_LONG.withName("lVal"),
                        C_CHAR.withName("bVal"),
                        C_SHORT.withName("iVal"),
                        C_FLOAT.withName("fltVal"),
                        C_DOUBLE.withName("dblVal"),
                        C_SHORT.withName("boolVal"),
                        C_LONG.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                C_LONG.withName("Lo"),
                                C_LONG.withName("Hi")
                            ).withName("$anon$0"),
                            C_LONG_LONG.withName("int64")
                        ).withName("cyVal"),
                        C_DOUBLE.withName("date"),
                        C_POINTER.withName("bstrVal"),
                        C_POINTER.withName("punkVal"),
                        C_POINTER.withName("pdispVal"),
                        C_POINTER.withName("parray"),
                        C_POINTER.withName("pbVal"),
                        C_POINTER.withName("piVal"),
                        C_POINTER.withName("plVal"),
                        C_POINTER.withName("pllVal"),
                        C_POINTER.withName("pfltVal"),
                        C_POINTER.withName("pdblVal"),
                        C_POINTER.withName("pboolVal"),
                        C_POINTER.withName("pscode"),
                        C_POINTER.withName("pcyVal"),
                        C_POINTER.withName("pdate"),
                        C_POINTER.withName("pbstrVal"),
                        C_POINTER.withName("ppunkVal"),
                        C_POINTER.withName("ppdispVal"),
                        C_POINTER.withName("pparray"),
                        C_POINTER.withName("pvarVal"),
                        C_POINTER.withName("byref"),
                        C_CHAR.withName("cVal"),
                        C_SHORT.withName("uiVal"),
                        C_LONG.withName("ulVal"),
                        C_LONG_LONG.withName("ullVal"),
                        C_INT.withName("intVal"),
                        C_INT.withName("uintVal"),
                        C_POINTER.withName("pdecVal"),
                        C_POINTER.withName("pcVal"),
                        C_POINTER.withName("puiVal"),
                        C_POINTER.withName("pulVal"),
                        C_POINTER.withName("pullVal"),
                        C_POINTER.withName("pintVal"),
                        C_POINTER.withName("puintVal"),
                        MemoryLayout.structLayout(
                            C_POINTER.withName("pvRecord"),
                            C_POINTER.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    C_SHORT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_CHAR.withName("scale"),
                            C_CHAR.withName("sign")
                        ).withName("$anon$0"),
                        C_SHORT.withName("signscale")
                    ).withName("$anon$0"),
                    C_LONG.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_LONG.withName("Lo32"),
                            C_LONG.withName("Mid32")
                        ).withName("$anon$0"),
                        C_LONG_LONG.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT")
    );
    static final MethodHandle setAttribute$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        IXMLDOMElementVtbl.setAttribute$FUNC, false
    );
    public interface setAttribute {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemorySegment x2);
        static MemoryAddress allocate(setAttribute fi) {
            return RuntimeHelper.upcallStub(setAttribute.class, fi, IXMLDOMElementVtbl.setAttribute$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I");
        }
        static MemoryAddress allocate(setAttribute fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(setAttribute.class, fi, IXMLDOMElementVtbl.setAttribute$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I", scope);
        }
        static setAttribute ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemorySegment x2) -> {
                try {
                    return (int)IXMLDOMElementVtbl.setAttribute$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle setAttribute$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("setAttribute")));
    public static VarHandle setAttribute$VH() {
        return IXMLDOMElementVtbl.setAttribute$VH;
    }
    public static MemoryAddress setAttribute$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.setAttribute$VH.get(seg);
    }
    public static void setAttribute$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.setAttribute$VH.set(seg, x);
    }
    public static MemoryAddress setAttribute$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.setAttribute$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void setAttribute$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.setAttribute$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static setAttribute setAttribute (MemorySegment segment) {
        return setAttribute.ofAddress(setAttribute$get(segment));
    }
    static final FunctionDescriptor removeAttribute$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle removeAttribute$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.removeAttribute$FUNC, false
    );
    public interface removeAttribute {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(removeAttribute fi) {
            return RuntimeHelper.upcallStub(removeAttribute.class, fi, IXMLDOMElementVtbl.removeAttribute$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(removeAttribute fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(removeAttribute.class, fi, IXMLDOMElementVtbl.removeAttribute$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static removeAttribute ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMElementVtbl.removeAttribute$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle removeAttribute$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("removeAttribute")));
    public static VarHandle removeAttribute$VH() {
        return IXMLDOMElementVtbl.removeAttribute$VH;
    }
    public static MemoryAddress removeAttribute$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.removeAttribute$VH.get(seg);
    }
    public static void removeAttribute$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.removeAttribute$VH.set(seg, x);
    }
    public static MemoryAddress removeAttribute$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.removeAttribute$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void removeAttribute$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.removeAttribute$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static removeAttribute removeAttribute (MemorySegment segment) {
        return removeAttribute.ofAddress(removeAttribute$get(segment));
    }
    static final FunctionDescriptor getAttributeNode$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle getAttributeNode$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.getAttributeNode$FUNC, false
    );
    public interface getAttributeNode {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(getAttributeNode fi) {
            return RuntimeHelper.upcallStub(getAttributeNode.class, fi, IXMLDOMElementVtbl.getAttributeNode$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(getAttributeNode fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(getAttributeNode.class, fi, IXMLDOMElementVtbl.getAttributeNode$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static getAttributeNode ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IXMLDOMElementVtbl.getAttributeNode$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle getAttributeNode$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("getAttributeNode")));
    public static VarHandle getAttributeNode$VH() {
        return IXMLDOMElementVtbl.getAttributeNode$VH;
    }
    public static MemoryAddress getAttributeNode$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.getAttributeNode$VH.get(seg);
    }
    public static void getAttributeNode$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.getAttributeNode$VH.set(seg, x);
    }
    public static MemoryAddress getAttributeNode$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.getAttributeNode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void getAttributeNode$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.getAttributeNode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static getAttributeNode getAttributeNode (MemorySegment segment) {
        return getAttributeNode.ofAddress(getAttributeNode$get(segment));
    }
    static final FunctionDescriptor setAttributeNode$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle setAttributeNode$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.setAttributeNode$FUNC, false
    );
    public interface setAttributeNode {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(setAttributeNode fi) {
            return RuntimeHelper.upcallStub(setAttributeNode.class, fi, IXMLDOMElementVtbl.setAttributeNode$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(setAttributeNode fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(setAttributeNode.class, fi, IXMLDOMElementVtbl.setAttributeNode$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static setAttributeNode ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IXMLDOMElementVtbl.setAttributeNode$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle setAttributeNode$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("setAttributeNode")));
    public static VarHandle setAttributeNode$VH() {
        return IXMLDOMElementVtbl.setAttributeNode$VH;
    }
    public static MemoryAddress setAttributeNode$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.setAttributeNode$VH.get(seg);
    }
    public static void setAttributeNode$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.setAttributeNode$VH.set(seg, x);
    }
    public static MemoryAddress setAttributeNode$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.setAttributeNode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void setAttributeNode$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.setAttributeNode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static setAttributeNode setAttributeNode (MemorySegment segment) {
        return setAttributeNode.ofAddress(setAttributeNode$get(segment));
    }
    static final FunctionDescriptor removeAttributeNode$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle removeAttributeNode$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.removeAttributeNode$FUNC, false
    );
    public interface removeAttributeNode {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(removeAttributeNode fi) {
            return RuntimeHelper.upcallStub(removeAttributeNode.class, fi, IXMLDOMElementVtbl.removeAttributeNode$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(removeAttributeNode fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(removeAttributeNode.class, fi, IXMLDOMElementVtbl.removeAttributeNode$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static removeAttributeNode ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IXMLDOMElementVtbl.removeAttributeNode$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle removeAttributeNode$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("removeAttributeNode")));
    public static VarHandle removeAttributeNode$VH() {
        return IXMLDOMElementVtbl.removeAttributeNode$VH;
    }
    public static MemoryAddress removeAttributeNode$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.removeAttributeNode$VH.get(seg);
    }
    public static void removeAttributeNode$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.removeAttributeNode$VH.set(seg, x);
    }
    public static MemoryAddress removeAttributeNode$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.removeAttributeNode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void removeAttributeNode$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.removeAttributeNode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static removeAttributeNode removeAttributeNode (MemorySegment segment) {
        return removeAttributeNode.ofAddress(removeAttributeNode$get(segment));
    }
    static final FunctionDescriptor getElementsByTagName$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle getElementsByTagName$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.getElementsByTagName$FUNC, false
    );
    public interface getElementsByTagName {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(getElementsByTagName fi) {
            return RuntimeHelper.upcallStub(getElementsByTagName.class, fi, IXMLDOMElementVtbl.getElementsByTagName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(getElementsByTagName fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(getElementsByTagName.class, fi, IXMLDOMElementVtbl.getElementsByTagName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static getElementsByTagName ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IXMLDOMElementVtbl.getElementsByTagName$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle getElementsByTagName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("getElementsByTagName")));
    public static VarHandle getElementsByTagName$VH() {
        return IXMLDOMElementVtbl.getElementsByTagName$VH;
    }
    public static MemoryAddress getElementsByTagName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.getElementsByTagName$VH.get(seg);
    }
    public static void getElementsByTagName$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.getElementsByTagName$VH.set(seg, x);
    }
    public static MemoryAddress getElementsByTagName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.getElementsByTagName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void getElementsByTagName$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.getElementsByTagName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static getElementsByTagName getElementsByTagName (MemorySegment segment) {
        return getElementsByTagName.ofAddress(getElementsByTagName$get(segment));
    }
    static final FunctionDescriptor normalize$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle normalize$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMElementVtbl.normalize$FUNC, false
    );
    public interface normalize {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(normalize fi) {
            return RuntimeHelper.upcallStub(normalize.class, fi, IXMLDOMElementVtbl.normalize$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(normalize fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(normalize.class, fi, IXMLDOMElementVtbl.normalize$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static normalize ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IXMLDOMElementVtbl.normalize$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle normalize$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("normalize")));
    public static VarHandle normalize$VH() {
        return IXMLDOMElementVtbl.normalize$VH;
    }
    public static MemoryAddress normalize$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.normalize$VH.get(seg);
    }
    public static void normalize$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMElementVtbl.normalize$VH.set(seg, x);
    }
    public static MemoryAddress normalize$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMElementVtbl.normalize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void normalize$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMElementVtbl.normalize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static normalize normalize (MemorySegment segment) {
        return normalize.ofAddress(normalize$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


