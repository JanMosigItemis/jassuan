// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONG_LONG.withName("QuadPart")
            ).withName("TotalUserTime"),
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONG_LONG.withName("QuadPart")
            ).withName("TotalKernelTime"),
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONG_LONG.withName("QuadPart")
            ).withName("ThisPeriodTotalUserTime"),
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONG_LONG.withName("QuadPart")
            ).withName("ThisPeriodTotalKernelTime"),
            C_LONG.withName("TotalPageFaultCount"),
            C_LONG.withName("TotalProcesses"),
            C_LONG.withName("ActiveProcesses"),
            C_LONG.withName("TotalTerminatedProcesses")
        ).withName("BasicInfo"),
        MemoryLayout.structLayout(
            C_LONG_LONG.withName("ReadOperationCount"),
            C_LONG_LONG.withName("WriteOperationCount"),
            C_LONG_LONG.withName("OtherOperationCount"),
            C_LONG_LONG.withName("ReadTransferCount"),
            C_LONG_LONG.withName("WriteTransferCount"),
            C_LONG_LONG.withName("OtherTransferCount")
        ).withName("IoInfo")
    ).withName("_JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION");
    public static MemoryLayout $LAYOUT() {
        return _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION.$struct$LAYOUT;
    }
    public static MemorySegment BasicInfo$slice(MemorySegment seg) {
        return seg.asSlice(0, 48);
    }
    public static MemorySegment IoInfo$slice(MemorySegment seg) {
        return seg.asSlice(48, 48);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


