// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class in_pktinfo {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    C_CHAR.withName("s_b1"),
                    C_CHAR.withName("s_b2"),
                    C_CHAR.withName("s_b3"),
                    C_CHAR.withName("s_b4")
                ).withName("S_un_b"),
                MemoryLayout.structLayout(
                    C_SHORT.withName("s_w1"),
                    C_SHORT.withName("s_w2")
                ).withName("S_un_w"),
                C_LONG.withName("S_addr")
            ).withName("S_un")
        ).withName("ipi_addr"),
        C_INT.withName("ipi_ifindex")
    ).withName("in_pktinfo");
    public static MemoryLayout $LAYOUT() {
        return in_pktinfo.$struct$LAYOUT;
    }
    public static MemorySegment ipi_addr$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    static final VarHandle ipi_ifindex$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ipi_ifindex"));
    public static VarHandle ipi_ifindex$VH() {
        return in_pktinfo.ipi_ifindex$VH;
    }
    public static int ipi_ifindex$get(MemorySegment seg) {
        return (int)in_pktinfo.ipi_ifindex$VH.get(seg);
    }
    public static void ipi_ifindex$set( MemorySegment seg, int x) {
        in_pktinfo.ipi_ifindex$VH.set(seg, x);
    }
    public static int ipi_ifindex$get(MemorySegment seg, long index) {
        return (int)in_pktinfo.ipi_ifindex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ipi_ifindex$set(MemorySegment seg, long index, int x) {
        in_pktinfo.ipi_ifindex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


