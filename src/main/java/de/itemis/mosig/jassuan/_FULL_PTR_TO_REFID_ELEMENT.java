// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _FULL_PTR_TO_REFID_ELEMENT {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("Next"),
        C_POINTER.withName("Pointer"),
        C_LONG.withName("RefId"),
        C_CHAR.withName("State"),
        MemoryLayout.paddingLayout(24)
    ).withName("_FULL_PTR_TO_REFID_ELEMENT");
    public static MemoryLayout $LAYOUT() {
        return _FULL_PTR_TO_REFID_ELEMENT.$struct$LAYOUT;
    }
    static final VarHandle Next$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Next")));
    public static VarHandle Next$VH() {
        return _FULL_PTR_TO_REFID_ELEMENT.Next$VH;
    }
    public static MemoryAddress Next$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_FULL_PTR_TO_REFID_ELEMENT.Next$VH.get(seg);
    }
    public static void Next$set( MemorySegment seg, MemoryAddress x) {
        _FULL_PTR_TO_REFID_ELEMENT.Next$VH.set(seg, x);
    }
    public static MemoryAddress Next$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_FULL_PTR_TO_REFID_ELEMENT.Next$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Next$set(MemorySegment seg, long index, MemoryAddress x) {
        _FULL_PTR_TO_REFID_ELEMENT.Next$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Pointer$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Pointer")));
    public static VarHandle Pointer$VH() {
        return _FULL_PTR_TO_REFID_ELEMENT.Pointer$VH;
    }
    public static MemoryAddress Pointer$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_FULL_PTR_TO_REFID_ELEMENT.Pointer$VH.get(seg);
    }
    public static void Pointer$set( MemorySegment seg, MemoryAddress x) {
        _FULL_PTR_TO_REFID_ELEMENT.Pointer$VH.set(seg, x);
    }
    public static MemoryAddress Pointer$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_FULL_PTR_TO_REFID_ELEMENT.Pointer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Pointer$set(MemorySegment seg, long index, MemoryAddress x) {
        _FULL_PTR_TO_REFID_ELEMENT.Pointer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RefId$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("RefId"));
    public static VarHandle RefId$VH() {
        return _FULL_PTR_TO_REFID_ELEMENT.RefId$VH;
    }
    public static int RefId$get(MemorySegment seg) {
        return (int)_FULL_PTR_TO_REFID_ELEMENT.RefId$VH.get(seg);
    }
    public static void RefId$set( MemorySegment seg, int x) {
        _FULL_PTR_TO_REFID_ELEMENT.RefId$VH.set(seg, x);
    }
    public static int RefId$get(MemorySegment seg, long index) {
        return (int)_FULL_PTR_TO_REFID_ELEMENT.RefId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RefId$set(MemorySegment seg, long index, int x) {
        _FULL_PTR_TO_REFID_ELEMENT.RefId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle State$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("State"));
    public static VarHandle State$VH() {
        return _FULL_PTR_TO_REFID_ELEMENT.State$VH;
    }
    public static byte State$get(MemorySegment seg) {
        return (byte)_FULL_PTR_TO_REFID_ELEMENT.State$VH.get(seg);
    }
    public static void State$set( MemorySegment seg, byte x) {
        _FULL_PTR_TO_REFID_ELEMENT.State$VH.set(seg, x);
    }
    public static byte State$get(MemorySegment seg, long index) {
        return (byte)_FULL_PTR_TO_REFID_ELEMENT.State$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void State$set(MemorySegment seg, long index, byte x) {
        _FULL_PTR_TO_REFID_ELEMENT.State$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


