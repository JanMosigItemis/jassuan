// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _GETVERSIONINPARAMS {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_CHAR.withName("bVersion"),
        C_CHAR.withName("bRevision"),
        C_CHAR.withName("bReserved"),
        C_CHAR.withName("bIDEDeviceMap"),
        C_LONG.withName("fCapabilities"),
        MemoryLayout.sequenceLayout(4, C_LONG).withName("dwReserved")
    ).withName("_GETVERSIONINPARAMS");
    public static MemoryLayout $LAYOUT() {
        return _GETVERSIONINPARAMS.$struct$LAYOUT;
    }
    static final VarHandle bVersion$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bVersion"));
    public static VarHandle bVersion$VH() {
        return _GETVERSIONINPARAMS.bVersion$VH;
    }
    public static byte bVersion$get(MemorySegment seg) {
        return (byte)_GETVERSIONINPARAMS.bVersion$VH.get(seg);
    }
    public static void bVersion$set( MemorySegment seg, byte x) {
        _GETVERSIONINPARAMS.bVersion$VH.set(seg, x);
    }
    public static byte bVersion$get(MemorySegment seg, long index) {
        return (byte)_GETVERSIONINPARAMS.bVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bVersion$set(MemorySegment seg, long index, byte x) {
        _GETVERSIONINPARAMS.bVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bRevision$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bRevision"));
    public static VarHandle bRevision$VH() {
        return _GETVERSIONINPARAMS.bRevision$VH;
    }
    public static byte bRevision$get(MemorySegment seg) {
        return (byte)_GETVERSIONINPARAMS.bRevision$VH.get(seg);
    }
    public static void bRevision$set( MemorySegment seg, byte x) {
        _GETVERSIONINPARAMS.bRevision$VH.set(seg, x);
    }
    public static byte bRevision$get(MemorySegment seg, long index) {
        return (byte)_GETVERSIONINPARAMS.bRevision$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bRevision$set(MemorySegment seg, long index, byte x) {
        _GETVERSIONINPARAMS.bRevision$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bReserved$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bReserved"));
    public static VarHandle bReserved$VH() {
        return _GETVERSIONINPARAMS.bReserved$VH;
    }
    public static byte bReserved$get(MemorySegment seg) {
        return (byte)_GETVERSIONINPARAMS.bReserved$VH.get(seg);
    }
    public static void bReserved$set( MemorySegment seg, byte x) {
        _GETVERSIONINPARAMS.bReserved$VH.set(seg, x);
    }
    public static byte bReserved$get(MemorySegment seg, long index) {
        return (byte)_GETVERSIONINPARAMS.bReserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bReserved$set(MemorySegment seg, long index, byte x) {
        _GETVERSIONINPARAMS.bReserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bIDEDeviceMap$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bIDEDeviceMap"));
    public static VarHandle bIDEDeviceMap$VH() {
        return _GETVERSIONINPARAMS.bIDEDeviceMap$VH;
    }
    public static byte bIDEDeviceMap$get(MemorySegment seg) {
        return (byte)_GETVERSIONINPARAMS.bIDEDeviceMap$VH.get(seg);
    }
    public static void bIDEDeviceMap$set( MemorySegment seg, byte x) {
        _GETVERSIONINPARAMS.bIDEDeviceMap$VH.set(seg, x);
    }
    public static byte bIDEDeviceMap$get(MemorySegment seg, long index) {
        return (byte)_GETVERSIONINPARAMS.bIDEDeviceMap$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bIDEDeviceMap$set(MemorySegment seg, long index, byte x) {
        _GETVERSIONINPARAMS.bIDEDeviceMap$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fCapabilities$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("fCapabilities"));
    public static VarHandle fCapabilities$VH() {
        return _GETVERSIONINPARAMS.fCapabilities$VH;
    }
    public static int fCapabilities$get(MemorySegment seg) {
        return (int)_GETVERSIONINPARAMS.fCapabilities$VH.get(seg);
    }
    public static void fCapabilities$set( MemorySegment seg, int x) {
        _GETVERSIONINPARAMS.fCapabilities$VH.set(seg, x);
    }
    public static int fCapabilities$get(MemorySegment seg, long index) {
        return (int)_GETVERSIONINPARAMS.fCapabilities$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fCapabilities$set(MemorySegment seg, long index, int x) {
        _GETVERSIONINPARAMS.fCapabilities$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment dwReserved$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


