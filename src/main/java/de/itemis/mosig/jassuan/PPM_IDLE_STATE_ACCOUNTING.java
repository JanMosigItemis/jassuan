// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class PPM_IDLE_STATE_ACCOUNTING {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("IdleTransitions"),
        C_LONG.withName("FailedTransitions"),
        C_LONG.withName("InvalidBucketIndex"),
        MemoryLayout.paddingLayout(32),
        C_LONG_LONG.withName("TotalTime"),
        MemoryLayout.sequenceLayout(6, C_LONG).withName("IdleTimeBuckets")
    );
    public static MemoryLayout $LAYOUT() {
        return PPM_IDLE_STATE_ACCOUNTING.$struct$LAYOUT;
    }
    static final VarHandle IdleTransitions$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("IdleTransitions"));
    public static VarHandle IdleTransitions$VH() {
        return PPM_IDLE_STATE_ACCOUNTING.IdleTransitions$VH;
    }
    public static int IdleTransitions$get(MemorySegment seg) {
        return (int)PPM_IDLE_STATE_ACCOUNTING.IdleTransitions$VH.get(seg);
    }
    public static void IdleTransitions$set( MemorySegment seg, int x) {
        PPM_IDLE_STATE_ACCOUNTING.IdleTransitions$VH.set(seg, x);
    }
    public static int IdleTransitions$get(MemorySegment seg, long index) {
        return (int)PPM_IDLE_STATE_ACCOUNTING.IdleTransitions$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IdleTransitions$set(MemorySegment seg, long index, int x) {
        PPM_IDLE_STATE_ACCOUNTING.IdleTransitions$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FailedTransitions$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("FailedTransitions"));
    public static VarHandle FailedTransitions$VH() {
        return PPM_IDLE_STATE_ACCOUNTING.FailedTransitions$VH;
    }
    public static int FailedTransitions$get(MemorySegment seg) {
        return (int)PPM_IDLE_STATE_ACCOUNTING.FailedTransitions$VH.get(seg);
    }
    public static void FailedTransitions$set( MemorySegment seg, int x) {
        PPM_IDLE_STATE_ACCOUNTING.FailedTransitions$VH.set(seg, x);
    }
    public static int FailedTransitions$get(MemorySegment seg, long index) {
        return (int)PPM_IDLE_STATE_ACCOUNTING.FailedTransitions$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FailedTransitions$set(MemorySegment seg, long index, int x) {
        PPM_IDLE_STATE_ACCOUNTING.FailedTransitions$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle InvalidBucketIndex$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("InvalidBucketIndex"));
    public static VarHandle InvalidBucketIndex$VH() {
        return PPM_IDLE_STATE_ACCOUNTING.InvalidBucketIndex$VH;
    }
    public static int InvalidBucketIndex$get(MemorySegment seg) {
        return (int)PPM_IDLE_STATE_ACCOUNTING.InvalidBucketIndex$VH.get(seg);
    }
    public static void InvalidBucketIndex$set( MemorySegment seg, int x) {
        PPM_IDLE_STATE_ACCOUNTING.InvalidBucketIndex$VH.set(seg, x);
    }
    public static int InvalidBucketIndex$get(MemorySegment seg, long index) {
        return (int)PPM_IDLE_STATE_ACCOUNTING.InvalidBucketIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void InvalidBucketIndex$set(MemorySegment seg, long index, int x) {
        PPM_IDLE_STATE_ACCOUNTING.InvalidBucketIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle TotalTime$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("TotalTime"));
    public static VarHandle TotalTime$VH() {
        return PPM_IDLE_STATE_ACCOUNTING.TotalTime$VH;
    }
    public static long TotalTime$get(MemorySegment seg) {
        return (long)PPM_IDLE_STATE_ACCOUNTING.TotalTime$VH.get(seg);
    }
    public static void TotalTime$set( MemorySegment seg, long x) {
        PPM_IDLE_STATE_ACCOUNTING.TotalTime$VH.set(seg, x);
    }
    public static long TotalTime$get(MemorySegment seg, long index) {
        return (long)PPM_IDLE_STATE_ACCOUNTING.TotalTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TotalTime$set(MemorySegment seg, long index, long x) {
        PPM_IDLE_STATE_ACCOUNTING.TotalTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment IdleTimeBuckets$slice(MemorySegment seg) {
        return seg.asSlice(24, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


