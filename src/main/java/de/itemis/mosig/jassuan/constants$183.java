// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$183 {

    static final FunctionDescriptor _resetstkoflw$FUNC = FunctionDescriptor.of(C_INT);
    static final MethodHandle _resetstkoflw$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "_resetstkoflw",
        "()I",
        constants$183._resetstkoflw$FUNC, false
    );
    static final FunctionDescriptor _set_malloc_crt_max_wait$FUNC = FunctionDescriptor.of(C_LONG,
        C_LONG
    );
    static final MethodHandle _set_malloc_crt_max_wait$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "_set_malloc_crt_max_wait",
        "(I)I",
        constants$183._set_malloc_crt_max_wait$FUNC, false
    );
    static final FunctionDescriptor _expand$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG_LONG
    );
    static final MethodHandle _expand$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "_expand",
        "(Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        constants$183._expand$FUNC, false
    );
    static final FunctionDescriptor _msize$FUNC = FunctionDescriptor.of(C_LONG_LONG,
        C_POINTER
    );
    static final MethodHandle _msize$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "_msize",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        constants$183._msize$FUNC, false
    );
    static final FunctionDescriptor _alloca$FUNC = FunctionDescriptor.of(C_POINTER,
        C_LONG_LONG
    );
    static final MethodHandle _alloca$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "_alloca",
        "(J)Ljdk/incubator/foreign/MemoryAddress;",
        constants$183._alloca$FUNC, false
    );
    static final FunctionDescriptor _get_sbh_threshold$FUNC = FunctionDescriptor.of(C_LONG_LONG);
    static final MethodHandle _get_sbh_threshold$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "_get_sbh_threshold",
        "()J",
        constants$183._get_sbh_threshold$FUNC, false
    );
}


