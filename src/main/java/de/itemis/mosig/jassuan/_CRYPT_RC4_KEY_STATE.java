// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _CRYPT_RC4_KEY_STATE {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(16, C_CHAR).withName("Key"),
        MemoryLayout.sequenceLayout(256, C_CHAR).withName("SBox"),
        C_CHAR.withName("i"),
        C_CHAR.withName("j")
    ).withName("_CRYPT_RC4_KEY_STATE");
    public static MemoryLayout $LAYOUT() {
        return _CRYPT_RC4_KEY_STATE.$struct$LAYOUT;
    }
    public static MemorySegment Key$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment SBox$slice(MemorySegment seg) {
        return seg.asSlice(16, 256);
    }
    static final VarHandle i$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("i"));
    public static VarHandle i$VH() {
        return _CRYPT_RC4_KEY_STATE.i$VH;
    }
    public static byte i$get(MemorySegment seg) {
        return (byte)_CRYPT_RC4_KEY_STATE.i$VH.get(seg);
    }
    public static void i$set( MemorySegment seg, byte x) {
        _CRYPT_RC4_KEY_STATE.i$VH.set(seg, x);
    }
    public static byte i$get(MemorySegment seg, long index) {
        return (byte)_CRYPT_RC4_KEY_STATE.i$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void i$set(MemorySegment seg, long index, byte x) {
        _CRYPT_RC4_KEY_STATE.i$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle j$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("j"));
    public static VarHandle j$VH() {
        return _CRYPT_RC4_KEY_STATE.j$VH;
    }
    public static byte j$get(MemorySegment seg) {
        return (byte)_CRYPT_RC4_KEY_STATE.j$VH.get(seg);
    }
    public static void j$set( MemorySegment seg, byte x) {
        _CRYPT_RC4_KEY_STATE.j$VH.set(seg, x);
    }
    public static byte j$get(MemorySegment seg, long index) {
        return (byte)_CRYPT_RC4_KEY_STATE.j$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void j$set(MemorySegment seg, long index, byte x) {
        _CRYPT_RC4_KEY_STATE.j$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


