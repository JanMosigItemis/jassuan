// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _CERT_CONTEXT {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("dwCertEncodingType"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("pbCertEncoded"),
        C_LONG.withName("cbCertEncoded"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("pCertInfo"),
        C_POINTER.withName("hCertStore")
    ).withName("_CERT_CONTEXT");
    public static MemoryLayout $LAYOUT() {
        return _CERT_CONTEXT.$struct$LAYOUT;
    }
    static final VarHandle dwCertEncodingType$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCertEncodingType"));
    public static VarHandle dwCertEncodingType$VH() {
        return _CERT_CONTEXT.dwCertEncodingType$VH;
    }
    public static int dwCertEncodingType$get(MemorySegment seg) {
        return (int)_CERT_CONTEXT.dwCertEncodingType$VH.get(seg);
    }
    public static void dwCertEncodingType$set( MemorySegment seg, int x) {
        _CERT_CONTEXT.dwCertEncodingType$VH.set(seg, x);
    }
    public static int dwCertEncodingType$get(MemorySegment seg, long index) {
        return (int)_CERT_CONTEXT.dwCertEncodingType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwCertEncodingType$set(MemorySegment seg, long index, int x) {
        _CERT_CONTEXT.dwCertEncodingType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pbCertEncoded$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pbCertEncoded")));
    public static VarHandle pbCertEncoded$VH() {
        return _CERT_CONTEXT.pbCertEncoded$VH;
    }
    public static MemoryAddress pbCertEncoded$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_CONTEXT.pbCertEncoded$VH.get(seg);
    }
    public static void pbCertEncoded$set( MemorySegment seg, MemoryAddress x) {
        _CERT_CONTEXT.pbCertEncoded$VH.set(seg, x);
    }
    public static MemoryAddress pbCertEncoded$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_CONTEXT.pbCertEncoded$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pbCertEncoded$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_CONTEXT.pbCertEncoded$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbCertEncoded$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbCertEncoded"));
    public static VarHandle cbCertEncoded$VH() {
        return _CERT_CONTEXT.cbCertEncoded$VH;
    }
    public static int cbCertEncoded$get(MemorySegment seg) {
        return (int)_CERT_CONTEXT.cbCertEncoded$VH.get(seg);
    }
    public static void cbCertEncoded$set( MemorySegment seg, int x) {
        _CERT_CONTEXT.cbCertEncoded$VH.set(seg, x);
    }
    public static int cbCertEncoded$get(MemorySegment seg, long index) {
        return (int)_CERT_CONTEXT.cbCertEncoded$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbCertEncoded$set(MemorySegment seg, long index, int x) {
        _CERT_CONTEXT.cbCertEncoded$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pCertInfo$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pCertInfo")));
    public static VarHandle pCertInfo$VH() {
        return _CERT_CONTEXT.pCertInfo$VH;
    }
    public static MemoryAddress pCertInfo$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_CONTEXT.pCertInfo$VH.get(seg);
    }
    public static void pCertInfo$set( MemorySegment seg, MemoryAddress x) {
        _CERT_CONTEXT.pCertInfo$VH.set(seg, x);
    }
    public static MemoryAddress pCertInfo$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_CONTEXT.pCertInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pCertInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_CONTEXT.pCertInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hCertStore$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hCertStore")));
    public static VarHandle hCertStore$VH() {
        return _CERT_CONTEXT.hCertStore$VH;
    }
    public static MemoryAddress hCertStore$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_CONTEXT.hCertStore$VH.get(seg);
    }
    public static void hCertStore$set( MemorySegment seg, MemoryAddress x) {
        _CERT_CONTEXT.hCertStore$VH.set(seg, x);
    }
    public static MemoryAddress hCertStore$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_CONTEXT.hCertStore$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hCertStore$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_CONTEXT.hCertStore$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


