// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IDropTargetVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("DragEnter"),
        C_POINTER.withName("DragOver"),
        C_POINTER.withName("DragLeave"),
        C_POINTER.withName("Drop")
    ).withName("IDropTargetVtbl");
    public static MemoryLayout $LAYOUT() {
        return IDropTargetVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IDropTargetVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IDropTargetVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IDropTargetVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IDropTargetVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IDropTargetVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IDropTargetVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IDropTargetVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IDropTargetVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IDropTargetVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IDropTargetVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IDropTargetVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IDropTargetVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IDropTargetVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IDropTargetVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IDropTargetVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IDropTargetVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IDropTargetVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IDropTargetVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IDropTargetVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IDropTargetVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IDropTargetVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IDropTargetVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IDropTargetVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IDropTargetVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IDropTargetVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IDropTargetVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IDropTargetVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor DragEnter$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        MemoryLayout.structLayout(
            C_LONG.withName("x"),
            C_LONG.withName("y")
        ).withName("_POINTL"),
        C_POINTER
    );
    static final MethodHandle DragEnter$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        IDropTargetVtbl.DragEnter$FUNC, false
    );
    public interface DragEnter {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemorySegment x3, jdk.incubator.foreign.MemoryAddress x4);
        static MemoryAddress allocate(DragEnter fi) {
            return RuntimeHelper.upcallStub(DragEnter.class, fi, IDropTargetVtbl.DragEnter$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(DragEnter fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(DragEnter.class, fi, IDropTargetVtbl.DragEnter$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static DragEnter ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemorySegment x3, jdk.incubator.foreign.MemoryAddress x4) -> {
                try {
                    return (int)IDropTargetVtbl.DragEnter$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DragEnter$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("DragEnter")));
    public static VarHandle DragEnter$VH() {
        return IDropTargetVtbl.DragEnter$VH;
    }
    public static MemoryAddress DragEnter$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IDropTargetVtbl.DragEnter$VH.get(seg);
    }
    public static void DragEnter$set( MemorySegment seg, MemoryAddress x) {
        IDropTargetVtbl.DragEnter$VH.set(seg, x);
    }
    public static MemoryAddress DragEnter$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IDropTargetVtbl.DragEnter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DragEnter$set(MemorySegment seg, long index, MemoryAddress x) {
        IDropTargetVtbl.DragEnter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DragEnter DragEnter (MemorySegment segment) {
        return DragEnter.ofAddress(DragEnter$get(segment));
    }
    static final FunctionDescriptor DragOver$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        MemoryLayout.structLayout(
            C_LONG.withName("x"),
            C_LONG.withName("y")
        ).withName("_POINTL"),
        C_POINTER
    );
    static final MethodHandle DragOver$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        IDropTargetVtbl.DragOver$FUNC, false
    );
    public interface DragOver {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemorySegment x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(DragOver fi) {
            return RuntimeHelper.upcallStub(DragOver.class, fi, IDropTargetVtbl.DragOver$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(DragOver fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(DragOver.class, fi, IDropTargetVtbl.DragOver$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static DragOver ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemorySegment x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)IDropTargetVtbl.DragOver$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DragOver$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("DragOver")));
    public static VarHandle DragOver$VH() {
        return IDropTargetVtbl.DragOver$VH;
    }
    public static MemoryAddress DragOver$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IDropTargetVtbl.DragOver$VH.get(seg);
    }
    public static void DragOver$set( MemorySegment seg, MemoryAddress x) {
        IDropTargetVtbl.DragOver$VH.set(seg, x);
    }
    public static MemoryAddress DragOver$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IDropTargetVtbl.DragOver$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DragOver$set(MemorySegment seg, long index, MemoryAddress x) {
        IDropTargetVtbl.DragOver$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DragOver DragOver (MemorySegment segment) {
        return DragOver.ofAddress(DragOver$get(segment));
    }
    static final FunctionDescriptor DragLeave$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle DragLeave$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IDropTargetVtbl.DragLeave$FUNC, false
    );
    public interface DragLeave {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(DragLeave fi) {
            return RuntimeHelper.upcallStub(DragLeave.class, fi, IDropTargetVtbl.DragLeave$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(DragLeave fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(DragLeave.class, fi, IDropTargetVtbl.DragLeave$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static DragLeave ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IDropTargetVtbl.DragLeave$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DragLeave$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("DragLeave")));
    public static VarHandle DragLeave$VH() {
        return IDropTargetVtbl.DragLeave$VH;
    }
    public static MemoryAddress DragLeave$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IDropTargetVtbl.DragLeave$VH.get(seg);
    }
    public static void DragLeave$set( MemorySegment seg, MemoryAddress x) {
        IDropTargetVtbl.DragLeave$VH.set(seg, x);
    }
    public static MemoryAddress DragLeave$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IDropTargetVtbl.DragLeave$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DragLeave$set(MemorySegment seg, long index, MemoryAddress x) {
        IDropTargetVtbl.DragLeave$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DragLeave DragLeave (MemorySegment segment) {
        return DragLeave.ofAddress(DragLeave$get(segment));
    }
    static final FunctionDescriptor Drop$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        MemoryLayout.structLayout(
            C_LONG.withName("x"),
            C_LONG.withName("y")
        ).withName("_POINTL"),
        C_POINTER
    );
    static final MethodHandle Drop$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        IDropTargetVtbl.Drop$FUNC, false
    );
    public interface Drop {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemorySegment x3, jdk.incubator.foreign.MemoryAddress x4);
        static MemoryAddress allocate(Drop fi) {
            return RuntimeHelper.upcallStub(Drop.class, fi, IDropTargetVtbl.Drop$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Drop fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Drop.class, fi, IDropTargetVtbl.Drop$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Drop ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemorySegment x3, jdk.incubator.foreign.MemoryAddress x4) -> {
                try {
                    return (int)IDropTargetVtbl.Drop$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Drop$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Drop")));
    public static VarHandle Drop$VH() {
        return IDropTargetVtbl.Drop$VH;
    }
    public static MemoryAddress Drop$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IDropTargetVtbl.Drop$VH.get(seg);
    }
    public static void Drop$set( MemorySegment seg, MemoryAddress x) {
        IDropTargetVtbl.Drop$VH.set(seg, x);
    }
    public static MemoryAddress Drop$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IDropTargetVtbl.Drop$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Drop$set(MemorySegment seg, long index, MemoryAddress x) {
        IDropTargetVtbl.Drop$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Drop Drop (MemorySegment segment) {
        return Drop.ofAddress(Drop$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


