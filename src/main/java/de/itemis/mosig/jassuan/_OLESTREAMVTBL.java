// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _OLESTREAMVTBL {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("Get"),
        C_POINTER.withName("Put")
    ).withName("_OLESTREAMVTBL");
    public static MemoryLayout $LAYOUT() {
        return _OLESTREAMVTBL.$struct$LAYOUT;
    }
    static final FunctionDescriptor Get$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle Get$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        _OLESTREAMVTBL.Get$FUNC, false
    );
    public interface Get {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2);
        static MemoryAddress allocate(Get fi) {
            return RuntimeHelper.upcallStub(Get.class, fi, _OLESTREAMVTBL.Get$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(Get fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Get.class, fi, _OLESTREAMVTBL.Get$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static Get ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2) -> {
                try {
                    return (int)_OLESTREAMVTBL.Get$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Get$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Get")));
    public static VarHandle Get$VH() {
        return _OLESTREAMVTBL.Get$VH;
    }
    public static MemoryAddress Get$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_OLESTREAMVTBL.Get$VH.get(seg);
    }
    public static void Get$set( MemorySegment seg, MemoryAddress x) {
        _OLESTREAMVTBL.Get$VH.set(seg, x);
    }
    public static MemoryAddress Get$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_OLESTREAMVTBL.Get$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Get$set(MemorySegment seg, long index, MemoryAddress x) {
        _OLESTREAMVTBL.Get$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Get Get (MemorySegment segment) {
        return Get.ofAddress(Get$get(segment));
    }
    static final FunctionDescriptor Put$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle Put$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        _OLESTREAMVTBL.Put$FUNC, false
    );
    public interface Put {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2);
        static MemoryAddress allocate(Put fi) {
            return RuntimeHelper.upcallStub(Put.class, fi, _OLESTREAMVTBL.Put$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(Put fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Put.class, fi, _OLESTREAMVTBL.Put$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static Put ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2) -> {
                try {
                    return (int)_OLESTREAMVTBL.Put$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Put$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Put")));
    public static VarHandle Put$VH() {
        return _OLESTREAMVTBL.Put$VH;
    }
    public static MemoryAddress Put$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_OLESTREAMVTBL.Put$VH.get(seg);
    }
    public static void Put$set( MemorySegment seg, MemoryAddress x) {
        _OLESTREAMVTBL.Put$VH.set(seg, x);
    }
    public static MemoryAddress Put$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_OLESTREAMVTBL.Put$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Put$set(MemorySegment seg, long index, MemoryAddress x) {
        _OLESTREAMVTBL.Put$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Put Put (MemorySegment segment) {
        return Put.ofAddress(Put$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


