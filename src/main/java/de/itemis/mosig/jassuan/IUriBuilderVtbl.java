// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IUriBuilderVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("CreateUriSimple"),
        C_POINTER.withName("CreateUri"),
        C_POINTER.withName("CreateUriWithFlags"),
        C_POINTER.withName("GetIUri"),
        C_POINTER.withName("SetIUri"),
        C_POINTER.withName("GetFragment"),
        C_POINTER.withName("GetHost"),
        C_POINTER.withName("GetPassword"),
        C_POINTER.withName("GetPath"),
        C_POINTER.withName("GetPort"),
        C_POINTER.withName("GetQuery"),
        C_POINTER.withName("GetSchemeName"),
        C_POINTER.withName("GetUserNameA"),
        C_POINTER.withName("SetFragment"),
        C_POINTER.withName("SetHost"),
        C_POINTER.withName("SetPassword"),
        C_POINTER.withName("SetPath"),
        C_POINTER.withName("SetPort"),
        C_POINTER.withName("SetQuery"),
        C_POINTER.withName("SetSchemeName"),
        C_POINTER.withName("SetUserName"),
        C_POINTER.withName("RemoveProperties"),
        C_POINTER.withName("HasBeenModified")
    ).withName("IUriBuilderVtbl");
    public static MemoryLayout $LAYOUT() {
        return IUriBuilderVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriBuilderVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IUriBuilderVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IUriBuilderVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IUriBuilderVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IUriBuilderVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriBuilderVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IUriBuilderVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IUriBuilderVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IUriBuilderVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IUriBuilderVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriBuilderVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IUriBuilderVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IUriBuilderVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IUriBuilderVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IUriBuilderVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor CreateUriSimple$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG_LONG,
        C_POINTER
    );
    static final MethodHandle CreateUriSimple$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;IJLjdk/incubator/foreign/MemoryAddress;)I",
        IUriBuilderVtbl.CreateUriSimple$FUNC, false
    );
    public interface CreateUriSimple {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, long x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(CreateUriSimple fi) {
            return RuntimeHelper.upcallStub(CreateUriSimple.class, fi, IUriBuilderVtbl.CreateUriSimple$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IJLjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(CreateUriSimple fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(CreateUriSimple.class, fi, IUriBuilderVtbl.CreateUriSimple$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IJLjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static CreateUriSimple ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, long x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)IUriBuilderVtbl.CreateUriSimple$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateUriSimple$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("CreateUriSimple")));
    public static VarHandle CreateUriSimple$VH() {
        return IUriBuilderVtbl.CreateUriSimple$VH;
    }
    public static MemoryAddress CreateUriSimple$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.CreateUriSimple$VH.get(seg);
    }
    public static void CreateUriSimple$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.CreateUriSimple$VH.set(seg, x);
    }
    public static MemoryAddress CreateUriSimple$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.CreateUriSimple$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateUriSimple$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.CreateUriSimple$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateUriSimple CreateUriSimple (MemorySegment segment) {
        return CreateUriSimple.ofAddress(CreateUriSimple$get(segment));
    }
    static final FunctionDescriptor CreateUri$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG_LONG,
        C_POINTER
    );
    static final MethodHandle CreateUri$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;IIJLjdk/incubator/foreign/MemoryAddress;)I",
        IUriBuilderVtbl.CreateUri$FUNC, false
    );
    public interface CreateUri {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, long x3, jdk.incubator.foreign.MemoryAddress x4);
        static MemoryAddress allocate(CreateUri fi) {
            return RuntimeHelper.upcallStub(CreateUri.class, fi, IUriBuilderVtbl.CreateUri$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IIJLjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(CreateUri fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(CreateUri.class, fi, IUriBuilderVtbl.CreateUri$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IIJLjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static CreateUri ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, long x3, jdk.incubator.foreign.MemoryAddress x4) -> {
                try {
                    return (int)IUriBuilderVtbl.CreateUri$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateUri$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("CreateUri")));
    public static VarHandle CreateUri$VH() {
        return IUriBuilderVtbl.CreateUri$VH;
    }
    public static MemoryAddress CreateUri$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.CreateUri$VH.get(seg);
    }
    public static void CreateUri$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.CreateUri$VH.set(seg, x);
    }
    public static MemoryAddress CreateUri$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.CreateUri$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateUri$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.CreateUri$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateUri CreateUri (MemorySegment segment) {
        return CreateUri.ofAddress(CreateUri$get(segment));
    }
    static final FunctionDescriptor CreateUriWithFlags$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_LONG_LONG,
        C_POINTER
    );
    static final MethodHandle CreateUriWithFlags$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;IIIJLjdk/incubator/foreign/MemoryAddress;)I",
        IUriBuilderVtbl.CreateUriWithFlags$FUNC, false
    );
    public interface CreateUriWithFlags {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, int x3, long x4, jdk.incubator.foreign.MemoryAddress x5);
        static MemoryAddress allocate(CreateUriWithFlags fi) {
            return RuntimeHelper.upcallStub(CreateUriWithFlags.class, fi, IUriBuilderVtbl.CreateUriWithFlags$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IIIJLjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(CreateUriWithFlags fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(CreateUriWithFlags.class, fi, IUriBuilderVtbl.CreateUriWithFlags$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IIIJLjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static CreateUriWithFlags ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, int x3, long x4, jdk.incubator.foreign.MemoryAddress x5) -> {
                try {
                    return (int)IUriBuilderVtbl.CreateUriWithFlags$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateUriWithFlags$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("CreateUriWithFlags")));
    public static VarHandle CreateUriWithFlags$VH() {
        return IUriBuilderVtbl.CreateUriWithFlags$VH;
    }
    public static MemoryAddress CreateUriWithFlags$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.CreateUriWithFlags$VH.get(seg);
    }
    public static void CreateUriWithFlags$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.CreateUriWithFlags$VH.set(seg, x);
    }
    public static MemoryAddress CreateUriWithFlags$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.CreateUriWithFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateUriWithFlags$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.CreateUriWithFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateUriWithFlags CreateUriWithFlags (MemorySegment segment) {
        return CreateUriWithFlags.ofAddress(CreateUriWithFlags$get(segment));
    }
    static final FunctionDescriptor GetIUri$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetIUri$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriBuilderVtbl.GetIUri$FUNC, false
    );
    public interface GetIUri {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetIUri fi) {
            return RuntimeHelper.upcallStub(GetIUri.class, fi, IUriBuilderVtbl.GetIUri$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetIUri fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetIUri.class, fi, IUriBuilderVtbl.GetIUri$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetIUri ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriBuilderVtbl.GetIUri$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetIUri$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetIUri")));
    public static VarHandle GetIUri$VH() {
        return IUriBuilderVtbl.GetIUri$VH;
    }
    public static MemoryAddress GetIUri$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.GetIUri$VH.get(seg);
    }
    public static void GetIUri$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.GetIUri$VH.set(seg, x);
    }
    public static MemoryAddress GetIUri$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.GetIUri$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIUri$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.GetIUri$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIUri GetIUri (MemorySegment segment) {
        return GetIUri.ofAddress(GetIUri$get(segment));
    }
    static final FunctionDescriptor SetIUri$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle SetIUri$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriBuilderVtbl.SetIUri$FUNC, false
    );
    public interface SetIUri {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(SetIUri fi) {
            return RuntimeHelper.upcallStub(SetIUri.class, fi, IUriBuilderVtbl.SetIUri$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SetIUri fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetIUri.class, fi, IUriBuilderVtbl.SetIUri$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SetIUri ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriBuilderVtbl.SetIUri$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetIUri$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetIUri")));
    public static VarHandle SetIUri$VH() {
        return IUriBuilderVtbl.SetIUri$VH;
    }
    public static MemoryAddress SetIUri$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.SetIUri$VH.get(seg);
    }
    public static void SetIUri$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.SetIUri$VH.set(seg, x);
    }
    public static MemoryAddress SetIUri$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.SetIUri$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetIUri$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.SetIUri$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetIUri SetIUri (MemorySegment segment) {
        return SetIUri.ofAddress(SetIUri$get(segment));
    }
    static final FunctionDescriptor GetFragment$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetFragment$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriBuilderVtbl.GetFragment$FUNC, false
    );
    public interface GetFragment {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetFragment fi) {
            return RuntimeHelper.upcallStub(GetFragment.class, fi, IUriBuilderVtbl.GetFragment$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetFragment fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetFragment.class, fi, IUriBuilderVtbl.GetFragment$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetFragment ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IUriBuilderVtbl.GetFragment$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetFragment$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetFragment")));
    public static VarHandle GetFragment$VH() {
        return IUriBuilderVtbl.GetFragment$VH;
    }
    public static MemoryAddress GetFragment$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.GetFragment$VH.get(seg);
    }
    public static void GetFragment$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.GetFragment$VH.set(seg, x);
    }
    public static MemoryAddress GetFragment$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.GetFragment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFragment$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.GetFragment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFragment GetFragment (MemorySegment segment) {
        return GetFragment.ofAddress(GetFragment$get(segment));
    }
    static final FunctionDescriptor GetHost$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetHost$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriBuilderVtbl.GetHost$FUNC, false
    );
    public interface GetHost {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetHost fi) {
            return RuntimeHelper.upcallStub(GetHost.class, fi, IUriBuilderVtbl.GetHost$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetHost fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetHost.class, fi, IUriBuilderVtbl.GetHost$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetHost ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IUriBuilderVtbl.GetHost$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetHost$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetHost")));
    public static VarHandle GetHost$VH() {
        return IUriBuilderVtbl.GetHost$VH;
    }
    public static MemoryAddress GetHost$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.GetHost$VH.get(seg);
    }
    public static void GetHost$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.GetHost$VH.set(seg, x);
    }
    public static MemoryAddress GetHost$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.GetHost$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetHost$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.GetHost$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetHost GetHost (MemorySegment segment) {
        return GetHost.ofAddress(GetHost$get(segment));
    }
    static final FunctionDescriptor GetPassword$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetPassword$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriBuilderVtbl.GetPassword$FUNC, false
    );
    public interface GetPassword {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetPassword fi) {
            return RuntimeHelper.upcallStub(GetPassword.class, fi, IUriBuilderVtbl.GetPassword$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetPassword fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetPassword.class, fi, IUriBuilderVtbl.GetPassword$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetPassword ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IUriBuilderVtbl.GetPassword$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetPassword$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetPassword")));
    public static VarHandle GetPassword$VH() {
        return IUriBuilderVtbl.GetPassword$VH;
    }
    public static MemoryAddress GetPassword$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.GetPassword$VH.get(seg);
    }
    public static void GetPassword$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.GetPassword$VH.set(seg, x);
    }
    public static MemoryAddress GetPassword$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.GetPassword$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPassword$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.GetPassword$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPassword GetPassword (MemorySegment segment) {
        return GetPassword.ofAddress(GetPassword$get(segment));
    }
    static final FunctionDescriptor GetPath$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetPath$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriBuilderVtbl.GetPath$FUNC, false
    );
    public interface GetPath {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetPath fi) {
            return RuntimeHelper.upcallStub(GetPath.class, fi, IUriBuilderVtbl.GetPath$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetPath fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetPath.class, fi, IUriBuilderVtbl.GetPath$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetPath ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IUriBuilderVtbl.GetPath$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetPath$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetPath")));
    public static VarHandle GetPath$VH() {
        return IUriBuilderVtbl.GetPath$VH;
    }
    public static MemoryAddress GetPath$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.GetPath$VH.get(seg);
    }
    public static void GetPath$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.GetPath$VH.set(seg, x);
    }
    public static MemoryAddress GetPath$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.GetPath$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPath$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.GetPath$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPath GetPath (MemorySegment segment) {
        return GetPath.ofAddress(GetPath$get(segment));
    }
    static final FunctionDescriptor GetPort$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetPort$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriBuilderVtbl.GetPort$FUNC, false
    );
    public interface GetPort {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetPort fi) {
            return RuntimeHelper.upcallStub(GetPort.class, fi, IUriBuilderVtbl.GetPort$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetPort fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetPort.class, fi, IUriBuilderVtbl.GetPort$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetPort ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IUriBuilderVtbl.GetPort$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetPort$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetPort")));
    public static VarHandle GetPort$VH() {
        return IUriBuilderVtbl.GetPort$VH;
    }
    public static MemoryAddress GetPort$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.GetPort$VH.get(seg);
    }
    public static void GetPort$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.GetPort$VH.set(seg, x);
    }
    public static MemoryAddress GetPort$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.GetPort$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPort$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.GetPort$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPort GetPort (MemorySegment segment) {
        return GetPort.ofAddress(GetPort$get(segment));
    }
    static final FunctionDescriptor GetQuery$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetQuery$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriBuilderVtbl.GetQuery$FUNC, false
    );
    public interface GetQuery {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetQuery fi) {
            return RuntimeHelper.upcallStub(GetQuery.class, fi, IUriBuilderVtbl.GetQuery$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetQuery fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetQuery.class, fi, IUriBuilderVtbl.GetQuery$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetQuery ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IUriBuilderVtbl.GetQuery$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetQuery$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetQuery")));
    public static VarHandle GetQuery$VH() {
        return IUriBuilderVtbl.GetQuery$VH;
    }
    public static MemoryAddress GetQuery$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.GetQuery$VH.get(seg);
    }
    public static void GetQuery$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.GetQuery$VH.set(seg, x);
    }
    public static MemoryAddress GetQuery$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.GetQuery$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetQuery$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.GetQuery$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetQuery GetQuery (MemorySegment segment) {
        return GetQuery.ofAddress(GetQuery$get(segment));
    }
    static final FunctionDescriptor GetSchemeName$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetSchemeName$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriBuilderVtbl.GetSchemeName$FUNC, false
    );
    public interface GetSchemeName {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetSchemeName fi) {
            return RuntimeHelper.upcallStub(GetSchemeName.class, fi, IUriBuilderVtbl.GetSchemeName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetSchemeName fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetSchemeName.class, fi, IUriBuilderVtbl.GetSchemeName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetSchemeName ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IUriBuilderVtbl.GetSchemeName$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetSchemeName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetSchemeName")));
    public static VarHandle GetSchemeName$VH() {
        return IUriBuilderVtbl.GetSchemeName$VH;
    }
    public static MemoryAddress GetSchemeName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.GetSchemeName$VH.get(seg);
    }
    public static void GetSchemeName$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.GetSchemeName$VH.set(seg, x);
    }
    public static MemoryAddress GetSchemeName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.GetSchemeName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSchemeName$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.GetSchemeName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSchemeName GetSchemeName (MemorySegment segment) {
        return GetSchemeName.ofAddress(GetSchemeName$get(segment));
    }
    static final FunctionDescriptor GetUserNameA$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetUserNameA$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriBuilderVtbl.GetUserNameA$FUNC, false
    );
    public interface GetUserNameA {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetUserNameA fi) {
            return RuntimeHelper.upcallStub(GetUserNameA.class, fi, IUriBuilderVtbl.GetUserNameA$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetUserNameA fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetUserNameA.class, fi, IUriBuilderVtbl.GetUserNameA$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetUserNameA ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IUriBuilderVtbl.GetUserNameA$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetUserNameA$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetUserNameA")));
    public static VarHandle GetUserNameA$VH() {
        return IUriBuilderVtbl.GetUserNameA$VH;
    }
    public static MemoryAddress GetUserNameA$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.GetUserNameA$VH.get(seg);
    }
    public static void GetUserNameA$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.GetUserNameA$VH.set(seg, x);
    }
    public static MemoryAddress GetUserNameA$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.GetUserNameA$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetUserNameA$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.GetUserNameA$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetUserNameA GetUserNameA (MemorySegment segment) {
        return GetUserNameA.ofAddress(GetUserNameA$get(segment));
    }
    static final FunctionDescriptor SetFragment$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle SetFragment$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriBuilderVtbl.SetFragment$FUNC, false
    );
    public interface SetFragment {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(SetFragment fi) {
            return RuntimeHelper.upcallStub(SetFragment.class, fi, IUriBuilderVtbl.SetFragment$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SetFragment fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetFragment.class, fi, IUriBuilderVtbl.SetFragment$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SetFragment ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriBuilderVtbl.SetFragment$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetFragment$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetFragment")));
    public static VarHandle SetFragment$VH() {
        return IUriBuilderVtbl.SetFragment$VH;
    }
    public static MemoryAddress SetFragment$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.SetFragment$VH.get(seg);
    }
    public static void SetFragment$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.SetFragment$VH.set(seg, x);
    }
    public static MemoryAddress SetFragment$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.SetFragment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetFragment$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.SetFragment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetFragment SetFragment (MemorySegment segment) {
        return SetFragment.ofAddress(SetFragment$get(segment));
    }
    static final FunctionDescriptor SetHost$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle SetHost$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriBuilderVtbl.SetHost$FUNC, false
    );
    public interface SetHost {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(SetHost fi) {
            return RuntimeHelper.upcallStub(SetHost.class, fi, IUriBuilderVtbl.SetHost$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SetHost fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetHost.class, fi, IUriBuilderVtbl.SetHost$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SetHost ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriBuilderVtbl.SetHost$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetHost$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetHost")));
    public static VarHandle SetHost$VH() {
        return IUriBuilderVtbl.SetHost$VH;
    }
    public static MemoryAddress SetHost$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.SetHost$VH.get(seg);
    }
    public static void SetHost$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.SetHost$VH.set(seg, x);
    }
    public static MemoryAddress SetHost$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.SetHost$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetHost$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.SetHost$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetHost SetHost (MemorySegment segment) {
        return SetHost.ofAddress(SetHost$get(segment));
    }
    static final FunctionDescriptor SetPassword$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle SetPassword$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriBuilderVtbl.SetPassword$FUNC, false
    );
    public interface SetPassword {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(SetPassword fi) {
            return RuntimeHelper.upcallStub(SetPassword.class, fi, IUriBuilderVtbl.SetPassword$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SetPassword fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetPassword.class, fi, IUriBuilderVtbl.SetPassword$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SetPassword ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriBuilderVtbl.SetPassword$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetPassword$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetPassword")));
    public static VarHandle SetPassword$VH() {
        return IUriBuilderVtbl.SetPassword$VH;
    }
    public static MemoryAddress SetPassword$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.SetPassword$VH.get(seg);
    }
    public static void SetPassword$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.SetPassword$VH.set(seg, x);
    }
    public static MemoryAddress SetPassword$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.SetPassword$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetPassword$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.SetPassword$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetPassword SetPassword (MemorySegment segment) {
        return SetPassword.ofAddress(SetPassword$get(segment));
    }
    static final FunctionDescriptor SetPath$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle SetPath$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriBuilderVtbl.SetPath$FUNC, false
    );
    public interface SetPath {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(SetPath fi) {
            return RuntimeHelper.upcallStub(SetPath.class, fi, IUriBuilderVtbl.SetPath$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SetPath fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetPath.class, fi, IUriBuilderVtbl.SetPath$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SetPath ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriBuilderVtbl.SetPath$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetPath$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetPath")));
    public static VarHandle SetPath$VH() {
        return IUriBuilderVtbl.SetPath$VH;
    }
    public static MemoryAddress SetPath$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.SetPath$VH.get(seg);
    }
    public static void SetPath$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.SetPath$VH.set(seg, x);
    }
    public static MemoryAddress SetPath$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.SetPath$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetPath$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.SetPath$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetPath SetPath (MemorySegment segment) {
        return SetPath.ofAddress(SetPath$get(segment));
    }
    static final FunctionDescriptor SetPort$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_LONG
    );
    static final MethodHandle SetPort$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        IUriBuilderVtbl.SetPort$FUNC, false
    );
    public interface SetPort {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2);
        static MemoryAddress allocate(SetPort fi) {
            return RuntimeHelper.upcallStub(SetPort.class, fi, IUriBuilderVtbl.SetPort$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)I");
        }
        static MemoryAddress allocate(SetPort fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetPort.class, fi, IUriBuilderVtbl.SetPort$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)I", scope);
        }
        static SetPort ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2) -> {
                try {
                    return (int)IUriBuilderVtbl.SetPort$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetPort$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetPort")));
    public static VarHandle SetPort$VH() {
        return IUriBuilderVtbl.SetPort$VH;
    }
    public static MemoryAddress SetPort$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.SetPort$VH.get(seg);
    }
    public static void SetPort$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.SetPort$VH.set(seg, x);
    }
    public static MemoryAddress SetPort$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.SetPort$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetPort$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.SetPort$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetPort SetPort (MemorySegment segment) {
        return SetPort.ofAddress(SetPort$get(segment));
    }
    static final FunctionDescriptor SetQuery$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle SetQuery$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriBuilderVtbl.SetQuery$FUNC, false
    );
    public interface SetQuery {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(SetQuery fi) {
            return RuntimeHelper.upcallStub(SetQuery.class, fi, IUriBuilderVtbl.SetQuery$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SetQuery fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetQuery.class, fi, IUriBuilderVtbl.SetQuery$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SetQuery ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriBuilderVtbl.SetQuery$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetQuery$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetQuery")));
    public static VarHandle SetQuery$VH() {
        return IUriBuilderVtbl.SetQuery$VH;
    }
    public static MemoryAddress SetQuery$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.SetQuery$VH.get(seg);
    }
    public static void SetQuery$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.SetQuery$VH.set(seg, x);
    }
    public static MemoryAddress SetQuery$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.SetQuery$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetQuery$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.SetQuery$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetQuery SetQuery (MemorySegment segment) {
        return SetQuery.ofAddress(SetQuery$get(segment));
    }
    static final FunctionDescriptor SetSchemeName$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle SetSchemeName$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriBuilderVtbl.SetSchemeName$FUNC, false
    );
    public interface SetSchemeName {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(SetSchemeName fi) {
            return RuntimeHelper.upcallStub(SetSchemeName.class, fi, IUriBuilderVtbl.SetSchemeName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SetSchemeName fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetSchemeName.class, fi, IUriBuilderVtbl.SetSchemeName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SetSchemeName ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriBuilderVtbl.SetSchemeName$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetSchemeName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetSchemeName")));
    public static VarHandle SetSchemeName$VH() {
        return IUriBuilderVtbl.SetSchemeName$VH;
    }
    public static MemoryAddress SetSchemeName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.SetSchemeName$VH.get(seg);
    }
    public static void SetSchemeName$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.SetSchemeName$VH.set(seg, x);
    }
    public static MemoryAddress SetSchemeName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.SetSchemeName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetSchemeName$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.SetSchemeName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetSchemeName SetSchemeName (MemorySegment segment) {
        return SetSchemeName.ofAddress(SetSchemeName$get(segment));
    }
    static final FunctionDescriptor SetUserName$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle SetUserName$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriBuilderVtbl.SetUserName$FUNC, false
    );
    public interface SetUserName {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(SetUserName fi) {
            return RuntimeHelper.upcallStub(SetUserName.class, fi, IUriBuilderVtbl.SetUserName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SetUserName fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetUserName.class, fi, IUriBuilderVtbl.SetUserName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SetUserName ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriBuilderVtbl.SetUserName$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetUserName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetUserName")));
    public static VarHandle SetUserName$VH() {
        return IUriBuilderVtbl.SetUserName$VH;
    }
    public static MemoryAddress SetUserName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.SetUserName$VH.get(seg);
    }
    public static void SetUserName$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.SetUserName$VH.set(seg, x);
    }
    public static MemoryAddress SetUserName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.SetUserName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetUserName$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.SetUserName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetUserName SetUserName (MemorySegment segment) {
        return SetUserName.ofAddress(SetUserName$get(segment));
    }
    static final FunctionDescriptor RemoveProperties$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle RemoveProperties$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        IUriBuilderVtbl.RemoveProperties$FUNC, false
    );
    public interface RemoveProperties {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
        static MemoryAddress allocate(RemoveProperties fi) {
            return RuntimeHelper.upcallStub(RemoveProperties.class, fi, IUriBuilderVtbl.RemoveProperties$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(RemoveProperties fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(RemoveProperties.class, fi, IUriBuilderVtbl.RemoveProperties$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static RemoveProperties ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1) -> {
                try {
                    return (int)IUriBuilderVtbl.RemoveProperties$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RemoveProperties$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("RemoveProperties")));
    public static VarHandle RemoveProperties$VH() {
        return IUriBuilderVtbl.RemoveProperties$VH;
    }
    public static MemoryAddress RemoveProperties$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.RemoveProperties$VH.get(seg);
    }
    public static void RemoveProperties$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.RemoveProperties$VH.set(seg, x);
    }
    public static MemoryAddress RemoveProperties$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.RemoveProperties$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RemoveProperties$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.RemoveProperties$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RemoveProperties RemoveProperties (MemorySegment segment) {
        return RemoveProperties.ofAddress(RemoveProperties$get(segment));
    }
    static final FunctionDescriptor HasBeenModified$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle HasBeenModified$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriBuilderVtbl.HasBeenModified$FUNC, false
    );
    public interface HasBeenModified {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(HasBeenModified fi) {
            return RuntimeHelper.upcallStub(HasBeenModified.class, fi, IUriBuilderVtbl.HasBeenModified$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(HasBeenModified fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(HasBeenModified.class, fi, IUriBuilderVtbl.HasBeenModified$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static HasBeenModified ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriBuilderVtbl.HasBeenModified$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle HasBeenModified$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("HasBeenModified")));
    public static VarHandle HasBeenModified$VH() {
        return IUriBuilderVtbl.HasBeenModified$VH;
    }
    public static MemoryAddress HasBeenModified$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.HasBeenModified$VH.get(seg);
    }
    public static void HasBeenModified$set( MemorySegment seg, MemoryAddress x) {
        IUriBuilderVtbl.HasBeenModified$VH.set(seg, x);
    }
    public static MemoryAddress HasBeenModified$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriBuilderVtbl.HasBeenModified$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void HasBeenModified$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriBuilderVtbl.HasBeenModified$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static HasBeenModified HasBeenModified (MemorySegment segment) {
        return HasBeenModified.ofAddress(HasBeenModified$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


