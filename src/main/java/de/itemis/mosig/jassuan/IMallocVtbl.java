// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IMallocVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("Alloc"),
        C_POINTER.withName("Realloc"),
        C_POINTER.withName("Free"),
        C_POINTER.withName("GetSize"),
        C_POINTER.withName("DidAlloc"),
        C_POINTER.withName("HeapMinimize")
    ).withName("IMallocVtbl");
    public static MemoryLayout $LAYOUT() {
        return IMallocVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IMallocVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IMallocVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IMallocVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IMallocVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IMallocVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IMallocVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IMallocVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IMallocVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IMallocVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IMallocVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IMallocVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IMallocVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IMallocVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IMallocVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IMallocVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IMallocVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IMallocVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IMallocVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor Alloc$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG_LONG
    );
    static final MethodHandle Alloc$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        IMallocVtbl.Alloc$FUNC, false
    );
    public interface Alloc {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, long x1);
        static MemoryAddress allocate(Alloc fi) {
            return RuntimeHelper.upcallStub(Alloc.class, fi, IMallocVtbl.Alloc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;");
        }
        static MemoryAddress allocate(Alloc fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Alloc.class, fi, IMallocVtbl.Alloc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;", scope);
        }
        static Alloc ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, long x1) -> {
                try {
                    return (jdk.incubator.foreign.MemoryAddress)IMallocVtbl.Alloc$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Alloc$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Alloc")));
    public static VarHandle Alloc$VH() {
        return IMallocVtbl.Alloc$VH;
    }
    public static MemoryAddress Alloc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocVtbl.Alloc$VH.get(seg);
    }
    public static void Alloc$set( MemorySegment seg, MemoryAddress x) {
        IMallocVtbl.Alloc$VH.set(seg, x);
    }
    public static MemoryAddress Alloc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocVtbl.Alloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Alloc$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocVtbl.Alloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Alloc Alloc (MemorySegment segment) {
        return Alloc.ofAddress(Alloc$get(segment));
    }
    static final FunctionDescriptor Realloc$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG
    );
    static final MethodHandle Realloc$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        IMallocVtbl.Realloc$FUNC, false
    );
    public interface Realloc {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2);
        static MemoryAddress allocate(Realloc fi) {
            return RuntimeHelper.upcallStub(Realloc.class, fi, IMallocVtbl.Realloc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;");
        }
        static MemoryAddress allocate(Realloc fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Realloc.class, fi, IMallocVtbl.Realloc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;", scope);
        }
        static Realloc ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2) -> {
                try {
                    return (jdk.incubator.foreign.MemoryAddress)IMallocVtbl.Realloc$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Realloc$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Realloc")));
    public static VarHandle Realloc$VH() {
        return IMallocVtbl.Realloc$VH;
    }
    public static MemoryAddress Realloc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocVtbl.Realloc$VH.get(seg);
    }
    public static void Realloc$set( MemorySegment seg, MemoryAddress x) {
        IMallocVtbl.Realloc$VH.set(seg, x);
    }
    public static MemoryAddress Realloc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocVtbl.Realloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Realloc$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocVtbl.Realloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Realloc Realloc (MemorySegment segment) {
        return Realloc.ofAddress(Realloc$get(segment));
    }
    static final FunctionDescriptor Free$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle Free$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        IMallocVtbl.Free$FUNC, false
    );
    public interface Free {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(Free fi) {
            return RuntimeHelper.upcallStub(Free.class, fi, IMallocVtbl.Free$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        static MemoryAddress allocate(Free fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Free.class, fi, IMallocVtbl.Free$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static Free ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    IMallocVtbl.Free$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Free$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Free")));
    public static VarHandle Free$VH() {
        return IMallocVtbl.Free$VH;
    }
    public static MemoryAddress Free$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocVtbl.Free$VH.get(seg);
    }
    public static void Free$set( MemorySegment seg, MemoryAddress x) {
        IMallocVtbl.Free$VH.set(seg, x);
    }
    public static MemoryAddress Free$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocVtbl.Free$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Free$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocVtbl.Free$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Free Free (MemorySegment segment) {
        return Free.ofAddress(Free$get(segment));
    }
    static final FunctionDescriptor GetSize$FUNC = FunctionDescriptor.of(C_LONG_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetSize$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)J",
        IMallocVtbl.GetSize$FUNC, false
    );
    public interface GetSize {

        long apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetSize fi) {
            return RuntimeHelper.upcallStub(GetSize.class, fi, IMallocVtbl.GetSize$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)J");
        }
        static MemoryAddress allocate(GetSize fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetSize.class, fi, IMallocVtbl.GetSize$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)J", scope);
        }
        static GetSize ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (long)IMallocVtbl.GetSize$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetSize$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetSize")));
    public static VarHandle GetSize$VH() {
        return IMallocVtbl.GetSize$VH;
    }
    public static MemoryAddress GetSize$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocVtbl.GetSize$VH.get(seg);
    }
    public static void GetSize$set( MemorySegment seg, MemoryAddress x) {
        IMallocVtbl.GetSize$VH.set(seg, x);
    }
    public static MemoryAddress GetSize$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocVtbl.GetSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSize$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocVtbl.GetSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSize GetSize (MemorySegment segment) {
        return GetSize.ofAddress(GetSize$get(segment));
    }
    static final FunctionDescriptor DidAlloc$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle DidAlloc$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IMallocVtbl.DidAlloc$FUNC, false
    );
    public interface DidAlloc {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(DidAlloc fi) {
            return RuntimeHelper.upcallStub(DidAlloc.class, fi, IMallocVtbl.DidAlloc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(DidAlloc fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(DidAlloc.class, fi, IMallocVtbl.DidAlloc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static DidAlloc ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IMallocVtbl.DidAlloc$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DidAlloc$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("DidAlloc")));
    public static VarHandle DidAlloc$VH() {
        return IMallocVtbl.DidAlloc$VH;
    }
    public static MemoryAddress DidAlloc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocVtbl.DidAlloc$VH.get(seg);
    }
    public static void DidAlloc$set( MemorySegment seg, MemoryAddress x) {
        IMallocVtbl.DidAlloc$VH.set(seg, x);
    }
    public static MemoryAddress DidAlloc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocVtbl.DidAlloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DidAlloc$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocVtbl.DidAlloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DidAlloc DidAlloc (MemorySegment segment) {
        return DidAlloc.ofAddress(DidAlloc$get(segment));
    }
    static final FunctionDescriptor HeapMinimize$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle HeapMinimize$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        IMallocVtbl.HeapMinimize$FUNC, false
    );
    public interface HeapMinimize {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(HeapMinimize fi) {
            return RuntimeHelper.upcallStub(HeapMinimize.class, fi, IMallocVtbl.HeapMinimize$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        static MemoryAddress allocate(HeapMinimize fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(HeapMinimize.class, fi, IMallocVtbl.HeapMinimize$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static HeapMinimize ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    IMallocVtbl.HeapMinimize$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle HeapMinimize$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("HeapMinimize")));
    public static VarHandle HeapMinimize$VH() {
        return IMallocVtbl.HeapMinimize$VH;
    }
    public static MemoryAddress HeapMinimize$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocVtbl.HeapMinimize$VH.get(seg);
    }
    public static void HeapMinimize$set( MemorySegment seg, MemoryAddress x) {
        IMallocVtbl.HeapMinimize$VH.set(seg, x);
    }
    public static MemoryAddress HeapMinimize$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IMallocVtbl.HeapMinimize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void HeapMinimize$set(MemorySegment seg, long index, MemoryAddress x) {
        IMallocVtbl.HeapMinimize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static HeapMinimize HeapMinimize (MemorySegment segment) {
        return HeapMinimize.ofAddress(HeapMinimize$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


