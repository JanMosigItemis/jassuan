// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _tagHIT_LOGGING_INFO {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("dwStructSize"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("lpszLoggedUrlName"),
        MemoryLayout.structLayout(
            C_SHORT.withName("wYear"),
            C_SHORT.withName("wMonth"),
            C_SHORT.withName("wDayOfWeek"),
            C_SHORT.withName("wDay"),
            C_SHORT.withName("wHour"),
            C_SHORT.withName("wMinute"),
            C_SHORT.withName("wSecond"),
            C_SHORT.withName("wMilliseconds")
        ).withName("StartTime"),
        MemoryLayout.structLayout(
            C_SHORT.withName("wYear"),
            C_SHORT.withName("wMonth"),
            C_SHORT.withName("wDayOfWeek"),
            C_SHORT.withName("wDay"),
            C_SHORT.withName("wHour"),
            C_SHORT.withName("wMinute"),
            C_SHORT.withName("wSecond"),
            C_SHORT.withName("wMilliseconds")
        ).withName("EndTime"),
        C_POINTER.withName("lpszExtendedInfo")
    ).withName("_tagHIT_LOGGING_INFO");
    public static MemoryLayout $LAYOUT() {
        return _tagHIT_LOGGING_INFO.$struct$LAYOUT;
    }
    static final VarHandle dwStructSize$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwStructSize"));
    public static VarHandle dwStructSize$VH() {
        return _tagHIT_LOGGING_INFO.dwStructSize$VH;
    }
    public static int dwStructSize$get(MemorySegment seg) {
        return (int)_tagHIT_LOGGING_INFO.dwStructSize$VH.get(seg);
    }
    public static void dwStructSize$set( MemorySegment seg, int x) {
        _tagHIT_LOGGING_INFO.dwStructSize$VH.set(seg, x);
    }
    public static int dwStructSize$get(MemorySegment seg, long index) {
        return (int)_tagHIT_LOGGING_INFO.dwStructSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwStructSize$set(MemorySegment seg, long index, int x) {
        _tagHIT_LOGGING_INFO.dwStructSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpszLoggedUrlName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpszLoggedUrlName")));
    public static VarHandle lpszLoggedUrlName$VH() {
        return _tagHIT_LOGGING_INFO.lpszLoggedUrlName$VH;
    }
    public static MemoryAddress lpszLoggedUrlName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_tagHIT_LOGGING_INFO.lpszLoggedUrlName$VH.get(seg);
    }
    public static void lpszLoggedUrlName$set( MemorySegment seg, MemoryAddress x) {
        _tagHIT_LOGGING_INFO.lpszLoggedUrlName$VH.set(seg, x);
    }
    public static MemoryAddress lpszLoggedUrlName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_tagHIT_LOGGING_INFO.lpszLoggedUrlName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpszLoggedUrlName$set(MemorySegment seg, long index, MemoryAddress x) {
        _tagHIT_LOGGING_INFO.lpszLoggedUrlName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment StartTime$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static MemorySegment EndTime$slice(MemorySegment seg) {
        return seg.asSlice(32, 16);
    }
    static final VarHandle lpszExtendedInfo$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpszExtendedInfo")));
    public static VarHandle lpszExtendedInfo$VH() {
        return _tagHIT_LOGGING_INFO.lpszExtendedInfo$VH;
    }
    public static MemoryAddress lpszExtendedInfo$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_tagHIT_LOGGING_INFO.lpszExtendedInfo$VH.get(seg);
    }
    public static void lpszExtendedInfo$set( MemorySegment seg, MemoryAddress x) {
        _tagHIT_LOGGING_INFO.lpszExtendedInfo$VH.set(seg, x);
    }
    public static MemoryAddress lpszExtendedInfo$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_tagHIT_LOGGING_INFO.lpszExtendedInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpszExtendedInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        _tagHIT_LOGGING_INFO.lpszExtendedInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


