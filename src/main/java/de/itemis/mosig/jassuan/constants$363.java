// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$363 {

    static final FunctionDescriptor SetSecurityDescriptorGroup$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle SetSecurityDescriptorGroup$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "SetSecurityDescriptorGroup",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$363.SetSecurityDescriptorGroup$FUNC, false
    );
    static final FunctionDescriptor SetSecurityDescriptorOwner$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle SetSecurityDescriptorOwner$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "SetSecurityDescriptorOwner",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$363.SetSecurityDescriptorOwner$FUNC, false
    );
    static final FunctionDescriptor SetSecurityDescriptorRMControl$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle SetSecurityDescriptorRMControl$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "SetSecurityDescriptorRMControl",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$363.SetSecurityDescriptorRMControl$FUNC, false
    );
    static final FunctionDescriptor SetSecurityDescriptorSacl$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final MethodHandle SetSecurityDescriptorSacl$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "SetSecurityDescriptorSacl",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        constants$363.SetSecurityDescriptorSacl$FUNC, false
    );
    static final FunctionDescriptor SetTokenInformation$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle SetTokenInformation$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "SetTokenInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        constants$363.SetTokenInformation$FUNC, false
    );
    static final FunctionDescriptor AddMandatoryAce$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle AddMandatoryAce$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "AddMandatoryAce",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)I",
        constants$363.AddMandatoryAce$FUNC, false
    );
}


