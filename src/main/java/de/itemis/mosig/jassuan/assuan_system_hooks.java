// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class assuan_system_hooks {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("version"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("usleep"),
        C_POINTER.withName("pipe"),
        C_POINTER.withName("close"),
        C_POINTER.withName("read"),
        C_POINTER.withName("write"),
        C_POINTER.withName("recvmsg"),
        C_POINTER.withName("sendmsg"),
        C_POINTER.withName("spawn"),
        C_POINTER.withName("waitpid"),
        C_POINTER.withName("socketpair"),
        C_POINTER.withName("socket"),
        C_POINTER.withName("connect")
    ).withName("assuan_system_hooks");
    public static MemoryLayout $LAYOUT() {
        return assuan_system_hooks.$struct$LAYOUT;
    }
    static final VarHandle version$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("version"));
    public static VarHandle version$VH() {
        return assuan_system_hooks.version$VH;
    }
    public static int version$get(MemorySegment seg) {
        return (int)assuan_system_hooks.version$VH.get(seg);
    }
    public static void version$set( MemorySegment seg, int x) {
        assuan_system_hooks.version$VH.set(seg, x);
    }
    public static int version$get(MemorySegment seg, long index) {
        return (int)assuan_system_hooks.version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, int x) {
        assuan_system_hooks.version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor usleep$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    static final MethodHandle usleep$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        assuan_system_hooks.usleep$FUNC, false
    );
    public interface usleep {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
        static MemoryAddress allocate(usleep fi) {
            return RuntimeHelper.upcallStub(usleep.class, fi, assuan_system_hooks.usleep$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)V");
        }
        static MemoryAddress allocate(usleep fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(usleep.class, fi, assuan_system_hooks.usleep$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)V", scope);
        }
        static usleep ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1) -> {
                try {
                    assuan_system_hooks.usleep$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle usleep$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("usleep")));
    public static VarHandle usleep$VH() {
        return assuan_system_hooks.usleep$VH;
    }
    public static MemoryAddress usleep$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)assuan_system_hooks.usleep$VH.get(seg);
    }
    public static void usleep$set( MemorySegment seg, MemoryAddress x) {
        assuan_system_hooks.usleep$VH.set(seg, x);
    }
    public static MemoryAddress usleep$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)assuan_system_hooks.usleep$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void usleep$set(MemorySegment seg, long index, MemoryAddress x) {
        assuan_system_hooks.usleep$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static usleep usleep (MemorySegment segment) {
        return usleep.ofAddress(usleep$get(segment));
    }
    static final FunctionDescriptor pipe$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle pipe$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        assuan_system_hooks.pipe$FUNC, false
    );
    public interface pipe {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2);
        static MemoryAddress allocate(pipe fi) {
            return RuntimeHelper.upcallStub(pipe.class, fi, assuan_system_hooks.pipe$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(pipe fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(pipe.class, fi, assuan_system_hooks.pipe$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static pipe ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2) -> {
                try {
                    return (int)assuan_system_hooks.pipe$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle pipe$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pipe")));
    public static VarHandle pipe$VH() {
        return assuan_system_hooks.pipe$VH;
    }
    public static MemoryAddress pipe$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)assuan_system_hooks.pipe$VH.get(seg);
    }
    public static void pipe$set( MemorySegment seg, MemoryAddress x) {
        assuan_system_hooks.pipe$VH.set(seg, x);
    }
    public static MemoryAddress pipe$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)assuan_system_hooks.pipe$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pipe$set(MemorySegment seg, long index, MemoryAddress x) {
        assuan_system_hooks.pipe$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static pipe pipe (MemorySegment segment) {
        return pipe.ofAddress(pipe$get(segment));
    }
    static final FunctionDescriptor close$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle close$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        assuan_system_hooks.close$FUNC, false
    );
    public interface close {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(close fi) {
            return RuntimeHelper.upcallStub(close.class, fi, assuan_system_hooks.close$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(close fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(close.class, fi, assuan_system_hooks.close$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static close ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)assuan_system_hooks.close$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle close$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("close")));
    public static VarHandle close$VH() {
        return assuan_system_hooks.close$VH;
    }
    public static MemoryAddress close$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)assuan_system_hooks.close$VH.get(seg);
    }
    public static void close$set( MemorySegment seg, MemoryAddress x) {
        assuan_system_hooks.close$VH.set(seg, x);
    }
    public static MemoryAddress close$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)assuan_system_hooks.close$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void close$set(MemorySegment seg, long index, MemoryAddress x) {
        assuan_system_hooks.close$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static close close (MemorySegment segment) {
        return close.ofAddress(close$get(segment));
    }
    static final FunctionDescriptor read$FUNC = FunctionDescriptor.of(C_LONG_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG
    );
    static final MethodHandle read$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)J",
        assuan_system_hooks.read$FUNC, false
    );
    public interface read {

        long apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, long x3);
        static MemoryAddress allocate(read fi) {
            return RuntimeHelper.upcallStub(read.class, fi, assuan_system_hooks.read$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)J");
        }
        static MemoryAddress allocate(read fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(read.class, fi, assuan_system_hooks.read$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)J", scope);
        }
        static read ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, long x3) -> {
                try {
                    return (long)assuan_system_hooks.read$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle read$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("read")));
    public static VarHandle read$VH() {
        return assuan_system_hooks.read$VH;
    }
    public static MemoryAddress read$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)assuan_system_hooks.read$VH.get(seg);
    }
    public static void read$set( MemorySegment seg, MemoryAddress x) {
        assuan_system_hooks.read$VH.set(seg, x);
    }
    public static MemoryAddress read$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)assuan_system_hooks.read$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void read$set(MemorySegment seg, long index, MemoryAddress x) {
        assuan_system_hooks.read$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static read read (MemorySegment segment) {
        return read.ofAddress(read$get(segment));
    }
    static final FunctionDescriptor write$FUNC = FunctionDescriptor.of(C_LONG_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG
    );
    static final MethodHandle write$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)J",
        assuan_system_hooks.write$FUNC, false
    );
    public interface write {

        long apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, long x3);
        static MemoryAddress allocate(write fi) {
            return RuntimeHelper.upcallStub(write.class, fi, assuan_system_hooks.write$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)J");
        }
        static MemoryAddress allocate(write fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(write.class, fi, assuan_system_hooks.write$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)J", scope);
        }
        static write ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, long x3) -> {
                try {
                    return (long)assuan_system_hooks.write$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle write$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("write")));
    public static VarHandle write$VH() {
        return assuan_system_hooks.write$VH;
    }
    public static MemoryAddress write$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)assuan_system_hooks.write$VH.get(seg);
    }
    public static void write$set( MemorySegment seg, MemoryAddress x) {
        assuan_system_hooks.write$VH.set(seg, x);
    }
    public static MemoryAddress write$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)assuan_system_hooks.write$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void write$set(MemorySegment seg, long index, MemoryAddress x) {
        assuan_system_hooks.write$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static write write (MemorySegment segment) {
        return write.ofAddress(write$get(segment));
    }
    static final FunctionDescriptor recvmsg$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle recvmsg$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        assuan_system_hooks.recvmsg$FUNC, false
    );
    public interface recvmsg {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3);
        static MemoryAddress allocate(recvmsg fi) {
            return RuntimeHelper.upcallStub(recvmsg.class, fi, assuan_system_hooks.recvmsg$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(recvmsg fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(recvmsg.class, fi, assuan_system_hooks.recvmsg$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static recvmsg ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3) -> {
                try {
                    return (int)assuan_system_hooks.recvmsg$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle recvmsg$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("recvmsg")));
    public static VarHandle recvmsg$VH() {
        return assuan_system_hooks.recvmsg$VH;
    }
    public static MemoryAddress recvmsg$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)assuan_system_hooks.recvmsg$VH.get(seg);
    }
    public static void recvmsg$set( MemorySegment seg, MemoryAddress x) {
        assuan_system_hooks.recvmsg$VH.set(seg, x);
    }
    public static MemoryAddress recvmsg$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)assuan_system_hooks.recvmsg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void recvmsg$set(MemorySegment seg, long index, MemoryAddress x) {
        assuan_system_hooks.recvmsg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static recvmsg recvmsg (MemorySegment segment) {
        return recvmsg.ofAddress(recvmsg$get(segment));
    }
    static final FunctionDescriptor sendmsg$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle sendmsg$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        assuan_system_hooks.sendmsg$FUNC, false
    );
    public interface sendmsg {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3);
        static MemoryAddress allocate(sendmsg fi) {
            return RuntimeHelper.upcallStub(sendmsg.class, fi, assuan_system_hooks.sendmsg$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(sendmsg fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(sendmsg.class, fi, assuan_system_hooks.sendmsg$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static sendmsg ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3) -> {
                try {
                    return (int)assuan_system_hooks.sendmsg$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle sendmsg$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("sendmsg")));
    public static VarHandle sendmsg$VH() {
        return assuan_system_hooks.sendmsg$VH;
    }
    public static MemoryAddress sendmsg$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)assuan_system_hooks.sendmsg$VH.get(seg);
    }
    public static void sendmsg$set( MemorySegment seg, MemoryAddress x) {
        assuan_system_hooks.sendmsg$VH.set(seg, x);
    }
    public static MemoryAddress sendmsg$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)assuan_system_hooks.sendmsg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sendmsg$set(MemorySegment seg, long index, MemoryAddress x) {
        assuan_system_hooks.sendmsg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static sendmsg sendmsg (MemorySegment segment) {
        return sendmsg.ofAddress(sendmsg$get(segment));
    }
    static final FunctionDescriptor spawn$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle spawn$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        assuan_system_hooks.spawn$FUNC, false
    );
    public interface spawn {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8, int x9);
        static MemoryAddress allocate(spawn fi) {
            return RuntimeHelper.upcallStub(spawn.class, fi, assuan_system_hooks.spawn$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(spawn fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(spawn.class, fi, assuan_system_hooks.spawn$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static spawn ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8, int x9) -> {
                try {
                    return (int)assuan_system_hooks.spawn$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle spawn$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("spawn")));
    public static VarHandle spawn$VH() {
        return assuan_system_hooks.spawn$VH;
    }
    public static MemoryAddress spawn$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)assuan_system_hooks.spawn$VH.get(seg);
    }
    public static void spawn$set( MemorySegment seg, MemoryAddress x) {
        assuan_system_hooks.spawn$VH.set(seg, x);
    }
    public static MemoryAddress spawn$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)assuan_system_hooks.spawn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void spawn$set(MemorySegment seg, long index, MemoryAddress x) {
        assuan_system_hooks.spawn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static spawn spawn (MemorySegment segment) {
        return spawn.ofAddress(spawn$get(segment));
    }
    static final FunctionDescriptor waitpid$FUNC = FunctionDescriptor.of(C_LONG_LONG,
        C_POINTER,
        C_LONG_LONG,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final MethodHandle waitpid$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;JILjdk/incubator/foreign/MemoryAddress;I)J",
        assuan_system_hooks.waitpid$FUNC, false
    );
    public interface waitpid {

        long apply(jdk.incubator.foreign.MemoryAddress x0, long x1, int x2, jdk.incubator.foreign.MemoryAddress x3, int x4);
        static MemoryAddress allocate(waitpid fi) {
            return RuntimeHelper.upcallStub(waitpid.class, fi, assuan_system_hooks.waitpid$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;JILjdk/incubator/foreign/MemoryAddress;I)J");
        }
        static MemoryAddress allocate(waitpid fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(waitpid.class, fi, assuan_system_hooks.waitpid$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;JILjdk/incubator/foreign/MemoryAddress;I)J", scope);
        }
        static waitpid ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, long x1, int x2, jdk.incubator.foreign.MemoryAddress x3, int x4) -> {
                try {
                    return (long)assuan_system_hooks.waitpid$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle waitpid$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("waitpid")));
    public static VarHandle waitpid$VH() {
        return assuan_system_hooks.waitpid$VH;
    }
    public static MemoryAddress waitpid$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)assuan_system_hooks.waitpid$VH.get(seg);
    }
    public static void waitpid$set( MemorySegment seg, MemoryAddress x) {
        assuan_system_hooks.waitpid$VH.set(seg, x);
    }
    public static MemoryAddress waitpid$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)assuan_system_hooks.waitpid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void waitpid$set(MemorySegment seg, long index, MemoryAddress x) {
        assuan_system_hooks.waitpid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static waitpid waitpid (MemorySegment segment) {
        return waitpid.ofAddress(waitpid$get(segment));
    }
    static final FunctionDescriptor socketpair$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final MethodHandle socketpair$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)I",
        assuan_system_hooks.socketpair$FUNC, false
    );
    public interface socketpair {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, int x3, jdk.incubator.foreign.MemoryAddress x4);
        static MemoryAddress allocate(socketpair fi) {
            return RuntimeHelper.upcallStub(socketpair.class, fi, assuan_system_hooks.socketpair$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(socketpair fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(socketpair.class, fi, assuan_system_hooks.socketpair$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static socketpair ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, int x3, jdk.incubator.foreign.MemoryAddress x4) -> {
                try {
                    return (int)assuan_system_hooks.socketpair$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle socketpair$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("socketpair")));
    public static VarHandle socketpair$VH() {
        return assuan_system_hooks.socketpair$VH;
    }
    public static MemoryAddress socketpair$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)assuan_system_hooks.socketpair$VH.get(seg);
    }
    public static void socketpair$set( MemorySegment seg, MemoryAddress x) {
        assuan_system_hooks.socketpair$VH.set(seg, x);
    }
    public static MemoryAddress socketpair$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)assuan_system_hooks.socketpair$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void socketpair$set(MemorySegment seg, long index, MemoryAddress x) {
        assuan_system_hooks.socketpair$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static socketpair socketpair (MemorySegment segment) {
        return socketpair.ofAddress(socketpair$get(segment));
    }
    static final FunctionDescriptor socket$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    static final MethodHandle socket$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;III)I",
        assuan_system_hooks.socket$FUNC, false
    );
    public interface socket {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, int x3);
        static MemoryAddress allocate(socket fi) {
            return RuntimeHelper.upcallStub(socket.class, fi, assuan_system_hooks.socket$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;III)I");
        }
        static MemoryAddress allocate(socket fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(socket.class, fi, assuan_system_hooks.socket$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;III)I", scope);
        }
        static socket ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, int x3) -> {
                try {
                    return (int)assuan_system_hooks.socket$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle socket$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("socket")));
    public static VarHandle socket$VH() {
        return assuan_system_hooks.socket$VH;
    }
    public static MemoryAddress socket$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)assuan_system_hooks.socket$VH.get(seg);
    }
    public static void socket$set( MemorySegment seg, MemoryAddress x) {
        assuan_system_hooks.socket$VH.set(seg, x);
    }
    public static MemoryAddress socket$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)assuan_system_hooks.socket$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void socket$set(MemorySegment seg, long index, MemoryAddress x) {
        assuan_system_hooks.socket$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static socket socket (MemorySegment segment) {
        return socket.ofAddress(socket$get(segment));
    }
    static final FunctionDescriptor connect$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final MethodHandle connect$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        assuan_system_hooks.connect$FUNC, false
    );
    public interface connect {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3);
        static MemoryAddress allocate(connect fi) {
            return RuntimeHelper.upcallStub(connect.class, fi, assuan_system_hooks.connect$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(connect fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(connect.class, fi, assuan_system_hooks.connect$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static connect ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3) -> {
                try {
                    return (int)assuan_system_hooks.connect$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle connect$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("connect")));
    public static VarHandle connect$VH() {
        return assuan_system_hooks.connect$VH;
    }
    public static MemoryAddress connect$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)assuan_system_hooks.connect$VH.get(seg);
    }
    public static void connect$set( MemorySegment seg, MemoryAddress x) {
        assuan_system_hooks.connect$VH.set(seg, x);
    }
    public static MemoryAddress connect$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)assuan_system_hooks.connect$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void connect$set(MemorySegment seg, long index, MemoryAddress x) {
        assuan_system_hooks.connect$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static connect connect (MemorySegment segment) {
        return connect.ofAddress(connect$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


