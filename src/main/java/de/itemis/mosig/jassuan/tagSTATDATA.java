// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class tagSTATDATA {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            C_SHORT.withName("cfFormat"),
            MemoryLayout.paddingLayout(48),
            C_POINTER.withName("ptd"),
            C_LONG.withName("dwAspect"),
            C_LONG.withName("lindex"),
            C_LONG.withName("tymed"),
            MemoryLayout.paddingLayout(32)
        ).withName("formatetc"),
        C_LONG.withName("advf"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("pAdvSink"),
        C_LONG.withName("dwConnection"),
        MemoryLayout.paddingLayout(32)
    ).withName("tagSTATDATA");
    public static MemoryLayout $LAYOUT() {
        return tagSTATDATA.$struct$LAYOUT;
    }
    public static MemorySegment formatetc$slice(MemorySegment seg) {
        return seg.asSlice(0, 32);
    }
    static final VarHandle advf$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("advf"));
    public static VarHandle advf$VH() {
        return tagSTATDATA.advf$VH;
    }
    public static int advf$get(MemorySegment seg) {
        return (int)tagSTATDATA.advf$VH.get(seg);
    }
    public static void advf$set( MemorySegment seg, int x) {
        tagSTATDATA.advf$VH.set(seg, x);
    }
    public static int advf$get(MemorySegment seg, long index) {
        return (int)tagSTATDATA.advf$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void advf$set(MemorySegment seg, long index, int x) {
        tagSTATDATA.advf$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pAdvSink$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pAdvSink")));
    public static VarHandle pAdvSink$VH() {
        return tagSTATDATA.pAdvSink$VH;
    }
    public static MemoryAddress pAdvSink$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagSTATDATA.pAdvSink$VH.get(seg);
    }
    public static void pAdvSink$set( MemorySegment seg, MemoryAddress x) {
        tagSTATDATA.pAdvSink$VH.set(seg, x);
    }
    public static MemoryAddress pAdvSink$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagSTATDATA.pAdvSink$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pAdvSink$set(MemorySegment seg, long index, MemoryAddress x) {
        tagSTATDATA.pAdvSink$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwConnection$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwConnection"));
    public static VarHandle dwConnection$VH() {
        return tagSTATDATA.dwConnection$VH;
    }
    public static int dwConnection$get(MemorySegment seg) {
        return (int)tagSTATDATA.dwConnection$VH.get(seg);
    }
    public static void dwConnection$set( MemorySegment seg, int x) {
        tagSTATDATA.dwConnection$VH.set(seg, x);
    }
    public static int dwConnection$get(MemorySegment seg, long index) {
        return (int)tagSTATDATA.dwConnection$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwConnection$set(MemorySegment seg, long index, int x) {
        tagSTATDATA.dwConnection$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


