// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$382 {

    static final FunctionDescriptor LeaveCriticalSectionWhenCallbackReturns$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle LeaveCriticalSectionWhenCallbackReturns$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "LeaveCriticalSectionWhenCallbackReturns",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$382.LeaveCriticalSectionWhenCallbackReturns$FUNC, false
    );
    static final FunctionDescriptor FreeLibraryWhenCallbackReturns$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle FreeLibraryWhenCallbackReturns$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "FreeLibraryWhenCallbackReturns",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$382.FreeLibraryWhenCallbackReturns$FUNC, false
    );
    static final FunctionDescriptor CallbackMayRunLong$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle CallbackMayRunLong$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CallbackMayRunLong",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$382.CallbackMayRunLong$FUNC, false
    );
    static final FunctionDescriptor DisassociateCurrentThreadFromCallback$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle DisassociateCurrentThreadFromCallback$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "DisassociateCurrentThreadFromCallback",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$382.DisassociateCurrentThreadFromCallback$FUNC, false
    );
    static final FunctionDescriptor TrySubmitThreadpoolCallback$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle TrySubmitThreadpoolCallback$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "TrySubmitThreadpoolCallback",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$382.TrySubmitThreadpoolCallback$FUNC, false
    );
    static final FunctionDescriptor CreateThreadpoolWork$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle CreateThreadpoolWork$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CreateThreadpoolWork",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$382.CreateThreadpoolWork$FUNC, false
    );
}


