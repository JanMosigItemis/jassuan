// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IBindCtxVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("RegisterObjectBound"),
        C_POINTER.withName("RevokeObjectBound"),
        C_POINTER.withName("ReleaseBoundObjects"),
        C_POINTER.withName("SetBindOptions"),
        C_POINTER.withName("GetBindOptions"),
        C_POINTER.withName("GetRunningObjectTable"),
        C_POINTER.withName("RegisterObjectParam"),
        C_POINTER.withName("GetObjectParam"),
        C_POINTER.withName("EnumObjectParam"),
        C_POINTER.withName("RevokeObjectParam")
    ).withName("IBindCtxVtbl");
    public static MemoryLayout $LAYOUT() {
        return IBindCtxVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IBindCtxVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IBindCtxVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IBindCtxVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IBindCtxVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IBindCtxVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IBindCtxVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IBindCtxVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IBindCtxVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IBindCtxVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IBindCtxVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IBindCtxVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IBindCtxVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IBindCtxVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IBindCtxVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IBindCtxVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IBindCtxVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IBindCtxVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IBindCtxVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IBindCtxVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IBindCtxVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IBindCtxVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor RegisterObjectBound$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle RegisterObjectBound$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IBindCtxVtbl.RegisterObjectBound$FUNC, false
    );
    public interface RegisterObjectBound {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(RegisterObjectBound fi) {
            return RuntimeHelper.upcallStub(RegisterObjectBound.class, fi, IBindCtxVtbl.RegisterObjectBound$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(RegisterObjectBound fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(RegisterObjectBound.class, fi, IBindCtxVtbl.RegisterObjectBound$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static RegisterObjectBound ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IBindCtxVtbl.RegisterObjectBound$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RegisterObjectBound$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("RegisterObjectBound")));
    public static VarHandle RegisterObjectBound$VH() {
        return IBindCtxVtbl.RegisterObjectBound$VH;
    }
    public static MemoryAddress RegisterObjectBound$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.RegisterObjectBound$VH.get(seg);
    }
    public static void RegisterObjectBound$set( MemorySegment seg, MemoryAddress x) {
        IBindCtxVtbl.RegisterObjectBound$VH.set(seg, x);
    }
    public static MemoryAddress RegisterObjectBound$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.RegisterObjectBound$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RegisterObjectBound$set(MemorySegment seg, long index, MemoryAddress x) {
        IBindCtxVtbl.RegisterObjectBound$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RegisterObjectBound RegisterObjectBound (MemorySegment segment) {
        return RegisterObjectBound.ofAddress(RegisterObjectBound$get(segment));
    }
    static final FunctionDescriptor RevokeObjectBound$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle RevokeObjectBound$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IBindCtxVtbl.RevokeObjectBound$FUNC, false
    );
    public interface RevokeObjectBound {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(RevokeObjectBound fi) {
            return RuntimeHelper.upcallStub(RevokeObjectBound.class, fi, IBindCtxVtbl.RevokeObjectBound$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(RevokeObjectBound fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(RevokeObjectBound.class, fi, IBindCtxVtbl.RevokeObjectBound$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static RevokeObjectBound ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IBindCtxVtbl.RevokeObjectBound$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RevokeObjectBound$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("RevokeObjectBound")));
    public static VarHandle RevokeObjectBound$VH() {
        return IBindCtxVtbl.RevokeObjectBound$VH;
    }
    public static MemoryAddress RevokeObjectBound$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.RevokeObjectBound$VH.get(seg);
    }
    public static void RevokeObjectBound$set( MemorySegment seg, MemoryAddress x) {
        IBindCtxVtbl.RevokeObjectBound$VH.set(seg, x);
    }
    public static MemoryAddress RevokeObjectBound$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.RevokeObjectBound$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RevokeObjectBound$set(MemorySegment seg, long index, MemoryAddress x) {
        IBindCtxVtbl.RevokeObjectBound$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RevokeObjectBound RevokeObjectBound (MemorySegment segment) {
        return RevokeObjectBound.ofAddress(RevokeObjectBound$get(segment));
    }
    static final FunctionDescriptor ReleaseBoundObjects$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle ReleaseBoundObjects$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IBindCtxVtbl.ReleaseBoundObjects$FUNC, false
    );
    public interface ReleaseBoundObjects {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(ReleaseBoundObjects fi) {
            return RuntimeHelper.upcallStub(ReleaseBoundObjects.class, fi, IBindCtxVtbl.ReleaseBoundObjects$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(ReleaseBoundObjects fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(ReleaseBoundObjects.class, fi, IBindCtxVtbl.ReleaseBoundObjects$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static ReleaseBoundObjects ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IBindCtxVtbl.ReleaseBoundObjects$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReleaseBoundObjects$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReleaseBoundObjects")));
    public static VarHandle ReleaseBoundObjects$VH() {
        return IBindCtxVtbl.ReleaseBoundObjects$VH;
    }
    public static MemoryAddress ReleaseBoundObjects$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.ReleaseBoundObjects$VH.get(seg);
    }
    public static void ReleaseBoundObjects$set( MemorySegment seg, MemoryAddress x) {
        IBindCtxVtbl.ReleaseBoundObjects$VH.set(seg, x);
    }
    public static MemoryAddress ReleaseBoundObjects$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.ReleaseBoundObjects$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseBoundObjects$set(MemorySegment seg, long index, MemoryAddress x) {
        IBindCtxVtbl.ReleaseBoundObjects$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseBoundObjects ReleaseBoundObjects (MemorySegment segment) {
        return ReleaseBoundObjects.ofAddress(ReleaseBoundObjects$get(segment));
    }
    static final FunctionDescriptor SetBindOptions$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle SetBindOptions$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IBindCtxVtbl.SetBindOptions$FUNC, false
    );
    public interface SetBindOptions {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(SetBindOptions fi) {
            return RuntimeHelper.upcallStub(SetBindOptions.class, fi, IBindCtxVtbl.SetBindOptions$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SetBindOptions fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetBindOptions.class, fi, IBindCtxVtbl.SetBindOptions$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SetBindOptions ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IBindCtxVtbl.SetBindOptions$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetBindOptions$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetBindOptions")));
    public static VarHandle SetBindOptions$VH() {
        return IBindCtxVtbl.SetBindOptions$VH;
    }
    public static MemoryAddress SetBindOptions$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.SetBindOptions$VH.get(seg);
    }
    public static void SetBindOptions$set( MemorySegment seg, MemoryAddress x) {
        IBindCtxVtbl.SetBindOptions$VH.set(seg, x);
    }
    public static MemoryAddress SetBindOptions$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.SetBindOptions$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetBindOptions$set(MemorySegment seg, long index, MemoryAddress x) {
        IBindCtxVtbl.SetBindOptions$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetBindOptions SetBindOptions (MemorySegment segment) {
        return SetBindOptions.ofAddress(SetBindOptions$get(segment));
    }
    static final FunctionDescriptor GetBindOptions$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetBindOptions$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IBindCtxVtbl.GetBindOptions$FUNC, false
    );
    public interface GetBindOptions {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetBindOptions fi) {
            return RuntimeHelper.upcallStub(GetBindOptions.class, fi, IBindCtxVtbl.GetBindOptions$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetBindOptions fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetBindOptions.class, fi, IBindCtxVtbl.GetBindOptions$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetBindOptions ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IBindCtxVtbl.GetBindOptions$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetBindOptions$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetBindOptions")));
    public static VarHandle GetBindOptions$VH() {
        return IBindCtxVtbl.GetBindOptions$VH;
    }
    public static MemoryAddress GetBindOptions$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.GetBindOptions$VH.get(seg);
    }
    public static void GetBindOptions$set( MemorySegment seg, MemoryAddress x) {
        IBindCtxVtbl.GetBindOptions$VH.set(seg, x);
    }
    public static MemoryAddress GetBindOptions$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.GetBindOptions$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBindOptions$set(MemorySegment seg, long index, MemoryAddress x) {
        IBindCtxVtbl.GetBindOptions$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBindOptions GetBindOptions (MemorySegment segment) {
        return GetBindOptions.ofAddress(GetBindOptions$get(segment));
    }
    static final FunctionDescriptor GetRunningObjectTable$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetRunningObjectTable$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IBindCtxVtbl.GetRunningObjectTable$FUNC, false
    );
    public interface GetRunningObjectTable {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetRunningObjectTable fi) {
            return RuntimeHelper.upcallStub(GetRunningObjectTable.class, fi, IBindCtxVtbl.GetRunningObjectTable$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetRunningObjectTable fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetRunningObjectTable.class, fi, IBindCtxVtbl.GetRunningObjectTable$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetRunningObjectTable ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IBindCtxVtbl.GetRunningObjectTable$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetRunningObjectTable$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetRunningObjectTable")));
    public static VarHandle GetRunningObjectTable$VH() {
        return IBindCtxVtbl.GetRunningObjectTable$VH;
    }
    public static MemoryAddress GetRunningObjectTable$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.GetRunningObjectTable$VH.get(seg);
    }
    public static void GetRunningObjectTable$set( MemorySegment seg, MemoryAddress x) {
        IBindCtxVtbl.GetRunningObjectTable$VH.set(seg, x);
    }
    public static MemoryAddress GetRunningObjectTable$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.GetRunningObjectTable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetRunningObjectTable$set(MemorySegment seg, long index, MemoryAddress x) {
        IBindCtxVtbl.GetRunningObjectTable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetRunningObjectTable GetRunningObjectTable (MemorySegment segment) {
        return GetRunningObjectTable.ofAddress(GetRunningObjectTable$get(segment));
    }
    static final FunctionDescriptor RegisterObjectParam$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle RegisterObjectParam$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IBindCtxVtbl.RegisterObjectParam$FUNC, false
    );
    public interface RegisterObjectParam {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(RegisterObjectParam fi) {
            return RuntimeHelper.upcallStub(RegisterObjectParam.class, fi, IBindCtxVtbl.RegisterObjectParam$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(RegisterObjectParam fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(RegisterObjectParam.class, fi, IBindCtxVtbl.RegisterObjectParam$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static RegisterObjectParam ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IBindCtxVtbl.RegisterObjectParam$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RegisterObjectParam$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("RegisterObjectParam")));
    public static VarHandle RegisterObjectParam$VH() {
        return IBindCtxVtbl.RegisterObjectParam$VH;
    }
    public static MemoryAddress RegisterObjectParam$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.RegisterObjectParam$VH.get(seg);
    }
    public static void RegisterObjectParam$set( MemorySegment seg, MemoryAddress x) {
        IBindCtxVtbl.RegisterObjectParam$VH.set(seg, x);
    }
    public static MemoryAddress RegisterObjectParam$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.RegisterObjectParam$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RegisterObjectParam$set(MemorySegment seg, long index, MemoryAddress x) {
        IBindCtxVtbl.RegisterObjectParam$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RegisterObjectParam RegisterObjectParam (MemorySegment segment) {
        return RegisterObjectParam.ofAddress(RegisterObjectParam$get(segment));
    }
    static final FunctionDescriptor GetObjectParam$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetObjectParam$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IBindCtxVtbl.GetObjectParam$FUNC, false
    );
    public interface GetObjectParam {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetObjectParam fi) {
            return RuntimeHelper.upcallStub(GetObjectParam.class, fi, IBindCtxVtbl.GetObjectParam$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetObjectParam fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetObjectParam.class, fi, IBindCtxVtbl.GetObjectParam$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetObjectParam ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IBindCtxVtbl.GetObjectParam$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetObjectParam$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetObjectParam")));
    public static VarHandle GetObjectParam$VH() {
        return IBindCtxVtbl.GetObjectParam$VH;
    }
    public static MemoryAddress GetObjectParam$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.GetObjectParam$VH.get(seg);
    }
    public static void GetObjectParam$set( MemorySegment seg, MemoryAddress x) {
        IBindCtxVtbl.GetObjectParam$VH.set(seg, x);
    }
    public static MemoryAddress GetObjectParam$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.GetObjectParam$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetObjectParam$set(MemorySegment seg, long index, MemoryAddress x) {
        IBindCtxVtbl.GetObjectParam$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetObjectParam GetObjectParam (MemorySegment segment) {
        return GetObjectParam.ofAddress(GetObjectParam$get(segment));
    }
    static final FunctionDescriptor EnumObjectParam$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle EnumObjectParam$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IBindCtxVtbl.EnumObjectParam$FUNC, false
    );
    public interface EnumObjectParam {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(EnumObjectParam fi) {
            return RuntimeHelper.upcallStub(EnumObjectParam.class, fi, IBindCtxVtbl.EnumObjectParam$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(EnumObjectParam fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(EnumObjectParam.class, fi, IBindCtxVtbl.EnumObjectParam$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static EnumObjectParam ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IBindCtxVtbl.EnumObjectParam$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle EnumObjectParam$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnumObjectParam")));
    public static VarHandle EnumObjectParam$VH() {
        return IBindCtxVtbl.EnumObjectParam$VH;
    }
    public static MemoryAddress EnumObjectParam$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.EnumObjectParam$VH.get(seg);
    }
    public static void EnumObjectParam$set( MemorySegment seg, MemoryAddress x) {
        IBindCtxVtbl.EnumObjectParam$VH.set(seg, x);
    }
    public static MemoryAddress EnumObjectParam$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.EnumObjectParam$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EnumObjectParam$set(MemorySegment seg, long index, MemoryAddress x) {
        IBindCtxVtbl.EnumObjectParam$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnumObjectParam EnumObjectParam (MemorySegment segment) {
        return EnumObjectParam.ofAddress(EnumObjectParam$get(segment));
    }
    static final FunctionDescriptor RevokeObjectParam$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle RevokeObjectParam$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IBindCtxVtbl.RevokeObjectParam$FUNC, false
    );
    public interface RevokeObjectParam {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(RevokeObjectParam fi) {
            return RuntimeHelper.upcallStub(RevokeObjectParam.class, fi, IBindCtxVtbl.RevokeObjectParam$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(RevokeObjectParam fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(RevokeObjectParam.class, fi, IBindCtxVtbl.RevokeObjectParam$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static RevokeObjectParam ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IBindCtxVtbl.RevokeObjectParam$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RevokeObjectParam$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("RevokeObjectParam")));
    public static VarHandle RevokeObjectParam$VH() {
        return IBindCtxVtbl.RevokeObjectParam$VH;
    }
    public static MemoryAddress RevokeObjectParam$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.RevokeObjectParam$VH.get(seg);
    }
    public static void RevokeObjectParam$set( MemorySegment seg, MemoryAddress x) {
        IBindCtxVtbl.RevokeObjectParam$VH.set(seg, x);
    }
    public static MemoryAddress RevokeObjectParam$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IBindCtxVtbl.RevokeObjectParam$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RevokeObjectParam$set(MemorySegment seg, long index, MemoryAddress x) {
        IBindCtxVtbl.RevokeObjectParam$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RevokeObjectParam RevokeObjectParam (MemorySegment segment) {
        return RevokeObjectParam.ofAddress(RevokeObjectParam$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


