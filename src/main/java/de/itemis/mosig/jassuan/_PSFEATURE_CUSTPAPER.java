// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _PSFEATURE_CUSTPAPER {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("lOrientation"),
        C_LONG.withName("lWidth"),
        C_LONG.withName("lHeight"),
        C_LONG.withName("lWidthOffset"),
        C_LONG.withName("lHeightOffset")
    ).withName("_PSFEATURE_CUSTPAPER");
    public static MemoryLayout $LAYOUT() {
        return _PSFEATURE_CUSTPAPER.$struct$LAYOUT;
    }
    static final VarHandle lOrientation$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("lOrientation"));
    public static VarHandle lOrientation$VH() {
        return _PSFEATURE_CUSTPAPER.lOrientation$VH;
    }
    public static int lOrientation$get(MemorySegment seg) {
        return (int)_PSFEATURE_CUSTPAPER.lOrientation$VH.get(seg);
    }
    public static void lOrientation$set( MemorySegment seg, int x) {
        _PSFEATURE_CUSTPAPER.lOrientation$VH.set(seg, x);
    }
    public static int lOrientation$get(MemorySegment seg, long index) {
        return (int)_PSFEATURE_CUSTPAPER.lOrientation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lOrientation$set(MemorySegment seg, long index, int x) {
        _PSFEATURE_CUSTPAPER.lOrientation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lWidth$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("lWidth"));
    public static VarHandle lWidth$VH() {
        return _PSFEATURE_CUSTPAPER.lWidth$VH;
    }
    public static int lWidth$get(MemorySegment seg) {
        return (int)_PSFEATURE_CUSTPAPER.lWidth$VH.get(seg);
    }
    public static void lWidth$set( MemorySegment seg, int x) {
        _PSFEATURE_CUSTPAPER.lWidth$VH.set(seg, x);
    }
    public static int lWidth$get(MemorySegment seg, long index) {
        return (int)_PSFEATURE_CUSTPAPER.lWidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lWidth$set(MemorySegment seg, long index, int x) {
        _PSFEATURE_CUSTPAPER.lWidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lHeight$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("lHeight"));
    public static VarHandle lHeight$VH() {
        return _PSFEATURE_CUSTPAPER.lHeight$VH;
    }
    public static int lHeight$get(MemorySegment seg) {
        return (int)_PSFEATURE_CUSTPAPER.lHeight$VH.get(seg);
    }
    public static void lHeight$set( MemorySegment seg, int x) {
        _PSFEATURE_CUSTPAPER.lHeight$VH.set(seg, x);
    }
    public static int lHeight$get(MemorySegment seg, long index) {
        return (int)_PSFEATURE_CUSTPAPER.lHeight$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lHeight$set(MemorySegment seg, long index, int x) {
        _PSFEATURE_CUSTPAPER.lHeight$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lWidthOffset$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("lWidthOffset"));
    public static VarHandle lWidthOffset$VH() {
        return _PSFEATURE_CUSTPAPER.lWidthOffset$VH;
    }
    public static int lWidthOffset$get(MemorySegment seg) {
        return (int)_PSFEATURE_CUSTPAPER.lWidthOffset$VH.get(seg);
    }
    public static void lWidthOffset$set( MemorySegment seg, int x) {
        _PSFEATURE_CUSTPAPER.lWidthOffset$VH.set(seg, x);
    }
    public static int lWidthOffset$get(MemorySegment seg, long index) {
        return (int)_PSFEATURE_CUSTPAPER.lWidthOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lWidthOffset$set(MemorySegment seg, long index, int x) {
        _PSFEATURE_CUSTPAPER.lWidthOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lHeightOffset$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("lHeightOffset"));
    public static VarHandle lHeightOffset$VH() {
        return _PSFEATURE_CUSTPAPER.lHeightOffset$VH;
    }
    public static int lHeightOffset$get(MemorySegment seg) {
        return (int)_PSFEATURE_CUSTPAPER.lHeightOffset$VH.get(seg);
    }
    public static void lHeightOffset$set( MemorySegment seg, int x) {
        _PSFEATURE_CUSTPAPER.lHeightOffset$VH.set(seg, x);
    }
    public static int lHeightOffset$get(MemorySegment seg, long index) {
        return (int)_PSFEATURE_CUSTPAPER.lHeightOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lHeightOffset$set(MemorySegment seg, long index, int x) {
        _PSFEATURE_CUSTPAPER.lHeightOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


