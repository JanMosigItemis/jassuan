// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _COMSTAT {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("fCtsHold"),
            MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("fDsrHold"),
            MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("fRlsdHold"),
            MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("fXoffHold"),
            MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("fXoffSent"),
            MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("fEof"),
            MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("fTxim"),
            MemoryLayout.valueLayout(25, ByteOrder.nativeOrder()).withName("fReserved")
        ),
        C_LONG.withName("cbInQue"),
        C_LONG.withName("cbOutQue")
    ).withName("_COMSTAT");
    public static MemoryLayout $LAYOUT() {
        return _COMSTAT.$struct$LAYOUT;
    }
    static final VarHandle cbInQue$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbInQue"));
    public static VarHandle cbInQue$VH() {
        return _COMSTAT.cbInQue$VH;
    }
    public static int cbInQue$get(MemorySegment seg) {
        return (int)_COMSTAT.cbInQue$VH.get(seg);
    }
    public static void cbInQue$set( MemorySegment seg, int x) {
        _COMSTAT.cbInQue$VH.set(seg, x);
    }
    public static int cbInQue$get(MemorySegment seg, long index) {
        return (int)_COMSTAT.cbInQue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbInQue$set(MemorySegment seg, long index, int x) {
        _COMSTAT.cbInQue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbOutQue$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbOutQue"));
    public static VarHandle cbOutQue$VH() {
        return _COMSTAT.cbOutQue$VH;
    }
    public static int cbOutQue$get(MemorySegment seg) {
        return (int)_COMSTAT.cbOutQue$VH.get(seg);
    }
    public static void cbOutQue$set( MemorySegment seg, int x) {
        _COMSTAT.cbOutQue$VH.set(seg, x);
    }
    public static int cbOutQue$get(MemorySegment seg, long index) {
        return (int)_COMSTAT.cbOutQue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbOutQue$set(MemorySegment seg, long index, int x) {
        _COMSTAT.cbOutQue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


