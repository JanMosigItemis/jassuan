// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IAdviseSink2Vtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("OnDataChange"),
        C_POINTER.withName("OnViewChange"),
        C_POINTER.withName("OnRename"),
        C_POINTER.withName("OnSave"),
        C_POINTER.withName("OnClose"),
        C_POINTER.withName("OnLinkSrcChange")
    ).withName("IAdviseSink2Vtbl");
    public static MemoryLayout $LAYOUT() {
        return IAdviseSink2Vtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IAdviseSink2Vtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IAdviseSink2Vtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IAdviseSink2Vtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IAdviseSink2Vtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IAdviseSink2Vtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IAdviseSink2Vtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IAdviseSink2Vtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IAdviseSink2Vtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IAdviseSink2Vtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IAdviseSink2Vtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IAdviseSink2Vtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IAdviseSink2Vtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IAdviseSink2Vtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IAdviseSink2Vtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IAdviseSink2Vtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IAdviseSink2Vtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IAdviseSink2Vtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IAdviseSink2Vtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IAdviseSink2Vtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IAdviseSink2Vtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IAdviseSink2Vtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IAdviseSink2Vtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IAdviseSink2Vtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IAdviseSink2Vtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IAdviseSink2Vtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IAdviseSink2Vtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IAdviseSink2Vtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor OnDataChange$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle OnDataChange$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        IAdviseSink2Vtbl.OnDataChange$FUNC, false
    );
    public interface OnDataChange {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(OnDataChange fi) {
            return RuntimeHelper.upcallStub(OnDataChange.class, fi, IAdviseSink2Vtbl.OnDataChange$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        static MemoryAddress allocate(OnDataChange fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(OnDataChange.class, fi, IAdviseSink2Vtbl.OnDataChange$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static OnDataChange ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    IAdviseSink2Vtbl.OnDataChange$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnDataChange$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("OnDataChange")));
    public static VarHandle OnDataChange$VH() {
        return IAdviseSink2Vtbl.OnDataChange$VH;
    }
    public static MemoryAddress OnDataChange$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IAdviseSink2Vtbl.OnDataChange$VH.get(seg);
    }
    public static void OnDataChange$set( MemorySegment seg, MemoryAddress x) {
        IAdviseSink2Vtbl.OnDataChange$VH.set(seg, x);
    }
    public static MemoryAddress OnDataChange$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IAdviseSink2Vtbl.OnDataChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnDataChange$set(MemorySegment seg, long index, MemoryAddress x) {
        IAdviseSink2Vtbl.OnDataChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnDataChange OnDataChange (MemorySegment segment) {
        return OnDataChange.ofAddress(OnDataChange$get(segment));
    }
    static final FunctionDescriptor OnViewChange$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final MethodHandle OnViewChange$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;II)V",
        IAdviseSink2Vtbl.OnViewChange$FUNC, false
    );
    public interface OnViewChange {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2);
        static MemoryAddress allocate(OnViewChange fi) {
            return RuntimeHelper.upcallStub(OnViewChange.class, fi, IAdviseSink2Vtbl.OnViewChange$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)V");
        }
        static MemoryAddress allocate(OnViewChange fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(OnViewChange.class, fi, IAdviseSink2Vtbl.OnViewChange$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)V", scope);
        }
        static OnViewChange ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2) -> {
                try {
                    IAdviseSink2Vtbl.OnViewChange$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnViewChange$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("OnViewChange")));
    public static VarHandle OnViewChange$VH() {
        return IAdviseSink2Vtbl.OnViewChange$VH;
    }
    public static MemoryAddress OnViewChange$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IAdviseSink2Vtbl.OnViewChange$VH.get(seg);
    }
    public static void OnViewChange$set( MemorySegment seg, MemoryAddress x) {
        IAdviseSink2Vtbl.OnViewChange$VH.set(seg, x);
    }
    public static MemoryAddress OnViewChange$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IAdviseSink2Vtbl.OnViewChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnViewChange$set(MemorySegment seg, long index, MemoryAddress x) {
        IAdviseSink2Vtbl.OnViewChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnViewChange OnViewChange (MemorySegment segment) {
        return OnViewChange.ofAddress(OnViewChange$get(segment));
    }
    static final FunctionDescriptor OnRename$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle OnRename$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        IAdviseSink2Vtbl.OnRename$FUNC, false
    );
    public interface OnRename {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(OnRename fi) {
            return RuntimeHelper.upcallStub(OnRename.class, fi, IAdviseSink2Vtbl.OnRename$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        static MemoryAddress allocate(OnRename fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(OnRename.class, fi, IAdviseSink2Vtbl.OnRename$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static OnRename ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    IAdviseSink2Vtbl.OnRename$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnRename$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("OnRename")));
    public static VarHandle OnRename$VH() {
        return IAdviseSink2Vtbl.OnRename$VH;
    }
    public static MemoryAddress OnRename$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IAdviseSink2Vtbl.OnRename$VH.get(seg);
    }
    public static void OnRename$set( MemorySegment seg, MemoryAddress x) {
        IAdviseSink2Vtbl.OnRename$VH.set(seg, x);
    }
    public static MemoryAddress OnRename$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IAdviseSink2Vtbl.OnRename$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnRename$set(MemorySegment seg, long index, MemoryAddress x) {
        IAdviseSink2Vtbl.OnRename$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnRename OnRename (MemorySegment segment) {
        return OnRename.ofAddress(OnRename$get(segment));
    }
    static final FunctionDescriptor OnSave$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle OnSave$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        IAdviseSink2Vtbl.OnSave$FUNC, false
    );
    public interface OnSave {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(OnSave fi) {
            return RuntimeHelper.upcallStub(OnSave.class, fi, IAdviseSink2Vtbl.OnSave$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        static MemoryAddress allocate(OnSave fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(OnSave.class, fi, IAdviseSink2Vtbl.OnSave$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static OnSave ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    IAdviseSink2Vtbl.OnSave$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnSave$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("OnSave")));
    public static VarHandle OnSave$VH() {
        return IAdviseSink2Vtbl.OnSave$VH;
    }
    public static MemoryAddress OnSave$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IAdviseSink2Vtbl.OnSave$VH.get(seg);
    }
    public static void OnSave$set( MemorySegment seg, MemoryAddress x) {
        IAdviseSink2Vtbl.OnSave$VH.set(seg, x);
    }
    public static MemoryAddress OnSave$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IAdviseSink2Vtbl.OnSave$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnSave$set(MemorySegment seg, long index, MemoryAddress x) {
        IAdviseSink2Vtbl.OnSave$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnSave OnSave (MemorySegment segment) {
        return OnSave.ofAddress(OnSave$get(segment));
    }
    static final FunctionDescriptor OnClose$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle OnClose$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        IAdviseSink2Vtbl.OnClose$FUNC, false
    );
    public interface OnClose {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(OnClose fi) {
            return RuntimeHelper.upcallStub(OnClose.class, fi, IAdviseSink2Vtbl.OnClose$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        static MemoryAddress allocate(OnClose fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(OnClose.class, fi, IAdviseSink2Vtbl.OnClose$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static OnClose ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    IAdviseSink2Vtbl.OnClose$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnClose$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("OnClose")));
    public static VarHandle OnClose$VH() {
        return IAdviseSink2Vtbl.OnClose$VH;
    }
    public static MemoryAddress OnClose$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IAdviseSink2Vtbl.OnClose$VH.get(seg);
    }
    public static void OnClose$set( MemorySegment seg, MemoryAddress x) {
        IAdviseSink2Vtbl.OnClose$VH.set(seg, x);
    }
    public static MemoryAddress OnClose$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IAdviseSink2Vtbl.OnClose$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnClose$set(MemorySegment seg, long index, MemoryAddress x) {
        IAdviseSink2Vtbl.OnClose$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnClose OnClose (MemorySegment segment) {
        return OnClose.ofAddress(OnClose$get(segment));
    }
    static final FunctionDescriptor OnLinkSrcChange$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle OnLinkSrcChange$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        IAdviseSink2Vtbl.OnLinkSrcChange$FUNC, false
    );
    public interface OnLinkSrcChange {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(OnLinkSrcChange fi) {
            return RuntimeHelper.upcallStub(OnLinkSrcChange.class, fi, IAdviseSink2Vtbl.OnLinkSrcChange$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        static MemoryAddress allocate(OnLinkSrcChange fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(OnLinkSrcChange.class, fi, IAdviseSink2Vtbl.OnLinkSrcChange$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static OnLinkSrcChange ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    IAdviseSink2Vtbl.OnLinkSrcChange$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnLinkSrcChange$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("OnLinkSrcChange")));
    public static VarHandle OnLinkSrcChange$VH() {
        return IAdviseSink2Vtbl.OnLinkSrcChange$VH;
    }
    public static MemoryAddress OnLinkSrcChange$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IAdviseSink2Vtbl.OnLinkSrcChange$VH.get(seg);
    }
    public static void OnLinkSrcChange$set( MemorySegment seg, MemoryAddress x) {
        IAdviseSink2Vtbl.OnLinkSrcChange$VH.set(seg, x);
    }
    public static MemoryAddress OnLinkSrcChange$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IAdviseSink2Vtbl.OnLinkSrcChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnLinkSrcChange$set(MemorySegment seg, long index, MemoryAddress x) {
        IAdviseSink2Vtbl.OnLinkSrcChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnLinkSrcChange OnLinkSrcChange (MemorySegment segment) {
        return OnLinkSrcChange.ofAddress(OnLinkSrcChange$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


