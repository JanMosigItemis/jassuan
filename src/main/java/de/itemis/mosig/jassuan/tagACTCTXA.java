// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class tagACTCTXA {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("cbSize"),
        C_LONG.withName("dwFlags"),
        C_POINTER.withName("lpSource"),
        C_SHORT.withName("wProcessorArchitecture"),
        C_SHORT.withName("wLangId"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("lpAssemblyDirectory"),
        C_POINTER.withName("lpResourceName"),
        C_POINTER.withName("lpApplicationName"),
        C_POINTER.withName("hModule")
    ).withName("tagACTCTXA");
    public static MemoryLayout $LAYOUT() {
        return tagACTCTXA.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return tagACTCTXA.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)tagACTCTXA.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        tagACTCTXA.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)tagACTCTXA.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        tagACTCTXA.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwFlags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static VarHandle dwFlags$VH() {
        return tagACTCTXA.dwFlags$VH;
    }
    public static int dwFlags$get(MemorySegment seg) {
        return (int)tagACTCTXA.dwFlags$VH.get(seg);
    }
    public static void dwFlags$set( MemorySegment seg, int x) {
        tagACTCTXA.dwFlags$VH.set(seg, x);
    }
    public static int dwFlags$get(MemorySegment seg, long index) {
        return (int)tagACTCTXA.dwFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFlags$set(MemorySegment seg, long index, int x) {
        tagACTCTXA.dwFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpSource$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpSource")));
    public static VarHandle lpSource$VH() {
        return tagACTCTXA.lpSource$VH;
    }
    public static MemoryAddress lpSource$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagACTCTXA.lpSource$VH.get(seg);
    }
    public static void lpSource$set( MemorySegment seg, MemoryAddress x) {
        tagACTCTXA.lpSource$VH.set(seg, x);
    }
    public static MemoryAddress lpSource$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagACTCTXA.lpSource$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpSource$set(MemorySegment seg, long index, MemoryAddress x) {
        tagACTCTXA.lpSource$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wProcessorArchitecture$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("wProcessorArchitecture"));
    public static VarHandle wProcessorArchitecture$VH() {
        return tagACTCTXA.wProcessorArchitecture$VH;
    }
    public static short wProcessorArchitecture$get(MemorySegment seg) {
        return (short)tagACTCTXA.wProcessorArchitecture$VH.get(seg);
    }
    public static void wProcessorArchitecture$set( MemorySegment seg, short x) {
        tagACTCTXA.wProcessorArchitecture$VH.set(seg, x);
    }
    public static short wProcessorArchitecture$get(MemorySegment seg, long index) {
        return (short)tagACTCTXA.wProcessorArchitecture$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wProcessorArchitecture$set(MemorySegment seg, long index, short x) {
        tagACTCTXA.wProcessorArchitecture$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wLangId$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("wLangId"));
    public static VarHandle wLangId$VH() {
        return tagACTCTXA.wLangId$VH;
    }
    public static short wLangId$get(MemorySegment seg) {
        return (short)tagACTCTXA.wLangId$VH.get(seg);
    }
    public static void wLangId$set( MemorySegment seg, short x) {
        tagACTCTXA.wLangId$VH.set(seg, x);
    }
    public static short wLangId$get(MemorySegment seg, long index) {
        return (short)tagACTCTXA.wLangId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wLangId$set(MemorySegment seg, long index, short x) {
        tagACTCTXA.wLangId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpAssemblyDirectory$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpAssemblyDirectory")));
    public static VarHandle lpAssemblyDirectory$VH() {
        return tagACTCTXA.lpAssemblyDirectory$VH;
    }
    public static MemoryAddress lpAssemblyDirectory$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagACTCTXA.lpAssemblyDirectory$VH.get(seg);
    }
    public static void lpAssemblyDirectory$set( MemorySegment seg, MemoryAddress x) {
        tagACTCTXA.lpAssemblyDirectory$VH.set(seg, x);
    }
    public static MemoryAddress lpAssemblyDirectory$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagACTCTXA.lpAssemblyDirectory$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpAssemblyDirectory$set(MemorySegment seg, long index, MemoryAddress x) {
        tagACTCTXA.lpAssemblyDirectory$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpResourceName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpResourceName")));
    public static VarHandle lpResourceName$VH() {
        return tagACTCTXA.lpResourceName$VH;
    }
    public static MemoryAddress lpResourceName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagACTCTXA.lpResourceName$VH.get(seg);
    }
    public static void lpResourceName$set( MemorySegment seg, MemoryAddress x) {
        tagACTCTXA.lpResourceName$VH.set(seg, x);
    }
    public static MemoryAddress lpResourceName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagACTCTXA.lpResourceName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpResourceName$set(MemorySegment seg, long index, MemoryAddress x) {
        tagACTCTXA.lpResourceName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpApplicationName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpApplicationName")));
    public static VarHandle lpApplicationName$VH() {
        return tagACTCTXA.lpApplicationName$VH;
    }
    public static MemoryAddress lpApplicationName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagACTCTXA.lpApplicationName$VH.get(seg);
    }
    public static void lpApplicationName$set( MemorySegment seg, MemoryAddress x) {
        tagACTCTXA.lpApplicationName$VH.set(seg, x);
    }
    public static MemoryAddress lpApplicationName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagACTCTXA.lpApplicationName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpApplicationName$set(MemorySegment seg, long index, MemoryAddress x) {
        tagACTCTXA.lpApplicationName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hModule$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hModule")));
    public static VarHandle hModule$VH() {
        return tagACTCTXA.hModule$VH;
    }
    public static MemoryAddress hModule$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagACTCTXA.hModule$VH.get(seg);
    }
    public static void hModule$set( MemorySegment seg, MemoryAddress x) {
        tagACTCTXA.hModule$VH.set(seg, x);
    }
    public static MemoryAddress hModule$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagACTCTXA.hModule$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hModule$set(MemorySegment seg, long index, MemoryAddress x) {
        tagACTCTXA.hModule$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


