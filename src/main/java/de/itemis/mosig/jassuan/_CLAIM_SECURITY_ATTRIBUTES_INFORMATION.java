// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _CLAIM_SECURITY_ATTRIBUTES_INFORMATION {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_SHORT.withName("Version"),
        C_SHORT.withName("Reserved"),
        C_LONG.withName("AttributeCount"),
        MemoryLayout.unionLayout(
            C_POINTER.withName("pAttributeV1")
        ).withName("Attribute")
    ).withName("_CLAIM_SECURITY_ATTRIBUTES_INFORMATION");
    public static MemoryLayout $LAYOUT() {
        return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION.Version$VH;
    }
    public static short Version$get(MemorySegment seg) {
        return (short)_CLAIM_SECURITY_ATTRIBUTES_INFORMATION.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, short x) {
        _CLAIM_SECURITY_ATTRIBUTES_INFORMATION.Version$VH.set(seg, x);
    }
    public static short Version$get(MemorySegment seg, long index) {
        return (short)_CLAIM_SECURITY_ATTRIBUTES_INFORMATION.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, short x) {
        _CLAIM_SECURITY_ATTRIBUTES_INFORMATION.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Reserved$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    public static VarHandle Reserved$VH() {
        return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION.Reserved$VH;
    }
    public static short Reserved$get(MemorySegment seg) {
        return (short)_CLAIM_SECURITY_ATTRIBUTES_INFORMATION.Reserved$VH.get(seg);
    }
    public static void Reserved$set( MemorySegment seg, short x) {
        _CLAIM_SECURITY_ATTRIBUTES_INFORMATION.Reserved$VH.set(seg, x);
    }
    public static short Reserved$get(MemorySegment seg, long index) {
        return (short)_CLAIM_SECURITY_ATTRIBUTES_INFORMATION.Reserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved$set(MemorySegment seg, long index, short x) {
        _CLAIM_SECURITY_ATTRIBUTES_INFORMATION.Reserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AttributeCount$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("AttributeCount"));
    public static VarHandle AttributeCount$VH() {
        return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION.AttributeCount$VH;
    }
    public static int AttributeCount$get(MemorySegment seg) {
        return (int)_CLAIM_SECURITY_ATTRIBUTES_INFORMATION.AttributeCount$VH.get(seg);
    }
    public static void AttributeCount$set( MemorySegment seg, int x) {
        _CLAIM_SECURITY_ATTRIBUTES_INFORMATION.AttributeCount$VH.set(seg, x);
    }
    public static int AttributeCount$get(MemorySegment seg, long index) {
        return (int)_CLAIM_SECURITY_ATTRIBUTES_INFORMATION.AttributeCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AttributeCount$set(MemorySegment seg, long index, int x) {
        _CLAIM_SECURITY_ATTRIBUTES_INFORMATION.AttributeCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class Attribute {

        static final MemoryLayout Attribute$union$LAYOUT = MemoryLayout.unionLayout(
            C_POINTER.withName("pAttributeV1")
        );
        public static MemoryLayout $LAYOUT() {
            return Attribute.Attribute$union$LAYOUT;
        }
        static final VarHandle pAttributeV1$VH = MemoryHandles.asAddressVarHandle(Attribute$union$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pAttributeV1")));
        public static VarHandle pAttributeV1$VH() {
            return Attribute.pAttributeV1$VH;
        }
        public static MemoryAddress pAttributeV1$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)Attribute.pAttributeV1$VH.get(seg);
        }
        public static void pAttributeV1$set( MemorySegment seg, MemoryAddress x) {
            Attribute.pAttributeV1$VH.set(seg, x);
        }
        public static MemoryAddress pAttributeV1$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)Attribute.pAttributeV1$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void pAttributeV1$set(MemorySegment seg, long index, MemoryAddress x) {
            Attribute.pAttributeV1$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.ofScope(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment Attribute$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


