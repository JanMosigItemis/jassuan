// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _CRYPT_TIME_STAMP_REQUEST_INFO {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("pszTimeStampAlgorithm"),
        C_POINTER.withName("pszContentType"),
        MemoryLayout.structLayout(
            C_LONG.withName("cbData"),
            MemoryLayout.paddingLayout(32),
            C_POINTER.withName("pbData")
        ).withName("Content"),
        C_LONG.withName("cAttribute"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("rgAttribute")
    ).withName("_CRYPT_TIME_STAMP_REQUEST_INFO");
    public static MemoryLayout $LAYOUT() {
        return _CRYPT_TIME_STAMP_REQUEST_INFO.$struct$LAYOUT;
    }
    static final VarHandle pszTimeStampAlgorithm$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszTimeStampAlgorithm")));
    public static VarHandle pszTimeStampAlgorithm$VH() {
        return _CRYPT_TIME_STAMP_REQUEST_INFO.pszTimeStampAlgorithm$VH;
    }
    public static MemoryAddress pszTimeStampAlgorithm$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CRYPT_TIME_STAMP_REQUEST_INFO.pszTimeStampAlgorithm$VH.get(seg);
    }
    public static void pszTimeStampAlgorithm$set( MemorySegment seg, MemoryAddress x) {
        _CRYPT_TIME_STAMP_REQUEST_INFO.pszTimeStampAlgorithm$VH.set(seg, x);
    }
    public static MemoryAddress pszTimeStampAlgorithm$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CRYPT_TIME_STAMP_REQUEST_INFO.pszTimeStampAlgorithm$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pszTimeStampAlgorithm$set(MemorySegment seg, long index, MemoryAddress x) {
        _CRYPT_TIME_STAMP_REQUEST_INFO.pszTimeStampAlgorithm$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pszContentType$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszContentType")));
    public static VarHandle pszContentType$VH() {
        return _CRYPT_TIME_STAMP_REQUEST_INFO.pszContentType$VH;
    }
    public static MemoryAddress pszContentType$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CRYPT_TIME_STAMP_REQUEST_INFO.pszContentType$VH.get(seg);
    }
    public static void pszContentType$set( MemorySegment seg, MemoryAddress x) {
        _CRYPT_TIME_STAMP_REQUEST_INFO.pszContentType$VH.set(seg, x);
    }
    public static MemoryAddress pszContentType$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CRYPT_TIME_STAMP_REQUEST_INFO.pszContentType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pszContentType$set(MemorySegment seg, long index, MemoryAddress x) {
        _CRYPT_TIME_STAMP_REQUEST_INFO.pszContentType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Content$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    static final VarHandle cAttribute$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cAttribute"));
    public static VarHandle cAttribute$VH() {
        return _CRYPT_TIME_STAMP_REQUEST_INFO.cAttribute$VH;
    }
    public static int cAttribute$get(MemorySegment seg) {
        return (int)_CRYPT_TIME_STAMP_REQUEST_INFO.cAttribute$VH.get(seg);
    }
    public static void cAttribute$set( MemorySegment seg, int x) {
        _CRYPT_TIME_STAMP_REQUEST_INFO.cAttribute$VH.set(seg, x);
    }
    public static int cAttribute$get(MemorySegment seg, long index) {
        return (int)_CRYPT_TIME_STAMP_REQUEST_INFO.cAttribute$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cAttribute$set(MemorySegment seg, long index, int x) {
        _CRYPT_TIME_STAMP_REQUEST_INFO.cAttribute$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rgAttribute$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgAttribute")));
    public static VarHandle rgAttribute$VH() {
        return _CRYPT_TIME_STAMP_REQUEST_INFO.rgAttribute$VH;
    }
    public static MemoryAddress rgAttribute$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CRYPT_TIME_STAMP_REQUEST_INFO.rgAttribute$VH.get(seg);
    }
    public static void rgAttribute$set( MemorySegment seg, MemoryAddress x) {
        _CRYPT_TIME_STAMP_REQUEST_INFO.rgAttribute$VH.set(seg, x);
    }
    public static MemoryAddress rgAttribute$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CRYPT_TIME_STAMP_REQUEST_INFO.rgAttribute$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rgAttribute$set(MemorySegment seg, long index, MemoryAddress x) {
        _CRYPT_TIME_STAMP_REQUEST_INFO.rgAttribute$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


