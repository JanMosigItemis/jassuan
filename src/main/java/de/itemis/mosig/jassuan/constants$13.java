// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$13 {

    static final FunctionDescriptor getc$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle getc$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "getc",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$13.getc$FUNC, false
    );
    static final FunctionDescriptor getchar$FUNC = FunctionDescriptor.of(C_INT);
    static final MethodHandle getchar$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "getchar",
        "()I",
        constants$13.getchar$FUNC, false
    );
    static final FunctionDescriptor _getmaxstdio$FUNC = FunctionDescriptor.of(C_INT);
    static final MethodHandle _getmaxstdio$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "_getmaxstdio",
        "()I",
        constants$13._getmaxstdio$FUNC, false
    );
    static final FunctionDescriptor gets$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final MethodHandle gets$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "gets",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$13.gets$FUNC, false
    );
    static final FunctionDescriptor _getw$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle _getw$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "_getw",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$13._getw$FUNC, false
    );
    static final FunctionDescriptor perror$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle perror$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "perror",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$13.perror$FUNC, false
    );
}


