// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$735 {

    static final FunctionDescriptor UnpackDDElParam$FUNC = FunctionDescriptor.of(C_INT,
        C_INT,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle UnpackDDElParam$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "UnpackDDElParam",
        "(IJLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$735.UnpackDDElParam$FUNC, false
    );
    static final FunctionDescriptor FreeDDElParam$FUNC = FunctionDescriptor.of(C_INT,
        C_INT,
        C_LONG_LONG
    );
    static final MethodHandle FreeDDElParam$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "FreeDDElParam",
        "(IJ)I",
        constants$735.FreeDDElParam$FUNC, false
    );
    static final FunctionDescriptor ReuseDDElParam$FUNC = FunctionDescriptor.of(C_LONG_LONG,
        C_LONG_LONG,
        C_INT,
        C_INT,
        C_LONG_LONG,
        C_LONG_LONG
    );
    static final MethodHandle ReuseDDElParam$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "ReuseDDElParam",
        "(JIIJJ)J",
        constants$735.ReuseDDElParam$FUNC, false
    );
    static final FunctionDescriptor FNCALLBACK$FUNC = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_LONG_LONG
    );
    static final MethodHandle FNCALLBACK$MH = RuntimeHelper.downcallHandle(
        "(IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JJ)Ljdk/incubator/foreign/MemoryAddress;",
        constants$735.FNCALLBACK$FUNC, false
    );
    static final FunctionDescriptor PFNCALLBACK$FUNC = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_LONG_LONG
    );
}


