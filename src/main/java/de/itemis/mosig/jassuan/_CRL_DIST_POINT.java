// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _CRL_DIST_POINT {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            C_LONG.withName("dwDistPointNameChoice"),
            MemoryLayout.paddingLayout(32),
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    C_LONG.withName("cAltEntry"),
                    MemoryLayout.paddingLayout(32),
                    C_POINTER.withName("rgAltEntry")
                ).withName("FullName")
            ).withName("$anon$0")
        ).withName("DistPointName"),
        MemoryLayout.structLayout(
            C_LONG.withName("cbData"),
            MemoryLayout.paddingLayout(32),
            C_POINTER.withName("pbData"),
            C_LONG.withName("cUnusedBits"),
            MemoryLayout.paddingLayout(32)
        ).withName("ReasonFlags"),
        MemoryLayout.structLayout(
            C_LONG.withName("cAltEntry"),
            MemoryLayout.paddingLayout(32),
            C_POINTER.withName("rgAltEntry")
        ).withName("CRLIssuer")
    ).withName("_CRL_DIST_POINT");
    public static MemoryLayout $LAYOUT() {
        return _CRL_DIST_POINT.$struct$LAYOUT;
    }
    public static MemorySegment DistPointName$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    public static MemorySegment ReasonFlags$slice(MemorySegment seg) {
        return seg.asSlice(24, 24);
    }
    public static MemorySegment CRLIssuer$slice(MemorySegment seg) {
        return seg.asSlice(48, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


