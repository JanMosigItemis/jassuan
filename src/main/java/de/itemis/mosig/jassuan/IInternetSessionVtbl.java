// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IInternetSessionVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("RegisterNameSpace"),
        C_POINTER.withName("UnregisterNameSpace"),
        C_POINTER.withName("RegisterMimeFilter"),
        C_POINTER.withName("UnregisterMimeFilter"),
        C_POINTER.withName("CreateBinding"),
        C_POINTER.withName("SetSessionOption"),
        C_POINTER.withName("GetSessionOption")
    ).withName("IInternetSessionVtbl");
    public static MemoryLayout $LAYOUT() {
        return IInternetSessionVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetSessionVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IInternetSessionVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IInternetSessionVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IInternetSessionVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IInternetSessionVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSessionVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IInternetSessionVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSessionVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSessionVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetSessionVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IInternetSessionVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IInternetSessionVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IInternetSessionVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IInternetSessionVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSessionVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IInternetSessionVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSessionVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSessionVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetSessionVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IInternetSessionVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IInternetSessionVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IInternetSessionVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IInternetSessionVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSessionVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IInternetSessionVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSessionVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSessionVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor RegisterNameSpace$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle RegisterNameSpace$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        IInternetSessionVtbl.RegisterNameSpace$FUNC, false
    );
    public interface RegisterNameSpace {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, int x4, jdk.incubator.foreign.MemoryAddress x5, int x6);
        static MemoryAddress allocate(RegisterNameSpace fi) {
            return RuntimeHelper.upcallStub(RegisterNameSpace.class, fi, IInternetSessionVtbl.RegisterNameSpace$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(RegisterNameSpace fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(RegisterNameSpace.class, fi, IInternetSessionVtbl.RegisterNameSpace$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static RegisterNameSpace ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, int x4, jdk.incubator.foreign.MemoryAddress x5, int x6) -> {
                try {
                    return (int)IInternetSessionVtbl.RegisterNameSpace$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RegisterNameSpace$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("RegisterNameSpace")));
    public static VarHandle RegisterNameSpace$VH() {
        return IInternetSessionVtbl.RegisterNameSpace$VH;
    }
    public static MemoryAddress RegisterNameSpace$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSessionVtbl.RegisterNameSpace$VH.get(seg);
    }
    public static void RegisterNameSpace$set( MemorySegment seg, MemoryAddress x) {
        IInternetSessionVtbl.RegisterNameSpace$VH.set(seg, x);
    }
    public static MemoryAddress RegisterNameSpace$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSessionVtbl.RegisterNameSpace$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RegisterNameSpace$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSessionVtbl.RegisterNameSpace$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RegisterNameSpace RegisterNameSpace (MemorySegment segment) {
        return RegisterNameSpace.ofAddress(RegisterNameSpace$get(segment));
    }
    static final FunctionDescriptor UnregisterNameSpace$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle UnregisterNameSpace$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetSessionVtbl.UnregisterNameSpace$FUNC, false
    );
    public interface UnregisterNameSpace {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(UnregisterNameSpace fi) {
            return RuntimeHelper.upcallStub(UnregisterNameSpace.class, fi, IInternetSessionVtbl.UnregisterNameSpace$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(UnregisterNameSpace fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(UnregisterNameSpace.class, fi, IInternetSessionVtbl.UnregisterNameSpace$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static UnregisterNameSpace ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IInternetSessionVtbl.UnregisterNameSpace$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle UnregisterNameSpace$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("UnregisterNameSpace")));
    public static VarHandle UnregisterNameSpace$VH() {
        return IInternetSessionVtbl.UnregisterNameSpace$VH;
    }
    public static MemoryAddress UnregisterNameSpace$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSessionVtbl.UnregisterNameSpace$VH.get(seg);
    }
    public static void UnregisterNameSpace$set( MemorySegment seg, MemoryAddress x) {
        IInternetSessionVtbl.UnregisterNameSpace$VH.set(seg, x);
    }
    public static MemoryAddress UnregisterNameSpace$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSessionVtbl.UnregisterNameSpace$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UnregisterNameSpace$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSessionVtbl.UnregisterNameSpace$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static UnregisterNameSpace UnregisterNameSpace (MemorySegment segment) {
        return UnregisterNameSpace.ofAddress(UnregisterNameSpace$get(segment));
    }
    static final FunctionDescriptor RegisterMimeFilter$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle RegisterMimeFilter$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetSessionVtbl.RegisterMimeFilter$FUNC, false
    );
    public interface RegisterMimeFilter {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(RegisterMimeFilter fi) {
            return RuntimeHelper.upcallStub(RegisterMimeFilter.class, fi, IInternetSessionVtbl.RegisterMimeFilter$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(RegisterMimeFilter fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(RegisterMimeFilter.class, fi, IInternetSessionVtbl.RegisterMimeFilter$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static RegisterMimeFilter ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)IInternetSessionVtbl.RegisterMimeFilter$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RegisterMimeFilter$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("RegisterMimeFilter")));
    public static VarHandle RegisterMimeFilter$VH() {
        return IInternetSessionVtbl.RegisterMimeFilter$VH;
    }
    public static MemoryAddress RegisterMimeFilter$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSessionVtbl.RegisterMimeFilter$VH.get(seg);
    }
    public static void RegisterMimeFilter$set( MemorySegment seg, MemoryAddress x) {
        IInternetSessionVtbl.RegisterMimeFilter$VH.set(seg, x);
    }
    public static MemoryAddress RegisterMimeFilter$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSessionVtbl.RegisterMimeFilter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RegisterMimeFilter$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSessionVtbl.RegisterMimeFilter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RegisterMimeFilter RegisterMimeFilter (MemorySegment segment) {
        return RegisterMimeFilter.ofAddress(RegisterMimeFilter$get(segment));
    }
    static final FunctionDescriptor UnregisterMimeFilter$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle UnregisterMimeFilter$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetSessionVtbl.UnregisterMimeFilter$FUNC, false
    );
    public interface UnregisterMimeFilter {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(UnregisterMimeFilter fi) {
            return RuntimeHelper.upcallStub(UnregisterMimeFilter.class, fi, IInternetSessionVtbl.UnregisterMimeFilter$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(UnregisterMimeFilter fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(UnregisterMimeFilter.class, fi, IInternetSessionVtbl.UnregisterMimeFilter$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static UnregisterMimeFilter ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IInternetSessionVtbl.UnregisterMimeFilter$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle UnregisterMimeFilter$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("UnregisterMimeFilter")));
    public static VarHandle UnregisterMimeFilter$VH() {
        return IInternetSessionVtbl.UnregisterMimeFilter$VH;
    }
    public static MemoryAddress UnregisterMimeFilter$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSessionVtbl.UnregisterMimeFilter$VH.get(seg);
    }
    public static void UnregisterMimeFilter$set( MemorySegment seg, MemoryAddress x) {
        IInternetSessionVtbl.UnregisterMimeFilter$VH.set(seg, x);
    }
    public static MemoryAddress UnregisterMimeFilter$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSessionVtbl.UnregisterMimeFilter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UnregisterMimeFilter$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSessionVtbl.UnregisterMimeFilter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static UnregisterMimeFilter UnregisterMimeFilter (MemorySegment segment) {
        return UnregisterMimeFilter.ofAddress(UnregisterMimeFilter$get(segment));
    }
    static final FunctionDescriptor CreateBinding$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle CreateBinding$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        IInternetSessionVtbl.CreateBinding$FUNC, false
    );
    public interface CreateBinding {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5, int x6);
        static MemoryAddress allocate(CreateBinding fi) {
            return RuntimeHelper.upcallStub(CreateBinding.class, fi, IInternetSessionVtbl.CreateBinding$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(CreateBinding fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(CreateBinding.class, fi, IInternetSessionVtbl.CreateBinding$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static CreateBinding ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5, int x6) -> {
                try {
                    return (int)IInternetSessionVtbl.CreateBinding$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateBinding$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("CreateBinding")));
    public static VarHandle CreateBinding$VH() {
        return IInternetSessionVtbl.CreateBinding$VH;
    }
    public static MemoryAddress CreateBinding$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSessionVtbl.CreateBinding$VH.get(seg);
    }
    public static void CreateBinding$set( MemorySegment seg, MemoryAddress x) {
        IInternetSessionVtbl.CreateBinding$VH.set(seg, x);
    }
    public static MemoryAddress CreateBinding$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSessionVtbl.CreateBinding$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateBinding$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSessionVtbl.CreateBinding$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateBinding CreateBinding (MemorySegment segment) {
        return CreateBinding.ofAddress(CreateBinding$get(segment));
    }
    static final FunctionDescriptor SetSessionOption$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final MethodHandle SetSessionOption$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)I",
        IInternetSessionVtbl.SetSessionOption$FUNC, false
    );
    public interface SetSessionOption {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3, int x4);
        static MemoryAddress allocate(SetSessionOption fi) {
            return RuntimeHelper.upcallStub(SetSessionOption.class, fi, IInternetSessionVtbl.SetSessionOption$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)I");
        }
        static MemoryAddress allocate(SetSessionOption fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetSessionOption.class, fi, IInternetSessionVtbl.SetSessionOption$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)I", scope);
        }
        static SetSessionOption ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3, int x4) -> {
                try {
                    return (int)IInternetSessionVtbl.SetSessionOption$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetSessionOption$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetSessionOption")));
    public static VarHandle SetSessionOption$VH() {
        return IInternetSessionVtbl.SetSessionOption$VH;
    }
    public static MemoryAddress SetSessionOption$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSessionVtbl.SetSessionOption$VH.get(seg);
    }
    public static void SetSessionOption$set( MemorySegment seg, MemoryAddress x) {
        IInternetSessionVtbl.SetSessionOption$VH.set(seg, x);
    }
    public static MemoryAddress SetSessionOption$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSessionVtbl.SetSessionOption$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetSessionOption$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSessionVtbl.SetSessionOption$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetSessionOption SetSessionOption (MemorySegment segment) {
        return SetSessionOption.ofAddress(SetSessionOption$get(segment));
    }
    static final FunctionDescriptor GetSessionOption$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle GetSessionOption$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        IInternetSessionVtbl.GetSessionOption$FUNC, false
    );
    public interface GetSessionOption {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, int x4);
        static MemoryAddress allocate(GetSessionOption fi) {
            return RuntimeHelper.upcallStub(GetSessionOption.class, fi, IInternetSessionVtbl.GetSessionOption$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(GetSessionOption fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetSessionOption.class, fi, IInternetSessionVtbl.GetSessionOption$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static GetSessionOption ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, int x4) -> {
                try {
                    return (int)IInternetSessionVtbl.GetSessionOption$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetSessionOption$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetSessionOption")));
    public static VarHandle GetSessionOption$VH() {
        return IInternetSessionVtbl.GetSessionOption$VH;
    }
    public static MemoryAddress GetSessionOption$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSessionVtbl.GetSessionOption$VH.get(seg);
    }
    public static void GetSessionOption$set( MemorySegment seg, MemoryAddress x) {
        IInternetSessionVtbl.GetSessionOption$VH.set(seg, x);
    }
    public static MemoryAddress GetSessionOption$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSessionVtbl.GetSessionOption$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSessionOption$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSessionVtbl.GetSessionOption$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSessionOption GetSessionOption (MemorySegment segment) {
        return GetSessionOption.ofAddress(GetSessionOption$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


