// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IUriVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetPropertyBSTR"),
        C_POINTER.withName("GetPropertyLength"),
        C_POINTER.withName("GetPropertyDWORD"),
        C_POINTER.withName("HasProperty"),
        C_POINTER.withName("GetAbsoluteUri"),
        C_POINTER.withName("GetAuthority"),
        C_POINTER.withName("GetDisplayUri"),
        C_POINTER.withName("GetDomain"),
        C_POINTER.withName("GetExtension"),
        C_POINTER.withName("GetFragment"),
        C_POINTER.withName("GetHost"),
        C_POINTER.withName("GetPassword"),
        C_POINTER.withName("GetPath"),
        C_POINTER.withName("GetPathAndQuery"),
        C_POINTER.withName("GetQuery"),
        C_POINTER.withName("GetRawUri"),
        C_POINTER.withName("GetSchemeName"),
        C_POINTER.withName("GetUserInfo"),
        C_POINTER.withName("GetUserNameA"),
        C_POINTER.withName("GetHostType"),
        C_POINTER.withName("GetPort"),
        C_POINTER.withName("GetScheme"),
        C_POINTER.withName("GetZone"),
        C_POINTER.withName("GetProperties"),
        C_POINTER.withName("IsEqual")
    ).withName("IUriVtbl");
    public static MemoryLayout $LAYOUT() {
        return IUriVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IUriVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IUriVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IUriVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IUriVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IUriVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IUriVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IUriVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IUriVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IUriVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IUriVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IUriVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IUriVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor GetPropertyBSTR$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle GetPropertyBSTR$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        IUriVtbl.GetPropertyBSTR$FUNC, false
    );
    public interface GetPropertyBSTR {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3);
        static MemoryAddress allocate(GetPropertyBSTR fi) {
            return RuntimeHelper.upcallStub(GetPropertyBSTR.class, fi, IUriVtbl.GetPropertyBSTR$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(GetPropertyBSTR fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetPropertyBSTR.class, fi, IUriVtbl.GetPropertyBSTR$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static GetPropertyBSTR ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3) -> {
                try {
                    return (int)IUriVtbl.GetPropertyBSTR$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetPropertyBSTR$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetPropertyBSTR")));
    public static VarHandle GetPropertyBSTR$VH() {
        return IUriVtbl.GetPropertyBSTR$VH;
    }
    public static MemoryAddress GetPropertyBSTR$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetPropertyBSTR$VH.get(seg);
    }
    public static void GetPropertyBSTR$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.GetPropertyBSTR$VH.set(seg, x);
    }
    public static MemoryAddress GetPropertyBSTR$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetPropertyBSTR$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPropertyBSTR$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.GetPropertyBSTR$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPropertyBSTR GetPropertyBSTR (MemorySegment segment) {
        return GetPropertyBSTR.ofAddress(GetPropertyBSTR$get(segment));
    }
    static final FunctionDescriptor GetPropertyLength$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle GetPropertyLength$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        IUriVtbl.GetPropertyLength$FUNC, false
    );
    public interface GetPropertyLength {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3);
        static MemoryAddress allocate(GetPropertyLength fi) {
            return RuntimeHelper.upcallStub(GetPropertyLength.class, fi, IUriVtbl.GetPropertyLength$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(GetPropertyLength fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetPropertyLength.class, fi, IUriVtbl.GetPropertyLength$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static GetPropertyLength ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3) -> {
                try {
                    return (int)IUriVtbl.GetPropertyLength$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetPropertyLength$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetPropertyLength")));
    public static VarHandle GetPropertyLength$VH() {
        return IUriVtbl.GetPropertyLength$VH;
    }
    public static MemoryAddress GetPropertyLength$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetPropertyLength$VH.get(seg);
    }
    public static void GetPropertyLength$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.GetPropertyLength$VH.set(seg, x);
    }
    public static MemoryAddress GetPropertyLength$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetPropertyLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPropertyLength$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.GetPropertyLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPropertyLength GetPropertyLength (MemorySegment segment) {
        return GetPropertyLength.ofAddress(GetPropertyLength$get(segment));
    }
    static final FunctionDescriptor GetPropertyDWORD$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle GetPropertyDWORD$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        IUriVtbl.GetPropertyDWORD$FUNC, false
    );
    public interface GetPropertyDWORD {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3);
        static MemoryAddress allocate(GetPropertyDWORD fi) {
            return RuntimeHelper.upcallStub(GetPropertyDWORD.class, fi, IUriVtbl.GetPropertyDWORD$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(GetPropertyDWORD fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetPropertyDWORD.class, fi, IUriVtbl.GetPropertyDWORD$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static GetPropertyDWORD ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3) -> {
                try {
                    return (int)IUriVtbl.GetPropertyDWORD$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetPropertyDWORD$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetPropertyDWORD")));
    public static VarHandle GetPropertyDWORD$VH() {
        return IUriVtbl.GetPropertyDWORD$VH;
    }
    public static MemoryAddress GetPropertyDWORD$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetPropertyDWORD$VH.get(seg);
    }
    public static void GetPropertyDWORD$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.GetPropertyDWORD$VH.set(seg, x);
    }
    public static MemoryAddress GetPropertyDWORD$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetPropertyDWORD$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPropertyDWORD$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.GetPropertyDWORD$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPropertyDWORD GetPropertyDWORD (MemorySegment segment) {
        return GetPropertyDWORD.ofAddress(GetPropertyDWORD$get(segment));
    }
    static final FunctionDescriptor HasProperty$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle HasProperty$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.HasProperty$FUNC, false
    );
    public interface HasProperty {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(HasProperty fi) {
            return RuntimeHelper.upcallStub(HasProperty.class, fi, IUriVtbl.HasProperty$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(HasProperty fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(HasProperty.class, fi, IUriVtbl.HasProperty$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static HasProperty ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IUriVtbl.HasProperty$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle HasProperty$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("HasProperty")));
    public static VarHandle HasProperty$VH() {
        return IUriVtbl.HasProperty$VH;
    }
    public static MemoryAddress HasProperty$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.HasProperty$VH.get(seg);
    }
    public static void HasProperty$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.HasProperty$VH.set(seg, x);
    }
    public static MemoryAddress HasProperty$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.HasProperty$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void HasProperty$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.HasProperty$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static HasProperty HasProperty (MemorySegment segment) {
        return HasProperty.ofAddress(HasProperty$get(segment));
    }
    static final FunctionDescriptor GetAbsoluteUri$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetAbsoluteUri$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.GetAbsoluteUri$FUNC, false
    );
    public interface GetAbsoluteUri {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetAbsoluteUri fi) {
            return RuntimeHelper.upcallStub(GetAbsoluteUri.class, fi, IUriVtbl.GetAbsoluteUri$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetAbsoluteUri fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetAbsoluteUri.class, fi, IUriVtbl.GetAbsoluteUri$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetAbsoluteUri ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriVtbl.GetAbsoluteUri$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetAbsoluteUri$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetAbsoluteUri")));
    public static VarHandle GetAbsoluteUri$VH() {
        return IUriVtbl.GetAbsoluteUri$VH;
    }
    public static MemoryAddress GetAbsoluteUri$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetAbsoluteUri$VH.get(seg);
    }
    public static void GetAbsoluteUri$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.GetAbsoluteUri$VH.set(seg, x);
    }
    public static MemoryAddress GetAbsoluteUri$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetAbsoluteUri$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetAbsoluteUri$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.GetAbsoluteUri$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetAbsoluteUri GetAbsoluteUri (MemorySegment segment) {
        return GetAbsoluteUri.ofAddress(GetAbsoluteUri$get(segment));
    }
    static final FunctionDescriptor GetAuthority$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetAuthority$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.GetAuthority$FUNC, false
    );
    public interface GetAuthority {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetAuthority fi) {
            return RuntimeHelper.upcallStub(GetAuthority.class, fi, IUriVtbl.GetAuthority$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetAuthority fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetAuthority.class, fi, IUriVtbl.GetAuthority$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetAuthority ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriVtbl.GetAuthority$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetAuthority$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetAuthority")));
    public static VarHandle GetAuthority$VH() {
        return IUriVtbl.GetAuthority$VH;
    }
    public static MemoryAddress GetAuthority$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetAuthority$VH.get(seg);
    }
    public static void GetAuthority$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.GetAuthority$VH.set(seg, x);
    }
    public static MemoryAddress GetAuthority$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetAuthority$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetAuthority$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.GetAuthority$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetAuthority GetAuthority (MemorySegment segment) {
        return GetAuthority.ofAddress(GetAuthority$get(segment));
    }
    static final FunctionDescriptor GetDisplayUri$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetDisplayUri$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.GetDisplayUri$FUNC, false
    );
    public interface GetDisplayUri {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetDisplayUri fi) {
            return RuntimeHelper.upcallStub(GetDisplayUri.class, fi, IUriVtbl.GetDisplayUri$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetDisplayUri fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetDisplayUri.class, fi, IUriVtbl.GetDisplayUri$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetDisplayUri ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriVtbl.GetDisplayUri$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDisplayUri$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetDisplayUri")));
    public static VarHandle GetDisplayUri$VH() {
        return IUriVtbl.GetDisplayUri$VH;
    }
    public static MemoryAddress GetDisplayUri$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetDisplayUri$VH.get(seg);
    }
    public static void GetDisplayUri$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.GetDisplayUri$VH.set(seg, x);
    }
    public static MemoryAddress GetDisplayUri$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetDisplayUri$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDisplayUri$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.GetDisplayUri$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDisplayUri GetDisplayUri (MemorySegment segment) {
        return GetDisplayUri.ofAddress(GetDisplayUri$get(segment));
    }
    static final FunctionDescriptor GetDomain$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetDomain$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.GetDomain$FUNC, false
    );
    public interface GetDomain {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetDomain fi) {
            return RuntimeHelper.upcallStub(GetDomain.class, fi, IUriVtbl.GetDomain$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetDomain fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetDomain.class, fi, IUriVtbl.GetDomain$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetDomain ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriVtbl.GetDomain$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDomain$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetDomain")));
    public static VarHandle GetDomain$VH() {
        return IUriVtbl.GetDomain$VH;
    }
    public static MemoryAddress GetDomain$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetDomain$VH.get(seg);
    }
    public static void GetDomain$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.GetDomain$VH.set(seg, x);
    }
    public static MemoryAddress GetDomain$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetDomain$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDomain$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.GetDomain$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDomain GetDomain (MemorySegment segment) {
        return GetDomain.ofAddress(GetDomain$get(segment));
    }
    static final FunctionDescriptor GetExtension$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetExtension$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.GetExtension$FUNC, false
    );
    public interface GetExtension {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetExtension fi) {
            return RuntimeHelper.upcallStub(GetExtension.class, fi, IUriVtbl.GetExtension$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetExtension fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetExtension.class, fi, IUriVtbl.GetExtension$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetExtension ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriVtbl.GetExtension$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetExtension$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetExtension")));
    public static VarHandle GetExtension$VH() {
        return IUriVtbl.GetExtension$VH;
    }
    public static MemoryAddress GetExtension$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetExtension$VH.get(seg);
    }
    public static void GetExtension$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.GetExtension$VH.set(seg, x);
    }
    public static MemoryAddress GetExtension$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetExtension$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetExtension$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.GetExtension$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetExtension GetExtension (MemorySegment segment) {
        return GetExtension.ofAddress(GetExtension$get(segment));
    }
    static final FunctionDescriptor GetFragment$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetFragment$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.GetFragment$FUNC, false
    );
    public interface GetFragment {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetFragment fi) {
            return RuntimeHelper.upcallStub(GetFragment.class, fi, IUriVtbl.GetFragment$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetFragment fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetFragment.class, fi, IUriVtbl.GetFragment$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetFragment ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriVtbl.GetFragment$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetFragment$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetFragment")));
    public static VarHandle GetFragment$VH() {
        return IUriVtbl.GetFragment$VH;
    }
    public static MemoryAddress GetFragment$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetFragment$VH.get(seg);
    }
    public static void GetFragment$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.GetFragment$VH.set(seg, x);
    }
    public static MemoryAddress GetFragment$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetFragment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFragment$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.GetFragment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFragment GetFragment (MemorySegment segment) {
        return GetFragment.ofAddress(GetFragment$get(segment));
    }
    static final FunctionDescriptor GetHost$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetHost$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.GetHost$FUNC, false
    );
    public interface GetHost {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetHost fi) {
            return RuntimeHelper.upcallStub(GetHost.class, fi, IUriVtbl.GetHost$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetHost fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetHost.class, fi, IUriVtbl.GetHost$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetHost ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriVtbl.GetHost$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetHost$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetHost")));
    public static VarHandle GetHost$VH() {
        return IUriVtbl.GetHost$VH;
    }
    public static MemoryAddress GetHost$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetHost$VH.get(seg);
    }
    public static void GetHost$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.GetHost$VH.set(seg, x);
    }
    public static MemoryAddress GetHost$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetHost$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetHost$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.GetHost$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetHost GetHost (MemorySegment segment) {
        return GetHost.ofAddress(GetHost$get(segment));
    }
    static final FunctionDescriptor GetPassword$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetPassword$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.GetPassword$FUNC, false
    );
    public interface GetPassword {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetPassword fi) {
            return RuntimeHelper.upcallStub(GetPassword.class, fi, IUriVtbl.GetPassword$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetPassword fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetPassword.class, fi, IUriVtbl.GetPassword$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetPassword ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriVtbl.GetPassword$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetPassword$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetPassword")));
    public static VarHandle GetPassword$VH() {
        return IUriVtbl.GetPassword$VH;
    }
    public static MemoryAddress GetPassword$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetPassword$VH.get(seg);
    }
    public static void GetPassword$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.GetPassword$VH.set(seg, x);
    }
    public static MemoryAddress GetPassword$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetPassword$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPassword$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.GetPassword$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPassword GetPassword (MemorySegment segment) {
        return GetPassword.ofAddress(GetPassword$get(segment));
    }
    static final FunctionDescriptor GetPath$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetPath$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.GetPath$FUNC, false
    );
    public interface GetPath {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetPath fi) {
            return RuntimeHelper.upcallStub(GetPath.class, fi, IUriVtbl.GetPath$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetPath fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetPath.class, fi, IUriVtbl.GetPath$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetPath ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriVtbl.GetPath$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetPath$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetPath")));
    public static VarHandle GetPath$VH() {
        return IUriVtbl.GetPath$VH;
    }
    public static MemoryAddress GetPath$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetPath$VH.get(seg);
    }
    public static void GetPath$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.GetPath$VH.set(seg, x);
    }
    public static MemoryAddress GetPath$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetPath$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPath$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.GetPath$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPath GetPath (MemorySegment segment) {
        return GetPath.ofAddress(GetPath$get(segment));
    }
    static final FunctionDescriptor GetPathAndQuery$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetPathAndQuery$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.GetPathAndQuery$FUNC, false
    );
    public interface GetPathAndQuery {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetPathAndQuery fi) {
            return RuntimeHelper.upcallStub(GetPathAndQuery.class, fi, IUriVtbl.GetPathAndQuery$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetPathAndQuery fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetPathAndQuery.class, fi, IUriVtbl.GetPathAndQuery$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetPathAndQuery ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriVtbl.GetPathAndQuery$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetPathAndQuery$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetPathAndQuery")));
    public static VarHandle GetPathAndQuery$VH() {
        return IUriVtbl.GetPathAndQuery$VH;
    }
    public static MemoryAddress GetPathAndQuery$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetPathAndQuery$VH.get(seg);
    }
    public static void GetPathAndQuery$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.GetPathAndQuery$VH.set(seg, x);
    }
    public static MemoryAddress GetPathAndQuery$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetPathAndQuery$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPathAndQuery$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.GetPathAndQuery$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPathAndQuery GetPathAndQuery (MemorySegment segment) {
        return GetPathAndQuery.ofAddress(GetPathAndQuery$get(segment));
    }
    static final FunctionDescriptor GetQuery$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetQuery$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.GetQuery$FUNC, false
    );
    public interface GetQuery {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetQuery fi) {
            return RuntimeHelper.upcallStub(GetQuery.class, fi, IUriVtbl.GetQuery$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetQuery fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetQuery.class, fi, IUriVtbl.GetQuery$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetQuery ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriVtbl.GetQuery$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetQuery$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetQuery")));
    public static VarHandle GetQuery$VH() {
        return IUriVtbl.GetQuery$VH;
    }
    public static MemoryAddress GetQuery$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetQuery$VH.get(seg);
    }
    public static void GetQuery$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.GetQuery$VH.set(seg, x);
    }
    public static MemoryAddress GetQuery$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetQuery$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetQuery$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.GetQuery$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetQuery GetQuery (MemorySegment segment) {
        return GetQuery.ofAddress(GetQuery$get(segment));
    }
    static final FunctionDescriptor GetRawUri$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetRawUri$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.GetRawUri$FUNC, false
    );
    public interface GetRawUri {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetRawUri fi) {
            return RuntimeHelper.upcallStub(GetRawUri.class, fi, IUriVtbl.GetRawUri$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetRawUri fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetRawUri.class, fi, IUriVtbl.GetRawUri$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetRawUri ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriVtbl.GetRawUri$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetRawUri$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetRawUri")));
    public static VarHandle GetRawUri$VH() {
        return IUriVtbl.GetRawUri$VH;
    }
    public static MemoryAddress GetRawUri$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetRawUri$VH.get(seg);
    }
    public static void GetRawUri$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.GetRawUri$VH.set(seg, x);
    }
    public static MemoryAddress GetRawUri$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetRawUri$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetRawUri$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.GetRawUri$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetRawUri GetRawUri (MemorySegment segment) {
        return GetRawUri.ofAddress(GetRawUri$get(segment));
    }
    static final FunctionDescriptor GetSchemeName$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetSchemeName$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.GetSchemeName$FUNC, false
    );
    public interface GetSchemeName {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetSchemeName fi) {
            return RuntimeHelper.upcallStub(GetSchemeName.class, fi, IUriVtbl.GetSchemeName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetSchemeName fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetSchemeName.class, fi, IUriVtbl.GetSchemeName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetSchemeName ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriVtbl.GetSchemeName$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetSchemeName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetSchemeName")));
    public static VarHandle GetSchemeName$VH() {
        return IUriVtbl.GetSchemeName$VH;
    }
    public static MemoryAddress GetSchemeName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetSchemeName$VH.get(seg);
    }
    public static void GetSchemeName$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.GetSchemeName$VH.set(seg, x);
    }
    public static MemoryAddress GetSchemeName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetSchemeName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSchemeName$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.GetSchemeName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSchemeName GetSchemeName (MemorySegment segment) {
        return GetSchemeName.ofAddress(GetSchemeName$get(segment));
    }
    static final FunctionDescriptor GetUserInfo$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetUserInfo$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.GetUserInfo$FUNC, false
    );
    public interface GetUserInfo {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetUserInfo fi) {
            return RuntimeHelper.upcallStub(GetUserInfo.class, fi, IUriVtbl.GetUserInfo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetUserInfo fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetUserInfo.class, fi, IUriVtbl.GetUserInfo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetUserInfo ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriVtbl.GetUserInfo$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetUserInfo$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetUserInfo")));
    public static VarHandle GetUserInfo$VH() {
        return IUriVtbl.GetUserInfo$VH;
    }
    public static MemoryAddress GetUserInfo$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetUserInfo$VH.get(seg);
    }
    public static void GetUserInfo$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.GetUserInfo$VH.set(seg, x);
    }
    public static MemoryAddress GetUserInfo$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetUserInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetUserInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.GetUserInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetUserInfo GetUserInfo (MemorySegment segment) {
        return GetUserInfo.ofAddress(GetUserInfo$get(segment));
    }
    static final FunctionDescriptor GetUserNameA$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetUserNameA$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.GetUserNameA$FUNC, false
    );
    public interface GetUserNameA {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetUserNameA fi) {
            return RuntimeHelper.upcallStub(GetUserNameA.class, fi, IUriVtbl.GetUserNameA$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetUserNameA fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetUserNameA.class, fi, IUriVtbl.GetUserNameA$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetUserNameA ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriVtbl.GetUserNameA$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetUserNameA$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetUserNameA")));
    public static VarHandle GetUserNameA$VH() {
        return IUriVtbl.GetUserNameA$VH;
    }
    public static MemoryAddress GetUserNameA$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetUserNameA$VH.get(seg);
    }
    public static void GetUserNameA$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.GetUserNameA$VH.set(seg, x);
    }
    public static MemoryAddress GetUserNameA$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetUserNameA$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetUserNameA$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.GetUserNameA$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetUserNameA GetUserNameA (MemorySegment segment) {
        return GetUserNameA.ofAddress(GetUserNameA$get(segment));
    }
    static final FunctionDescriptor GetHostType$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetHostType$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.GetHostType$FUNC, false
    );
    public interface GetHostType {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetHostType fi) {
            return RuntimeHelper.upcallStub(GetHostType.class, fi, IUriVtbl.GetHostType$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetHostType fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetHostType.class, fi, IUriVtbl.GetHostType$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetHostType ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriVtbl.GetHostType$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetHostType$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetHostType")));
    public static VarHandle GetHostType$VH() {
        return IUriVtbl.GetHostType$VH;
    }
    public static MemoryAddress GetHostType$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetHostType$VH.get(seg);
    }
    public static void GetHostType$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.GetHostType$VH.set(seg, x);
    }
    public static MemoryAddress GetHostType$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetHostType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetHostType$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.GetHostType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetHostType GetHostType (MemorySegment segment) {
        return GetHostType.ofAddress(GetHostType$get(segment));
    }
    static final FunctionDescriptor GetPort$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetPort$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.GetPort$FUNC, false
    );
    public interface GetPort {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetPort fi) {
            return RuntimeHelper.upcallStub(GetPort.class, fi, IUriVtbl.GetPort$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetPort fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetPort.class, fi, IUriVtbl.GetPort$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetPort ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriVtbl.GetPort$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetPort$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetPort")));
    public static VarHandle GetPort$VH() {
        return IUriVtbl.GetPort$VH;
    }
    public static MemoryAddress GetPort$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetPort$VH.get(seg);
    }
    public static void GetPort$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.GetPort$VH.set(seg, x);
    }
    public static MemoryAddress GetPort$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetPort$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPort$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.GetPort$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPort GetPort (MemorySegment segment) {
        return GetPort.ofAddress(GetPort$get(segment));
    }
    static final FunctionDescriptor GetScheme$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetScheme$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.GetScheme$FUNC, false
    );
    public interface GetScheme {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetScheme fi) {
            return RuntimeHelper.upcallStub(GetScheme.class, fi, IUriVtbl.GetScheme$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetScheme fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetScheme.class, fi, IUriVtbl.GetScheme$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetScheme ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriVtbl.GetScheme$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetScheme$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetScheme")));
    public static VarHandle GetScheme$VH() {
        return IUriVtbl.GetScheme$VH;
    }
    public static MemoryAddress GetScheme$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetScheme$VH.get(seg);
    }
    public static void GetScheme$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.GetScheme$VH.set(seg, x);
    }
    public static MemoryAddress GetScheme$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetScheme$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetScheme$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.GetScheme$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetScheme GetScheme (MemorySegment segment) {
        return GetScheme.ofAddress(GetScheme$get(segment));
    }
    static final FunctionDescriptor GetZone$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetZone$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.GetZone$FUNC, false
    );
    public interface GetZone {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetZone fi) {
            return RuntimeHelper.upcallStub(GetZone.class, fi, IUriVtbl.GetZone$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetZone fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetZone.class, fi, IUriVtbl.GetZone$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetZone ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriVtbl.GetZone$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetZone$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetZone")));
    public static VarHandle GetZone$VH() {
        return IUriVtbl.GetZone$VH;
    }
    public static MemoryAddress GetZone$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetZone$VH.get(seg);
    }
    public static void GetZone$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.GetZone$VH.set(seg, x);
    }
    public static MemoryAddress GetZone$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetZone$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetZone$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.GetZone$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetZone GetZone (MemorySegment segment) {
        return GetZone.ofAddress(GetZone$get(segment));
    }
    static final FunctionDescriptor GetProperties$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetProperties$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.GetProperties$FUNC, false
    );
    public interface GetProperties {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetProperties fi) {
            return RuntimeHelper.upcallStub(GetProperties.class, fi, IUriVtbl.GetProperties$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetProperties fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetProperties.class, fi, IUriVtbl.GetProperties$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetProperties ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IUriVtbl.GetProperties$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetProperties$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetProperties")));
    public static VarHandle GetProperties$VH() {
        return IUriVtbl.GetProperties$VH;
    }
    public static MemoryAddress GetProperties$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetProperties$VH.get(seg);
    }
    public static void GetProperties$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.GetProperties$VH.set(seg, x);
    }
    public static MemoryAddress GetProperties$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.GetProperties$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetProperties$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.GetProperties$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetProperties GetProperties (MemorySegment segment) {
        return GetProperties.ofAddress(GetProperties$get(segment));
    }
    static final FunctionDescriptor IsEqual$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle IsEqual$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IUriVtbl.IsEqual$FUNC, false
    );
    public interface IsEqual {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(IsEqual fi) {
            return RuntimeHelper.upcallStub(IsEqual.class, fi, IUriVtbl.IsEqual$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(IsEqual fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(IsEqual.class, fi, IUriVtbl.IsEqual$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static IsEqual ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IUriVtbl.IsEqual$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle IsEqual$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("IsEqual")));
    public static VarHandle IsEqual$VH() {
        return IUriVtbl.IsEqual$VH;
    }
    public static MemoryAddress IsEqual$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.IsEqual$VH.get(seg);
    }
    public static void IsEqual$set( MemorySegment seg, MemoryAddress x) {
        IUriVtbl.IsEqual$VH.set(seg, x);
    }
    public static MemoryAddress IsEqual$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IUriVtbl.IsEqual$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IsEqual$set(MemorySegment seg, long index, MemoryAddress x) {
        IUriVtbl.IsEqual$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsEqual IsEqual (MemorySegment segment) {
        return IsEqual.ofAddress(IsEqual$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


