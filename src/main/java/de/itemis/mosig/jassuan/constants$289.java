// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$289 {

    static final FunctionDescriptor BemCreateContractFrom$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle BemCreateContractFrom$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "BemCreateContractFrom",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$289.BemCreateContractFrom$FUNC, false
    );
    static final FunctionDescriptor BemCopyReference$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle BemCopyReference$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "BemCopyReference",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$289.BemCopyReference$FUNC, false
    );
    static final FunctionDescriptor BemFreeReference$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle BemFreeReference$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "BemFreeReference",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$289.BemFreeReference$FUNC, false
    );
    static final FunctionDescriptor BemFreeContract$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle BemFreeContract$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "BemFreeContract",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$289.BemFreeContract$FUNC, false
    );
    static final FunctionDescriptor DebugBreak$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle DebugBreak$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "DebugBreak",
        "()V",
        constants$289.DebugBreak$FUNC, false
    );
    static final FunctionDescriptor IsDebuggerPresent$FUNC = FunctionDescriptor.of(C_INT);
    static final MethodHandle IsDebuggerPresent$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "IsDebuggerPresent",
        "()I",
        constants$289.IsDebuggerPresent$FUNC, false
    );
}


