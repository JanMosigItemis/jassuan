// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _XSAVE_AREA {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            C_SHORT.withName("ControlWord"),
            C_SHORT.withName("StatusWord"),
            C_CHAR.withName("TagWord"),
            C_CHAR.withName("Reserved1"),
            C_SHORT.withName("ErrorOpcode"),
            C_LONG.withName("ErrorOffset"),
            C_SHORT.withName("ErrorSelector"),
            C_SHORT.withName("Reserved2"),
            C_LONG.withName("DataOffset"),
            C_SHORT.withName("DataSelector"),
            C_SHORT.withName("Reserved3"),
            C_LONG.withName("MxCsr"),
            C_LONG.withName("MxCsr_Mask"),
            MemoryLayout.sequenceLayout(8, MemoryLayout.structLayout(
                C_LONG_LONG.withName("Low"),
                C_LONG_LONG.withName("High")
            ).withName("_M128A")).withName("FloatRegisters"),
            MemoryLayout.sequenceLayout(16, MemoryLayout.structLayout(
                C_LONG_LONG.withName("Low"),
                C_LONG_LONG.withName("High")
            ).withName("_M128A")).withName("XmmRegisters"),
            MemoryLayout.sequenceLayout(96, C_CHAR).withName("Reserved4")
        ).withName("LegacyState"),
        MemoryLayout.structLayout(
            C_LONG_LONG.withName("Mask"),
            MemoryLayout.sequenceLayout(7, C_LONG_LONG).withName("Reserved")
        ).withName("Header")
    ).withName("_XSAVE_AREA");
    public static MemoryLayout $LAYOUT() {
        return _XSAVE_AREA.$struct$LAYOUT;
    }
    public static MemorySegment LegacyState$slice(MemorySegment seg) {
        return seg.asSlice(0, 512);
    }
    public static MemorySegment Header$slice(MemorySegment seg) {
        return seg.asSlice(512, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


