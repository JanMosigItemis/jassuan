// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _STORAGE_DEPENDENCY_INFO {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("Version"),
        C_LONG.withName("NumberEntries"),
        MemoryLayout.unionLayout(
            MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
                C_INT.withName("DependencyTypeFlags"),
                C_LONG.withName("ProviderSpecificFlags"),
                MemoryLayout.structLayout(
                    C_LONG.withName("DeviceId"),
                    MemoryLayout.structLayout(
                        C_LONG.withName("Data1"),
                        C_SHORT.withName("Data2"),
                        C_SHORT.withName("Data3"),
                        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
                    ).withName("VendorId")
                ).withName("VirtualStorageType")
            ).withName("_STORAGE_DEPENDENCY_INFO_TYPE_1")).withName("Version1Entries"),
            MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
                C_INT.withName("DependencyTypeFlags"),
                C_LONG.withName("ProviderSpecificFlags"),
                MemoryLayout.structLayout(
                    C_LONG.withName("DeviceId"),
                    MemoryLayout.structLayout(
                        C_LONG.withName("Data1"),
                        C_SHORT.withName("Data2"),
                        C_SHORT.withName("Data3"),
                        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
                    ).withName("VendorId")
                ).withName("VirtualStorageType"),
                C_LONG.withName("AncestorLevel"),
                C_POINTER.withName("DependencyDeviceName"),
                C_POINTER.withName("HostVolumeName"),
                C_POINTER.withName("DependentVolumeName"),
                C_POINTER.withName("DependentVolumeRelativePath")
            ).withName("_STORAGE_DEPENDENCY_INFO_TYPE_2")).withName("Version2Entries")
        ).withName("$anon$0")
    ).withName("_STORAGE_DEPENDENCY_INFO");
    public static MemoryLayout $LAYOUT() {
        return _STORAGE_DEPENDENCY_INFO.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _STORAGE_DEPENDENCY_INFO.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)_STORAGE_DEPENDENCY_INFO.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        _STORAGE_DEPENDENCY_INFO.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_STORAGE_DEPENDENCY_INFO.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _STORAGE_DEPENDENCY_INFO.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumberEntries$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberEntries"));
    public static VarHandle NumberEntries$VH() {
        return _STORAGE_DEPENDENCY_INFO.NumberEntries$VH;
    }
    public static int NumberEntries$get(MemorySegment seg) {
        return (int)_STORAGE_DEPENDENCY_INFO.NumberEntries$VH.get(seg);
    }
    public static void NumberEntries$set( MemorySegment seg, int x) {
        _STORAGE_DEPENDENCY_INFO.NumberEntries$VH.set(seg, x);
    }
    public static int NumberEntries$get(MemorySegment seg, long index) {
        return (int)_STORAGE_DEPENDENCY_INFO.NumberEntries$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberEntries$set(MemorySegment seg, long index, int x) {
        _STORAGE_DEPENDENCY_INFO.NumberEntries$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Version1Entries$slice(MemorySegment seg) {
        return seg.asSlice(8, 28);
    }
    public static MemorySegment Version2Entries$slice(MemorySegment seg) {
        return seg.asSlice(8, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


