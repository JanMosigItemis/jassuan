// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$732 {

    static final FunctionDescriptor MultinetGetConnectionPerformanceW$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle MultinetGetConnectionPerformanceW$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "MultinetGetConnectionPerformanceW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$732.MultinetGetConnectionPerformanceW$FUNC, false
    );
    static final MemoryLayout VIRTUAL_STORAGE_TYPE_VENDOR_UNKNOWN$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment VIRTUAL_STORAGE_TYPE_VENDOR_UNKNOWN$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "VIRTUAL_STORAGE_TYPE_VENDOR_UNKNOWN", constants$732.VIRTUAL_STORAGE_TYPE_VENDOR_UNKNOWN$LAYOUT);
    static final MemoryLayout VIRTUAL_STORAGE_TYPE_VENDOR_MICROSOFT$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment VIRTUAL_STORAGE_TYPE_VENDOR_MICROSOFT$SEGMENT = RuntimeHelper.lookupGlobalVariable(assuan_h.LIBRARIES, "VIRTUAL_STORAGE_TYPE_VENDOR_MICROSOFT", constants$732.VIRTUAL_STORAGE_TYPE_VENDOR_MICROSOFT$LAYOUT);
    static final FunctionDescriptor AttachVirtualDisk$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle AttachVirtualDisk$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "AttachVirtualDisk",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$732.AttachVirtualDisk$FUNC, false
    );
    static final FunctionDescriptor CompactVirtualDisk$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle CompactVirtualDisk$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CompactVirtualDisk",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$732.CompactVirtualDisk$FUNC, false
    );
    static final FunctionDescriptor CreateVirtualDisk$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle CreateVirtualDisk$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CreateVirtualDisk",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$732.CreateVirtualDisk$FUNC, false
    );
}


