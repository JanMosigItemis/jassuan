// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class tagOLEVERB {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("lVerb"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("lpszVerbName"),
        C_LONG.withName("fuFlags"),
        C_LONG.withName("grfAttribs")
    ).withName("tagOLEVERB");
    public static MemoryLayout $LAYOUT() {
        return tagOLEVERB.$struct$LAYOUT;
    }
    static final VarHandle lVerb$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("lVerb"));
    public static VarHandle lVerb$VH() {
        return tagOLEVERB.lVerb$VH;
    }
    public static int lVerb$get(MemorySegment seg) {
        return (int)tagOLEVERB.lVerb$VH.get(seg);
    }
    public static void lVerb$set( MemorySegment seg, int x) {
        tagOLEVERB.lVerb$VH.set(seg, x);
    }
    public static int lVerb$get(MemorySegment seg, long index) {
        return (int)tagOLEVERB.lVerb$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lVerb$set(MemorySegment seg, long index, int x) {
        tagOLEVERB.lVerb$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpszVerbName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpszVerbName")));
    public static VarHandle lpszVerbName$VH() {
        return tagOLEVERB.lpszVerbName$VH;
    }
    public static MemoryAddress lpszVerbName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagOLEVERB.lpszVerbName$VH.get(seg);
    }
    public static void lpszVerbName$set( MemorySegment seg, MemoryAddress x) {
        tagOLEVERB.lpszVerbName$VH.set(seg, x);
    }
    public static MemoryAddress lpszVerbName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagOLEVERB.lpszVerbName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpszVerbName$set(MemorySegment seg, long index, MemoryAddress x) {
        tagOLEVERB.lpszVerbName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fuFlags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("fuFlags"));
    public static VarHandle fuFlags$VH() {
        return tagOLEVERB.fuFlags$VH;
    }
    public static int fuFlags$get(MemorySegment seg) {
        return (int)tagOLEVERB.fuFlags$VH.get(seg);
    }
    public static void fuFlags$set( MemorySegment seg, int x) {
        tagOLEVERB.fuFlags$VH.set(seg, x);
    }
    public static int fuFlags$get(MemorySegment seg, long index) {
        return (int)tagOLEVERB.fuFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fuFlags$set(MemorySegment seg, long index, int x) {
        tagOLEVERB.fuFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle grfAttribs$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("grfAttribs"));
    public static VarHandle grfAttribs$VH() {
        return tagOLEVERB.grfAttribs$VH;
    }
    public static int grfAttribs$get(MemorySegment seg) {
        return (int)tagOLEVERB.grfAttribs$VH.get(seg);
    }
    public static void grfAttribs$set( MemorySegment seg, int x) {
        tagOLEVERB.grfAttribs$VH.set(seg, x);
    }
    public static int grfAttribs$get(MemorySegment seg, long index) {
        return (int)tagOLEVERB.grfAttribs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void grfAttribs$set(MemorySegment seg, long index, int x) {
        tagOLEVERB.grfAttribs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


