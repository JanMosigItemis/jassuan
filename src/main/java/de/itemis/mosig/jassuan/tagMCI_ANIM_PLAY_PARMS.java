// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class tagMCI_ANIM_PLAY_PARMS {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG_LONG.withName("dwCallback"),
        C_LONG.withName("dwFrom"),
        C_LONG.withName("dwTo"),
        C_LONG.withName("dwSpeed")
    ).withName("tagMCI_ANIM_PLAY_PARMS");
    public static MemoryLayout $LAYOUT() {
        return tagMCI_ANIM_PLAY_PARMS.$struct$LAYOUT;
    }
    static final VarHandle dwCallback$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwCallback"));
    public static VarHandle dwCallback$VH() {
        return tagMCI_ANIM_PLAY_PARMS.dwCallback$VH;
    }
    public static long dwCallback$get(MemorySegment seg) {
        return (long)tagMCI_ANIM_PLAY_PARMS.dwCallback$VH.get(seg);
    }
    public static void dwCallback$set( MemorySegment seg, long x) {
        tagMCI_ANIM_PLAY_PARMS.dwCallback$VH.set(seg, x);
    }
    public static long dwCallback$get(MemorySegment seg, long index) {
        return (long)tagMCI_ANIM_PLAY_PARMS.dwCallback$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwCallback$set(MemorySegment seg, long index, long x) {
        tagMCI_ANIM_PLAY_PARMS.dwCallback$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwFrom$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFrom"));
    public static VarHandle dwFrom$VH() {
        return tagMCI_ANIM_PLAY_PARMS.dwFrom$VH;
    }
    public static int dwFrom$get(MemorySegment seg) {
        return (int)tagMCI_ANIM_PLAY_PARMS.dwFrom$VH.get(seg);
    }
    public static void dwFrom$set( MemorySegment seg, int x) {
        tagMCI_ANIM_PLAY_PARMS.dwFrom$VH.set(seg, x);
    }
    public static int dwFrom$get(MemorySegment seg, long index) {
        return (int)tagMCI_ANIM_PLAY_PARMS.dwFrom$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFrom$set(MemorySegment seg, long index, int x) {
        tagMCI_ANIM_PLAY_PARMS.dwFrom$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwTo$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwTo"));
    public static VarHandle dwTo$VH() {
        return tagMCI_ANIM_PLAY_PARMS.dwTo$VH;
    }
    public static int dwTo$get(MemorySegment seg) {
        return (int)tagMCI_ANIM_PLAY_PARMS.dwTo$VH.get(seg);
    }
    public static void dwTo$set( MemorySegment seg, int x) {
        tagMCI_ANIM_PLAY_PARMS.dwTo$VH.set(seg, x);
    }
    public static int dwTo$get(MemorySegment seg, long index) {
        return (int)tagMCI_ANIM_PLAY_PARMS.dwTo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwTo$set(MemorySegment seg, long index, int x) {
        tagMCI_ANIM_PLAY_PARMS.dwTo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwSpeed$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSpeed"));
    public static VarHandle dwSpeed$VH() {
        return tagMCI_ANIM_PLAY_PARMS.dwSpeed$VH;
    }
    public static int dwSpeed$get(MemorySegment seg) {
        return (int)tagMCI_ANIM_PLAY_PARMS.dwSpeed$VH.get(seg);
    }
    public static void dwSpeed$set( MemorySegment seg, int x) {
        tagMCI_ANIM_PLAY_PARMS.dwSpeed$VH.set(seg, x);
    }
    public static int dwSpeed$get(MemorySegment seg, long index) {
        return (int)tagMCI_ANIM_PLAY_PARMS.dwSpeed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwSpeed$set(MemorySegment seg, long index, int x) {
        tagMCI_ANIM_PLAY_PARMS.dwSpeed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


