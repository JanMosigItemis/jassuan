// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class waveformat_tag {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_SHORT.withName("wFormatTag"),
        C_SHORT.withName("nChannels"),
        C_LONG.withName("nSamplesPerSec"),
        C_LONG.withName("nAvgBytesPerSec"),
        C_SHORT.withName("nBlockAlign")
    ).withName("waveformat_tag");
    public static MemoryLayout $LAYOUT() {
        return waveformat_tag.$struct$LAYOUT;
    }
    static final VarHandle wFormatTag$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("wFormatTag"));
    public static VarHandle wFormatTag$VH() {
        return waveformat_tag.wFormatTag$VH;
    }
    public static short wFormatTag$get(MemorySegment seg) {
        return (short)waveformat_tag.wFormatTag$VH.get(seg);
    }
    public static void wFormatTag$set( MemorySegment seg, short x) {
        waveformat_tag.wFormatTag$VH.set(seg, x);
    }
    public static short wFormatTag$get(MemorySegment seg, long index) {
        return (short)waveformat_tag.wFormatTag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wFormatTag$set(MemorySegment seg, long index, short x) {
        waveformat_tag.wFormatTag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nChannels$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("nChannels"));
    public static VarHandle nChannels$VH() {
        return waveformat_tag.nChannels$VH;
    }
    public static short nChannels$get(MemorySegment seg) {
        return (short)waveformat_tag.nChannels$VH.get(seg);
    }
    public static void nChannels$set( MemorySegment seg, short x) {
        waveformat_tag.nChannels$VH.set(seg, x);
    }
    public static short nChannels$get(MemorySegment seg, long index) {
        return (short)waveformat_tag.nChannels$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nChannels$set(MemorySegment seg, long index, short x) {
        waveformat_tag.nChannels$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nSamplesPerSec$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("nSamplesPerSec"));
    public static VarHandle nSamplesPerSec$VH() {
        return waveformat_tag.nSamplesPerSec$VH;
    }
    public static int nSamplesPerSec$get(MemorySegment seg) {
        return (int)waveformat_tag.nSamplesPerSec$VH.get(seg);
    }
    public static void nSamplesPerSec$set( MemorySegment seg, int x) {
        waveformat_tag.nSamplesPerSec$VH.set(seg, x);
    }
    public static int nSamplesPerSec$get(MemorySegment seg, long index) {
        return (int)waveformat_tag.nSamplesPerSec$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nSamplesPerSec$set(MemorySegment seg, long index, int x) {
        waveformat_tag.nSamplesPerSec$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nAvgBytesPerSec$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("nAvgBytesPerSec"));
    public static VarHandle nAvgBytesPerSec$VH() {
        return waveformat_tag.nAvgBytesPerSec$VH;
    }
    public static int nAvgBytesPerSec$get(MemorySegment seg) {
        return (int)waveformat_tag.nAvgBytesPerSec$VH.get(seg);
    }
    public static void nAvgBytesPerSec$set( MemorySegment seg, int x) {
        waveformat_tag.nAvgBytesPerSec$VH.set(seg, x);
    }
    public static int nAvgBytesPerSec$get(MemorySegment seg, long index) {
        return (int)waveformat_tag.nAvgBytesPerSec$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nAvgBytesPerSec$set(MemorySegment seg, long index, int x) {
        waveformat_tag.nAvgBytesPerSec$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nBlockAlign$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("nBlockAlign"));
    public static VarHandle nBlockAlign$VH() {
        return waveformat_tag.nBlockAlign$VH;
    }
    public static short nBlockAlign$get(MemorySegment seg) {
        return (short)waveformat_tag.nBlockAlign$VH.get(seg);
    }
    public static void nBlockAlign$set( MemorySegment seg, short x) {
        waveformat_tag.nBlockAlign$VH.set(seg, x);
    }
    public static short nBlockAlign$get(MemorySegment seg, long index) {
        return (short)waveformat_tag.nBlockAlign$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nBlockAlign$set(MemorySegment seg, long index, short x) {
        waveformat_tag.nBlockAlign$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


