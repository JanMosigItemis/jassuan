// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _DISK_DETECTION_INFO {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("SizeOfDetectInfo"),
        C_INT.withName("DetectionType"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    C_SHORT.withName("DriveSelect"),
                    MemoryLayout.paddingLayout(16),
                    C_LONG.withName("MaxCylinders"),
                    C_SHORT.withName("SectorsPerTrack"),
                    C_SHORT.withName("MaxHeads"),
                    C_SHORT.withName("NumberDrives"),
                    MemoryLayout.paddingLayout(16)
                ).withName("Int13"),
                MemoryLayout.structLayout(
                    C_SHORT.withName("ExBufferSize"),
                    C_SHORT.withName("ExFlags"),
                    C_LONG.withName("ExCylinders"),
                    C_LONG.withName("ExHeads"),
                    C_LONG.withName("ExSectorsPerTrack"),
                    C_LONG_LONG.withName("ExSectorsPerDrive"),
                    C_SHORT.withName("ExSectorSize"),
                    C_SHORT.withName("ExReserved"),
                    MemoryLayout.paddingLayout(32)
                ).withName("ExInt13")
            ).withName("$anon$0")
        ).withName("$anon$0")
    ).withName("_DISK_DETECTION_INFO");
    public static MemoryLayout $LAYOUT() {
        return _DISK_DETECTION_INFO.$struct$LAYOUT;
    }
    static final VarHandle SizeOfDetectInfo$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfDetectInfo"));
    public static VarHandle SizeOfDetectInfo$VH() {
        return _DISK_DETECTION_INFO.SizeOfDetectInfo$VH;
    }
    public static int SizeOfDetectInfo$get(MemorySegment seg) {
        return (int)_DISK_DETECTION_INFO.SizeOfDetectInfo$VH.get(seg);
    }
    public static void SizeOfDetectInfo$set( MemorySegment seg, int x) {
        _DISK_DETECTION_INFO.SizeOfDetectInfo$VH.set(seg, x);
    }
    public static int SizeOfDetectInfo$get(MemorySegment seg, long index) {
        return (int)_DISK_DETECTION_INFO.SizeOfDetectInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SizeOfDetectInfo$set(MemorySegment seg, long index, int x) {
        _DISK_DETECTION_INFO.SizeOfDetectInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DetectionType$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("DetectionType"));
    public static VarHandle DetectionType$VH() {
        return _DISK_DETECTION_INFO.DetectionType$VH;
    }
    public static int DetectionType$get(MemorySegment seg) {
        return (int)_DISK_DETECTION_INFO.DetectionType$VH.get(seg);
    }
    public static void DetectionType$set( MemorySegment seg, int x) {
        _DISK_DETECTION_INFO.DetectionType$VH.set(seg, x);
    }
    public static int DetectionType$get(MemorySegment seg, long index) {
        return (int)_DISK_DETECTION_INFO.DetectionType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DetectionType$set(MemorySegment seg, long index, int x) {
        _DISK_DETECTION_INFO.DetectionType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Int13$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static MemorySegment ExInt13$slice(MemorySegment seg) {
        return seg.asSlice(24, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


