// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _EVENTSFORLOGFILE {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("ulSize"),
        MemoryLayout.sequenceLayout(256, C_SHORT).withName("szLogicalLogFile"),
        C_LONG.withName("ulNumRecords"),
        MemoryLayout.sequenceLayout(MemoryLayout.structLayout(
            C_LONG.withName("Length"),
            C_LONG.withName("Reserved"),
            C_LONG.withName("RecordNumber"),
            C_LONG.withName("TimeGenerated"),
            C_LONG.withName("TimeWritten"),
            C_LONG.withName("EventID"),
            C_SHORT.withName("EventType"),
            C_SHORT.withName("NumStrings"),
            C_SHORT.withName("EventCategory"),
            C_SHORT.withName("ReservedFlags"),
            C_LONG.withName("ClosingRecordNumber"),
            C_LONG.withName("StringOffset"),
            C_LONG.withName("UserSidLength"),
            C_LONG.withName("UserSidOffset"),
            C_LONG.withName("DataLength"),
            C_LONG.withName("DataOffset")
        ).withName("_EVENTLOGRECORD")).withName("pEventLogRecords")
    ).withName("_EVENTSFORLOGFILE");
    public static MemoryLayout $LAYOUT() {
        return _EVENTSFORLOGFILE.$struct$LAYOUT;
    }
    static final VarHandle ulSize$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulSize"));
    public static VarHandle ulSize$VH() {
        return _EVENTSFORLOGFILE.ulSize$VH;
    }
    public static int ulSize$get(MemorySegment seg) {
        return (int)_EVENTSFORLOGFILE.ulSize$VH.get(seg);
    }
    public static void ulSize$set( MemorySegment seg, int x) {
        _EVENTSFORLOGFILE.ulSize$VH.set(seg, x);
    }
    public static int ulSize$get(MemorySegment seg, long index) {
        return (int)_EVENTSFORLOGFILE.ulSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ulSize$set(MemorySegment seg, long index, int x) {
        _EVENTSFORLOGFILE.ulSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment szLogicalLogFile$slice(MemorySegment seg) {
        return seg.asSlice(4, 512);
    }
    static final VarHandle ulNumRecords$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulNumRecords"));
    public static VarHandle ulNumRecords$VH() {
        return _EVENTSFORLOGFILE.ulNumRecords$VH;
    }
    public static int ulNumRecords$get(MemorySegment seg) {
        return (int)_EVENTSFORLOGFILE.ulNumRecords$VH.get(seg);
    }
    public static void ulNumRecords$set( MemorySegment seg, int x) {
        _EVENTSFORLOGFILE.ulNumRecords$VH.set(seg, x);
    }
    public static int ulNumRecords$get(MemorySegment seg, long index) {
        return (int)_EVENTSFORLOGFILE.ulNumRecords$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ulNumRecords$set(MemorySegment seg, long index, int x) {
        _EVENTSFORLOGFILE.ulNumRecords$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


