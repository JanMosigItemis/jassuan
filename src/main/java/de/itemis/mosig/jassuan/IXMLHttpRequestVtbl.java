// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IXMLHttpRequestVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetTypeInfoCount"),
        C_POINTER.withName("GetTypeInfo"),
        C_POINTER.withName("GetIDsOfNames"),
        C_POINTER.withName("Invoke"),
        C_POINTER.withName("open"),
        C_POINTER.withName("setRequestHeader"),
        C_POINTER.withName("getResponseHeader"),
        C_POINTER.withName("getAllResponseHeaders"),
        C_POINTER.withName("send"),
        C_POINTER.withName("abort"),
        C_POINTER.withName("get_status"),
        C_POINTER.withName("get_statusText"),
        C_POINTER.withName("get_responseXML"),
        C_POINTER.withName("get_responseText"),
        C_POINTER.withName("get_responseBody"),
        C_POINTER.withName("get_responseStream"),
        C_POINTER.withName("get_readyState"),
        C_POINTER.withName("put_onreadystatechange")
    ).withName("IXMLHttpRequestVtbl");
    public static MemoryLayout $LAYOUT() {
        return IXMLHttpRequestVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLHttpRequestVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IXMLHttpRequestVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IXMLHttpRequestVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IXMLHttpRequestVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IXMLHttpRequestVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IXMLHttpRequestVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLHttpRequestVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLHttpRequestVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IXMLHttpRequestVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IXMLHttpRequestVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IXMLHttpRequestVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IXMLHttpRequestVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IXMLHttpRequestVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLHttpRequestVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLHttpRequestVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IXMLHttpRequestVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IXMLHttpRequestVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IXMLHttpRequestVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IXMLHttpRequestVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IXMLHttpRequestVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLHttpRequestVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor GetTypeInfoCount$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetTypeInfoCount$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLHttpRequestVtbl.GetTypeInfoCount$FUNC, false
    );
    public interface GetTypeInfoCount {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetTypeInfoCount fi) {
            return RuntimeHelper.upcallStub(GetTypeInfoCount.class, fi, IXMLHttpRequestVtbl.GetTypeInfoCount$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetTypeInfoCount fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetTypeInfoCount.class, fi, IXMLHttpRequestVtbl.GetTypeInfoCount$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetTypeInfoCount ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLHttpRequestVtbl.GetTypeInfoCount$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoCount$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfoCount")));
    public static VarHandle GetTypeInfoCount$VH() {
        return IXMLHttpRequestVtbl.GetTypeInfoCount$VH;
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.GetTypeInfoCount$VH.get(seg);
    }
    public static void GetTypeInfoCount$set( MemorySegment seg, MemoryAddress x) {
        IXMLHttpRequestVtbl.GetTypeInfoCount$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.GetTypeInfoCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLHttpRequestVtbl.GetTypeInfoCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount (MemorySegment segment) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment));
    }
    static final FunctionDescriptor GetTypeInfo$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle GetTypeInfo$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        IXMLHttpRequestVtbl.GetTypeInfo$FUNC, false
    );
    public interface GetTypeInfo {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(GetTypeInfo fi) {
            return RuntimeHelper.upcallStub(GetTypeInfo.class, fi, IXMLHttpRequestVtbl.GetTypeInfo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetTypeInfo fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetTypeInfo.class, fi, IXMLHttpRequestVtbl.GetTypeInfo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetTypeInfo ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)IXMLHttpRequestVtbl.GetTypeInfo$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfo$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfo")));
    public static VarHandle GetTypeInfo$VH() {
        return IXMLHttpRequestVtbl.GetTypeInfo$VH;
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.GetTypeInfo$VH.get(seg);
    }
    public static void GetTypeInfo$set( MemorySegment seg, MemoryAddress x) {
        IXMLHttpRequestVtbl.GetTypeInfo$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.GetTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLHttpRequestVtbl.GetTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo (MemorySegment segment) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment));
    }
    static final FunctionDescriptor GetIDsOfNames$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle GetIDsOfNames$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        IXMLHttpRequestVtbl.GetIDsOfNames$FUNC, false
    );
    public interface GetIDsOfNames {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, int x4, jdk.incubator.foreign.MemoryAddress x5);
        static MemoryAddress allocate(GetIDsOfNames fi) {
            return RuntimeHelper.upcallStub(GetIDsOfNames.class, fi, IXMLHttpRequestVtbl.GetIDsOfNames$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetIDsOfNames fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetIDsOfNames.class, fi, IXMLHttpRequestVtbl.GetIDsOfNames$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetIDsOfNames ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, int x4, jdk.incubator.foreign.MemoryAddress x5) -> {
                try {
                    return (int)IXMLHttpRequestVtbl.GetIDsOfNames$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetIDsOfNames$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetIDsOfNames")));
    public static VarHandle GetIDsOfNames$VH() {
        return IXMLHttpRequestVtbl.GetIDsOfNames$VH;
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.GetIDsOfNames$VH.get(seg);
    }
    public static void GetIDsOfNames$set( MemorySegment seg, MemoryAddress x) {
        IXMLHttpRequestVtbl.GetIDsOfNames$VH.set(seg, x);
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.GetIDsOfNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLHttpRequestVtbl.GetIDsOfNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames (MemorySegment segment) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment));
    }
    static final FunctionDescriptor Invoke$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_SHORT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle Invoke$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ISLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLHttpRequestVtbl.Invoke$FUNC, false
    );
    public interface Invoke {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3, short x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8);
        static MemoryAddress allocate(Invoke fi) {
            return RuntimeHelper.upcallStub(Invoke.class, fi, IXMLHttpRequestVtbl.Invoke$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ISLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Invoke fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Invoke.class, fi, IXMLHttpRequestVtbl.Invoke$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ISLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Invoke ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3, short x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8) -> {
                try {
                    return (int)IXMLHttpRequestVtbl.Invoke$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6, x7, x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Invoke$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Invoke")));
    public static VarHandle Invoke$VH() {
        return IXMLHttpRequestVtbl.Invoke$VH;
    }
    public static MemoryAddress Invoke$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.Invoke$VH.get(seg);
    }
    public static void Invoke$set( MemorySegment seg, MemoryAddress x) {
        IXMLHttpRequestVtbl.Invoke$VH.set(seg, x);
    }
    public static MemoryAddress Invoke$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.Invoke$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLHttpRequestVtbl.Invoke$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke (MemorySegment segment) {
        return Invoke.ofAddress(Invoke$get(segment));
    }
    static final FunctionDescriptor open$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    C_SHORT.withName("vt"),
                    C_SHORT.withName("wReserved1"),
                    C_SHORT.withName("wReserved2"),
                    C_SHORT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        C_LONG_LONG.withName("llVal"),
                        C_LONG.withName("lVal"),
                        C_CHAR.withName("bVal"),
                        C_SHORT.withName("iVal"),
                        C_FLOAT.withName("fltVal"),
                        C_DOUBLE.withName("dblVal"),
                        C_SHORT.withName("boolVal"),
                        C_LONG.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                C_LONG.withName("Lo"),
                                C_LONG.withName("Hi")
                            ).withName("$anon$0"),
                            C_LONG_LONG.withName("int64")
                        ).withName("cyVal"),
                        C_DOUBLE.withName("date"),
                        C_POINTER.withName("bstrVal"),
                        C_POINTER.withName("punkVal"),
                        C_POINTER.withName("pdispVal"),
                        C_POINTER.withName("parray"),
                        C_POINTER.withName("pbVal"),
                        C_POINTER.withName("piVal"),
                        C_POINTER.withName("plVal"),
                        C_POINTER.withName("pllVal"),
                        C_POINTER.withName("pfltVal"),
                        C_POINTER.withName("pdblVal"),
                        C_POINTER.withName("pboolVal"),
                        C_POINTER.withName("pscode"),
                        C_POINTER.withName("pcyVal"),
                        C_POINTER.withName("pdate"),
                        C_POINTER.withName("pbstrVal"),
                        C_POINTER.withName("ppunkVal"),
                        C_POINTER.withName("ppdispVal"),
                        C_POINTER.withName("pparray"),
                        C_POINTER.withName("pvarVal"),
                        C_POINTER.withName("byref"),
                        C_CHAR.withName("cVal"),
                        C_SHORT.withName("uiVal"),
                        C_LONG.withName("ulVal"),
                        C_LONG_LONG.withName("ullVal"),
                        C_INT.withName("intVal"),
                        C_INT.withName("uintVal"),
                        C_POINTER.withName("pdecVal"),
                        C_POINTER.withName("pcVal"),
                        C_POINTER.withName("puiVal"),
                        C_POINTER.withName("pulVal"),
                        C_POINTER.withName("pullVal"),
                        C_POINTER.withName("pintVal"),
                        C_POINTER.withName("puintVal"),
                        MemoryLayout.structLayout(
                            C_POINTER.withName("pvRecord"),
                            C_POINTER.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    C_SHORT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_CHAR.withName("scale"),
                            C_CHAR.withName("sign")
                        ).withName("$anon$0"),
                        C_SHORT.withName("signscale")
                    ).withName("$anon$0"),
                    C_LONG.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_LONG.withName("Lo32"),
                            C_LONG.withName("Mid32")
                        ).withName("$anon$0"),
                        C_LONG_LONG.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT"),
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    C_SHORT.withName("vt"),
                    C_SHORT.withName("wReserved1"),
                    C_SHORT.withName("wReserved2"),
                    C_SHORT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        C_LONG_LONG.withName("llVal"),
                        C_LONG.withName("lVal"),
                        C_CHAR.withName("bVal"),
                        C_SHORT.withName("iVal"),
                        C_FLOAT.withName("fltVal"),
                        C_DOUBLE.withName("dblVal"),
                        C_SHORT.withName("boolVal"),
                        C_LONG.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                C_LONG.withName("Lo"),
                                C_LONG.withName("Hi")
                            ).withName("$anon$0"),
                            C_LONG_LONG.withName("int64")
                        ).withName("cyVal"),
                        C_DOUBLE.withName("date"),
                        C_POINTER.withName("bstrVal"),
                        C_POINTER.withName("punkVal"),
                        C_POINTER.withName("pdispVal"),
                        C_POINTER.withName("parray"),
                        C_POINTER.withName("pbVal"),
                        C_POINTER.withName("piVal"),
                        C_POINTER.withName("plVal"),
                        C_POINTER.withName("pllVal"),
                        C_POINTER.withName("pfltVal"),
                        C_POINTER.withName("pdblVal"),
                        C_POINTER.withName("pboolVal"),
                        C_POINTER.withName("pscode"),
                        C_POINTER.withName("pcyVal"),
                        C_POINTER.withName("pdate"),
                        C_POINTER.withName("pbstrVal"),
                        C_POINTER.withName("ppunkVal"),
                        C_POINTER.withName("ppdispVal"),
                        C_POINTER.withName("pparray"),
                        C_POINTER.withName("pvarVal"),
                        C_POINTER.withName("byref"),
                        C_CHAR.withName("cVal"),
                        C_SHORT.withName("uiVal"),
                        C_LONG.withName("ulVal"),
                        C_LONG_LONG.withName("ullVal"),
                        C_INT.withName("intVal"),
                        C_INT.withName("uintVal"),
                        C_POINTER.withName("pdecVal"),
                        C_POINTER.withName("pcVal"),
                        C_POINTER.withName("puiVal"),
                        C_POINTER.withName("pulVal"),
                        C_POINTER.withName("pullVal"),
                        C_POINTER.withName("pintVal"),
                        C_POINTER.withName("puintVal"),
                        MemoryLayout.structLayout(
                            C_POINTER.withName("pvRecord"),
                            C_POINTER.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    C_SHORT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_CHAR.withName("scale"),
                            C_CHAR.withName("sign")
                        ).withName("$anon$0"),
                        C_SHORT.withName("signscale")
                    ).withName("$anon$0"),
                    C_LONG.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_LONG.withName("Lo32"),
                            C_LONG.withName("Mid32")
                        ).withName("$anon$0"),
                        C_LONG_LONG.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT"),
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    C_SHORT.withName("vt"),
                    C_SHORT.withName("wReserved1"),
                    C_SHORT.withName("wReserved2"),
                    C_SHORT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        C_LONG_LONG.withName("llVal"),
                        C_LONG.withName("lVal"),
                        C_CHAR.withName("bVal"),
                        C_SHORT.withName("iVal"),
                        C_FLOAT.withName("fltVal"),
                        C_DOUBLE.withName("dblVal"),
                        C_SHORT.withName("boolVal"),
                        C_LONG.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                C_LONG.withName("Lo"),
                                C_LONG.withName("Hi")
                            ).withName("$anon$0"),
                            C_LONG_LONG.withName("int64")
                        ).withName("cyVal"),
                        C_DOUBLE.withName("date"),
                        C_POINTER.withName("bstrVal"),
                        C_POINTER.withName("punkVal"),
                        C_POINTER.withName("pdispVal"),
                        C_POINTER.withName("parray"),
                        C_POINTER.withName("pbVal"),
                        C_POINTER.withName("piVal"),
                        C_POINTER.withName("plVal"),
                        C_POINTER.withName("pllVal"),
                        C_POINTER.withName("pfltVal"),
                        C_POINTER.withName("pdblVal"),
                        C_POINTER.withName("pboolVal"),
                        C_POINTER.withName("pscode"),
                        C_POINTER.withName("pcyVal"),
                        C_POINTER.withName("pdate"),
                        C_POINTER.withName("pbstrVal"),
                        C_POINTER.withName("ppunkVal"),
                        C_POINTER.withName("ppdispVal"),
                        C_POINTER.withName("pparray"),
                        C_POINTER.withName("pvarVal"),
                        C_POINTER.withName("byref"),
                        C_CHAR.withName("cVal"),
                        C_SHORT.withName("uiVal"),
                        C_LONG.withName("ulVal"),
                        C_LONG_LONG.withName("ullVal"),
                        C_INT.withName("intVal"),
                        C_INT.withName("uintVal"),
                        C_POINTER.withName("pdecVal"),
                        C_POINTER.withName("pcVal"),
                        C_POINTER.withName("puiVal"),
                        C_POINTER.withName("pulVal"),
                        C_POINTER.withName("pullVal"),
                        C_POINTER.withName("pintVal"),
                        C_POINTER.withName("puintVal"),
                        MemoryLayout.structLayout(
                            C_POINTER.withName("pvRecord"),
                            C_POINTER.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    C_SHORT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_CHAR.withName("scale"),
                            C_CHAR.withName("sign")
                        ).withName("$anon$0"),
                        C_SHORT.withName("signscale")
                    ).withName("$anon$0"),
                    C_LONG.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_LONG.withName("Lo32"),
                            C_LONG.withName("Mid32")
                        ).withName("$anon$0"),
                        C_LONG_LONG.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT")
    );
    static final MethodHandle open$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)I",
        IXMLHttpRequestVtbl.open$FUNC, false
    );
    public interface open {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemorySegment x3, jdk.incubator.foreign.MemorySegment x4, jdk.incubator.foreign.MemorySegment x5);
        static MemoryAddress allocate(open fi) {
            return RuntimeHelper.upcallStub(open.class, fi, IXMLHttpRequestVtbl.open$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)I");
        }
        static MemoryAddress allocate(open fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(open.class, fi, IXMLHttpRequestVtbl.open$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)I", scope);
        }
        static open ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemorySegment x3, jdk.incubator.foreign.MemorySegment x4, jdk.incubator.foreign.MemorySegment x5) -> {
                try {
                    return (int)IXMLHttpRequestVtbl.open$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle open$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("open")));
    public static VarHandle open$VH() {
        return IXMLHttpRequestVtbl.open$VH;
    }
    public static MemoryAddress open$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.open$VH.get(seg);
    }
    public static void open$set( MemorySegment seg, MemoryAddress x) {
        IXMLHttpRequestVtbl.open$VH.set(seg, x);
    }
    public static MemoryAddress open$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.open$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void open$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLHttpRequestVtbl.open$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static open open (MemorySegment segment) {
        return open.ofAddress(open$get(segment));
    }
    static final FunctionDescriptor setRequestHeader$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle setRequestHeader$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLHttpRequestVtbl.setRequestHeader$FUNC, false
    );
    public interface setRequestHeader {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(setRequestHeader fi) {
            return RuntimeHelper.upcallStub(setRequestHeader.class, fi, IXMLHttpRequestVtbl.setRequestHeader$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(setRequestHeader fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(setRequestHeader.class, fi, IXMLHttpRequestVtbl.setRequestHeader$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static setRequestHeader ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IXMLHttpRequestVtbl.setRequestHeader$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle setRequestHeader$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("setRequestHeader")));
    public static VarHandle setRequestHeader$VH() {
        return IXMLHttpRequestVtbl.setRequestHeader$VH;
    }
    public static MemoryAddress setRequestHeader$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.setRequestHeader$VH.get(seg);
    }
    public static void setRequestHeader$set( MemorySegment seg, MemoryAddress x) {
        IXMLHttpRequestVtbl.setRequestHeader$VH.set(seg, x);
    }
    public static MemoryAddress setRequestHeader$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.setRequestHeader$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void setRequestHeader$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLHttpRequestVtbl.setRequestHeader$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static setRequestHeader setRequestHeader (MemorySegment segment) {
        return setRequestHeader.ofAddress(setRequestHeader$get(segment));
    }
    static final FunctionDescriptor getResponseHeader$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle getResponseHeader$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLHttpRequestVtbl.getResponseHeader$FUNC, false
    );
    public interface getResponseHeader {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(getResponseHeader fi) {
            return RuntimeHelper.upcallStub(getResponseHeader.class, fi, IXMLHttpRequestVtbl.getResponseHeader$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(getResponseHeader fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(getResponseHeader.class, fi, IXMLHttpRequestVtbl.getResponseHeader$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static getResponseHeader ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IXMLHttpRequestVtbl.getResponseHeader$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle getResponseHeader$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("getResponseHeader")));
    public static VarHandle getResponseHeader$VH() {
        return IXMLHttpRequestVtbl.getResponseHeader$VH;
    }
    public static MemoryAddress getResponseHeader$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.getResponseHeader$VH.get(seg);
    }
    public static void getResponseHeader$set( MemorySegment seg, MemoryAddress x) {
        IXMLHttpRequestVtbl.getResponseHeader$VH.set(seg, x);
    }
    public static MemoryAddress getResponseHeader$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.getResponseHeader$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void getResponseHeader$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLHttpRequestVtbl.getResponseHeader$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static getResponseHeader getResponseHeader (MemorySegment segment) {
        return getResponseHeader.ofAddress(getResponseHeader$get(segment));
    }
    static final FunctionDescriptor getAllResponseHeaders$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle getAllResponseHeaders$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLHttpRequestVtbl.getAllResponseHeaders$FUNC, false
    );
    public interface getAllResponseHeaders {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(getAllResponseHeaders fi) {
            return RuntimeHelper.upcallStub(getAllResponseHeaders.class, fi, IXMLHttpRequestVtbl.getAllResponseHeaders$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(getAllResponseHeaders fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(getAllResponseHeaders.class, fi, IXMLHttpRequestVtbl.getAllResponseHeaders$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static getAllResponseHeaders ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLHttpRequestVtbl.getAllResponseHeaders$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle getAllResponseHeaders$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("getAllResponseHeaders")));
    public static VarHandle getAllResponseHeaders$VH() {
        return IXMLHttpRequestVtbl.getAllResponseHeaders$VH;
    }
    public static MemoryAddress getAllResponseHeaders$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.getAllResponseHeaders$VH.get(seg);
    }
    public static void getAllResponseHeaders$set( MemorySegment seg, MemoryAddress x) {
        IXMLHttpRequestVtbl.getAllResponseHeaders$VH.set(seg, x);
    }
    public static MemoryAddress getAllResponseHeaders$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.getAllResponseHeaders$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void getAllResponseHeaders$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLHttpRequestVtbl.getAllResponseHeaders$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static getAllResponseHeaders getAllResponseHeaders (MemorySegment segment) {
        return getAllResponseHeaders.ofAddress(getAllResponseHeaders$get(segment));
    }
    static final FunctionDescriptor send$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    C_SHORT.withName("vt"),
                    C_SHORT.withName("wReserved1"),
                    C_SHORT.withName("wReserved2"),
                    C_SHORT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        C_LONG_LONG.withName("llVal"),
                        C_LONG.withName("lVal"),
                        C_CHAR.withName("bVal"),
                        C_SHORT.withName("iVal"),
                        C_FLOAT.withName("fltVal"),
                        C_DOUBLE.withName("dblVal"),
                        C_SHORT.withName("boolVal"),
                        C_LONG.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                C_LONG.withName("Lo"),
                                C_LONG.withName("Hi")
                            ).withName("$anon$0"),
                            C_LONG_LONG.withName("int64")
                        ).withName("cyVal"),
                        C_DOUBLE.withName("date"),
                        C_POINTER.withName("bstrVal"),
                        C_POINTER.withName("punkVal"),
                        C_POINTER.withName("pdispVal"),
                        C_POINTER.withName("parray"),
                        C_POINTER.withName("pbVal"),
                        C_POINTER.withName("piVal"),
                        C_POINTER.withName("plVal"),
                        C_POINTER.withName("pllVal"),
                        C_POINTER.withName("pfltVal"),
                        C_POINTER.withName("pdblVal"),
                        C_POINTER.withName("pboolVal"),
                        C_POINTER.withName("pscode"),
                        C_POINTER.withName("pcyVal"),
                        C_POINTER.withName("pdate"),
                        C_POINTER.withName("pbstrVal"),
                        C_POINTER.withName("ppunkVal"),
                        C_POINTER.withName("ppdispVal"),
                        C_POINTER.withName("pparray"),
                        C_POINTER.withName("pvarVal"),
                        C_POINTER.withName("byref"),
                        C_CHAR.withName("cVal"),
                        C_SHORT.withName("uiVal"),
                        C_LONG.withName("ulVal"),
                        C_LONG_LONG.withName("ullVal"),
                        C_INT.withName("intVal"),
                        C_INT.withName("uintVal"),
                        C_POINTER.withName("pdecVal"),
                        C_POINTER.withName("pcVal"),
                        C_POINTER.withName("puiVal"),
                        C_POINTER.withName("pulVal"),
                        C_POINTER.withName("pullVal"),
                        C_POINTER.withName("pintVal"),
                        C_POINTER.withName("puintVal"),
                        MemoryLayout.structLayout(
                            C_POINTER.withName("pvRecord"),
                            C_POINTER.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    C_SHORT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_CHAR.withName("scale"),
                            C_CHAR.withName("sign")
                        ).withName("$anon$0"),
                        C_SHORT.withName("signscale")
                    ).withName("$anon$0"),
                    C_LONG.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            C_LONG.withName("Lo32"),
                            C_LONG.withName("Mid32")
                        ).withName("$anon$0"),
                        C_LONG_LONG.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT")
    );
    static final MethodHandle send$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        IXMLHttpRequestVtbl.send$FUNC, false
    );
    public interface send {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1);
        static MemoryAddress allocate(send fi) {
            return RuntimeHelper.upcallStub(send.class, fi, IXMLHttpRequestVtbl.send$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I");
        }
        static MemoryAddress allocate(send fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(send.class, fi, IXMLHttpRequestVtbl.send$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I", scope);
        }
        static send ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1) -> {
                try {
                    return (int)IXMLHttpRequestVtbl.send$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle send$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("send")));
    public static VarHandle send$VH() {
        return IXMLHttpRequestVtbl.send$VH;
    }
    public static MemoryAddress send$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.send$VH.get(seg);
    }
    public static void send$set( MemorySegment seg, MemoryAddress x) {
        IXMLHttpRequestVtbl.send$VH.set(seg, x);
    }
    public static MemoryAddress send$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.send$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void send$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLHttpRequestVtbl.send$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static send send (MemorySegment segment) {
        return send.ofAddress(send$get(segment));
    }
    static final FunctionDescriptor abort$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle abort$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLHttpRequestVtbl.abort$FUNC, false
    );
    public interface abort {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(abort fi) {
            return RuntimeHelper.upcallStub(abort.class, fi, IXMLHttpRequestVtbl.abort$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(abort fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(abort.class, fi, IXMLHttpRequestVtbl.abort$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static abort ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IXMLHttpRequestVtbl.abort$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle abort$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("abort")));
    public static VarHandle abort$VH() {
        return IXMLHttpRequestVtbl.abort$VH;
    }
    public static MemoryAddress abort$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.abort$VH.get(seg);
    }
    public static void abort$set( MemorySegment seg, MemoryAddress x) {
        IXMLHttpRequestVtbl.abort$VH.set(seg, x);
    }
    public static MemoryAddress abort$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.abort$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void abort$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLHttpRequestVtbl.abort$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static abort abort (MemorySegment segment) {
        return abort.ofAddress(abort$get(segment));
    }
    static final FunctionDescriptor get_status$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_status$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLHttpRequestVtbl.get_status$FUNC, false
    );
    public interface get_status {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_status fi) {
            return RuntimeHelper.upcallStub(get_status.class, fi, IXMLHttpRequestVtbl.get_status$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_status fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_status.class, fi, IXMLHttpRequestVtbl.get_status$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_status ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLHttpRequestVtbl.get_status$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_status$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_status")));
    public static VarHandle get_status$VH() {
        return IXMLHttpRequestVtbl.get_status$VH;
    }
    public static MemoryAddress get_status$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.get_status$VH.get(seg);
    }
    public static void get_status$set( MemorySegment seg, MemoryAddress x) {
        IXMLHttpRequestVtbl.get_status$VH.set(seg, x);
    }
    public static MemoryAddress get_status$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.get_status$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_status$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLHttpRequestVtbl.get_status$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_status get_status (MemorySegment segment) {
        return get_status.ofAddress(get_status$get(segment));
    }
    static final FunctionDescriptor get_statusText$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_statusText$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLHttpRequestVtbl.get_statusText$FUNC, false
    );
    public interface get_statusText {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_statusText fi) {
            return RuntimeHelper.upcallStub(get_statusText.class, fi, IXMLHttpRequestVtbl.get_statusText$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_statusText fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_statusText.class, fi, IXMLHttpRequestVtbl.get_statusText$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_statusText ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLHttpRequestVtbl.get_statusText$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_statusText$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_statusText")));
    public static VarHandle get_statusText$VH() {
        return IXMLHttpRequestVtbl.get_statusText$VH;
    }
    public static MemoryAddress get_statusText$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.get_statusText$VH.get(seg);
    }
    public static void get_statusText$set( MemorySegment seg, MemoryAddress x) {
        IXMLHttpRequestVtbl.get_statusText$VH.set(seg, x);
    }
    public static MemoryAddress get_statusText$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.get_statusText$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_statusText$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLHttpRequestVtbl.get_statusText$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_statusText get_statusText (MemorySegment segment) {
        return get_statusText.ofAddress(get_statusText$get(segment));
    }
    static final FunctionDescriptor get_responseXML$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_responseXML$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLHttpRequestVtbl.get_responseXML$FUNC, false
    );
    public interface get_responseXML {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_responseXML fi) {
            return RuntimeHelper.upcallStub(get_responseXML.class, fi, IXMLHttpRequestVtbl.get_responseXML$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_responseXML fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_responseXML.class, fi, IXMLHttpRequestVtbl.get_responseXML$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_responseXML ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLHttpRequestVtbl.get_responseXML$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_responseXML$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_responseXML")));
    public static VarHandle get_responseXML$VH() {
        return IXMLHttpRequestVtbl.get_responseXML$VH;
    }
    public static MemoryAddress get_responseXML$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.get_responseXML$VH.get(seg);
    }
    public static void get_responseXML$set( MemorySegment seg, MemoryAddress x) {
        IXMLHttpRequestVtbl.get_responseXML$VH.set(seg, x);
    }
    public static MemoryAddress get_responseXML$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.get_responseXML$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_responseXML$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLHttpRequestVtbl.get_responseXML$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_responseXML get_responseXML (MemorySegment segment) {
        return get_responseXML.ofAddress(get_responseXML$get(segment));
    }
    static final FunctionDescriptor get_responseText$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_responseText$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLHttpRequestVtbl.get_responseText$FUNC, false
    );
    public interface get_responseText {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_responseText fi) {
            return RuntimeHelper.upcallStub(get_responseText.class, fi, IXMLHttpRequestVtbl.get_responseText$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_responseText fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_responseText.class, fi, IXMLHttpRequestVtbl.get_responseText$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_responseText ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLHttpRequestVtbl.get_responseText$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_responseText$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_responseText")));
    public static VarHandle get_responseText$VH() {
        return IXMLHttpRequestVtbl.get_responseText$VH;
    }
    public static MemoryAddress get_responseText$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.get_responseText$VH.get(seg);
    }
    public static void get_responseText$set( MemorySegment seg, MemoryAddress x) {
        IXMLHttpRequestVtbl.get_responseText$VH.set(seg, x);
    }
    public static MemoryAddress get_responseText$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.get_responseText$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_responseText$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLHttpRequestVtbl.get_responseText$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_responseText get_responseText (MemorySegment segment) {
        return get_responseText.ofAddress(get_responseText$get(segment));
    }
    static final FunctionDescriptor get_responseBody$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_responseBody$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLHttpRequestVtbl.get_responseBody$FUNC, false
    );
    public interface get_responseBody {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_responseBody fi) {
            return RuntimeHelper.upcallStub(get_responseBody.class, fi, IXMLHttpRequestVtbl.get_responseBody$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_responseBody fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_responseBody.class, fi, IXMLHttpRequestVtbl.get_responseBody$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_responseBody ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLHttpRequestVtbl.get_responseBody$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_responseBody$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_responseBody")));
    public static VarHandle get_responseBody$VH() {
        return IXMLHttpRequestVtbl.get_responseBody$VH;
    }
    public static MemoryAddress get_responseBody$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.get_responseBody$VH.get(seg);
    }
    public static void get_responseBody$set( MemorySegment seg, MemoryAddress x) {
        IXMLHttpRequestVtbl.get_responseBody$VH.set(seg, x);
    }
    public static MemoryAddress get_responseBody$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.get_responseBody$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_responseBody$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLHttpRequestVtbl.get_responseBody$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_responseBody get_responseBody (MemorySegment segment) {
        return get_responseBody.ofAddress(get_responseBody$get(segment));
    }
    static final FunctionDescriptor get_responseStream$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_responseStream$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLHttpRequestVtbl.get_responseStream$FUNC, false
    );
    public interface get_responseStream {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_responseStream fi) {
            return RuntimeHelper.upcallStub(get_responseStream.class, fi, IXMLHttpRequestVtbl.get_responseStream$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_responseStream fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_responseStream.class, fi, IXMLHttpRequestVtbl.get_responseStream$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_responseStream ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLHttpRequestVtbl.get_responseStream$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_responseStream$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_responseStream")));
    public static VarHandle get_responseStream$VH() {
        return IXMLHttpRequestVtbl.get_responseStream$VH;
    }
    public static MemoryAddress get_responseStream$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.get_responseStream$VH.get(seg);
    }
    public static void get_responseStream$set( MemorySegment seg, MemoryAddress x) {
        IXMLHttpRequestVtbl.get_responseStream$VH.set(seg, x);
    }
    public static MemoryAddress get_responseStream$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.get_responseStream$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_responseStream$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLHttpRequestVtbl.get_responseStream$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_responseStream get_responseStream (MemorySegment segment) {
        return get_responseStream.ofAddress(get_responseStream$get(segment));
    }
    static final FunctionDescriptor get_readyState$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_readyState$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLHttpRequestVtbl.get_readyState$FUNC, false
    );
    public interface get_readyState {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_readyState fi) {
            return RuntimeHelper.upcallStub(get_readyState.class, fi, IXMLHttpRequestVtbl.get_readyState$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_readyState fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_readyState.class, fi, IXMLHttpRequestVtbl.get_readyState$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_readyState ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLHttpRequestVtbl.get_readyState$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_readyState$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_readyState")));
    public static VarHandle get_readyState$VH() {
        return IXMLHttpRequestVtbl.get_readyState$VH;
    }
    public static MemoryAddress get_readyState$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.get_readyState$VH.get(seg);
    }
    public static void get_readyState$set( MemorySegment seg, MemoryAddress x) {
        IXMLHttpRequestVtbl.get_readyState$VH.set(seg, x);
    }
    public static MemoryAddress get_readyState$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.get_readyState$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_readyState$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLHttpRequestVtbl.get_readyState$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_readyState get_readyState (MemorySegment segment) {
        return get_readyState.ofAddress(get_readyState$get(segment));
    }
    static final FunctionDescriptor put_onreadystatechange$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle put_onreadystatechange$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLHttpRequestVtbl.put_onreadystatechange$FUNC, false
    );
    public interface put_onreadystatechange {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(put_onreadystatechange fi) {
            return RuntimeHelper.upcallStub(put_onreadystatechange.class, fi, IXMLHttpRequestVtbl.put_onreadystatechange$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(put_onreadystatechange fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(put_onreadystatechange.class, fi, IXMLHttpRequestVtbl.put_onreadystatechange$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static put_onreadystatechange ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLHttpRequestVtbl.put_onreadystatechange$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_onreadystatechange$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("put_onreadystatechange")));
    public static VarHandle put_onreadystatechange$VH() {
        return IXMLHttpRequestVtbl.put_onreadystatechange$VH;
    }
    public static MemoryAddress put_onreadystatechange$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.put_onreadystatechange$VH.get(seg);
    }
    public static void put_onreadystatechange$set( MemorySegment seg, MemoryAddress x) {
        IXMLHttpRequestVtbl.put_onreadystatechange$VH.set(seg, x);
    }
    public static MemoryAddress put_onreadystatechange$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLHttpRequestVtbl.put_onreadystatechange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_onreadystatechange$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLHttpRequestVtbl.put_onreadystatechange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_onreadystatechange put_onreadystatechange (MemorySegment segment) {
        return put_onreadystatechange.ofAddress(put_onreadystatechange$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


