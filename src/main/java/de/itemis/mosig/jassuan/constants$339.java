// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$339 {

    static final FunctionDescriptor TerminateThread$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle TerminateThread$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "TerminateThread",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$339.TerminateThread$FUNC, false
    );
    static final FunctionDescriptor SetProcessShutdownParameters$FUNC = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_LONG
    );
    static final MethodHandle SetProcessShutdownParameters$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "SetProcessShutdownParameters",
        "(II)I",
        constants$339.SetProcessShutdownParameters$FUNC, false
    );
    static final FunctionDescriptor GetProcessVersion$FUNC = FunctionDescriptor.of(C_LONG,
        C_LONG
    );
    static final MethodHandle GetProcessVersion$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "GetProcessVersion",
        "(I)I",
        constants$339.GetProcessVersion$FUNC, false
    );
    static final FunctionDescriptor GetStartupInfoW$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle GetStartupInfoW$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "GetStartupInfoW",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$339.GetStartupInfoW$FUNC, false
    );
    static final FunctionDescriptor SetThreadStackGuarantee$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle SetThreadStackGuarantee$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "SetThreadStackGuarantee",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$339.SetThreadStackGuarantee$FUNC, false
    );
    static final FunctionDescriptor ProcessIdToSessionId$FUNC = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle ProcessIdToSessionId$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "ProcessIdToSessionId",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        constants$339.ProcessIdToSessionId$FUNC, false
    );
}


