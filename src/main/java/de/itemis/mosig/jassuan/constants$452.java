// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$452 {

    static final FunctionDescriptor IsBadStringPtrA$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG_LONG
    );
    static final MethodHandle IsBadStringPtrA$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "IsBadStringPtrA",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        constants$452.IsBadStringPtrA$FUNC, false
    );
    static final FunctionDescriptor IsBadStringPtrW$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG_LONG
    );
    static final MethodHandle IsBadStringPtrW$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "IsBadStringPtrW",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        constants$452.IsBadStringPtrW$FUNC, false
    );
    static final FunctionDescriptor MapViewOfFileExNuma$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_LONG_LONG,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle MapViewOfFileExNuma$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "MapViewOfFileExNuma",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIJLjdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        constants$452.MapViewOfFileExNuma$FUNC, false
    );
    static final FunctionDescriptor AddConditionalAce$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_CHAR,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle AddConditionalAce$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "AddConditionalAce",
        "(Ljdk/incubator/foreign/MemoryAddress;IIBILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$452.AddConditionalAce$FUNC, false
    );
    static final FunctionDescriptor LookupAccountNameLocalA$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle LookupAccountNameLocalA$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "LookupAccountNameLocalA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$452.LookupAccountNameLocalA$FUNC, false
    );
    static final FunctionDescriptor LookupAccountNameLocalW$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle LookupAccountNameLocalW$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "LookupAccountNameLocalW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$452.LookupAccountNameLocalW$FUNC, false
    );
}


