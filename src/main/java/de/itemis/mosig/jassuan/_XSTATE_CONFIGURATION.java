// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _XSTATE_CONFIGURATION {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG_LONG.withName("EnabledFeatures"),
        C_LONG_LONG.withName("EnabledVolatileFeatures"),
        C_LONG.withName("Size"),
        MemoryLayout.structLayout(
            MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("OptimizedSave"),
            MemoryLayout.paddingLayout(31)
        ),
        MemoryLayout.sequenceLayout(64, MemoryLayout.structLayout(
            C_LONG.withName("Offset"),
            C_LONG.withName("Size")
        ).withName("_XSTATE_FEATURE")).withName("Features")
    ).withName("_XSTATE_CONFIGURATION");
    public static MemoryLayout $LAYOUT() {
        return _XSTATE_CONFIGURATION.$struct$LAYOUT;
    }
    static final VarHandle EnabledFeatures$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnabledFeatures"));
    public static VarHandle EnabledFeatures$VH() {
        return _XSTATE_CONFIGURATION.EnabledFeatures$VH;
    }
    public static long EnabledFeatures$get(MemorySegment seg) {
        return (long)_XSTATE_CONFIGURATION.EnabledFeatures$VH.get(seg);
    }
    public static void EnabledFeatures$set( MemorySegment seg, long x) {
        _XSTATE_CONFIGURATION.EnabledFeatures$VH.set(seg, x);
    }
    public static long EnabledFeatures$get(MemorySegment seg, long index) {
        return (long)_XSTATE_CONFIGURATION.EnabledFeatures$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EnabledFeatures$set(MemorySegment seg, long index, long x) {
        _XSTATE_CONFIGURATION.EnabledFeatures$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle EnabledVolatileFeatures$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnabledVolatileFeatures"));
    public static VarHandle EnabledVolatileFeatures$VH() {
        return _XSTATE_CONFIGURATION.EnabledVolatileFeatures$VH;
    }
    public static long EnabledVolatileFeatures$get(MemorySegment seg) {
        return (long)_XSTATE_CONFIGURATION.EnabledVolatileFeatures$VH.get(seg);
    }
    public static void EnabledVolatileFeatures$set( MemorySegment seg, long x) {
        _XSTATE_CONFIGURATION.EnabledVolatileFeatures$VH.set(seg, x);
    }
    public static long EnabledVolatileFeatures$get(MemorySegment seg, long index) {
        return (long)_XSTATE_CONFIGURATION.EnabledVolatileFeatures$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EnabledVolatileFeatures$set(MemorySegment seg, long index, long x) {
        _XSTATE_CONFIGURATION.EnabledVolatileFeatures$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _XSTATE_CONFIGURATION.Size$VH;
    }
    public static int Size$get(MemorySegment seg) {
        return (int)_XSTATE_CONFIGURATION.Size$VH.get(seg);
    }
    public static void Size$set( MemorySegment seg, int x) {
        _XSTATE_CONFIGURATION.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_XSTATE_CONFIGURATION.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _XSTATE_CONFIGURATION.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Features$slice(MemorySegment seg) {
        return seg.asSlice(24, 512);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


