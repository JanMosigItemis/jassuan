// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$850 {

    static final FunctionDescriptor BCryptDecrypt$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle BCryptDecrypt$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "BCryptDecrypt",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        constants$850.BCryptDecrypt$FUNC, false
    );
    static final FunctionDescriptor BCryptExportKey$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle BCryptExportKey$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "BCryptExportKey",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        constants$850.BCryptExportKey$FUNC, false
    );
    static final FunctionDescriptor BCryptImportKey$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final MethodHandle BCryptImportKey$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "BCryptImportKey",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)I",
        constants$850.BCryptImportKey$FUNC, false
    );
    static final FunctionDescriptor BCryptImportKeyPair$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final MethodHandle BCryptImportKeyPair$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "BCryptImportKeyPair",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        constants$850.BCryptImportKeyPair$FUNC, false
    );
    static final FunctionDescriptor BCryptDuplicateKey$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final MethodHandle BCryptDuplicateKey$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "BCryptDuplicateKey",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        constants$850.BCryptDuplicateKey$FUNC, false
    );
    static final FunctionDescriptor BCryptFinalizeKeyPair$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle BCryptFinalizeKeyPair$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "BCryptFinalizeKeyPair",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$850.BCryptFinalizeKeyPair$FUNC, false
    );
}


