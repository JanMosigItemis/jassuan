// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IRpcStubBufferVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("Connect"),
        C_POINTER.withName("Disconnect"),
        C_POINTER.withName("Invoke"),
        C_POINTER.withName("IsIIDSupported"),
        C_POINTER.withName("CountRefs"),
        C_POINTER.withName("DebugServerQueryInterface"),
        C_POINTER.withName("DebugServerRelease")
    ).withName("IRpcStubBufferVtbl");
    public static MemoryLayout $LAYOUT() {
        return IRpcStubBufferVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IRpcStubBufferVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IRpcStubBufferVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IRpcStubBufferVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IRpcStubBufferVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IRpcStubBufferVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IRpcStubBufferVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IRpcStubBufferVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IRpcStubBufferVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IRpcStubBufferVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IRpcStubBufferVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IRpcStubBufferVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IRpcStubBufferVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IRpcStubBufferVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IRpcStubBufferVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IRpcStubBufferVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IRpcStubBufferVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IRpcStubBufferVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IRpcStubBufferVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IRpcStubBufferVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IRpcStubBufferVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IRpcStubBufferVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IRpcStubBufferVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IRpcStubBufferVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IRpcStubBufferVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IRpcStubBufferVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IRpcStubBufferVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IRpcStubBufferVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor Connect$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle Connect$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IRpcStubBufferVtbl.Connect$FUNC, false
    );
    public interface Connect {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(Connect fi) {
            return RuntimeHelper.upcallStub(Connect.class, fi, IRpcStubBufferVtbl.Connect$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Connect fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Connect.class, fi, IRpcStubBufferVtbl.Connect$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Connect ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IRpcStubBufferVtbl.Connect$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Connect$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Connect")));
    public static VarHandle Connect$VH() {
        return IRpcStubBufferVtbl.Connect$VH;
    }
    public static MemoryAddress Connect$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IRpcStubBufferVtbl.Connect$VH.get(seg);
    }
    public static void Connect$set( MemorySegment seg, MemoryAddress x) {
        IRpcStubBufferVtbl.Connect$VH.set(seg, x);
    }
    public static MemoryAddress Connect$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IRpcStubBufferVtbl.Connect$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Connect$set(MemorySegment seg, long index, MemoryAddress x) {
        IRpcStubBufferVtbl.Connect$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Connect Connect (MemorySegment segment) {
        return Connect.ofAddress(Connect$get(segment));
    }
    static final FunctionDescriptor Disconnect$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle Disconnect$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        IRpcStubBufferVtbl.Disconnect$FUNC, false
    );
    public interface Disconnect {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Disconnect fi) {
            return RuntimeHelper.upcallStub(Disconnect.class, fi, IRpcStubBufferVtbl.Disconnect$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        static MemoryAddress allocate(Disconnect fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Disconnect.class, fi, IRpcStubBufferVtbl.Disconnect$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static Disconnect ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    IRpcStubBufferVtbl.Disconnect$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Disconnect$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Disconnect")));
    public static VarHandle Disconnect$VH() {
        return IRpcStubBufferVtbl.Disconnect$VH;
    }
    public static MemoryAddress Disconnect$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IRpcStubBufferVtbl.Disconnect$VH.get(seg);
    }
    public static void Disconnect$set( MemorySegment seg, MemoryAddress x) {
        IRpcStubBufferVtbl.Disconnect$VH.set(seg, x);
    }
    public static MemoryAddress Disconnect$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IRpcStubBufferVtbl.Disconnect$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Disconnect$set(MemorySegment seg, long index, MemoryAddress x) {
        IRpcStubBufferVtbl.Disconnect$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Disconnect Disconnect (MemorySegment segment) {
        return Disconnect.ofAddress(Disconnect$get(segment));
    }
    static final FunctionDescriptor Invoke$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle Invoke$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IRpcStubBufferVtbl.Invoke$FUNC, false
    );
    public interface Invoke {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(Invoke fi) {
            return RuntimeHelper.upcallStub(Invoke.class, fi, IRpcStubBufferVtbl.Invoke$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Invoke fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Invoke.class, fi, IRpcStubBufferVtbl.Invoke$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Invoke ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IRpcStubBufferVtbl.Invoke$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Invoke$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Invoke")));
    public static VarHandle Invoke$VH() {
        return IRpcStubBufferVtbl.Invoke$VH;
    }
    public static MemoryAddress Invoke$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IRpcStubBufferVtbl.Invoke$VH.get(seg);
    }
    public static void Invoke$set( MemorySegment seg, MemoryAddress x) {
        IRpcStubBufferVtbl.Invoke$VH.set(seg, x);
    }
    public static MemoryAddress Invoke$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IRpcStubBufferVtbl.Invoke$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemoryAddress x) {
        IRpcStubBufferVtbl.Invoke$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke (MemorySegment segment) {
        return Invoke.ofAddress(Invoke$get(segment));
    }
    static final FunctionDescriptor IsIIDSupported$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle IsIIDSupported$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        IRpcStubBufferVtbl.IsIIDSupported$FUNC, false
    );
    public interface IsIIDSupported {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(IsIIDSupported fi) {
            return RuntimeHelper.upcallStub(IsIIDSupported.class, fi, IRpcStubBufferVtbl.IsIIDSupported$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        static MemoryAddress allocate(IsIIDSupported fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(IsIIDSupported.class, fi, IRpcStubBufferVtbl.IsIIDSupported$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;", scope);
        }
        static IsIIDSupported ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (jdk.incubator.foreign.MemoryAddress)IRpcStubBufferVtbl.IsIIDSupported$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle IsIIDSupported$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("IsIIDSupported")));
    public static VarHandle IsIIDSupported$VH() {
        return IRpcStubBufferVtbl.IsIIDSupported$VH;
    }
    public static MemoryAddress IsIIDSupported$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IRpcStubBufferVtbl.IsIIDSupported$VH.get(seg);
    }
    public static void IsIIDSupported$set( MemorySegment seg, MemoryAddress x) {
        IRpcStubBufferVtbl.IsIIDSupported$VH.set(seg, x);
    }
    public static MemoryAddress IsIIDSupported$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IRpcStubBufferVtbl.IsIIDSupported$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IsIIDSupported$set(MemorySegment seg, long index, MemoryAddress x) {
        IRpcStubBufferVtbl.IsIIDSupported$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsIIDSupported IsIIDSupported (MemorySegment segment) {
        return IsIIDSupported.ofAddress(IsIIDSupported$get(segment));
    }
    static final FunctionDescriptor CountRefs$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle CountRefs$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IRpcStubBufferVtbl.CountRefs$FUNC, false
    );
    public interface CountRefs {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(CountRefs fi) {
            return RuntimeHelper.upcallStub(CountRefs.class, fi, IRpcStubBufferVtbl.CountRefs$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(CountRefs fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(CountRefs.class, fi, IRpcStubBufferVtbl.CountRefs$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static CountRefs ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IRpcStubBufferVtbl.CountRefs$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CountRefs$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("CountRefs")));
    public static VarHandle CountRefs$VH() {
        return IRpcStubBufferVtbl.CountRefs$VH;
    }
    public static MemoryAddress CountRefs$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IRpcStubBufferVtbl.CountRefs$VH.get(seg);
    }
    public static void CountRefs$set( MemorySegment seg, MemoryAddress x) {
        IRpcStubBufferVtbl.CountRefs$VH.set(seg, x);
    }
    public static MemoryAddress CountRefs$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IRpcStubBufferVtbl.CountRefs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CountRefs$set(MemorySegment seg, long index, MemoryAddress x) {
        IRpcStubBufferVtbl.CountRefs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CountRefs CountRefs (MemorySegment segment) {
        return CountRefs.ofAddress(CountRefs$get(segment));
    }
    static final FunctionDescriptor DebugServerQueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle DebugServerQueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IRpcStubBufferVtbl.DebugServerQueryInterface$FUNC, false
    );
    public interface DebugServerQueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(DebugServerQueryInterface fi) {
            return RuntimeHelper.upcallStub(DebugServerQueryInterface.class, fi, IRpcStubBufferVtbl.DebugServerQueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(DebugServerQueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(DebugServerQueryInterface.class, fi, IRpcStubBufferVtbl.DebugServerQueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static DebugServerQueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IRpcStubBufferVtbl.DebugServerQueryInterface$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DebugServerQueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("DebugServerQueryInterface")));
    public static VarHandle DebugServerQueryInterface$VH() {
        return IRpcStubBufferVtbl.DebugServerQueryInterface$VH;
    }
    public static MemoryAddress DebugServerQueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IRpcStubBufferVtbl.DebugServerQueryInterface$VH.get(seg);
    }
    public static void DebugServerQueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IRpcStubBufferVtbl.DebugServerQueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress DebugServerQueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IRpcStubBufferVtbl.DebugServerQueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DebugServerQueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IRpcStubBufferVtbl.DebugServerQueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DebugServerQueryInterface DebugServerQueryInterface (MemorySegment segment) {
        return DebugServerQueryInterface.ofAddress(DebugServerQueryInterface$get(segment));
    }
    static final FunctionDescriptor DebugServerRelease$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle DebugServerRelease$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        IRpcStubBufferVtbl.DebugServerRelease$FUNC, false
    );
    public interface DebugServerRelease {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(DebugServerRelease fi) {
            return RuntimeHelper.upcallStub(DebugServerRelease.class, fi, IRpcStubBufferVtbl.DebugServerRelease$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        static MemoryAddress allocate(DebugServerRelease fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(DebugServerRelease.class, fi, IRpcStubBufferVtbl.DebugServerRelease$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static DebugServerRelease ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    IRpcStubBufferVtbl.DebugServerRelease$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DebugServerRelease$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("DebugServerRelease")));
    public static VarHandle DebugServerRelease$VH() {
        return IRpcStubBufferVtbl.DebugServerRelease$VH;
    }
    public static MemoryAddress DebugServerRelease$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IRpcStubBufferVtbl.DebugServerRelease$VH.get(seg);
    }
    public static void DebugServerRelease$set( MemorySegment seg, MemoryAddress x) {
        IRpcStubBufferVtbl.DebugServerRelease$VH.set(seg, x);
    }
    public static MemoryAddress DebugServerRelease$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IRpcStubBufferVtbl.DebugServerRelease$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DebugServerRelease$set(MemorySegment seg, long index, MemoryAddress x) {
        IRpcStubBufferVtbl.DebugServerRelease$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DebugServerRelease DebugServerRelease (MemorySegment segment) {
        return DebugServerRelease.ofAddress(DebugServerRelease$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


