// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _JOBOBJECT_BASIC_LIMIT_INFORMATION {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONG_LONG.withName("QuadPart")
        ).withName("PerProcessUserTimeLimit"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONG_LONG.withName("QuadPart")
        ).withName("PerJobUserTimeLimit"),
        C_LONG.withName("LimitFlags"),
        MemoryLayout.paddingLayout(32),
        C_LONG_LONG.withName("MinimumWorkingSetSize"),
        C_LONG_LONG.withName("MaximumWorkingSetSize"),
        C_LONG.withName("ActiveProcessLimit"),
        MemoryLayout.paddingLayout(32),
        C_LONG_LONG.withName("Affinity"),
        C_LONG.withName("PriorityClass"),
        C_LONG.withName("SchedulingClass")
    ).withName("_JOBOBJECT_BASIC_LIMIT_INFORMATION");
    public static MemoryLayout $LAYOUT() {
        return _JOBOBJECT_BASIC_LIMIT_INFORMATION.$struct$LAYOUT;
    }
    public static MemorySegment PerProcessUserTimeLimit$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment PerJobUserTimeLimit$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    static final VarHandle LimitFlags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("LimitFlags"));
    public static VarHandle LimitFlags$VH() {
        return _JOBOBJECT_BASIC_LIMIT_INFORMATION.LimitFlags$VH;
    }
    public static int LimitFlags$get(MemorySegment seg) {
        return (int)_JOBOBJECT_BASIC_LIMIT_INFORMATION.LimitFlags$VH.get(seg);
    }
    public static void LimitFlags$set( MemorySegment seg, int x) {
        _JOBOBJECT_BASIC_LIMIT_INFORMATION.LimitFlags$VH.set(seg, x);
    }
    public static int LimitFlags$get(MemorySegment seg, long index) {
        return (int)_JOBOBJECT_BASIC_LIMIT_INFORMATION.LimitFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LimitFlags$set(MemorySegment seg, long index, int x) {
        _JOBOBJECT_BASIC_LIMIT_INFORMATION.LimitFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MinimumWorkingSetSize$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("MinimumWorkingSetSize"));
    public static VarHandle MinimumWorkingSetSize$VH() {
        return _JOBOBJECT_BASIC_LIMIT_INFORMATION.MinimumWorkingSetSize$VH;
    }
    public static long MinimumWorkingSetSize$get(MemorySegment seg) {
        return (long)_JOBOBJECT_BASIC_LIMIT_INFORMATION.MinimumWorkingSetSize$VH.get(seg);
    }
    public static void MinimumWorkingSetSize$set( MemorySegment seg, long x) {
        _JOBOBJECT_BASIC_LIMIT_INFORMATION.MinimumWorkingSetSize$VH.set(seg, x);
    }
    public static long MinimumWorkingSetSize$get(MemorySegment seg, long index) {
        return (long)_JOBOBJECT_BASIC_LIMIT_INFORMATION.MinimumWorkingSetSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MinimumWorkingSetSize$set(MemorySegment seg, long index, long x) {
        _JOBOBJECT_BASIC_LIMIT_INFORMATION.MinimumWorkingSetSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaximumWorkingSetSize$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaximumWorkingSetSize"));
    public static VarHandle MaximumWorkingSetSize$VH() {
        return _JOBOBJECT_BASIC_LIMIT_INFORMATION.MaximumWorkingSetSize$VH;
    }
    public static long MaximumWorkingSetSize$get(MemorySegment seg) {
        return (long)_JOBOBJECT_BASIC_LIMIT_INFORMATION.MaximumWorkingSetSize$VH.get(seg);
    }
    public static void MaximumWorkingSetSize$set( MemorySegment seg, long x) {
        _JOBOBJECT_BASIC_LIMIT_INFORMATION.MaximumWorkingSetSize$VH.set(seg, x);
    }
    public static long MaximumWorkingSetSize$get(MemorySegment seg, long index) {
        return (long)_JOBOBJECT_BASIC_LIMIT_INFORMATION.MaximumWorkingSetSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumWorkingSetSize$set(MemorySegment seg, long index, long x) {
        _JOBOBJECT_BASIC_LIMIT_INFORMATION.MaximumWorkingSetSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ActiveProcessLimit$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ActiveProcessLimit"));
    public static VarHandle ActiveProcessLimit$VH() {
        return _JOBOBJECT_BASIC_LIMIT_INFORMATION.ActiveProcessLimit$VH;
    }
    public static int ActiveProcessLimit$get(MemorySegment seg) {
        return (int)_JOBOBJECT_BASIC_LIMIT_INFORMATION.ActiveProcessLimit$VH.get(seg);
    }
    public static void ActiveProcessLimit$set( MemorySegment seg, int x) {
        _JOBOBJECT_BASIC_LIMIT_INFORMATION.ActiveProcessLimit$VH.set(seg, x);
    }
    public static int ActiveProcessLimit$get(MemorySegment seg, long index) {
        return (int)_JOBOBJECT_BASIC_LIMIT_INFORMATION.ActiveProcessLimit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ActiveProcessLimit$set(MemorySegment seg, long index, int x) {
        _JOBOBJECT_BASIC_LIMIT_INFORMATION.ActiveProcessLimit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Affinity$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Affinity"));
    public static VarHandle Affinity$VH() {
        return _JOBOBJECT_BASIC_LIMIT_INFORMATION.Affinity$VH;
    }
    public static long Affinity$get(MemorySegment seg) {
        return (long)_JOBOBJECT_BASIC_LIMIT_INFORMATION.Affinity$VH.get(seg);
    }
    public static void Affinity$set( MemorySegment seg, long x) {
        _JOBOBJECT_BASIC_LIMIT_INFORMATION.Affinity$VH.set(seg, x);
    }
    public static long Affinity$get(MemorySegment seg, long index) {
        return (long)_JOBOBJECT_BASIC_LIMIT_INFORMATION.Affinity$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Affinity$set(MemorySegment seg, long index, long x) {
        _JOBOBJECT_BASIC_LIMIT_INFORMATION.Affinity$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle PriorityClass$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("PriorityClass"));
    public static VarHandle PriorityClass$VH() {
        return _JOBOBJECT_BASIC_LIMIT_INFORMATION.PriorityClass$VH;
    }
    public static int PriorityClass$get(MemorySegment seg) {
        return (int)_JOBOBJECT_BASIC_LIMIT_INFORMATION.PriorityClass$VH.get(seg);
    }
    public static void PriorityClass$set( MemorySegment seg, int x) {
        _JOBOBJECT_BASIC_LIMIT_INFORMATION.PriorityClass$VH.set(seg, x);
    }
    public static int PriorityClass$get(MemorySegment seg, long index) {
        return (int)_JOBOBJECT_BASIC_LIMIT_INFORMATION.PriorityClass$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PriorityClass$set(MemorySegment seg, long index, int x) {
        _JOBOBJECT_BASIC_LIMIT_INFORMATION.PriorityClass$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SchedulingClass$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("SchedulingClass"));
    public static VarHandle SchedulingClass$VH() {
        return _JOBOBJECT_BASIC_LIMIT_INFORMATION.SchedulingClass$VH;
    }
    public static int SchedulingClass$get(MemorySegment seg) {
        return (int)_JOBOBJECT_BASIC_LIMIT_INFORMATION.SchedulingClass$VH.get(seg);
    }
    public static void SchedulingClass$set( MemorySegment seg, int x) {
        _JOBOBJECT_BASIC_LIMIT_INFORMATION.SchedulingClass$VH.set(seg, x);
    }
    public static int SchedulingClass$get(MemorySegment seg, long index) {
        return (int)_JOBOBJECT_BASIC_LIMIT_INFORMATION.SchedulingClass$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SchedulingClass$set(MemorySegment seg, long index, int x) {
        _JOBOBJECT_BASIC_LIMIT_INFORMATION.SchedulingClass$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


