// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IOleInPlaceSiteVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetWindow"),
        C_POINTER.withName("ContextSensitiveHelp"),
        C_POINTER.withName("CanInPlaceActivate"),
        C_POINTER.withName("OnInPlaceActivate"),
        C_POINTER.withName("OnUIActivate"),
        C_POINTER.withName("GetWindowContext"),
        C_POINTER.withName("Scroll"),
        C_POINTER.withName("OnUIDeactivate"),
        C_POINTER.withName("OnInPlaceDeactivate"),
        C_POINTER.withName("DiscardUndoState"),
        C_POINTER.withName("DeactivateAndUndo"),
        C_POINTER.withName("OnPosRectChange")
    ).withName("IOleInPlaceSiteVtbl");
    public static MemoryLayout $LAYOUT() {
        return IOleInPlaceSiteVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IOleInPlaceSiteVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IOleInPlaceSiteVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IOleInPlaceSiteVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IOleInPlaceSiteVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceSiteVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceSiteVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IOleInPlaceSiteVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IOleInPlaceSiteVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IOleInPlaceSiteVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IOleInPlaceSiteVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceSiteVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceSiteVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IOleInPlaceSiteVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IOleInPlaceSiteVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IOleInPlaceSiteVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IOleInPlaceSiteVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceSiteVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceSiteVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor GetWindow$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetWindow$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IOleInPlaceSiteVtbl.GetWindow$FUNC, false
    );
    public interface GetWindow {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetWindow fi) {
            return RuntimeHelper.upcallStub(GetWindow.class, fi, IOleInPlaceSiteVtbl.GetWindow$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetWindow fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetWindow.class, fi, IOleInPlaceSiteVtbl.GetWindow$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetWindow ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.GetWindow$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetWindow$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetWindow")));
    public static VarHandle GetWindow$VH() {
        return IOleInPlaceSiteVtbl.GetWindow$VH;
    }
    public static MemoryAddress GetWindow$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.GetWindow$VH.get(seg);
    }
    public static void GetWindow$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceSiteVtbl.GetWindow$VH.set(seg, x);
    }
    public static MemoryAddress GetWindow$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.GetWindow$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetWindow$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceSiteVtbl.GetWindow$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetWindow GetWindow (MemorySegment segment) {
        return GetWindow.ofAddress(GetWindow$get(segment));
    }
    static final FunctionDescriptor ContextSensitiveHelp$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT
    );
    static final MethodHandle ContextSensitiveHelp$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        IOleInPlaceSiteVtbl.ContextSensitiveHelp$FUNC, false
    );
    public interface ContextSensitiveHelp {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
        static MemoryAddress allocate(ContextSensitiveHelp fi) {
            return RuntimeHelper.upcallStub(ContextSensitiveHelp.class, fi, IOleInPlaceSiteVtbl.ContextSensitiveHelp$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(ContextSensitiveHelp fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(ContextSensitiveHelp.class, fi, IOleInPlaceSiteVtbl.ContextSensitiveHelp$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static ContextSensitiveHelp ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.ContextSensitiveHelp$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ContextSensitiveHelp$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ContextSensitiveHelp")));
    public static VarHandle ContextSensitiveHelp$VH() {
        return IOleInPlaceSiteVtbl.ContextSensitiveHelp$VH;
    }
    public static MemoryAddress ContextSensitiveHelp$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.ContextSensitiveHelp$VH.get(seg);
    }
    public static void ContextSensitiveHelp$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceSiteVtbl.ContextSensitiveHelp$VH.set(seg, x);
    }
    public static MemoryAddress ContextSensitiveHelp$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.ContextSensitiveHelp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ContextSensitiveHelp$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceSiteVtbl.ContextSensitiveHelp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ContextSensitiveHelp ContextSensitiveHelp (MemorySegment segment) {
        return ContextSensitiveHelp.ofAddress(ContextSensitiveHelp$get(segment));
    }
    static final FunctionDescriptor CanInPlaceActivate$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle CanInPlaceActivate$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IOleInPlaceSiteVtbl.CanInPlaceActivate$FUNC, false
    );
    public interface CanInPlaceActivate {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(CanInPlaceActivate fi) {
            return RuntimeHelper.upcallStub(CanInPlaceActivate.class, fi, IOleInPlaceSiteVtbl.CanInPlaceActivate$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(CanInPlaceActivate fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(CanInPlaceActivate.class, fi, IOleInPlaceSiteVtbl.CanInPlaceActivate$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static CanInPlaceActivate ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.CanInPlaceActivate$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CanInPlaceActivate$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("CanInPlaceActivate")));
    public static VarHandle CanInPlaceActivate$VH() {
        return IOleInPlaceSiteVtbl.CanInPlaceActivate$VH;
    }
    public static MemoryAddress CanInPlaceActivate$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.CanInPlaceActivate$VH.get(seg);
    }
    public static void CanInPlaceActivate$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceSiteVtbl.CanInPlaceActivate$VH.set(seg, x);
    }
    public static MemoryAddress CanInPlaceActivate$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.CanInPlaceActivate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CanInPlaceActivate$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceSiteVtbl.CanInPlaceActivate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CanInPlaceActivate CanInPlaceActivate (MemorySegment segment) {
        return CanInPlaceActivate.ofAddress(CanInPlaceActivate$get(segment));
    }
    static final FunctionDescriptor OnInPlaceActivate$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle OnInPlaceActivate$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IOleInPlaceSiteVtbl.OnInPlaceActivate$FUNC, false
    );
    public interface OnInPlaceActivate {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(OnInPlaceActivate fi) {
            return RuntimeHelper.upcallStub(OnInPlaceActivate.class, fi, IOleInPlaceSiteVtbl.OnInPlaceActivate$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(OnInPlaceActivate fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(OnInPlaceActivate.class, fi, IOleInPlaceSiteVtbl.OnInPlaceActivate$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static OnInPlaceActivate ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.OnInPlaceActivate$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnInPlaceActivate$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("OnInPlaceActivate")));
    public static VarHandle OnInPlaceActivate$VH() {
        return IOleInPlaceSiteVtbl.OnInPlaceActivate$VH;
    }
    public static MemoryAddress OnInPlaceActivate$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.OnInPlaceActivate$VH.get(seg);
    }
    public static void OnInPlaceActivate$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceSiteVtbl.OnInPlaceActivate$VH.set(seg, x);
    }
    public static MemoryAddress OnInPlaceActivate$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.OnInPlaceActivate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnInPlaceActivate$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceSiteVtbl.OnInPlaceActivate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnInPlaceActivate OnInPlaceActivate (MemorySegment segment) {
        return OnInPlaceActivate.ofAddress(OnInPlaceActivate$get(segment));
    }
    static final FunctionDescriptor OnUIActivate$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle OnUIActivate$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IOleInPlaceSiteVtbl.OnUIActivate$FUNC, false
    );
    public interface OnUIActivate {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(OnUIActivate fi) {
            return RuntimeHelper.upcallStub(OnUIActivate.class, fi, IOleInPlaceSiteVtbl.OnUIActivate$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(OnUIActivate fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(OnUIActivate.class, fi, IOleInPlaceSiteVtbl.OnUIActivate$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static OnUIActivate ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.OnUIActivate$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnUIActivate$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("OnUIActivate")));
    public static VarHandle OnUIActivate$VH() {
        return IOleInPlaceSiteVtbl.OnUIActivate$VH;
    }
    public static MemoryAddress OnUIActivate$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.OnUIActivate$VH.get(seg);
    }
    public static void OnUIActivate$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceSiteVtbl.OnUIActivate$VH.set(seg, x);
    }
    public static MemoryAddress OnUIActivate$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.OnUIActivate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnUIActivate$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceSiteVtbl.OnUIActivate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnUIActivate OnUIActivate (MemorySegment segment) {
        return OnUIActivate.ofAddress(OnUIActivate$get(segment));
    }
    static final FunctionDescriptor GetWindowContext$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetWindowContext$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IOleInPlaceSiteVtbl.GetWindowContext$FUNC, false
    );
    public interface GetWindowContext {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5);
        static MemoryAddress allocate(GetWindowContext fi) {
            return RuntimeHelper.upcallStub(GetWindowContext.class, fi, IOleInPlaceSiteVtbl.GetWindowContext$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetWindowContext fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetWindowContext.class, fi, IOleInPlaceSiteVtbl.GetWindowContext$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetWindowContext ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.GetWindowContext$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetWindowContext$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetWindowContext")));
    public static VarHandle GetWindowContext$VH() {
        return IOleInPlaceSiteVtbl.GetWindowContext$VH;
    }
    public static MemoryAddress GetWindowContext$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.GetWindowContext$VH.get(seg);
    }
    public static void GetWindowContext$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceSiteVtbl.GetWindowContext$VH.set(seg, x);
    }
    public static MemoryAddress GetWindowContext$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.GetWindowContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetWindowContext$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceSiteVtbl.GetWindowContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetWindowContext GetWindowContext (MemorySegment segment) {
        return GetWindowContext.ofAddress(GetWindowContext$get(segment));
    }
    static final FunctionDescriptor Scroll$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        MemoryLayout.structLayout(
            C_LONG.withName("cx"),
            C_LONG.withName("cy")
        ).withName("tagSIZE")
    );
    static final MethodHandle Scroll$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        IOleInPlaceSiteVtbl.Scroll$FUNC, false
    );
    public interface Scroll {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1);
        static MemoryAddress allocate(Scroll fi) {
            return RuntimeHelper.upcallStub(Scroll.class, fi, IOleInPlaceSiteVtbl.Scroll$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I");
        }
        static MemoryAddress allocate(Scroll fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Scroll.class, fi, IOleInPlaceSiteVtbl.Scroll$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I", scope);
        }
        static Scroll ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.Scroll$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Scroll$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Scroll")));
    public static VarHandle Scroll$VH() {
        return IOleInPlaceSiteVtbl.Scroll$VH;
    }
    public static MemoryAddress Scroll$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.Scroll$VH.get(seg);
    }
    public static void Scroll$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceSiteVtbl.Scroll$VH.set(seg, x);
    }
    public static MemoryAddress Scroll$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.Scroll$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Scroll$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceSiteVtbl.Scroll$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Scroll Scroll (MemorySegment segment) {
        return Scroll.ofAddress(Scroll$get(segment));
    }
    static final FunctionDescriptor OnUIDeactivate$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT
    );
    static final MethodHandle OnUIDeactivate$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        IOleInPlaceSiteVtbl.OnUIDeactivate$FUNC, false
    );
    public interface OnUIDeactivate {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
        static MemoryAddress allocate(OnUIDeactivate fi) {
            return RuntimeHelper.upcallStub(OnUIDeactivate.class, fi, IOleInPlaceSiteVtbl.OnUIDeactivate$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(OnUIDeactivate fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(OnUIDeactivate.class, fi, IOleInPlaceSiteVtbl.OnUIDeactivate$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static OnUIDeactivate ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.OnUIDeactivate$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnUIDeactivate$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("OnUIDeactivate")));
    public static VarHandle OnUIDeactivate$VH() {
        return IOleInPlaceSiteVtbl.OnUIDeactivate$VH;
    }
    public static MemoryAddress OnUIDeactivate$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.OnUIDeactivate$VH.get(seg);
    }
    public static void OnUIDeactivate$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceSiteVtbl.OnUIDeactivate$VH.set(seg, x);
    }
    public static MemoryAddress OnUIDeactivate$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.OnUIDeactivate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnUIDeactivate$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceSiteVtbl.OnUIDeactivate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnUIDeactivate OnUIDeactivate (MemorySegment segment) {
        return OnUIDeactivate.ofAddress(OnUIDeactivate$get(segment));
    }
    static final FunctionDescriptor OnInPlaceDeactivate$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle OnInPlaceDeactivate$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IOleInPlaceSiteVtbl.OnInPlaceDeactivate$FUNC, false
    );
    public interface OnInPlaceDeactivate {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(OnInPlaceDeactivate fi) {
            return RuntimeHelper.upcallStub(OnInPlaceDeactivate.class, fi, IOleInPlaceSiteVtbl.OnInPlaceDeactivate$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(OnInPlaceDeactivate fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(OnInPlaceDeactivate.class, fi, IOleInPlaceSiteVtbl.OnInPlaceDeactivate$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static OnInPlaceDeactivate ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.OnInPlaceDeactivate$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnInPlaceDeactivate$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("OnInPlaceDeactivate")));
    public static VarHandle OnInPlaceDeactivate$VH() {
        return IOleInPlaceSiteVtbl.OnInPlaceDeactivate$VH;
    }
    public static MemoryAddress OnInPlaceDeactivate$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.OnInPlaceDeactivate$VH.get(seg);
    }
    public static void OnInPlaceDeactivate$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceSiteVtbl.OnInPlaceDeactivate$VH.set(seg, x);
    }
    public static MemoryAddress OnInPlaceDeactivate$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.OnInPlaceDeactivate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnInPlaceDeactivate$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceSiteVtbl.OnInPlaceDeactivate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnInPlaceDeactivate OnInPlaceDeactivate (MemorySegment segment) {
        return OnInPlaceDeactivate.ofAddress(OnInPlaceDeactivate$get(segment));
    }
    static final FunctionDescriptor DiscardUndoState$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle DiscardUndoState$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IOleInPlaceSiteVtbl.DiscardUndoState$FUNC, false
    );
    public interface DiscardUndoState {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(DiscardUndoState fi) {
            return RuntimeHelper.upcallStub(DiscardUndoState.class, fi, IOleInPlaceSiteVtbl.DiscardUndoState$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(DiscardUndoState fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(DiscardUndoState.class, fi, IOleInPlaceSiteVtbl.DiscardUndoState$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static DiscardUndoState ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.DiscardUndoState$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DiscardUndoState$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("DiscardUndoState")));
    public static VarHandle DiscardUndoState$VH() {
        return IOleInPlaceSiteVtbl.DiscardUndoState$VH;
    }
    public static MemoryAddress DiscardUndoState$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.DiscardUndoState$VH.get(seg);
    }
    public static void DiscardUndoState$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceSiteVtbl.DiscardUndoState$VH.set(seg, x);
    }
    public static MemoryAddress DiscardUndoState$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.DiscardUndoState$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DiscardUndoState$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceSiteVtbl.DiscardUndoState$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DiscardUndoState DiscardUndoState (MemorySegment segment) {
        return DiscardUndoState.ofAddress(DiscardUndoState$get(segment));
    }
    static final FunctionDescriptor DeactivateAndUndo$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle DeactivateAndUndo$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IOleInPlaceSiteVtbl.DeactivateAndUndo$FUNC, false
    );
    public interface DeactivateAndUndo {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(DeactivateAndUndo fi) {
            return RuntimeHelper.upcallStub(DeactivateAndUndo.class, fi, IOleInPlaceSiteVtbl.DeactivateAndUndo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(DeactivateAndUndo fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(DeactivateAndUndo.class, fi, IOleInPlaceSiteVtbl.DeactivateAndUndo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static DeactivateAndUndo ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.DeactivateAndUndo$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DeactivateAndUndo$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("DeactivateAndUndo")));
    public static VarHandle DeactivateAndUndo$VH() {
        return IOleInPlaceSiteVtbl.DeactivateAndUndo$VH;
    }
    public static MemoryAddress DeactivateAndUndo$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.DeactivateAndUndo$VH.get(seg);
    }
    public static void DeactivateAndUndo$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceSiteVtbl.DeactivateAndUndo$VH.set(seg, x);
    }
    public static MemoryAddress DeactivateAndUndo$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.DeactivateAndUndo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeactivateAndUndo$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceSiteVtbl.DeactivateAndUndo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeactivateAndUndo DeactivateAndUndo (MemorySegment segment) {
        return DeactivateAndUndo.ofAddress(DeactivateAndUndo$get(segment));
    }
    static final FunctionDescriptor OnPosRectChange$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle OnPosRectChange$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IOleInPlaceSiteVtbl.OnPosRectChange$FUNC, false
    );
    public interface OnPosRectChange {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(OnPosRectChange fi) {
            return RuntimeHelper.upcallStub(OnPosRectChange.class, fi, IOleInPlaceSiteVtbl.OnPosRectChange$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(OnPosRectChange fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(OnPosRectChange.class, fi, IOleInPlaceSiteVtbl.OnPosRectChange$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static OnPosRectChange ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.OnPosRectChange$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnPosRectChange$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("OnPosRectChange")));
    public static VarHandle OnPosRectChange$VH() {
        return IOleInPlaceSiteVtbl.OnPosRectChange$VH;
    }
    public static MemoryAddress OnPosRectChange$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.OnPosRectChange$VH.get(seg);
    }
    public static void OnPosRectChange$set( MemorySegment seg, MemoryAddress x) {
        IOleInPlaceSiteVtbl.OnPosRectChange$VH.set(seg, x);
    }
    public static MemoryAddress OnPosRectChange$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IOleInPlaceSiteVtbl.OnPosRectChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnPosRectChange$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleInPlaceSiteVtbl.OnPosRectChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnPosRectChange OnPosRectChange (MemorySegment segment) {
        return OnPosRectChange.ofAddress(OnPosRectChange$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


