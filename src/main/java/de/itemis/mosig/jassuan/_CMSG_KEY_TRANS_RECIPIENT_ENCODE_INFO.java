// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("cbSize"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.structLayout(
            C_POINTER.withName("pszObjId"),
            MemoryLayout.structLayout(
                C_LONG.withName("cbData"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("pbData")
            ).withName("Parameters")
        ).withName("KeyEncryptionAlgorithm"),
        C_POINTER.withName("pvKeyEncryptionAuxInfo"),
        C_LONG_LONG.withName("hCryptProv"),
        MemoryLayout.structLayout(
            C_LONG.withName("cbData"),
            MemoryLayout.paddingLayout(32),
            C_POINTER.withName("pbData"),
            C_LONG.withName("cUnusedBits"),
            MemoryLayout.paddingLayout(32)
        ).withName("RecipientPublicKey"),
        MemoryLayout.structLayout(
            C_LONG.withName("dwIdChoice"),
            MemoryLayout.paddingLayout(32),
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    MemoryLayout.structLayout(
                        C_LONG.withName("cbData"),
                        MemoryLayout.paddingLayout(32),
                        C_POINTER.withName("pbData")
                    ).withName("Issuer"),
                    MemoryLayout.structLayout(
                        C_LONG.withName("cbData"),
                        MemoryLayout.paddingLayout(32),
                        C_POINTER.withName("pbData")
                    ).withName("SerialNumber")
                ).withName("IssuerSerialNumber"),
                MemoryLayout.structLayout(
                    C_LONG.withName("cbData"),
                    MemoryLayout.paddingLayout(32),
                    C_POINTER.withName("pbData")
                ).withName("KeyId"),
                MemoryLayout.structLayout(
                    C_LONG.withName("cbData"),
                    MemoryLayout.paddingLayout(32),
                    C_POINTER.withName("pbData")
                ).withName("HashId")
            ).withName("$anon$0")
        ).withName("RecipientId")
    ).withName("_CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO");
    public static MemoryLayout $LAYOUT() {
        return _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)_CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)_CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment KeyEncryptionAlgorithm$slice(MemorySegment seg) {
        return seg.asSlice(8, 24);
    }
    static final VarHandle pvKeyEncryptionAuxInfo$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pvKeyEncryptionAuxInfo")));
    public static VarHandle pvKeyEncryptionAuxInfo$VH() {
        return _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO.pvKeyEncryptionAuxInfo$VH;
    }
    public static MemoryAddress pvKeyEncryptionAuxInfo$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO.pvKeyEncryptionAuxInfo$VH.get(seg);
    }
    public static void pvKeyEncryptionAuxInfo$set( MemorySegment seg, MemoryAddress x) {
        _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO.pvKeyEncryptionAuxInfo$VH.set(seg, x);
    }
    public static MemoryAddress pvKeyEncryptionAuxInfo$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO.pvKeyEncryptionAuxInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pvKeyEncryptionAuxInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO.pvKeyEncryptionAuxInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hCryptProv$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hCryptProv"));
    public static VarHandle hCryptProv$VH() {
        return _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO.hCryptProv$VH;
    }
    public static long hCryptProv$get(MemorySegment seg) {
        return (long)_CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO.hCryptProv$VH.get(seg);
    }
    public static void hCryptProv$set( MemorySegment seg, long x) {
        _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO.hCryptProv$VH.set(seg, x);
    }
    public static long hCryptProv$get(MemorySegment seg, long index) {
        return (long)_CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO.hCryptProv$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hCryptProv$set(MemorySegment seg, long index, long x) {
        _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO.hCryptProv$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment RecipientPublicKey$slice(MemorySegment seg) {
        return seg.asSlice(48, 24);
    }
    public static MemorySegment RecipientId$slice(MemorySegment seg) {
        return seg.asSlice(72, 40);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


