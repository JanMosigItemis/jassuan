// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IStorageVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("CreateStream"),
        C_POINTER.withName("OpenStream"),
        C_POINTER.withName("CreateStorage"),
        C_POINTER.withName("OpenStorage"),
        C_POINTER.withName("CopyTo"),
        C_POINTER.withName("MoveElementTo"),
        C_POINTER.withName("Commit"),
        C_POINTER.withName("Revert"),
        C_POINTER.withName("EnumElements"),
        C_POINTER.withName("DestroyElement"),
        C_POINTER.withName("RenameElement"),
        C_POINTER.withName("SetElementTimes"),
        C_POINTER.withName("SetClass"),
        C_POINTER.withName("SetStateBits"),
        C_POINTER.withName("Stat")
    ).withName("IStorageVtbl");
    public static MemoryLayout $LAYOUT() {
        return IStorageVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IStorageVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IStorageVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IStorageVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IStorageVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IStorageVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IStorageVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IStorageVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IStorageVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IStorageVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IStorageVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IStorageVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IStorageVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IStorageVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IStorageVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IStorageVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IStorageVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IStorageVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IStorageVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IStorageVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IStorageVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IStorageVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor CreateStream$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle CreateStream$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)I",
        IStorageVtbl.CreateStream$FUNC, false
    );
    public interface CreateStream {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, int x3, int x4, jdk.incubator.foreign.MemoryAddress x5);
        static MemoryAddress allocate(CreateStream fi) {
            return RuntimeHelper.upcallStub(CreateStream.class, fi, IStorageVtbl.CreateStream$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(CreateStream fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(CreateStream.class, fi, IStorageVtbl.CreateStream$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static CreateStream ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, int x3, int x4, jdk.incubator.foreign.MemoryAddress x5) -> {
                try {
                    return (int)IStorageVtbl.CreateStream$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateStream$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("CreateStream")));
    public static VarHandle CreateStream$VH() {
        return IStorageVtbl.CreateStream$VH;
    }
    public static MemoryAddress CreateStream$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.CreateStream$VH.get(seg);
    }
    public static void CreateStream$set( MemorySegment seg, MemoryAddress x) {
        IStorageVtbl.CreateStream$VH.set(seg, x);
    }
    public static MemoryAddress CreateStream$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.CreateStream$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateStream$set(MemorySegment seg, long index, MemoryAddress x) {
        IStorageVtbl.CreateStream$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateStream CreateStream (MemorySegment segment) {
        return CreateStream.ofAddress(CreateStream$get(segment));
    }
    static final FunctionDescriptor OpenStream$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle OpenStream$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        IStorageVtbl.OpenStream$FUNC, false
    );
    public interface OpenStream {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, int x4, jdk.incubator.foreign.MemoryAddress x5);
        static MemoryAddress allocate(OpenStream fi) {
            return RuntimeHelper.upcallStub(OpenStream.class, fi, IStorageVtbl.OpenStream$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(OpenStream fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(OpenStream.class, fi, IStorageVtbl.OpenStream$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static OpenStream ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, int x4, jdk.incubator.foreign.MemoryAddress x5) -> {
                try {
                    return (int)IStorageVtbl.OpenStream$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OpenStream$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("OpenStream")));
    public static VarHandle OpenStream$VH() {
        return IStorageVtbl.OpenStream$VH;
    }
    public static MemoryAddress OpenStream$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.OpenStream$VH.get(seg);
    }
    public static void OpenStream$set( MemorySegment seg, MemoryAddress x) {
        IStorageVtbl.OpenStream$VH.set(seg, x);
    }
    public static MemoryAddress OpenStream$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.OpenStream$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OpenStream$set(MemorySegment seg, long index, MemoryAddress x) {
        IStorageVtbl.OpenStream$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OpenStream OpenStream (MemorySegment segment) {
        return OpenStream.ofAddress(OpenStream$get(segment));
    }
    static final FunctionDescriptor CreateStorage$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle CreateStorage$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)I",
        IStorageVtbl.CreateStorage$FUNC, false
    );
    public interface CreateStorage {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, int x3, int x4, jdk.incubator.foreign.MemoryAddress x5);
        static MemoryAddress allocate(CreateStorage fi) {
            return RuntimeHelper.upcallStub(CreateStorage.class, fi, IStorageVtbl.CreateStorage$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(CreateStorage fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(CreateStorage.class, fi, IStorageVtbl.CreateStorage$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static CreateStorage ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, int x3, int x4, jdk.incubator.foreign.MemoryAddress x5) -> {
                try {
                    return (int)IStorageVtbl.CreateStorage$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateStorage$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("CreateStorage")));
    public static VarHandle CreateStorage$VH() {
        return IStorageVtbl.CreateStorage$VH;
    }
    public static MemoryAddress CreateStorage$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.CreateStorage$VH.get(seg);
    }
    public static void CreateStorage$set( MemorySegment seg, MemoryAddress x) {
        IStorageVtbl.CreateStorage$VH.set(seg, x);
    }
    public static MemoryAddress CreateStorage$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.CreateStorage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateStorage$set(MemorySegment seg, long index, MemoryAddress x) {
        IStorageVtbl.CreateStorage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateStorage CreateStorage (MemorySegment segment) {
        return CreateStorage.ofAddress(CreateStorage$get(segment));
    }
    static final FunctionDescriptor OpenStorage$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle OpenStorage$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        IStorageVtbl.OpenStorage$FUNC, false
    );
    public interface OpenStorage {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4, int x5, jdk.incubator.foreign.MemoryAddress x6);
        static MemoryAddress allocate(OpenStorage fi) {
            return RuntimeHelper.upcallStub(OpenStorage.class, fi, IStorageVtbl.OpenStorage$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(OpenStorage fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(OpenStorage.class, fi, IStorageVtbl.OpenStorage$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static OpenStorage ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4, int x5, jdk.incubator.foreign.MemoryAddress x6) -> {
                try {
                    return (int)IStorageVtbl.OpenStorage$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OpenStorage$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("OpenStorage")));
    public static VarHandle OpenStorage$VH() {
        return IStorageVtbl.OpenStorage$VH;
    }
    public static MemoryAddress OpenStorage$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.OpenStorage$VH.get(seg);
    }
    public static void OpenStorage$set( MemorySegment seg, MemoryAddress x) {
        IStorageVtbl.OpenStorage$VH.set(seg, x);
    }
    public static MemoryAddress OpenStorage$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.OpenStorage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OpenStorage$set(MemorySegment seg, long index, MemoryAddress x) {
        IStorageVtbl.OpenStorage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OpenStorage OpenStorage (MemorySegment segment) {
        return OpenStorage.ofAddress(OpenStorage$get(segment));
    }
    static final FunctionDescriptor CopyTo$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle CopyTo$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IStorageVtbl.CopyTo$FUNC, false
    );
    public interface CopyTo {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4);
        static MemoryAddress allocate(CopyTo fi) {
            return RuntimeHelper.upcallStub(CopyTo.class, fi, IStorageVtbl.CopyTo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(CopyTo fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(CopyTo.class, fi, IStorageVtbl.CopyTo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static CopyTo ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4) -> {
                try {
                    return (int)IStorageVtbl.CopyTo$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CopyTo$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("CopyTo")));
    public static VarHandle CopyTo$VH() {
        return IStorageVtbl.CopyTo$VH;
    }
    public static MemoryAddress CopyTo$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.CopyTo$VH.get(seg);
    }
    public static void CopyTo$set( MemorySegment seg, MemoryAddress x) {
        IStorageVtbl.CopyTo$VH.set(seg, x);
    }
    public static MemoryAddress CopyTo$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.CopyTo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CopyTo$set(MemorySegment seg, long index, MemoryAddress x) {
        IStorageVtbl.CopyTo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CopyTo CopyTo (MemorySegment segment) {
        return CopyTo.ofAddress(CopyTo$get(segment));
    }
    static final FunctionDescriptor MoveElementTo$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle MoveElementTo$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        IStorageVtbl.MoveElementTo$FUNC, false
    );
    public interface MoveElementTo {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, int x4);
        static MemoryAddress allocate(MoveElementTo fi) {
            return RuntimeHelper.upcallStub(MoveElementTo.class, fi, IStorageVtbl.MoveElementTo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(MoveElementTo fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(MoveElementTo.class, fi, IStorageVtbl.MoveElementTo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static MoveElementTo ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, int x4) -> {
                try {
                    return (int)IStorageVtbl.MoveElementTo$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle MoveElementTo$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("MoveElementTo")));
    public static VarHandle MoveElementTo$VH() {
        return IStorageVtbl.MoveElementTo$VH;
    }
    public static MemoryAddress MoveElementTo$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.MoveElementTo$VH.get(seg);
    }
    public static void MoveElementTo$set( MemorySegment seg, MemoryAddress x) {
        IStorageVtbl.MoveElementTo$VH.set(seg, x);
    }
    public static MemoryAddress MoveElementTo$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.MoveElementTo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MoveElementTo$set(MemorySegment seg, long index, MemoryAddress x) {
        IStorageVtbl.MoveElementTo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MoveElementTo MoveElementTo (MemorySegment segment) {
        return MoveElementTo.ofAddress(MoveElementTo$get(segment));
    }
    static final FunctionDescriptor Commit$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle Commit$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        IStorageVtbl.Commit$FUNC, false
    );
    public interface Commit {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
        static MemoryAddress allocate(Commit fi) {
            return RuntimeHelper.upcallStub(Commit.class, fi, IStorageVtbl.Commit$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(Commit fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Commit.class, fi, IStorageVtbl.Commit$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static Commit ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1) -> {
                try {
                    return (int)IStorageVtbl.Commit$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Commit$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Commit")));
    public static VarHandle Commit$VH() {
        return IStorageVtbl.Commit$VH;
    }
    public static MemoryAddress Commit$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.Commit$VH.get(seg);
    }
    public static void Commit$set( MemorySegment seg, MemoryAddress x) {
        IStorageVtbl.Commit$VH.set(seg, x);
    }
    public static MemoryAddress Commit$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.Commit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Commit$set(MemorySegment seg, long index, MemoryAddress x) {
        IStorageVtbl.Commit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Commit Commit (MemorySegment segment) {
        return Commit.ofAddress(Commit$get(segment));
    }
    static final FunctionDescriptor Revert$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Revert$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IStorageVtbl.Revert$FUNC, false
    );
    public interface Revert {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Revert fi) {
            return RuntimeHelper.upcallStub(Revert.class, fi, IStorageVtbl.Revert$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Revert fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Revert.class, fi, IStorageVtbl.Revert$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Revert ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IStorageVtbl.Revert$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Revert$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Revert")));
    public static VarHandle Revert$VH() {
        return IStorageVtbl.Revert$VH;
    }
    public static MemoryAddress Revert$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.Revert$VH.get(seg);
    }
    public static void Revert$set( MemorySegment seg, MemoryAddress x) {
        IStorageVtbl.Revert$VH.set(seg, x);
    }
    public static MemoryAddress Revert$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.Revert$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Revert$set(MemorySegment seg, long index, MemoryAddress x) {
        IStorageVtbl.Revert$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Revert Revert (MemorySegment segment) {
        return Revert.ofAddress(Revert$get(segment));
    }
    static final FunctionDescriptor EnumElements$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle EnumElements$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        IStorageVtbl.EnumElements$FUNC, false
    );
    public interface EnumElements {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4);
        static MemoryAddress allocate(EnumElements fi) {
            return RuntimeHelper.upcallStub(EnumElements.class, fi, IStorageVtbl.EnumElements$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(EnumElements fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(EnumElements.class, fi, IStorageVtbl.EnumElements$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static EnumElements ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4) -> {
                try {
                    return (int)IStorageVtbl.EnumElements$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle EnumElements$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnumElements")));
    public static VarHandle EnumElements$VH() {
        return IStorageVtbl.EnumElements$VH;
    }
    public static MemoryAddress EnumElements$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.EnumElements$VH.get(seg);
    }
    public static void EnumElements$set( MemorySegment seg, MemoryAddress x) {
        IStorageVtbl.EnumElements$VH.set(seg, x);
    }
    public static MemoryAddress EnumElements$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.EnumElements$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EnumElements$set(MemorySegment seg, long index, MemoryAddress x) {
        IStorageVtbl.EnumElements$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnumElements EnumElements (MemorySegment segment) {
        return EnumElements.ofAddress(EnumElements$get(segment));
    }
    static final FunctionDescriptor DestroyElement$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle DestroyElement$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IStorageVtbl.DestroyElement$FUNC, false
    );
    public interface DestroyElement {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(DestroyElement fi) {
            return RuntimeHelper.upcallStub(DestroyElement.class, fi, IStorageVtbl.DestroyElement$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(DestroyElement fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(DestroyElement.class, fi, IStorageVtbl.DestroyElement$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static DestroyElement ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IStorageVtbl.DestroyElement$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DestroyElement$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("DestroyElement")));
    public static VarHandle DestroyElement$VH() {
        return IStorageVtbl.DestroyElement$VH;
    }
    public static MemoryAddress DestroyElement$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.DestroyElement$VH.get(seg);
    }
    public static void DestroyElement$set( MemorySegment seg, MemoryAddress x) {
        IStorageVtbl.DestroyElement$VH.set(seg, x);
    }
    public static MemoryAddress DestroyElement$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.DestroyElement$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DestroyElement$set(MemorySegment seg, long index, MemoryAddress x) {
        IStorageVtbl.DestroyElement$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DestroyElement DestroyElement (MemorySegment segment) {
        return DestroyElement.ofAddress(DestroyElement$get(segment));
    }
    static final FunctionDescriptor RenameElement$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle RenameElement$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IStorageVtbl.RenameElement$FUNC, false
    );
    public interface RenameElement {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(RenameElement fi) {
            return RuntimeHelper.upcallStub(RenameElement.class, fi, IStorageVtbl.RenameElement$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(RenameElement fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(RenameElement.class, fi, IStorageVtbl.RenameElement$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static RenameElement ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IStorageVtbl.RenameElement$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RenameElement$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("RenameElement")));
    public static VarHandle RenameElement$VH() {
        return IStorageVtbl.RenameElement$VH;
    }
    public static MemoryAddress RenameElement$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.RenameElement$VH.get(seg);
    }
    public static void RenameElement$set( MemorySegment seg, MemoryAddress x) {
        IStorageVtbl.RenameElement$VH.set(seg, x);
    }
    public static MemoryAddress RenameElement$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.RenameElement$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RenameElement$set(MemorySegment seg, long index, MemoryAddress x) {
        IStorageVtbl.RenameElement$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RenameElement RenameElement (MemorySegment segment) {
        return RenameElement.ofAddress(RenameElement$get(segment));
    }
    static final FunctionDescriptor SetElementTimes$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle SetElementTimes$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IStorageVtbl.SetElementTimes$FUNC, false
    );
    public interface SetElementTimes {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4);
        static MemoryAddress allocate(SetElementTimes fi) {
            return RuntimeHelper.upcallStub(SetElementTimes.class, fi, IStorageVtbl.SetElementTimes$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SetElementTimes fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetElementTimes.class, fi, IStorageVtbl.SetElementTimes$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SetElementTimes ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4) -> {
                try {
                    return (int)IStorageVtbl.SetElementTimes$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetElementTimes$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetElementTimes")));
    public static VarHandle SetElementTimes$VH() {
        return IStorageVtbl.SetElementTimes$VH;
    }
    public static MemoryAddress SetElementTimes$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.SetElementTimes$VH.get(seg);
    }
    public static void SetElementTimes$set( MemorySegment seg, MemoryAddress x) {
        IStorageVtbl.SetElementTimes$VH.set(seg, x);
    }
    public static MemoryAddress SetElementTimes$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.SetElementTimes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetElementTimes$set(MemorySegment seg, long index, MemoryAddress x) {
        IStorageVtbl.SetElementTimes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetElementTimes SetElementTimes (MemorySegment segment) {
        return SetElementTimes.ofAddress(SetElementTimes$get(segment));
    }
    static final FunctionDescriptor SetClass$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle SetClass$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IStorageVtbl.SetClass$FUNC, false
    );
    public interface SetClass {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(SetClass fi) {
            return RuntimeHelper.upcallStub(SetClass.class, fi, IStorageVtbl.SetClass$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SetClass fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetClass.class, fi, IStorageVtbl.SetClass$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SetClass ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IStorageVtbl.SetClass$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetClass$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetClass")));
    public static VarHandle SetClass$VH() {
        return IStorageVtbl.SetClass$VH;
    }
    public static MemoryAddress SetClass$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.SetClass$VH.get(seg);
    }
    public static void SetClass$set( MemorySegment seg, MemoryAddress x) {
        IStorageVtbl.SetClass$VH.set(seg, x);
    }
    public static MemoryAddress SetClass$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.SetClass$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetClass$set(MemorySegment seg, long index, MemoryAddress x) {
        IStorageVtbl.SetClass$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetClass SetClass (MemorySegment segment) {
        return SetClass.ofAddress(SetClass$get(segment));
    }
    static final FunctionDescriptor SetStateBits$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final MethodHandle SetStateBits$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        IStorageVtbl.SetStateBits$FUNC, false
    );
    public interface SetStateBits {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2);
        static MemoryAddress allocate(SetStateBits fi) {
            return RuntimeHelper.upcallStub(SetStateBits.class, fi, IStorageVtbl.SetStateBits$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)I");
        }
        static MemoryAddress allocate(SetStateBits fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetStateBits.class, fi, IStorageVtbl.SetStateBits$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)I", scope);
        }
        static SetStateBits ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2) -> {
                try {
                    return (int)IStorageVtbl.SetStateBits$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetStateBits$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetStateBits")));
    public static VarHandle SetStateBits$VH() {
        return IStorageVtbl.SetStateBits$VH;
    }
    public static MemoryAddress SetStateBits$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.SetStateBits$VH.get(seg);
    }
    public static void SetStateBits$set( MemorySegment seg, MemoryAddress x) {
        IStorageVtbl.SetStateBits$VH.set(seg, x);
    }
    public static MemoryAddress SetStateBits$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.SetStateBits$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetStateBits$set(MemorySegment seg, long index, MemoryAddress x) {
        IStorageVtbl.SetStateBits$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetStateBits SetStateBits (MemorySegment segment) {
        return SetStateBits.ofAddress(SetStateBits$get(segment));
    }
    static final FunctionDescriptor Stat$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle Stat$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        IStorageVtbl.Stat$FUNC, false
    );
    public interface Stat {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2);
        static MemoryAddress allocate(Stat fi) {
            return RuntimeHelper.upcallStub(Stat.class, fi, IStorageVtbl.Stat$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(Stat fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Stat.class, fi, IStorageVtbl.Stat$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static Stat ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2) -> {
                try {
                    return (int)IStorageVtbl.Stat$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Stat$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Stat")));
    public static VarHandle Stat$VH() {
        return IStorageVtbl.Stat$VH;
    }
    public static MemoryAddress Stat$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.Stat$VH.get(seg);
    }
    public static void Stat$set( MemorySegment seg, MemoryAddress x) {
        IStorageVtbl.Stat$VH.set(seg, x);
    }
    public static MemoryAddress Stat$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IStorageVtbl.Stat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Stat$set(MemorySegment seg, long index, MemoryAddress x) {
        IStorageVtbl.Stat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Stat Stat (MemorySegment segment) {
        return Stat.ofAddress(Stat$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


