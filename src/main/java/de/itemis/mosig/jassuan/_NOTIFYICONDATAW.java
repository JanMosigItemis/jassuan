// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _NOTIFYICONDATAW {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("cbSize"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("hWnd"),
        C_INT.withName("uID"),
        C_INT.withName("uFlags"),
        C_INT.withName("uCallbackMessage"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("hIcon"),
        MemoryLayout.sequenceLayout(128, C_SHORT).withName("szTip"),
        C_LONG.withName("dwState"),
        C_LONG.withName("dwStateMask"),
        MemoryLayout.sequenceLayout(256, C_SHORT).withName("szInfo"),
        MemoryLayout.unionLayout(
            C_INT.withName("uTimeout"),
            C_INT.withName("uVersion")
        ).withName("$anon$0"),
        MemoryLayout.sequenceLayout(64, C_SHORT).withName("szInfoTitle"),
        C_LONG.withName("dwInfoFlags"),
        MemoryLayout.structLayout(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
        ).withName("guidItem"),
        C_POINTER.withName("hBalloonIcon")
    ).withName("_NOTIFYICONDATAW");
    public static MemoryLayout $LAYOUT() {
        return _NOTIFYICONDATAW.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return _NOTIFYICONDATAW.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)_NOTIFYICONDATAW.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        _NOTIFYICONDATAW.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)_NOTIFYICONDATAW.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        _NOTIFYICONDATAW.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hWnd$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hWnd")));
    public static VarHandle hWnd$VH() {
        return _NOTIFYICONDATAW.hWnd$VH;
    }
    public static MemoryAddress hWnd$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_NOTIFYICONDATAW.hWnd$VH.get(seg);
    }
    public static void hWnd$set( MemorySegment seg, MemoryAddress x) {
        _NOTIFYICONDATAW.hWnd$VH.set(seg, x);
    }
    public static MemoryAddress hWnd$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_NOTIFYICONDATAW.hWnd$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hWnd$set(MemorySegment seg, long index, MemoryAddress x) {
        _NOTIFYICONDATAW.hWnd$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle uID$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("uID"));
    public static VarHandle uID$VH() {
        return _NOTIFYICONDATAW.uID$VH;
    }
    public static int uID$get(MemorySegment seg) {
        return (int)_NOTIFYICONDATAW.uID$VH.get(seg);
    }
    public static void uID$set( MemorySegment seg, int x) {
        _NOTIFYICONDATAW.uID$VH.set(seg, x);
    }
    public static int uID$get(MemorySegment seg, long index) {
        return (int)_NOTIFYICONDATAW.uID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void uID$set(MemorySegment seg, long index, int x) {
        _NOTIFYICONDATAW.uID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle uFlags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("uFlags"));
    public static VarHandle uFlags$VH() {
        return _NOTIFYICONDATAW.uFlags$VH;
    }
    public static int uFlags$get(MemorySegment seg) {
        return (int)_NOTIFYICONDATAW.uFlags$VH.get(seg);
    }
    public static void uFlags$set( MemorySegment seg, int x) {
        _NOTIFYICONDATAW.uFlags$VH.set(seg, x);
    }
    public static int uFlags$get(MemorySegment seg, long index) {
        return (int)_NOTIFYICONDATAW.uFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void uFlags$set(MemorySegment seg, long index, int x) {
        _NOTIFYICONDATAW.uFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle uCallbackMessage$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("uCallbackMessage"));
    public static VarHandle uCallbackMessage$VH() {
        return _NOTIFYICONDATAW.uCallbackMessage$VH;
    }
    public static int uCallbackMessage$get(MemorySegment seg) {
        return (int)_NOTIFYICONDATAW.uCallbackMessage$VH.get(seg);
    }
    public static void uCallbackMessage$set( MemorySegment seg, int x) {
        _NOTIFYICONDATAW.uCallbackMessage$VH.set(seg, x);
    }
    public static int uCallbackMessage$get(MemorySegment seg, long index) {
        return (int)_NOTIFYICONDATAW.uCallbackMessage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void uCallbackMessage$set(MemorySegment seg, long index, int x) {
        _NOTIFYICONDATAW.uCallbackMessage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hIcon$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hIcon")));
    public static VarHandle hIcon$VH() {
        return _NOTIFYICONDATAW.hIcon$VH;
    }
    public static MemoryAddress hIcon$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_NOTIFYICONDATAW.hIcon$VH.get(seg);
    }
    public static void hIcon$set( MemorySegment seg, MemoryAddress x) {
        _NOTIFYICONDATAW.hIcon$VH.set(seg, x);
    }
    public static MemoryAddress hIcon$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_NOTIFYICONDATAW.hIcon$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hIcon$set(MemorySegment seg, long index, MemoryAddress x) {
        _NOTIFYICONDATAW.hIcon$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment szTip$slice(MemorySegment seg) {
        return seg.asSlice(40, 256);
    }
    static final VarHandle dwState$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwState"));
    public static VarHandle dwState$VH() {
        return _NOTIFYICONDATAW.dwState$VH;
    }
    public static int dwState$get(MemorySegment seg) {
        return (int)_NOTIFYICONDATAW.dwState$VH.get(seg);
    }
    public static void dwState$set( MemorySegment seg, int x) {
        _NOTIFYICONDATAW.dwState$VH.set(seg, x);
    }
    public static int dwState$get(MemorySegment seg, long index) {
        return (int)_NOTIFYICONDATAW.dwState$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwState$set(MemorySegment seg, long index, int x) {
        _NOTIFYICONDATAW.dwState$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwStateMask$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwStateMask"));
    public static VarHandle dwStateMask$VH() {
        return _NOTIFYICONDATAW.dwStateMask$VH;
    }
    public static int dwStateMask$get(MemorySegment seg) {
        return (int)_NOTIFYICONDATAW.dwStateMask$VH.get(seg);
    }
    public static void dwStateMask$set( MemorySegment seg, int x) {
        _NOTIFYICONDATAW.dwStateMask$VH.set(seg, x);
    }
    public static int dwStateMask$get(MemorySegment seg, long index) {
        return (int)_NOTIFYICONDATAW.dwStateMask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwStateMask$set(MemorySegment seg, long index, int x) {
        _NOTIFYICONDATAW.dwStateMask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment szInfo$slice(MemorySegment seg) {
        return seg.asSlice(304, 512);
    }
    static final VarHandle uTimeout$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("uTimeout"));
    public static VarHandle uTimeout$VH() {
        return _NOTIFYICONDATAW.uTimeout$VH;
    }
    public static int uTimeout$get(MemorySegment seg) {
        return (int)_NOTIFYICONDATAW.uTimeout$VH.get(seg);
    }
    public static void uTimeout$set( MemorySegment seg, int x) {
        _NOTIFYICONDATAW.uTimeout$VH.set(seg, x);
    }
    public static int uTimeout$get(MemorySegment seg, long index) {
        return (int)_NOTIFYICONDATAW.uTimeout$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void uTimeout$set(MemorySegment seg, long index, int x) {
        _NOTIFYICONDATAW.uTimeout$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle uVersion$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("uVersion"));
    public static VarHandle uVersion$VH() {
        return _NOTIFYICONDATAW.uVersion$VH;
    }
    public static int uVersion$get(MemorySegment seg) {
        return (int)_NOTIFYICONDATAW.uVersion$VH.get(seg);
    }
    public static void uVersion$set( MemorySegment seg, int x) {
        _NOTIFYICONDATAW.uVersion$VH.set(seg, x);
    }
    public static int uVersion$get(MemorySegment seg, long index) {
        return (int)_NOTIFYICONDATAW.uVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void uVersion$set(MemorySegment seg, long index, int x) {
        _NOTIFYICONDATAW.uVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment szInfoTitle$slice(MemorySegment seg) {
        return seg.asSlice(820, 128);
    }
    static final VarHandle dwInfoFlags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwInfoFlags"));
    public static VarHandle dwInfoFlags$VH() {
        return _NOTIFYICONDATAW.dwInfoFlags$VH;
    }
    public static int dwInfoFlags$get(MemorySegment seg) {
        return (int)_NOTIFYICONDATAW.dwInfoFlags$VH.get(seg);
    }
    public static void dwInfoFlags$set( MemorySegment seg, int x) {
        _NOTIFYICONDATAW.dwInfoFlags$VH.set(seg, x);
    }
    public static int dwInfoFlags$get(MemorySegment seg, long index) {
        return (int)_NOTIFYICONDATAW.dwInfoFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwInfoFlags$set(MemorySegment seg, long index, int x) {
        _NOTIFYICONDATAW.dwInfoFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment guidItem$slice(MemorySegment seg) {
        return seg.asSlice(952, 16);
    }
    static final VarHandle hBalloonIcon$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hBalloonIcon")));
    public static VarHandle hBalloonIcon$VH() {
        return _NOTIFYICONDATAW.hBalloonIcon$VH;
    }
    public static MemoryAddress hBalloonIcon$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_NOTIFYICONDATAW.hBalloonIcon$VH.get(seg);
    }
    public static void hBalloonIcon$set( MemorySegment seg, MemoryAddress x) {
        _NOTIFYICONDATAW.hBalloonIcon$VH.set(seg, x);
    }
    public static MemoryAddress hBalloonIcon$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_NOTIFYICONDATAW.hBalloonIcon$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hBalloonIcon$set(MemorySegment seg, long index, MemoryAddress x) {
        _NOTIFYICONDATAW.hBalloonIcon$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


