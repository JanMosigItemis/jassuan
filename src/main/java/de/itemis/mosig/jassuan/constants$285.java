// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$285 {

    static final FunctionDescriptor TpSetCallbackPersistent$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle TpSetCallbackPersistent$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "TpSetCallbackPersistent",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$285.TpSetCallbackPersistent$FUNC, false
    );
    static final FunctionDescriptor TpDestroyCallbackEnviron$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle TpDestroyCallbackEnviron$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "TpDestroyCallbackEnviron",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$285.TpDestroyCallbackEnviron$FUNC, false
    );
    static final FunctionDescriptor NtCurrentTeb$FUNC = FunctionDescriptor.of(C_POINTER);
    static final MethodHandle NtCurrentTeb$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "NtCurrentTeb",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        constants$285.NtCurrentTeb$FUNC, false
    );
    static final FunctionDescriptor GetCurrentFiber$FUNC = FunctionDescriptor.of(C_POINTER);
    static final MethodHandle GetCurrentFiber$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "GetCurrentFiber",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        constants$285.GetCurrentFiber$FUNC, false
    );
    static final FunctionDescriptor GetFiberData$FUNC = FunctionDescriptor.of(C_POINTER);
    static final MethodHandle GetFiberData$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "GetFiberData",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        constants$285.GetFiberData$FUNC, false
    );
    static final FunctionDescriptor FARPROC$FUNC = FunctionDescriptor.of(C_LONG_LONG);
}


