// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$66 {

    static final FunctionDescriptor strupr$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final MethodHandle strupr$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "strupr",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$66.strupr$FUNC, false
    );
    static final FunctionDescriptor _wcsdup$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final MethodHandle _wcsdup$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "_wcsdup",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$66._wcsdup$FUNC, false
    );
    static final FunctionDescriptor wcscat$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle wcscat$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "wcscat",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$66.wcscat$FUNC, false
    );
    static final FunctionDescriptor wcschr$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_SHORT
    );
    static final MethodHandle wcschr$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "wcschr",
        "(Ljdk/incubator/foreign/MemoryAddress;S)Ljdk/incubator/foreign/MemoryAddress;",
        constants$66.wcschr$FUNC, false
    );
    static final FunctionDescriptor wcscmp$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle wcscmp$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "wcscmp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$66.wcscmp$FUNC, false
    );
    static final FunctionDescriptor wcscpy$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle wcscpy$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "wcscpy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$66.wcscpy$FUNC, false
    );
}


