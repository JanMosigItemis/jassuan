// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _RDR_CALLOUT_STATE {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("LastError"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("LastEEInfo"),
        C_INT.withName("LastCalledStage"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("ServerName"),
        C_POINTER.withName("ServerPort"),
        C_POINTER.withName("RemoteUser"),
        C_POINTER.withName("AuthType"),
        C_CHAR.withName("ResourceTypePresent"),
        C_CHAR.withName("MetadataPresent"),
        C_CHAR.withName("SessionIdPresent"),
        C_CHAR.withName("InterfacePresent"),
        MemoryLayout.structLayout(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
        ).withName("ResourceType"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.structLayout(
            C_LONG.withName("BufferSize"),
            MemoryLayout.paddingLayout(32),
            C_POINTER.withName("Buffer")
        ).withName("Metadata"),
        MemoryLayout.structLayout(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
        ).withName("SessionId"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
            ).withName("SyntaxGUID"),
            MemoryLayout.structLayout(
                C_SHORT.withName("MajorVersion"),
                C_SHORT.withName("MinorVersion")
            ).withName("SyntaxVersion")
        ).withName("Interface"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("CertContext")
    ).withName("_RDR_CALLOUT_STATE");
    public static MemoryLayout $LAYOUT() {
        return _RDR_CALLOUT_STATE.$struct$LAYOUT;
    }
    static final VarHandle LastError$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("LastError"));
    public static VarHandle LastError$VH() {
        return _RDR_CALLOUT_STATE.LastError$VH;
    }
    public static int LastError$get(MemorySegment seg) {
        return (int)_RDR_CALLOUT_STATE.LastError$VH.get(seg);
    }
    public static void LastError$set( MemorySegment seg, int x) {
        _RDR_CALLOUT_STATE.LastError$VH.set(seg, x);
    }
    public static int LastError$get(MemorySegment seg, long index) {
        return (int)_RDR_CALLOUT_STATE.LastError$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LastError$set(MemorySegment seg, long index, int x) {
        _RDR_CALLOUT_STATE.LastError$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LastEEInfo$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("LastEEInfo")));
    public static VarHandle LastEEInfo$VH() {
        return _RDR_CALLOUT_STATE.LastEEInfo$VH;
    }
    public static MemoryAddress LastEEInfo$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_RDR_CALLOUT_STATE.LastEEInfo$VH.get(seg);
    }
    public static void LastEEInfo$set( MemorySegment seg, MemoryAddress x) {
        _RDR_CALLOUT_STATE.LastEEInfo$VH.set(seg, x);
    }
    public static MemoryAddress LastEEInfo$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_RDR_CALLOUT_STATE.LastEEInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LastEEInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        _RDR_CALLOUT_STATE.LastEEInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LastCalledStage$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("LastCalledStage"));
    public static VarHandle LastCalledStage$VH() {
        return _RDR_CALLOUT_STATE.LastCalledStage$VH;
    }
    public static int LastCalledStage$get(MemorySegment seg) {
        return (int)_RDR_CALLOUT_STATE.LastCalledStage$VH.get(seg);
    }
    public static void LastCalledStage$set( MemorySegment seg, int x) {
        _RDR_CALLOUT_STATE.LastCalledStage$VH.set(seg, x);
    }
    public static int LastCalledStage$get(MemorySegment seg, long index) {
        return (int)_RDR_CALLOUT_STATE.LastCalledStage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LastCalledStage$set(MemorySegment seg, long index, int x) {
        _RDR_CALLOUT_STATE.LastCalledStage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ServerName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ServerName")));
    public static VarHandle ServerName$VH() {
        return _RDR_CALLOUT_STATE.ServerName$VH;
    }
    public static MemoryAddress ServerName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_RDR_CALLOUT_STATE.ServerName$VH.get(seg);
    }
    public static void ServerName$set( MemorySegment seg, MemoryAddress x) {
        _RDR_CALLOUT_STATE.ServerName$VH.set(seg, x);
    }
    public static MemoryAddress ServerName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_RDR_CALLOUT_STATE.ServerName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ServerName$set(MemorySegment seg, long index, MemoryAddress x) {
        _RDR_CALLOUT_STATE.ServerName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ServerPort$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ServerPort")));
    public static VarHandle ServerPort$VH() {
        return _RDR_CALLOUT_STATE.ServerPort$VH;
    }
    public static MemoryAddress ServerPort$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_RDR_CALLOUT_STATE.ServerPort$VH.get(seg);
    }
    public static void ServerPort$set( MemorySegment seg, MemoryAddress x) {
        _RDR_CALLOUT_STATE.ServerPort$VH.set(seg, x);
    }
    public static MemoryAddress ServerPort$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_RDR_CALLOUT_STATE.ServerPort$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ServerPort$set(MemorySegment seg, long index, MemoryAddress x) {
        _RDR_CALLOUT_STATE.ServerPort$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RemoteUser$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("RemoteUser")));
    public static VarHandle RemoteUser$VH() {
        return _RDR_CALLOUT_STATE.RemoteUser$VH;
    }
    public static MemoryAddress RemoteUser$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_RDR_CALLOUT_STATE.RemoteUser$VH.get(seg);
    }
    public static void RemoteUser$set( MemorySegment seg, MemoryAddress x) {
        _RDR_CALLOUT_STATE.RemoteUser$VH.set(seg, x);
    }
    public static MemoryAddress RemoteUser$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_RDR_CALLOUT_STATE.RemoteUser$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RemoteUser$set(MemorySegment seg, long index, MemoryAddress x) {
        _RDR_CALLOUT_STATE.RemoteUser$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AuthType$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AuthType")));
    public static VarHandle AuthType$VH() {
        return _RDR_CALLOUT_STATE.AuthType$VH;
    }
    public static MemoryAddress AuthType$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_RDR_CALLOUT_STATE.AuthType$VH.get(seg);
    }
    public static void AuthType$set( MemorySegment seg, MemoryAddress x) {
        _RDR_CALLOUT_STATE.AuthType$VH.set(seg, x);
    }
    public static MemoryAddress AuthType$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_RDR_CALLOUT_STATE.AuthType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AuthType$set(MemorySegment seg, long index, MemoryAddress x) {
        _RDR_CALLOUT_STATE.AuthType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ResourceTypePresent$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ResourceTypePresent"));
    public static VarHandle ResourceTypePresent$VH() {
        return _RDR_CALLOUT_STATE.ResourceTypePresent$VH;
    }
    public static byte ResourceTypePresent$get(MemorySegment seg) {
        return (byte)_RDR_CALLOUT_STATE.ResourceTypePresent$VH.get(seg);
    }
    public static void ResourceTypePresent$set( MemorySegment seg, byte x) {
        _RDR_CALLOUT_STATE.ResourceTypePresent$VH.set(seg, x);
    }
    public static byte ResourceTypePresent$get(MemorySegment seg, long index) {
        return (byte)_RDR_CALLOUT_STATE.ResourceTypePresent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ResourceTypePresent$set(MemorySegment seg, long index, byte x) {
        _RDR_CALLOUT_STATE.ResourceTypePresent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MetadataPresent$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MetadataPresent"));
    public static VarHandle MetadataPresent$VH() {
        return _RDR_CALLOUT_STATE.MetadataPresent$VH;
    }
    public static byte MetadataPresent$get(MemorySegment seg) {
        return (byte)_RDR_CALLOUT_STATE.MetadataPresent$VH.get(seg);
    }
    public static void MetadataPresent$set( MemorySegment seg, byte x) {
        _RDR_CALLOUT_STATE.MetadataPresent$VH.set(seg, x);
    }
    public static byte MetadataPresent$get(MemorySegment seg, long index) {
        return (byte)_RDR_CALLOUT_STATE.MetadataPresent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MetadataPresent$set(MemorySegment seg, long index, byte x) {
        _RDR_CALLOUT_STATE.MetadataPresent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SessionIdPresent$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SessionIdPresent"));
    public static VarHandle SessionIdPresent$VH() {
        return _RDR_CALLOUT_STATE.SessionIdPresent$VH;
    }
    public static byte SessionIdPresent$get(MemorySegment seg) {
        return (byte)_RDR_CALLOUT_STATE.SessionIdPresent$VH.get(seg);
    }
    public static void SessionIdPresent$set( MemorySegment seg, byte x) {
        _RDR_CALLOUT_STATE.SessionIdPresent$VH.set(seg, x);
    }
    public static byte SessionIdPresent$get(MemorySegment seg, long index) {
        return (byte)_RDR_CALLOUT_STATE.SessionIdPresent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SessionIdPresent$set(MemorySegment seg, long index, byte x) {
        _RDR_CALLOUT_STATE.SessionIdPresent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle InterfacePresent$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("InterfacePresent"));
    public static VarHandle InterfacePresent$VH() {
        return _RDR_CALLOUT_STATE.InterfacePresent$VH;
    }
    public static byte InterfacePresent$get(MemorySegment seg) {
        return (byte)_RDR_CALLOUT_STATE.InterfacePresent$VH.get(seg);
    }
    public static void InterfacePresent$set( MemorySegment seg, byte x) {
        _RDR_CALLOUT_STATE.InterfacePresent$VH.set(seg, x);
    }
    public static byte InterfacePresent$get(MemorySegment seg, long index) {
        return (byte)_RDR_CALLOUT_STATE.InterfacePresent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void InterfacePresent$set(MemorySegment seg, long index, byte x) {
        _RDR_CALLOUT_STATE.InterfacePresent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ResourceType$slice(MemorySegment seg) {
        return seg.asSlice(60, 16);
    }
    public static MemorySegment Metadata$slice(MemorySegment seg) {
        return seg.asSlice(80, 16);
    }
    public static MemorySegment SessionId$slice(MemorySegment seg) {
        return seg.asSlice(96, 16);
    }
    public static MemorySegment Interface$slice(MemorySegment seg) {
        return seg.asSlice(112, 20);
    }
    static final VarHandle CertContext$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("CertContext")));
    public static VarHandle CertContext$VH() {
        return _RDR_CALLOUT_STATE.CertContext$VH;
    }
    public static MemoryAddress CertContext$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_RDR_CALLOUT_STATE.CertContext$VH.get(seg);
    }
    public static void CertContext$set( MemorySegment seg, MemoryAddress x) {
        _RDR_CALLOUT_STATE.CertContext$VH.set(seg, x);
    }
    public static MemoryAddress CertContext$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_RDR_CALLOUT_STATE.CertContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CertContext$set(MemorySegment seg, long index, MemoryAddress x) {
        _RDR_CALLOUT_STATE.CertContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


