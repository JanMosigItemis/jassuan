// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IXMLDOMParseErrorVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetTypeInfoCount"),
        C_POINTER.withName("GetTypeInfo"),
        C_POINTER.withName("GetIDsOfNames"),
        C_POINTER.withName("Invoke"),
        C_POINTER.withName("get_errorCode"),
        C_POINTER.withName("get_url"),
        C_POINTER.withName("get_reason"),
        C_POINTER.withName("get_srcText"),
        C_POINTER.withName("get_line"),
        C_POINTER.withName("get_linepos"),
        C_POINTER.withName("get_filepos")
    ).withName("IXMLDOMParseErrorVtbl");
    public static MemoryLayout $LAYOUT() {
        return IXMLDOMParseErrorVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMParseErrorVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IXMLDOMParseErrorVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IXMLDOMParseErrorVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IXMLDOMParseErrorVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMParseErrorVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IXMLDOMParseErrorVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IXMLDOMParseErrorVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IXMLDOMParseErrorVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMParseErrorVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IXMLDOMParseErrorVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IXMLDOMParseErrorVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IXMLDOMParseErrorVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor GetTypeInfoCount$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetTypeInfoCount$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMParseErrorVtbl.GetTypeInfoCount$FUNC, false
    );
    public interface GetTypeInfoCount {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetTypeInfoCount fi) {
            return RuntimeHelper.upcallStub(GetTypeInfoCount.class, fi, IXMLDOMParseErrorVtbl.GetTypeInfoCount$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetTypeInfoCount fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetTypeInfoCount.class, fi, IXMLDOMParseErrorVtbl.GetTypeInfoCount$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetTypeInfoCount ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.GetTypeInfoCount$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoCount$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfoCount")));
    public static VarHandle GetTypeInfoCount$VH() {
        return IXMLDOMParseErrorVtbl.GetTypeInfoCount$VH;
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.GetTypeInfoCount$VH.get(seg);
    }
    public static void GetTypeInfoCount$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.GetTypeInfoCount$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.GetTypeInfoCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.GetTypeInfoCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount (MemorySegment segment) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment));
    }
    static final FunctionDescriptor GetTypeInfo$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle GetTypeInfo$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMParseErrorVtbl.GetTypeInfo$FUNC, false
    );
    public interface GetTypeInfo {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(GetTypeInfo fi) {
            return RuntimeHelper.upcallStub(GetTypeInfo.class, fi, IXMLDOMParseErrorVtbl.GetTypeInfo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetTypeInfo fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetTypeInfo.class, fi, IXMLDOMParseErrorVtbl.GetTypeInfo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetTypeInfo ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.GetTypeInfo$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfo$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfo")));
    public static VarHandle GetTypeInfo$VH() {
        return IXMLDOMParseErrorVtbl.GetTypeInfo$VH;
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.GetTypeInfo$VH.get(seg);
    }
    public static void GetTypeInfo$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.GetTypeInfo$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.GetTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.GetTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo (MemorySegment segment) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment));
    }
    static final FunctionDescriptor GetIDsOfNames$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle GetIDsOfNames$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMParseErrorVtbl.GetIDsOfNames$FUNC, false
    );
    public interface GetIDsOfNames {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, int x4, jdk.incubator.foreign.MemoryAddress x5);
        static MemoryAddress allocate(GetIDsOfNames fi) {
            return RuntimeHelper.upcallStub(GetIDsOfNames.class, fi, IXMLDOMParseErrorVtbl.GetIDsOfNames$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetIDsOfNames fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetIDsOfNames.class, fi, IXMLDOMParseErrorVtbl.GetIDsOfNames$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetIDsOfNames ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, int x4, jdk.incubator.foreign.MemoryAddress x5) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.GetIDsOfNames$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetIDsOfNames$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetIDsOfNames")));
    public static VarHandle GetIDsOfNames$VH() {
        return IXMLDOMParseErrorVtbl.GetIDsOfNames$VH;
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.GetIDsOfNames$VH.get(seg);
    }
    public static void GetIDsOfNames$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.GetIDsOfNames$VH.set(seg, x);
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.GetIDsOfNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.GetIDsOfNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames (MemorySegment segment) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment));
    }
    static final FunctionDescriptor Invoke$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_SHORT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle Invoke$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ISLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMParseErrorVtbl.Invoke$FUNC, false
    );
    public interface Invoke {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3, short x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8);
        static MemoryAddress allocate(Invoke fi) {
            return RuntimeHelper.upcallStub(Invoke.class, fi, IXMLDOMParseErrorVtbl.Invoke$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ISLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Invoke fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Invoke.class, fi, IXMLDOMParseErrorVtbl.Invoke$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ISLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Invoke ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3, short x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.Invoke$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6, x7, x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Invoke$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Invoke")));
    public static VarHandle Invoke$VH() {
        return IXMLDOMParseErrorVtbl.Invoke$VH;
    }
    public static MemoryAddress Invoke$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.Invoke$VH.get(seg);
    }
    public static void Invoke$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.Invoke$VH.set(seg, x);
    }
    public static MemoryAddress Invoke$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.Invoke$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.Invoke$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke (MemorySegment segment) {
        return Invoke.ofAddress(Invoke$get(segment));
    }
    static final FunctionDescriptor get_errorCode$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_errorCode$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMParseErrorVtbl.get_errorCode$FUNC, false
    );
    public interface get_errorCode {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_errorCode fi) {
            return RuntimeHelper.upcallStub(get_errorCode.class, fi, IXMLDOMParseErrorVtbl.get_errorCode$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_errorCode fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_errorCode.class, fi, IXMLDOMParseErrorVtbl.get_errorCode$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_errorCode ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.get_errorCode$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_errorCode$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_errorCode")));
    public static VarHandle get_errorCode$VH() {
        return IXMLDOMParseErrorVtbl.get_errorCode$VH;
    }
    public static MemoryAddress get_errorCode$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_errorCode$VH.get(seg);
    }
    public static void get_errorCode$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_errorCode$VH.set(seg, x);
    }
    public static MemoryAddress get_errorCode$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_errorCode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_errorCode$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_errorCode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_errorCode get_errorCode (MemorySegment segment) {
        return get_errorCode.ofAddress(get_errorCode$get(segment));
    }
    static final FunctionDescriptor get_url$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_url$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMParseErrorVtbl.get_url$FUNC, false
    );
    public interface get_url {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_url fi) {
            return RuntimeHelper.upcallStub(get_url.class, fi, IXMLDOMParseErrorVtbl.get_url$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_url fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_url.class, fi, IXMLDOMParseErrorVtbl.get_url$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_url ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.get_url$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_url$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_url")));
    public static VarHandle get_url$VH() {
        return IXMLDOMParseErrorVtbl.get_url$VH;
    }
    public static MemoryAddress get_url$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_url$VH.get(seg);
    }
    public static void get_url$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_url$VH.set(seg, x);
    }
    public static MemoryAddress get_url$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_url$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_url$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_url$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_url get_url (MemorySegment segment) {
        return get_url.ofAddress(get_url$get(segment));
    }
    static final FunctionDescriptor get_reason$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_reason$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMParseErrorVtbl.get_reason$FUNC, false
    );
    public interface get_reason {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_reason fi) {
            return RuntimeHelper.upcallStub(get_reason.class, fi, IXMLDOMParseErrorVtbl.get_reason$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_reason fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_reason.class, fi, IXMLDOMParseErrorVtbl.get_reason$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_reason ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.get_reason$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_reason$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_reason")));
    public static VarHandle get_reason$VH() {
        return IXMLDOMParseErrorVtbl.get_reason$VH;
    }
    public static MemoryAddress get_reason$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_reason$VH.get(seg);
    }
    public static void get_reason$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_reason$VH.set(seg, x);
    }
    public static MemoryAddress get_reason$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_reason$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_reason$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_reason$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_reason get_reason (MemorySegment segment) {
        return get_reason.ofAddress(get_reason$get(segment));
    }
    static final FunctionDescriptor get_srcText$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_srcText$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMParseErrorVtbl.get_srcText$FUNC, false
    );
    public interface get_srcText {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_srcText fi) {
            return RuntimeHelper.upcallStub(get_srcText.class, fi, IXMLDOMParseErrorVtbl.get_srcText$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_srcText fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_srcText.class, fi, IXMLDOMParseErrorVtbl.get_srcText$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_srcText ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.get_srcText$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_srcText$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_srcText")));
    public static VarHandle get_srcText$VH() {
        return IXMLDOMParseErrorVtbl.get_srcText$VH;
    }
    public static MemoryAddress get_srcText$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_srcText$VH.get(seg);
    }
    public static void get_srcText$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_srcText$VH.set(seg, x);
    }
    public static MemoryAddress get_srcText$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_srcText$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_srcText$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_srcText$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_srcText get_srcText (MemorySegment segment) {
        return get_srcText.ofAddress(get_srcText$get(segment));
    }
    static final FunctionDescriptor get_line$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_line$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMParseErrorVtbl.get_line$FUNC, false
    );
    public interface get_line {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_line fi) {
            return RuntimeHelper.upcallStub(get_line.class, fi, IXMLDOMParseErrorVtbl.get_line$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_line fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_line.class, fi, IXMLDOMParseErrorVtbl.get_line$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_line ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.get_line$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_line$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_line")));
    public static VarHandle get_line$VH() {
        return IXMLDOMParseErrorVtbl.get_line$VH;
    }
    public static MemoryAddress get_line$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_line$VH.get(seg);
    }
    public static void get_line$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_line$VH.set(seg, x);
    }
    public static MemoryAddress get_line$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_line$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_line$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_line$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_line get_line (MemorySegment segment) {
        return get_line.ofAddress(get_line$get(segment));
    }
    static final FunctionDescriptor get_linepos$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_linepos$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMParseErrorVtbl.get_linepos$FUNC, false
    );
    public interface get_linepos {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_linepos fi) {
            return RuntimeHelper.upcallStub(get_linepos.class, fi, IXMLDOMParseErrorVtbl.get_linepos$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_linepos fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_linepos.class, fi, IXMLDOMParseErrorVtbl.get_linepos$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_linepos ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.get_linepos$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_linepos$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_linepos")));
    public static VarHandle get_linepos$VH() {
        return IXMLDOMParseErrorVtbl.get_linepos$VH;
    }
    public static MemoryAddress get_linepos$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_linepos$VH.get(seg);
    }
    public static void get_linepos$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_linepos$VH.set(seg, x);
    }
    public static MemoryAddress get_linepos$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_linepos$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_linepos$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_linepos$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_linepos get_linepos (MemorySegment segment) {
        return get_linepos.ofAddress(get_linepos$get(segment));
    }
    static final FunctionDescriptor get_filepos$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_filepos$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMParseErrorVtbl.get_filepos$FUNC, false
    );
    public interface get_filepos {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_filepos fi) {
            return RuntimeHelper.upcallStub(get_filepos.class, fi, IXMLDOMParseErrorVtbl.get_filepos$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_filepos fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_filepos.class, fi, IXMLDOMParseErrorVtbl.get_filepos$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_filepos ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMParseErrorVtbl.get_filepos$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_filepos$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_filepos")));
    public static VarHandle get_filepos$VH() {
        return IXMLDOMParseErrorVtbl.get_filepos$VH;
    }
    public static MemoryAddress get_filepos$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_filepos$VH.get(seg);
    }
    public static void get_filepos$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_filepos$VH.set(seg, x);
    }
    public static MemoryAddress get_filepos$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMParseErrorVtbl.get_filepos$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_filepos$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMParseErrorVtbl.get_filepos$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_filepos get_filepos (MemorySegment segment) {
        return get_filepos.ofAddress(get_filepos$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


