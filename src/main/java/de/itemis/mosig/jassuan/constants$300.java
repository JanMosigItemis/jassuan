// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$300 {

    static final FunctionDescriptor QueryDosDeviceW$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle QueryDosDeviceW$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "QueryDosDeviceW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$300.QueryDosDeviceW$FUNC, false
    );
    static final FunctionDescriptor ReadFileScatter$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle ReadFileScatter$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "ReadFileScatter",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$300.ReadFileScatter$FUNC, false
    );
    static final FunctionDescriptor SetFileValidData$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG_LONG
    );
    static final MethodHandle SetFileValidData$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "SetFileValidData",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        constants$300.SetFileValidData$FUNC, false
    );
    static final FunctionDescriptor WriteFileGather$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle WriteFileGather$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "WriteFileGather",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$300.WriteFileGather$FUNC, false
    );
    static final FunctionDescriptor GetVolumeNameForVolumeMountPointW$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle GetVolumeNameForVolumeMountPointW$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "GetVolumeNameForVolumeMountPointW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$300.GetVolumeNameForVolumeMountPointW$FUNC, false
    );
    static final FunctionDescriptor GetVolumePathNamesForVolumeNameW$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle GetVolumePathNamesForVolumeNameW$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "GetVolumePathNamesForVolumeNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        constants$300.GetVolumePathNamesForVolumeNameW$FUNC, false
    );
}


