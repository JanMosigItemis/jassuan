// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _SOCKADDR_INET {

    static final MemoryLayout $union$LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.structLayout(
            C_SHORT.withName("sin_family"),
            C_SHORT.withName("sin_port"),
            MemoryLayout.structLayout(
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        C_CHAR.withName("s_b1"),
                        C_CHAR.withName("s_b2"),
                        C_CHAR.withName("s_b3"),
                        C_CHAR.withName("s_b4")
                    ).withName("S_un_b"),
                    MemoryLayout.structLayout(
                        C_SHORT.withName("s_w1"),
                        C_SHORT.withName("s_w2")
                    ).withName("S_un_w"),
                    C_LONG.withName("S_addr")
                ).withName("S_un")
            ).withName("sin_addr"),
            MemoryLayout.sequenceLayout(8, C_CHAR).withName("sin_zero")
        ).withName("Ipv4"),
        MemoryLayout.structLayout(
            C_SHORT.withName("sin6_family"),
            C_SHORT.withName("sin6_port"),
            C_LONG.withName("sin6_flowinfo"),
            MemoryLayout.structLayout(
                MemoryLayout.unionLayout(
                    MemoryLayout.sequenceLayout(16, C_CHAR).withName("Byte"),
                    MemoryLayout.sequenceLayout(8, C_SHORT).withName("Word")
                ).withName("u")
            ).withName("sin6_addr"),
            MemoryLayout.unionLayout(
                C_LONG.withName("sin6_scope_id"),
                MemoryLayout.structLayout(
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            MemoryLayout.structLayout(
                                MemoryLayout.valueLayout(28, ByteOrder.nativeOrder()).withName("Zone"),
                                MemoryLayout.valueLayout(4, ByteOrder.nativeOrder()).withName("Level")
                            )
                        ).withName("$anon$0"),
                        C_LONG.withName("Value")
                    ).withName("$anon$0")
                ).withName("sin6_scope_struct")
            ).withName("$anon$0")
        ).withName("Ipv6"),
        C_SHORT.withName("si_family")
    ).withName("_SOCKADDR_INET");
    public static MemoryLayout $LAYOUT() {
        return _SOCKADDR_INET.$union$LAYOUT;
    }
    public static MemorySegment Ipv4$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment Ipv6$slice(MemorySegment seg) {
        return seg.asSlice(0, 28);
    }
    static final VarHandle si_family$VH = $union$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("si_family"));
    public static VarHandle si_family$VH() {
        return _SOCKADDR_INET.si_family$VH;
    }
    public static short si_family$get(MemorySegment seg) {
        return (short)_SOCKADDR_INET.si_family$VH.get(seg);
    }
    public static void si_family$set( MemorySegment seg, short x) {
        _SOCKADDR_INET.si_family$VH.set(seg, x);
    }
    public static short si_family$get(MemorySegment seg, long index) {
        return (short)_SOCKADDR_INET.si_family$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void si_family$set(MemorySegment seg, long index, short x) {
        _SOCKADDR_INET.si_family$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


