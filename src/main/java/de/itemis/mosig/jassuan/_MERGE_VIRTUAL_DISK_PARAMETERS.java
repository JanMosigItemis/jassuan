// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _MERGE_VIRTUAL_DISK_PARAMETERS {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("Version"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_LONG.withName("MergeDepth")
            ).withName("Version1")
        ).withName("$anon$0")
    ).withName("_MERGE_VIRTUAL_DISK_PARAMETERS");
    public static MemoryLayout $LAYOUT() {
        return _MERGE_VIRTUAL_DISK_PARAMETERS.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _MERGE_VIRTUAL_DISK_PARAMETERS.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)_MERGE_VIRTUAL_DISK_PARAMETERS.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        _MERGE_VIRTUAL_DISK_PARAMETERS.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_MERGE_VIRTUAL_DISK_PARAMETERS.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _MERGE_VIRTUAL_DISK_PARAMETERS.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class Version1 {

        static final MemoryLayout Version1$struct$LAYOUT = MemoryLayout.structLayout(
            C_LONG.withName("MergeDepth")
        );
        public static MemoryLayout $LAYOUT() {
            return Version1.Version1$struct$LAYOUT;
        }
        static final VarHandle MergeDepth$VH = Version1$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("MergeDepth"));
        public static VarHandle MergeDepth$VH() {
            return Version1.MergeDepth$VH;
        }
        public static int MergeDepth$get(MemorySegment seg) {
            return (int)Version1.MergeDepth$VH.get(seg);
        }
        public static void MergeDepth$set( MemorySegment seg, int x) {
            Version1.MergeDepth$VH.set(seg, x);
        }
        public static int MergeDepth$get(MemorySegment seg, long index) {
            return (int)Version1.MergeDepth$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void MergeDepth$set(MemorySegment seg, long index, int x) {
            Version1.MergeDepth$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.ofScope(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment Version1$slice(MemorySegment seg) {
        return seg.asSlice(4, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


