// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class tagRPC_EXTENDED_ERROR_INFO {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Version"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("ComputerName"),
        C_LONG.withName("ProcessID"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_SHORT.withName("wYear"),
                C_SHORT.withName("wMonth"),
                C_SHORT.withName("wDayOfWeek"),
                C_SHORT.withName("wDay"),
                C_SHORT.withName("wHour"),
                C_SHORT.withName("wMinute"),
                C_SHORT.withName("wSecond"),
                C_SHORT.withName("wMilliseconds")
            ).withName("SystemTime"),
            MemoryLayout.structLayout(
                C_LONG.withName("dwLowDateTime"),
                C_LONG.withName("dwHighDateTime")
            ).withName("FileTime")
        ).withName("u"),
        C_LONG.withName("GeneratingComponent"),
        C_LONG.withName("Status"),
        C_SHORT.withName("DetectionLocation"),
        C_SHORT.withName("Flags"),
        C_INT.withName("NumberOfParameters"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.sequenceLayout(4, MemoryLayout.structLayout(
            C_INT.withName("ParameterType"),
            MemoryLayout.paddingLayout(32),
            MemoryLayout.unionLayout(
                C_POINTER.withName("AnsiString"),
                C_POINTER.withName("UnicodeString"),
                C_LONG.withName("LVal"),
                C_SHORT.withName("SVal"),
                C_LONG_LONG.withName("PVal"),
                MemoryLayout.structLayout(
                    C_POINTER.withName("Buffer"),
                    C_SHORT.withName("Size"),
                    MemoryLayout.paddingLayout(48)
                ).withName("BVal")
            ).withName("u")
        ).withName("tagRPC_EE_INFO_PARAM")).withName("Parameters")
    ).withName("tagRPC_EXTENDED_ERROR_INFO");
    public static MemoryLayout $LAYOUT() {
        return tagRPC_EXTENDED_ERROR_INFO.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return tagRPC_EXTENDED_ERROR_INFO.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)tagRPC_EXTENDED_ERROR_INFO.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        tagRPC_EXTENDED_ERROR_INFO.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)tagRPC_EXTENDED_ERROR_INFO.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        tagRPC_EXTENDED_ERROR_INFO.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ComputerName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ComputerName")));
    public static VarHandle ComputerName$VH() {
        return tagRPC_EXTENDED_ERROR_INFO.ComputerName$VH;
    }
    public static MemoryAddress ComputerName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagRPC_EXTENDED_ERROR_INFO.ComputerName$VH.get(seg);
    }
    public static void ComputerName$set( MemorySegment seg, MemoryAddress x) {
        tagRPC_EXTENDED_ERROR_INFO.ComputerName$VH.set(seg, x);
    }
    public static MemoryAddress ComputerName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagRPC_EXTENDED_ERROR_INFO.ComputerName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ComputerName$set(MemorySegment seg, long index, MemoryAddress x) {
        tagRPC_EXTENDED_ERROR_INFO.ComputerName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ProcessID$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ProcessID"));
    public static VarHandle ProcessID$VH() {
        return tagRPC_EXTENDED_ERROR_INFO.ProcessID$VH;
    }
    public static int ProcessID$get(MemorySegment seg) {
        return (int)tagRPC_EXTENDED_ERROR_INFO.ProcessID$VH.get(seg);
    }
    public static void ProcessID$set( MemorySegment seg, int x) {
        tagRPC_EXTENDED_ERROR_INFO.ProcessID$VH.set(seg, x);
    }
    public static int ProcessID$get(MemorySegment seg, long index) {
        return (int)tagRPC_EXTENDED_ERROR_INFO.ProcessID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessID$set(MemorySegment seg, long index, int x) {
        tagRPC_EXTENDED_ERROR_INFO.ProcessID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class u {

        static final MemoryLayout u$union$LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_SHORT.withName("wYear"),
                C_SHORT.withName("wMonth"),
                C_SHORT.withName("wDayOfWeek"),
                C_SHORT.withName("wDay"),
                C_SHORT.withName("wHour"),
                C_SHORT.withName("wMinute"),
                C_SHORT.withName("wSecond"),
                C_SHORT.withName("wMilliseconds")
            ).withName("SystemTime"),
            MemoryLayout.structLayout(
                C_LONG.withName("dwLowDateTime"),
                C_LONG.withName("dwHighDateTime")
            ).withName("FileTime")
        );
        public static MemoryLayout $LAYOUT() {
            return u.u$union$LAYOUT;
        }
        public static MemorySegment SystemTime$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment FileTime$slice(MemorySegment seg) {
            return seg.asSlice(0, 8);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.ofScope(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment u$slice(MemorySegment seg) {
        return seg.asSlice(20, 16);
    }
    static final VarHandle GeneratingComponent$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("GeneratingComponent"));
    public static VarHandle GeneratingComponent$VH() {
        return tagRPC_EXTENDED_ERROR_INFO.GeneratingComponent$VH;
    }
    public static int GeneratingComponent$get(MemorySegment seg) {
        return (int)tagRPC_EXTENDED_ERROR_INFO.GeneratingComponent$VH.get(seg);
    }
    public static void GeneratingComponent$set( MemorySegment seg, int x) {
        tagRPC_EXTENDED_ERROR_INFO.GeneratingComponent$VH.set(seg, x);
    }
    public static int GeneratingComponent$get(MemorySegment seg, long index) {
        return (int)tagRPC_EXTENDED_ERROR_INFO.GeneratingComponent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GeneratingComponent$set(MemorySegment seg, long index, int x) {
        tagRPC_EXTENDED_ERROR_INFO.GeneratingComponent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Status$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Status"));
    public static VarHandle Status$VH() {
        return tagRPC_EXTENDED_ERROR_INFO.Status$VH;
    }
    public static int Status$get(MemorySegment seg) {
        return (int)tagRPC_EXTENDED_ERROR_INFO.Status$VH.get(seg);
    }
    public static void Status$set( MemorySegment seg, int x) {
        tagRPC_EXTENDED_ERROR_INFO.Status$VH.set(seg, x);
    }
    public static int Status$get(MemorySegment seg, long index) {
        return (int)tagRPC_EXTENDED_ERROR_INFO.Status$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Status$set(MemorySegment seg, long index, int x) {
        tagRPC_EXTENDED_ERROR_INFO.Status$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DetectionLocation$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("DetectionLocation"));
    public static VarHandle DetectionLocation$VH() {
        return tagRPC_EXTENDED_ERROR_INFO.DetectionLocation$VH;
    }
    public static short DetectionLocation$get(MemorySegment seg) {
        return (short)tagRPC_EXTENDED_ERROR_INFO.DetectionLocation$VH.get(seg);
    }
    public static void DetectionLocation$set( MemorySegment seg, short x) {
        tagRPC_EXTENDED_ERROR_INFO.DetectionLocation$VH.set(seg, x);
    }
    public static short DetectionLocation$get(MemorySegment seg, long index) {
        return (short)tagRPC_EXTENDED_ERROR_INFO.DetectionLocation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DetectionLocation$set(MemorySegment seg, long index, short x) {
        tagRPC_EXTENDED_ERROR_INFO.DetectionLocation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return tagRPC_EXTENDED_ERROR_INFO.Flags$VH;
    }
    public static short Flags$get(MemorySegment seg) {
        return (short)tagRPC_EXTENDED_ERROR_INFO.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, short x) {
        tagRPC_EXTENDED_ERROR_INFO.Flags$VH.set(seg, x);
    }
    public static short Flags$get(MemorySegment seg, long index) {
        return (short)tagRPC_EXTENDED_ERROR_INFO.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, short x) {
        tagRPC_EXTENDED_ERROR_INFO.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumberOfParameters$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfParameters"));
    public static VarHandle NumberOfParameters$VH() {
        return tagRPC_EXTENDED_ERROR_INFO.NumberOfParameters$VH;
    }
    public static int NumberOfParameters$get(MemorySegment seg) {
        return (int)tagRPC_EXTENDED_ERROR_INFO.NumberOfParameters$VH.get(seg);
    }
    public static void NumberOfParameters$set( MemorySegment seg, int x) {
        tagRPC_EXTENDED_ERROR_INFO.NumberOfParameters$VH.set(seg, x);
    }
    public static int NumberOfParameters$get(MemorySegment seg, long index) {
        return (int)tagRPC_EXTENDED_ERROR_INFO.NumberOfParameters$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfParameters$set(MemorySegment seg, long index, int x) {
        tagRPC_EXTENDED_ERROR_INFO.NumberOfParameters$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Parameters$slice(MemorySegment seg) {
        return seg.asSlice(56, 96);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


