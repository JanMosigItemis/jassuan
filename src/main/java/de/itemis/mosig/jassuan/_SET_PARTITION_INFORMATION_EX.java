// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _SET_PARTITION_INFORMATION_EX {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("PartitionStyle"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_CHAR.withName("PartitionType")
            ).withName("Mbr"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    C_LONG.withName("Data1"),
                    C_SHORT.withName("Data2"),
                    C_SHORT.withName("Data3"),
                    MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
                ).withName("PartitionType"),
                MemoryLayout.structLayout(
                    C_LONG.withName("Data1"),
                    C_SHORT.withName("Data2"),
                    C_SHORT.withName("Data3"),
                    MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
                ).withName("PartitionId"),
                C_LONG_LONG.withName("Attributes"),
                MemoryLayout.sequenceLayout(36, C_SHORT).withName("Name")
            ).withName("Gpt")
        ).withName("$anon$0")
    ).withName("_SET_PARTITION_INFORMATION_EX");
    public static MemoryLayout $LAYOUT() {
        return _SET_PARTITION_INFORMATION_EX.$struct$LAYOUT;
    }
    static final VarHandle PartitionStyle$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("PartitionStyle"));
    public static VarHandle PartitionStyle$VH() {
        return _SET_PARTITION_INFORMATION_EX.PartitionStyle$VH;
    }
    public static int PartitionStyle$get(MemorySegment seg) {
        return (int)_SET_PARTITION_INFORMATION_EX.PartitionStyle$VH.get(seg);
    }
    public static void PartitionStyle$set( MemorySegment seg, int x) {
        _SET_PARTITION_INFORMATION_EX.PartitionStyle$VH.set(seg, x);
    }
    public static int PartitionStyle$get(MemorySegment seg, long index) {
        return (int)_SET_PARTITION_INFORMATION_EX.PartitionStyle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PartitionStyle$set(MemorySegment seg, long index, int x) {
        _SET_PARTITION_INFORMATION_EX.PartitionStyle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Mbr$slice(MemorySegment seg) {
        return seg.asSlice(8, 1);
    }
    public static MemorySegment Gpt$slice(MemorySegment seg) {
        return seg.asSlice(8, 112);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


