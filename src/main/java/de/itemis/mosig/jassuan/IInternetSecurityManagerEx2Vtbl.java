// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IInternetSecurityManagerEx2Vtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("SetSecuritySite"),
        C_POINTER.withName("GetSecuritySite"),
        C_POINTER.withName("MapUrlToZone"),
        C_POINTER.withName("GetSecurityId"),
        C_POINTER.withName("ProcessUrlAction"),
        C_POINTER.withName("QueryCustomPolicy"),
        C_POINTER.withName("SetZoneMapping"),
        C_POINTER.withName("GetZoneMappings"),
        C_POINTER.withName("ProcessUrlActionEx"),
        C_POINTER.withName("MapUrlToZoneEx2"),
        C_POINTER.withName("ProcessUrlActionEx2"),
        C_POINTER.withName("GetSecurityIdEx2"),
        C_POINTER.withName("QueryCustomPolicyEx2")
    ).withName("IInternetSecurityManagerEx2Vtbl");
    public static MemoryLayout $LAYOUT() {
        return IInternetSecurityManagerEx2Vtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetSecurityManagerEx2Vtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IInternetSecurityManagerEx2Vtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IInternetSecurityManagerEx2Vtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IInternetSecurityManagerEx2Vtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IInternetSecurityManagerEx2Vtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetSecurityManagerEx2Vtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IInternetSecurityManagerEx2Vtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IInternetSecurityManagerEx2Vtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IInternetSecurityManagerEx2Vtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IInternetSecurityManagerEx2Vtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetSecurityManagerEx2Vtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IInternetSecurityManagerEx2Vtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IInternetSecurityManagerEx2Vtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IInternetSecurityManagerEx2Vtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IInternetSecurityManagerEx2Vtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor SetSecuritySite$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle SetSecuritySite$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetSecurityManagerEx2Vtbl.SetSecuritySite$FUNC, false
    );
    public interface SetSecuritySite {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(SetSecuritySite fi) {
            return RuntimeHelper.upcallStub(SetSecuritySite.class, fi, IInternetSecurityManagerEx2Vtbl.SetSecuritySite$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SetSecuritySite fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetSecuritySite.class, fi, IInternetSecurityManagerEx2Vtbl.SetSecuritySite$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SetSecuritySite ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IInternetSecurityManagerEx2Vtbl.SetSecuritySite$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetSecuritySite$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetSecuritySite")));
    public static VarHandle SetSecuritySite$VH() {
        return IInternetSecurityManagerEx2Vtbl.SetSecuritySite$VH;
    }
    public static MemoryAddress SetSecuritySite$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.SetSecuritySite$VH.get(seg);
    }
    public static void SetSecuritySite$set( MemorySegment seg, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.SetSecuritySite$VH.set(seg, x);
    }
    public static MemoryAddress SetSecuritySite$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.SetSecuritySite$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetSecuritySite$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.SetSecuritySite$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetSecuritySite SetSecuritySite (MemorySegment segment) {
        return SetSecuritySite.ofAddress(SetSecuritySite$get(segment));
    }
    static final FunctionDescriptor GetSecuritySite$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetSecuritySite$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetSecurityManagerEx2Vtbl.GetSecuritySite$FUNC, false
    );
    public interface GetSecuritySite {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetSecuritySite fi) {
            return RuntimeHelper.upcallStub(GetSecuritySite.class, fi, IInternetSecurityManagerEx2Vtbl.GetSecuritySite$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetSecuritySite fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetSecuritySite.class, fi, IInternetSecurityManagerEx2Vtbl.GetSecuritySite$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetSecuritySite ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IInternetSecurityManagerEx2Vtbl.GetSecuritySite$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetSecuritySite$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetSecuritySite")));
    public static VarHandle GetSecuritySite$VH() {
        return IInternetSecurityManagerEx2Vtbl.GetSecuritySite$VH;
    }
    public static MemoryAddress GetSecuritySite$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.GetSecuritySite$VH.get(seg);
    }
    public static void GetSecuritySite$set( MemorySegment seg, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.GetSecuritySite$VH.set(seg, x);
    }
    public static MemoryAddress GetSecuritySite$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.GetSecuritySite$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSecuritySite$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.GetSecuritySite$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSecuritySite GetSecuritySite (MemorySegment segment) {
        return GetSecuritySite.ofAddress(GetSecuritySite$get(segment));
    }
    static final FunctionDescriptor MapUrlToZone$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle MapUrlToZone$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        IInternetSecurityManagerEx2Vtbl.MapUrlToZone$FUNC, false
    );
    public interface MapUrlToZone {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3);
        static MemoryAddress allocate(MapUrlToZone fi) {
            return RuntimeHelper.upcallStub(MapUrlToZone.class, fi, IInternetSecurityManagerEx2Vtbl.MapUrlToZone$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(MapUrlToZone fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(MapUrlToZone.class, fi, IInternetSecurityManagerEx2Vtbl.MapUrlToZone$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static MapUrlToZone ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3) -> {
                try {
                    return (int)IInternetSecurityManagerEx2Vtbl.MapUrlToZone$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle MapUrlToZone$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("MapUrlToZone")));
    public static VarHandle MapUrlToZone$VH() {
        return IInternetSecurityManagerEx2Vtbl.MapUrlToZone$VH;
    }
    public static MemoryAddress MapUrlToZone$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.MapUrlToZone$VH.get(seg);
    }
    public static void MapUrlToZone$set( MemorySegment seg, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.MapUrlToZone$VH.set(seg, x);
    }
    public static MemoryAddress MapUrlToZone$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.MapUrlToZone$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MapUrlToZone$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.MapUrlToZone$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MapUrlToZone MapUrlToZone (MemorySegment segment) {
        return MapUrlToZone.ofAddress(MapUrlToZone$get(segment));
    }
    static final FunctionDescriptor GetSecurityId$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG
    );
    static final MethodHandle GetSecurityId$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        IInternetSecurityManagerEx2Vtbl.GetSecurityId$FUNC, false
    );
    public interface GetSecurityId {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, long x4);
        static MemoryAddress allocate(GetSecurityId fi) {
            return RuntimeHelper.upcallStub(GetSecurityId.class, fi, IInternetSecurityManagerEx2Vtbl.GetSecurityId$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I");
        }
        static MemoryAddress allocate(GetSecurityId fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetSecurityId.class, fi, IInternetSecurityManagerEx2Vtbl.GetSecurityId$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I", scope);
        }
        static GetSecurityId ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, long x4) -> {
                try {
                    return (int)IInternetSecurityManagerEx2Vtbl.GetSecurityId$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetSecurityId$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetSecurityId")));
    public static VarHandle GetSecurityId$VH() {
        return IInternetSecurityManagerEx2Vtbl.GetSecurityId$VH;
    }
    public static MemoryAddress GetSecurityId$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.GetSecurityId$VH.get(seg);
    }
    public static void GetSecurityId$set( MemorySegment seg, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.GetSecurityId$VH.set(seg, x);
    }
    public static MemoryAddress GetSecurityId$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.GetSecurityId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSecurityId$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.GetSecurityId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSecurityId GetSecurityId (MemorySegment segment) {
        return GetSecurityId.ofAddress(GetSecurityId$get(segment));
    }
    static final FunctionDescriptor ProcessUrlAction$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG
    );
    static final MethodHandle ProcessUrlAction$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;III)I",
        IInternetSecurityManagerEx2Vtbl.ProcessUrlAction$FUNC, false
    );
    public interface ProcessUrlAction {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3, int x4, jdk.incubator.foreign.MemoryAddress x5, int x6, int x7, int x8);
        static MemoryAddress allocate(ProcessUrlAction fi) {
            return RuntimeHelper.upcallStub(ProcessUrlAction.class, fi, IInternetSecurityManagerEx2Vtbl.ProcessUrlAction$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;III)I");
        }
        static MemoryAddress allocate(ProcessUrlAction fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(ProcessUrlAction.class, fi, IInternetSecurityManagerEx2Vtbl.ProcessUrlAction$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;III)I", scope);
        }
        static ProcessUrlAction ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3, int x4, jdk.incubator.foreign.MemoryAddress x5, int x6, int x7, int x8) -> {
                try {
                    return (int)IInternetSecurityManagerEx2Vtbl.ProcessUrlAction$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6, x7, x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ProcessUrlAction$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ProcessUrlAction")));
    public static VarHandle ProcessUrlAction$VH() {
        return IInternetSecurityManagerEx2Vtbl.ProcessUrlAction$VH;
    }
    public static MemoryAddress ProcessUrlAction$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.ProcessUrlAction$VH.get(seg);
    }
    public static void ProcessUrlAction$set( MemorySegment seg, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.ProcessUrlAction$VH.set(seg, x);
    }
    public static MemoryAddress ProcessUrlAction$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.ProcessUrlAction$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessUrlAction$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.ProcessUrlAction$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ProcessUrlAction ProcessUrlAction (MemorySegment segment) {
        return ProcessUrlAction.ofAddress(ProcessUrlAction$get(segment));
    }
    static final FunctionDescriptor QueryCustomPolicy$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final MethodHandle QueryCustomPolicy$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        IInternetSecurityManagerEx2Vtbl.QueryCustomPolicy$FUNC, false
    );
    public interface QueryCustomPolicy {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5, int x6, int x7);
        static MemoryAddress allocate(QueryCustomPolicy fi) {
            return RuntimeHelper.upcallStub(QueryCustomPolicy.class, fi, IInternetSecurityManagerEx2Vtbl.QueryCustomPolicy$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I");
        }
        static MemoryAddress allocate(QueryCustomPolicy fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryCustomPolicy.class, fi, IInternetSecurityManagerEx2Vtbl.QueryCustomPolicy$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I", scope);
        }
        static QueryCustomPolicy ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5, int x6, int x7) -> {
                try {
                    return (int)IInternetSecurityManagerEx2Vtbl.QueryCustomPolicy$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6, x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryCustomPolicy$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryCustomPolicy")));
    public static VarHandle QueryCustomPolicy$VH() {
        return IInternetSecurityManagerEx2Vtbl.QueryCustomPolicy$VH;
    }
    public static MemoryAddress QueryCustomPolicy$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.QueryCustomPolicy$VH.get(seg);
    }
    public static void QueryCustomPolicy$set( MemorySegment seg, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.QueryCustomPolicy$VH.set(seg, x);
    }
    public static MemoryAddress QueryCustomPolicy$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.QueryCustomPolicy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryCustomPolicy$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.QueryCustomPolicy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryCustomPolicy QueryCustomPolicy (MemorySegment segment) {
        return QueryCustomPolicy.ofAddress(QueryCustomPolicy$get(segment));
    }
    static final FunctionDescriptor SetZoneMapping$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle SetZoneMapping$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        IInternetSecurityManagerEx2Vtbl.SetZoneMapping$FUNC, false
    );
    public interface SetZoneMapping {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3);
        static MemoryAddress allocate(SetZoneMapping fi) {
            return RuntimeHelper.upcallStub(SetZoneMapping.class, fi, IInternetSecurityManagerEx2Vtbl.SetZoneMapping$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(SetZoneMapping fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetZoneMapping.class, fi, IInternetSecurityManagerEx2Vtbl.SetZoneMapping$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static SetZoneMapping ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3) -> {
                try {
                    return (int)IInternetSecurityManagerEx2Vtbl.SetZoneMapping$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetZoneMapping$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetZoneMapping")));
    public static VarHandle SetZoneMapping$VH() {
        return IInternetSecurityManagerEx2Vtbl.SetZoneMapping$VH;
    }
    public static MemoryAddress SetZoneMapping$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.SetZoneMapping$VH.get(seg);
    }
    public static void SetZoneMapping$set( MemorySegment seg, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.SetZoneMapping$VH.set(seg, x);
    }
    public static MemoryAddress SetZoneMapping$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.SetZoneMapping$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetZoneMapping$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.SetZoneMapping$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetZoneMapping SetZoneMapping (MemorySegment segment) {
        return SetZoneMapping.ofAddress(SetZoneMapping$get(segment));
    }
    static final FunctionDescriptor GetZoneMappings$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle GetZoneMappings$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        IInternetSecurityManagerEx2Vtbl.GetZoneMappings$FUNC, false
    );
    public interface GetZoneMappings {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3);
        static MemoryAddress allocate(GetZoneMappings fi) {
            return RuntimeHelper.upcallStub(GetZoneMappings.class, fi, IInternetSecurityManagerEx2Vtbl.GetZoneMappings$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(GetZoneMappings fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetZoneMappings.class, fi, IInternetSecurityManagerEx2Vtbl.GetZoneMappings$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static GetZoneMappings ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3) -> {
                try {
                    return (int)IInternetSecurityManagerEx2Vtbl.GetZoneMappings$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetZoneMappings$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetZoneMappings")));
    public static VarHandle GetZoneMappings$VH() {
        return IInternetSecurityManagerEx2Vtbl.GetZoneMappings$VH;
    }
    public static MemoryAddress GetZoneMappings$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.GetZoneMappings$VH.get(seg);
    }
    public static void GetZoneMappings$set( MemorySegment seg, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.GetZoneMappings$VH.set(seg, x);
    }
    public static MemoryAddress GetZoneMappings$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.GetZoneMappings$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetZoneMappings$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.GetZoneMappings$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetZoneMappings GetZoneMappings (MemorySegment segment) {
        return GetZoneMappings.ofAddress(GetZoneMappings$get(segment));
    }
    static final FunctionDescriptor ProcessUrlActionEx$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle ProcessUrlActionEx$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)I",
        IInternetSecurityManagerEx2Vtbl.ProcessUrlActionEx$FUNC, false
    );
    public interface ProcessUrlActionEx {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3, int x4, jdk.incubator.foreign.MemoryAddress x5, int x6, int x7, int x8, jdk.incubator.foreign.MemoryAddress x9);
        static MemoryAddress allocate(ProcessUrlActionEx fi) {
            return RuntimeHelper.upcallStub(ProcessUrlActionEx.class, fi, IInternetSecurityManagerEx2Vtbl.ProcessUrlActionEx$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(ProcessUrlActionEx fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(ProcessUrlActionEx.class, fi, IInternetSecurityManagerEx2Vtbl.ProcessUrlActionEx$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static ProcessUrlActionEx ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3, int x4, jdk.incubator.foreign.MemoryAddress x5, int x6, int x7, int x8, jdk.incubator.foreign.MemoryAddress x9) -> {
                try {
                    return (int)IInternetSecurityManagerEx2Vtbl.ProcessUrlActionEx$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ProcessUrlActionEx$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ProcessUrlActionEx")));
    public static VarHandle ProcessUrlActionEx$VH() {
        return IInternetSecurityManagerEx2Vtbl.ProcessUrlActionEx$VH;
    }
    public static MemoryAddress ProcessUrlActionEx$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.ProcessUrlActionEx$VH.get(seg);
    }
    public static void ProcessUrlActionEx$set( MemorySegment seg, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.ProcessUrlActionEx$VH.set(seg, x);
    }
    public static MemoryAddress ProcessUrlActionEx$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.ProcessUrlActionEx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessUrlActionEx$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.ProcessUrlActionEx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ProcessUrlActionEx ProcessUrlActionEx (MemorySegment segment) {
        return ProcessUrlActionEx.ofAddress(ProcessUrlActionEx$get(segment));
    }
    static final FunctionDescriptor MapUrlToZoneEx2$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle MapUrlToZoneEx2$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetSecurityManagerEx2Vtbl.MapUrlToZoneEx2$FUNC, false
    );
    public interface MapUrlToZoneEx2 {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5);
        static MemoryAddress allocate(MapUrlToZoneEx2 fi) {
            return RuntimeHelper.upcallStub(MapUrlToZoneEx2.class, fi, IInternetSecurityManagerEx2Vtbl.MapUrlToZoneEx2$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(MapUrlToZoneEx2 fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(MapUrlToZoneEx2.class, fi, IInternetSecurityManagerEx2Vtbl.MapUrlToZoneEx2$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static MapUrlToZoneEx2 ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5) -> {
                try {
                    return (int)IInternetSecurityManagerEx2Vtbl.MapUrlToZoneEx2$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle MapUrlToZoneEx2$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("MapUrlToZoneEx2")));
    public static VarHandle MapUrlToZoneEx2$VH() {
        return IInternetSecurityManagerEx2Vtbl.MapUrlToZoneEx2$VH;
    }
    public static MemoryAddress MapUrlToZoneEx2$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.MapUrlToZoneEx2$VH.get(seg);
    }
    public static void MapUrlToZoneEx2$set( MemorySegment seg, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.MapUrlToZoneEx2$VH.set(seg, x);
    }
    public static MemoryAddress MapUrlToZoneEx2$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.MapUrlToZoneEx2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MapUrlToZoneEx2$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.MapUrlToZoneEx2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MapUrlToZoneEx2 MapUrlToZoneEx2 (MemorySegment segment) {
        return MapUrlToZoneEx2.ofAddress(MapUrlToZoneEx2$get(segment));
    }
    static final FunctionDescriptor ProcessUrlActionEx2$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG_LONG,
        C_POINTER
    );
    static final MethodHandle ProcessUrlActionEx2$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IIJLjdk/incubator/foreign/MemoryAddress;)I",
        IInternetSecurityManagerEx2Vtbl.ProcessUrlActionEx2$FUNC, false
    );
    public interface ProcessUrlActionEx2 {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3, int x4, jdk.incubator.foreign.MemoryAddress x5, int x6, int x7, long x8, jdk.incubator.foreign.MemoryAddress x9);
        static MemoryAddress allocate(ProcessUrlActionEx2 fi) {
            return RuntimeHelper.upcallStub(ProcessUrlActionEx2.class, fi, IInternetSecurityManagerEx2Vtbl.ProcessUrlActionEx2$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IIJLjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(ProcessUrlActionEx2 fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(ProcessUrlActionEx2.class, fi, IInternetSecurityManagerEx2Vtbl.ProcessUrlActionEx2$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IIJLjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static ProcessUrlActionEx2 ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3, int x4, jdk.incubator.foreign.MemoryAddress x5, int x6, int x7, long x8, jdk.incubator.foreign.MemoryAddress x9) -> {
                try {
                    return (int)IInternetSecurityManagerEx2Vtbl.ProcessUrlActionEx2$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ProcessUrlActionEx2$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ProcessUrlActionEx2")));
    public static VarHandle ProcessUrlActionEx2$VH() {
        return IInternetSecurityManagerEx2Vtbl.ProcessUrlActionEx2$VH;
    }
    public static MemoryAddress ProcessUrlActionEx2$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.ProcessUrlActionEx2$VH.get(seg);
    }
    public static void ProcessUrlActionEx2$set( MemorySegment seg, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.ProcessUrlActionEx2$VH.set(seg, x);
    }
    public static MemoryAddress ProcessUrlActionEx2$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.ProcessUrlActionEx2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessUrlActionEx2$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.ProcessUrlActionEx2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ProcessUrlActionEx2 ProcessUrlActionEx2 (MemorySegment segment) {
        return ProcessUrlActionEx2.ofAddress(ProcessUrlActionEx2$get(segment));
    }
    static final FunctionDescriptor GetSecurityIdEx2$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG
    );
    static final MethodHandle GetSecurityIdEx2$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        IInternetSecurityManagerEx2Vtbl.GetSecurityIdEx2$FUNC, false
    );
    public interface GetSecurityIdEx2 {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, long x4);
        static MemoryAddress allocate(GetSecurityIdEx2 fi) {
            return RuntimeHelper.upcallStub(GetSecurityIdEx2.class, fi, IInternetSecurityManagerEx2Vtbl.GetSecurityIdEx2$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I");
        }
        static MemoryAddress allocate(GetSecurityIdEx2 fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetSecurityIdEx2.class, fi, IInternetSecurityManagerEx2Vtbl.GetSecurityIdEx2$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I", scope);
        }
        static GetSecurityIdEx2 ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, long x4) -> {
                try {
                    return (int)IInternetSecurityManagerEx2Vtbl.GetSecurityIdEx2$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetSecurityIdEx2$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetSecurityIdEx2")));
    public static VarHandle GetSecurityIdEx2$VH() {
        return IInternetSecurityManagerEx2Vtbl.GetSecurityIdEx2$VH;
    }
    public static MemoryAddress GetSecurityIdEx2$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.GetSecurityIdEx2$VH.get(seg);
    }
    public static void GetSecurityIdEx2$set( MemorySegment seg, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.GetSecurityIdEx2$VH.set(seg, x);
    }
    public static MemoryAddress GetSecurityIdEx2$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.GetSecurityIdEx2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSecurityIdEx2$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.GetSecurityIdEx2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSecurityIdEx2 GetSecurityIdEx2 (MemorySegment segment) {
        return GetSecurityIdEx2.ofAddress(GetSecurityIdEx2$get(segment));
    }
    static final FunctionDescriptor QueryCustomPolicyEx2$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG_LONG
    );
    static final MethodHandle QueryCustomPolicyEx2$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJ)I",
        IInternetSecurityManagerEx2Vtbl.QueryCustomPolicyEx2$FUNC, false
    );
    public interface QueryCustomPolicyEx2 {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5, int x6, long x7);
        static MemoryAddress allocate(QueryCustomPolicyEx2 fi) {
            return RuntimeHelper.upcallStub(QueryCustomPolicyEx2.class, fi, IInternetSecurityManagerEx2Vtbl.QueryCustomPolicyEx2$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJ)I");
        }
        static MemoryAddress allocate(QueryCustomPolicyEx2 fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryCustomPolicyEx2.class, fi, IInternetSecurityManagerEx2Vtbl.QueryCustomPolicyEx2$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJ)I", scope);
        }
        static QueryCustomPolicyEx2 ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5, int x6, long x7) -> {
                try {
                    return (int)IInternetSecurityManagerEx2Vtbl.QueryCustomPolicyEx2$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6, x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryCustomPolicyEx2$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryCustomPolicyEx2")));
    public static VarHandle QueryCustomPolicyEx2$VH() {
        return IInternetSecurityManagerEx2Vtbl.QueryCustomPolicyEx2$VH;
    }
    public static MemoryAddress QueryCustomPolicyEx2$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.QueryCustomPolicyEx2$VH.get(seg);
    }
    public static void QueryCustomPolicyEx2$set( MemorySegment seg, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.QueryCustomPolicyEx2$VH.set(seg, x);
    }
    public static MemoryAddress QueryCustomPolicyEx2$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetSecurityManagerEx2Vtbl.QueryCustomPolicyEx2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryCustomPolicyEx2$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetSecurityManagerEx2Vtbl.QueryCustomPolicyEx2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryCustomPolicyEx2 QueryCustomPolicyEx2 (MemorySegment segment) {
        return QueryCustomPolicyEx2.ofAddress(QueryCustomPolicyEx2$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


