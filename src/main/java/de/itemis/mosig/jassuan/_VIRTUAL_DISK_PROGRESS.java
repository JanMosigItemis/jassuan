// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _VIRTUAL_DISK_PROGRESS {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("OperationStatus"),
        MemoryLayout.paddingLayout(32),
        C_LONG_LONG.withName("CurrentValue"),
        C_LONG_LONG.withName("CompletionValue")
    ).withName("_VIRTUAL_DISK_PROGRESS");
    public static MemoryLayout $LAYOUT() {
        return _VIRTUAL_DISK_PROGRESS.$struct$LAYOUT;
    }
    static final VarHandle OperationStatus$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("OperationStatus"));
    public static VarHandle OperationStatus$VH() {
        return _VIRTUAL_DISK_PROGRESS.OperationStatus$VH;
    }
    public static int OperationStatus$get(MemorySegment seg) {
        return (int)_VIRTUAL_DISK_PROGRESS.OperationStatus$VH.get(seg);
    }
    public static void OperationStatus$set( MemorySegment seg, int x) {
        _VIRTUAL_DISK_PROGRESS.OperationStatus$VH.set(seg, x);
    }
    public static int OperationStatus$get(MemorySegment seg, long index) {
        return (int)_VIRTUAL_DISK_PROGRESS.OperationStatus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OperationStatus$set(MemorySegment seg, long index, int x) {
        _VIRTUAL_DISK_PROGRESS.OperationStatus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CurrentValue$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("CurrentValue"));
    public static VarHandle CurrentValue$VH() {
        return _VIRTUAL_DISK_PROGRESS.CurrentValue$VH;
    }
    public static long CurrentValue$get(MemorySegment seg) {
        return (long)_VIRTUAL_DISK_PROGRESS.CurrentValue$VH.get(seg);
    }
    public static void CurrentValue$set( MemorySegment seg, long x) {
        _VIRTUAL_DISK_PROGRESS.CurrentValue$VH.set(seg, x);
    }
    public static long CurrentValue$get(MemorySegment seg, long index) {
        return (long)_VIRTUAL_DISK_PROGRESS.CurrentValue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CurrentValue$set(MemorySegment seg, long index, long x) {
        _VIRTUAL_DISK_PROGRESS.CurrentValue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CompletionValue$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("CompletionValue"));
    public static VarHandle CompletionValue$VH() {
        return _VIRTUAL_DISK_PROGRESS.CompletionValue$VH;
    }
    public static long CompletionValue$get(MemorySegment seg) {
        return (long)_VIRTUAL_DISK_PROGRESS.CompletionValue$VH.get(seg);
    }
    public static void CompletionValue$set( MemorySegment seg, long x) {
        _VIRTUAL_DISK_PROGRESS.CompletionValue$VH.set(seg, x);
    }
    public static long CompletionValue$get(MemorySegment seg, long index) {
        return (long)_VIRTUAL_DISK_PROGRESS.CompletionValue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CompletionValue$set(MemorySegment seg, long index, long x) {
        _VIRTUAL_DISK_PROGRESS.CompletionValue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


