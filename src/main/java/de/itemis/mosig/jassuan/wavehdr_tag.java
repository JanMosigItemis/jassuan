// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class wavehdr_tag {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("lpData"),
        C_LONG.withName("dwBufferLength"),
        C_LONG.withName("dwBytesRecorded"),
        C_LONG_LONG.withName("dwUser"),
        C_LONG.withName("dwFlags"),
        C_LONG.withName("dwLoops"),
        C_POINTER.withName("lpNext"),
        C_LONG_LONG.withName("reserved")
    ).withName("wavehdr_tag");
    public static MemoryLayout $LAYOUT() {
        return wavehdr_tag.$struct$LAYOUT;
    }
    static final VarHandle lpData$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpData")));
    public static VarHandle lpData$VH() {
        return wavehdr_tag.lpData$VH;
    }
    public static MemoryAddress lpData$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)wavehdr_tag.lpData$VH.get(seg);
    }
    public static void lpData$set( MemorySegment seg, MemoryAddress x) {
        wavehdr_tag.lpData$VH.set(seg, x);
    }
    public static MemoryAddress lpData$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)wavehdr_tag.lpData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpData$set(MemorySegment seg, long index, MemoryAddress x) {
        wavehdr_tag.lpData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwBufferLength$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwBufferLength"));
    public static VarHandle dwBufferLength$VH() {
        return wavehdr_tag.dwBufferLength$VH;
    }
    public static int dwBufferLength$get(MemorySegment seg) {
        return (int)wavehdr_tag.dwBufferLength$VH.get(seg);
    }
    public static void dwBufferLength$set( MemorySegment seg, int x) {
        wavehdr_tag.dwBufferLength$VH.set(seg, x);
    }
    public static int dwBufferLength$get(MemorySegment seg, long index) {
        return (int)wavehdr_tag.dwBufferLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwBufferLength$set(MemorySegment seg, long index, int x) {
        wavehdr_tag.dwBufferLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwBytesRecorded$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwBytesRecorded"));
    public static VarHandle dwBytesRecorded$VH() {
        return wavehdr_tag.dwBytesRecorded$VH;
    }
    public static int dwBytesRecorded$get(MemorySegment seg) {
        return (int)wavehdr_tag.dwBytesRecorded$VH.get(seg);
    }
    public static void dwBytesRecorded$set( MemorySegment seg, int x) {
        wavehdr_tag.dwBytesRecorded$VH.set(seg, x);
    }
    public static int dwBytesRecorded$get(MemorySegment seg, long index) {
        return (int)wavehdr_tag.dwBytesRecorded$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwBytesRecorded$set(MemorySegment seg, long index, int x) {
        wavehdr_tag.dwBytesRecorded$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwUser$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwUser"));
    public static VarHandle dwUser$VH() {
        return wavehdr_tag.dwUser$VH;
    }
    public static long dwUser$get(MemorySegment seg) {
        return (long)wavehdr_tag.dwUser$VH.get(seg);
    }
    public static void dwUser$set( MemorySegment seg, long x) {
        wavehdr_tag.dwUser$VH.set(seg, x);
    }
    public static long dwUser$get(MemorySegment seg, long index) {
        return (long)wavehdr_tag.dwUser$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwUser$set(MemorySegment seg, long index, long x) {
        wavehdr_tag.dwUser$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwFlags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static VarHandle dwFlags$VH() {
        return wavehdr_tag.dwFlags$VH;
    }
    public static int dwFlags$get(MemorySegment seg) {
        return (int)wavehdr_tag.dwFlags$VH.get(seg);
    }
    public static void dwFlags$set( MemorySegment seg, int x) {
        wavehdr_tag.dwFlags$VH.set(seg, x);
    }
    public static int dwFlags$get(MemorySegment seg, long index) {
        return (int)wavehdr_tag.dwFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFlags$set(MemorySegment seg, long index, int x) {
        wavehdr_tag.dwFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwLoops$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwLoops"));
    public static VarHandle dwLoops$VH() {
        return wavehdr_tag.dwLoops$VH;
    }
    public static int dwLoops$get(MemorySegment seg) {
        return (int)wavehdr_tag.dwLoops$VH.get(seg);
    }
    public static void dwLoops$set( MemorySegment seg, int x) {
        wavehdr_tag.dwLoops$VH.set(seg, x);
    }
    public static int dwLoops$get(MemorySegment seg, long index) {
        return (int)wavehdr_tag.dwLoops$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwLoops$set(MemorySegment seg, long index, int x) {
        wavehdr_tag.dwLoops$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpNext$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpNext")));
    public static VarHandle lpNext$VH() {
        return wavehdr_tag.lpNext$VH;
    }
    public static MemoryAddress lpNext$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)wavehdr_tag.lpNext$VH.get(seg);
    }
    public static void lpNext$set( MemorySegment seg, MemoryAddress x) {
        wavehdr_tag.lpNext$VH.set(seg, x);
    }
    public static MemoryAddress lpNext$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)wavehdr_tag.lpNext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpNext$set(MemorySegment seg, long index, MemoryAddress x) {
        wavehdr_tag.lpNext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle reserved$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("reserved"));
    public static VarHandle reserved$VH() {
        return wavehdr_tag.reserved$VH;
    }
    public static long reserved$get(MemorySegment seg) {
        return (long)wavehdr_tag.reserved$VH.get(seg);
    }
    public static void reserved$set( MemorySegment seg, long x) {
        wavehdr_tag.reserved$VH.set(seg, x);
    }
    public static long reserved$get(MemorySegment seg, long index) {
        return (long)wavehdr_tag.reserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved$set(MemorySegment seg, long index, long x) {
        wavehdr_tag.reserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


