// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IXMLDOMNamedNodeMapVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetTypeInfoCount"),
        C_POINTER.withName("GetTypeInfo"),
        C_POINTER.withName("GetIDsOfNames"),
        C_POINTER.withName("Invoke"),
        C_POINTER.withName("getNamedItem"),
        C_POINTER.withName("setNamedItem"),
        C_POINTER.withName("removeNamedItem"),
        C_POINTER.withName("get_item"),
        C_POINTER.withName("get_length"),
        C_POINTER.withName("getQualifiedItem"),
        C_POINTER.withName("removeQualifiedItem"),
        C_POINTER.withName("nextNode"),
        C_POINTER.withName("reset"),
        C_POINTER.withName("get__newEnum")
    ).withName("IXMLDOMNamedNodeMapVtbl");
    public static MemoryLayout $LAYOUT() {
        return IXMLDOMNamedNodeMapVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMNamedNodeMapVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IXMLDOMNamedNodeMapVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IXMLDOMNamedNodeMapVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IXMLDOMNamedNodeMapVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMNamedNodeMapVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IXMLDOMNamedNodeMapVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IXMLDOMNamedNodeMapVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IXMLDOMNamedNodeMapVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMNamedNodeMapVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IXMLDOMNamedNodeMapVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IXMLDOMNamedNodeMapVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IXMLDOMNamedNodeMapVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor GetTypeInfoCount$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetTypeInfoCount$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount$FUNC, false
    );
    public interface GetTypeInfoCount {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetTypeInfoCount fi) {
            return RuntimeHelper.upcallStub(GetTypeInfoCount.class, fi, IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetTypeInfoCount fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetTypeInfoCount.class, fi, IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetTypeInfoCount ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoCount$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfoCount")));
    public static VarHandle GetTypeInfoCount$VH() {
        return IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount$VH;
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount$VH.get(seg);
    }
    public static void GetTypeInfoCount$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount (MemorySegment segment) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment));
    }
    static final FunctionDescriptor GetTypeInfo$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle GetTypeInfo$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMNamedNodeMapVtbl.GetTypeInfo$FUNC, false
    );
    public interface GetTypeInfo {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(GetTypeInfo fi) {
            return RuntimeHelper.upcallStub(GetTypeInfo.class, fi, IXMLDOMNamedNodeMapVtbl.GetTypeInfo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetTypeInfo fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetTypeInfo.class, fi, IXMLDOMNamedNodeMapVtbl.GetTypeInfo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetTypeInfo ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.GetTypeInfo$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfo$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfo")));
    public static VarHandle GetTypeInfo$VH() {
        return IXMLDOMNamedNodeMapVtbl.GetTypeInfo$VH;
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.GetTypeInfo$VH.get(seg);
    }
    public static void GetTypeInfo$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.GetTypeInfo$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.GetTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.GetTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo (MemorySegment segment) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment));
    }
    static final FunctionDescriptor GetIDsOfNames$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle GetIDsOfNames$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMNamedNodeMapVtbl.GetIDsOfNames$FUNC, false
    );
    public interface GetIDsOfNames {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, int x4, jdk.incubator.foreign.MemoryAddress x5);
        static MemoryAddress allocate(GetIDsOfNames fi) {
            return RuntimeHelper.upcallStub(GetIDsOfNames.class, fi, IXMLDOMNamedNodeMapVtbl.GetIDsOfNames$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetIDsOfNames fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetIDsOfNames.class, fi, IXMLDOMNamedNodeMapVtbl.GetIDsOfNames$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetIDsOfNames ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, int x4, jdk.incubator.foreign.MemoryAddress x5) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.GetIDsOfNames$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetIDsOfNames$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetIDsOfNames")));
    public static VarHandle GetIDsOfNames$VH() {
        return IXMLDOMNamedNodeMapVtbl.GetIDsOfNames$VH;
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.GetIDsOfNames$VH.get(seg);
    }
    public static void GetIDsOfNames$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.GetIDsOfNames$VH.set(seg, x);
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.GetIDsOfNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.GetIDsOfNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames (MemorySegment segment) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment));
    }
    static final FunctionDescriptor Invoke$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_SHORT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle Invoke$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ISLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMNamedNodeMapVtbl.Invoke$FUNC, false
    );
    public interface Invoke {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3, short x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8);
        static MemoryAddress allocate(Invoke fi) {
            return RuntimeHelper.upcallStub(Invoke.class, fi, IXMLDOMNamedNodeMapVtbl.Invoke$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ISLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Invoke fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Invoke.class, fi, IXMLDOMNamedNodeMapVtbl.Invoke$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ISLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Invoke ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3, short x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.Invoke$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6, x7, x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Invoke$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Invoke")));
    public static VarHandle Invoke$VH() {
        return IXMLDOMNamedNodeMapVtbl.Invoke$VH;
    }
    public static MemoryAddress Invoke$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.Invoke$VH.get(seg);
    }
    public static void Invoke$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.Invoke$VH.set(seg, x);
    }
    public static MemoryAddress Invoke$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.Invoke$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.Invoke$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke (MemorySegment segment) {
        return Invoke.ofAddress(Invoke$get(segment));
    }
    static final FunctionDescriptor getNamedItem$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle getNamedItem$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMNamedNodeMapVtbl.getNamedItem$FUNC, false
    );
    public interface getNamedItem {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(getNamedItem fi) {
            return RuntimeHelper.upcallStub(getNamedItem.class, fi, IXMLDOMNamedNodeMapVtbl.getNamedItem$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(getNamedItem fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(getNamedItem.class, fi, IXMLDOMNamedNodeMapVtbl.getNamedItem$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static getNamedItem ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.getNamedItem$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle getNamedItem$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("getNamedItem")));
    public static VarHandle getNamedItem$VH() {
        return IXMLDOMNamedNodeMapVtbl.getNamedItem$VH;
    }
    public static MemoryAddress getNamedItem$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.getNamedItem$VH.get(seg);
    }
    public static void getNamedItem$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.getNamedItem$VH.set(seg, x);
    }
    public static MemoryAddress getNamedItem$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.getNamedItem$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void getNamedItem$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.getNamedItem$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static getNamedItem getNamedItem (MemorySegment segment) {
        return getNamedItem.ofAddress(getNamedItem$get(segment));
    }
    static final FunctionDescriptor setNamedItem$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle setNamedItem$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMNamedNodeMapVtbl.setNamedItem$FUNC, false
    );
    public interface setNamedItem {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(setNamedItem fi) {
            return RuntimeHelper.upcallStub(setNamedItem.class, fi, IXMLDOMNamedNodeMapVtbl.setNamedItem$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(setNamedItem fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(setNamedItem.class, fi, IXMLDOMNamedNodeMapVtbl.setNamedItem$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static setNamedItem ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.setNamedItem$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle setNamedItem$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("setNamedItem")));
    public static VarHandle setNamedItem$VH() {
        return IXMLDOMNamedNodeMapVtbl.setNamedItem$VH;
    }
    public static MemoryAddress setNamedItem$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.setNamedItem$VH.get(seg);
    }
    public static void setNamedItem$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.setNamedItem$VH.set(seg, x);
    }
    public static MemoryAddress setNamedItem$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.setNamedItem$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void setNamedItem$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.setNamedItem$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static setNamedItem setNamedItem (MemorySegment segment) {
        return setNamedItem.ofAddress(setNamedItem$get(segment));
    }
    static final FunctionDescriptor removeNamedItem$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle removeNamedItem$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMNamedNodeMapVtbl.removeNamedItem$FUNC, false
    );
    public interface removeNamedItem {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(removeNamedItem fi) {
            return RuntimeHelper.upcallStub(removeNamedItem.class, fi, IXMLDOMNamedNodeMapVtbl.removeNamedItem$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(removeNamedItem fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(removeNamedItem.class, fi, IXMLDOMNamedNodeMapVtbl.removeNamedItem$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static removeNamedItem ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.removeNamedItem$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle removeNamedItem$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("removeNamedItem")));
    public static VarHandle removeNamedItem$VH() {
        return IXMLDOMNamedNodeMapVtbl.removeNamedItem$VH;
    }
    public static MemoryAddress removeNamedItem$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.removeNamedItem$VH.get(seg);
    }
    public static void removeNamedItem$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.removeNamedItem$VH.set(seg, x);
    }
    public static MemoryAddress removeNamedItem$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.removeNamedItem$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void removeNamedItem$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.removeNamedItem$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static removeNamedItem removeNamedItem (MemorySegment segment) {
        return removeNamedItem.ofAddress(removeNamedItem$get(segment));
    }
    static final FunctionDescriptor get_item$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle get_item$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMNamedNodeMapVtbl.get_item$FUNC, false
    );
    public interface get_item {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(get_item fi) {
            return RuntimeHelper.upcallStub(get_item.class, fi, IXMLDOMNamedNodeMapVtbl.get_item$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_item fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_item.class, fi, IXMLDOMNamedNodeMapVtbl.get_item$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_item ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.get_item$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_item$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_item")));
    public static VarHandle get_item$VH() {
        return IXMLDOMNamedNodeMapVtbl.get_item$VH;
    }
    public static MemoryAddress get_item$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.get_item$VH.get(seg);
    }
    public static void get_item$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.get_item$VH.set(seg, x);
    }
    public static MemoryAddress get_item$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.get_item$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_item$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.get_item$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_item get_item (MemorySegment segment) {
        return get_item.ofAddress(get_item$get(segment));
    }
    static final FunctionDescriptor get_length$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get_length$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMNamedNodeMapVtbl.get_length$FUNC, false
    );
    public interface get_length {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get_length fi) {
            return RuntimeHelper.upcallStub(get_length.class, fi, IXMLDOMNamedNodeMapVtbl.get_length$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get_length fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_length.class, fi, IXMLDOMNamedNodeMapVtbl.get_length$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_length ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.get_length$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_length$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get_length")));
    public static VarHandle get_length$VH() {
        return IXMLDOMNamedNodeMapVtbl.get_length$VH;
    }
    public static MemoryAddress get_length$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.get_length$VH.get(seg);
    }
    public static void get_length$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.get_length$VH.set(seg, x);
    }
    public static MemoryAddress get_length$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.get_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_length$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.get_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_length get_length (MemorySegment segment) {
        return get_length.ofAddress(get_length$get(segment));
    }
    static final FunctionDescriptor getQualifiedItem$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle getQualifiedItem$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMNamedNodeMapVtbl.getQualifiedItem$FUNC, false
    );
    public interface getQualifiedItem {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(getQualifiedItem fi) {
            return RuntimeHelper.upcallStub(getQualifiedItem.class, fi, IXMLDOMNamedNodeMapVtbl.getQualifiedItem$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(getQualifiedItem fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(getQualifiedItem.class, fi, IXMLDOMNamedNodeMapVtbl.getQualifiedItem$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static getQualifiedItem ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.getQualifiedItem$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle getQualifiedItem$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("getQualifiedItem")));
    public static VarHandle getQualifiedItem$VH() {
        return IXMLDOMNamedNodeMapVtbl.getQualifiedItem$VH;
    }
    public static MemoryAddress getQualifiedItem$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.getQualifiedItem$VH.get(seg);
    }
    public static void getQualifiedItem$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.getQualifiedItem$VH.set(seg, x);
    }
    public static MemoryAddress getQualifiedItem$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.getQualifiedItem$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void getQualifiedItem$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.getQualifiedItem$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static getQualifiedItem getQualifiedItem (MemorySegment segment) {
        return getQualifiedItem.ofAddress(getQualifiedItem$get(segment));
    }
    static final FunctionDescriptor removeQualifiedItem$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle removeQualifiedItem$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMNamedNodeMapVtbl.removeQualifiedItem$FUNC, false
    );
    public interface removeQualifiedItem {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(removeQualifiedItem fi) {
            return RuntimeHelper.upcallStub(removeQualifiedItem.class, fi, IXMLDOMNamedNodeMapVtbl.removeQualifiedItem$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(removeQualifiedItem fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(removeQualifiedItem.class, fi, IXMLDOMNamedNodeMapVtbl.removeQualifiedItem$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static removeQualifiedItem ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.removeQualifiedItem$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle removeQualifiedItem$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("removeQualifiedItem")));
    public static VarHandle removeQualifiedItem$VH() {
        return IXMLDOMNamedNodeMapVtbl.removeQualifiedItem$VH;
    }
    public static MemoryAddress removeQualifiedItem$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.removeQualifiedItem$VH.get(seg);
    }
    public static void removeQualifiedItem$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.removeQualifiedItem$VH.set(seg, x);
    }
    public static MemoryAddress removeQualifiedItem$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.removeQualifiedItem$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void removeQualifiedItem$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.removeQualifiedItem$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static removeQualifiedItem removeQualifiedItem (MemorySegment segment) {
        return removeQualifiedItem.ofAddress(removeQualifiedItem$get(segment));
    }
    static final FunctionDescriptor nextNode$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle nextNode$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMNamedNodeMapVtbl.nextNode$FUNC, false
    );
    public interface nextNode {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(nextNode fi) {
            return RuntimeHelper.upcallStub(nextNode.class, fi, IXMLDOMNamedNodeMapVtbl.nextNode$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(nextNode fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(nextNode.class, fi, IXMLDOMNamedNodeMapVtbl.nextNode$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static nextNode ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.nextNode$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle nextNode$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("nextNode")));
    public static VarHandle nextNode$VH() {
        return IXMLDOMNamedNodeMapVtbl.nextNode$VH;
    }
    public static MemoryAddress nextNode$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.nextNode$VH.get(seg);
    }
    public static void nextNode$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.nextNode$VH.set(seg, x);
    }
    public static MemoryAddress nextNode$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.nextNode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nextNode$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.nextNode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static nextNode nextNode (MemorySegment segment) {
        return nextNode.ofAddress(nextNode$get(segment));
    }
    static final FunctionDescriptor reset$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle reset$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMNamedNodeMapVtbl.reset$FUNC, false
    );
    public interface reset {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(reset fi) {
            return RuntimeHelper.upcallStub(reset.class, fi, IXMLDOMNamedNodeMapVtbl.reset$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(reset fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(reset.class, fi, IXMLDOMNamedNodeMapVtbl.reset$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static reset ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.reset$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle reset$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("reset")));
    public static VarHandle reset$VH() {
        return IXMLDOMNamedNodeMapVtbl.reset$VH;
    }
    public static MemoryAddress reset$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.reset$VH.get(seg);
    }
    public static void reset$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.reset$VH.set(seg, x);
    }
    public static MemoryAddress reset$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.reset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void reset$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.reset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static reset reset (MemorySegment segment) {
        return reset.ofAddress(reset$get(segment));
    }
    static final FunctionDescriptor get__newEnum$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle get__newEnum$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IXMLDOMNamedNodeMapVtbl.get__newEnum$FUNC, false
    );
    public interface get__newEnum {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(get__newEnum fi) {
            return RuntimeHelper.upcallStub(get__newEnum.class, fi, IXMLDOMNamedNodeMapVtbl.get__newEnum$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(get__newEnum fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get__newEnum.class, fi, IXMLDOMNamedNodeMapVtbl.get__newEnum$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get__newEnum ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.get__newEnum$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get__newEnum$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("get__newEnum")));
    public static VarHandle get__newEnum$VH() {
        return IXMLDOMNamedNodeMapVtbl.get__newEnum$VH;
    }
    public static MemoryAddress get__newEnum$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.get__newEnum$VH.get(seg);
    }
    public static void get__newEnum$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.get__newEnum$VH.set(seg, x);
    }
    public static MemoryAddress get__newEnum$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.get__newEnum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get__newEnum$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.get__newEnum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get__newEnum get__newEnum (MemorySegment segment) {
        return get__newEnum.ofAddress(get__newEnum$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


