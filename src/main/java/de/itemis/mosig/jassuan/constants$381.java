// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$381 {

    static final FunctionDescriptor CreateThreadpoolCleanupGroup$FUNC = FunctionDescriptor.of(C_POINTER);
    static final MethodHandle CreateThreadpoolCleanupGroup$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CreateThreadpoolCleanupGroup",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        constants$381.CreateThreadpoolCleanupGroup$FUNC, false
    );
    static final FunctionDescriptor CloseThreadpoolCleanupGroupMembers$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle CloseThreadpoolCleanupGroupMembers$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CloseThreadpoolCleanupGroupMembers",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V",
        constants$381.CloseThreadpoolCleanupGroupMembers$FUNC, false
    );
    static final FunctionDescriptor CloseThreadpoolCleanupGroup$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle CloseThreadpoolCleanupGroup$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CloseThreadpoolCleanupGroup",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$381.CloseThreadpoolCleanupGroup$FUNC, false
    );
    static final FunctionDescriptor SetEventWhenCallbackReturns$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle SetEventWhenCallbackReturns$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "SetEventWhenCallbackReturns",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$381.SetEventWhenCallbackReturns$FUNC, false
    );
    static final FunctionDescriptor ReleaseSemaphoreWhenCallbackReturns$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle ReleaseSemaphoreWhenCallbackReturns$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "ReleaseSemaphoreWhenCallbackReturns",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        constants$381.ReleaseSemaphoreWhenCallbackReturns$FUNC, false
    );
    static final FunctionDescriptor ReleaseMutexWhenCallbackReturns$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle ReleaseMutexWhenCallbackReturns$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "ReleaseMutexWhenCallbackReturns",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$381.ReleaseMutexWhenCallbackReturns$FUNC, false
    );
}


