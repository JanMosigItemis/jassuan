// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class gpgrt_opt_t {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("short_opt"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("long_opt"),
        C_INT.withName("flags"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("description")
    );
    public static MemoryLayout $LAYOUT() {
        return gpgrt_opt_t.$struct$LAYOUT;
    }
    static final VarHandle short_opt$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("short_opt"));
    public static VarHandle short_opt$VH() {
        return gpgrt_opt_t.short_opt$VH;
    }
    public static int short_opt$get(MemorySegment seg) {
        return (int)gpgrt_opt_t.short_opt$VH.get(seg);
    }
    public static void short_opt$set( MemorySegment seg, int x) {
        gpgrt_opt_t.short_opt$VH.set(seg, x);
    }
    public static int short_opt$get(MemorySegment seg, long index) {
        return (int)gpgrt_opt_t.short_opt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void short_opt$set(MemorySegment seg, long index, int x) {
        gpgrt_opt_t.short_opt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle long_opt$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("long_opt")));
    public static VarHandle long_opt$VH() {
        return gpgrt_opt_t.long_opt$VH;
    }
    public static MemoryAddress long_opt$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)gpgrt_opt_t.long_opt$VH.get(seg);
    }
    public static void long_opt$set( MemorySegment seg, MemoryAddress x) {
        gpgrt_opt_t.long_opt$VH.set(seg, x);
    }
    public static MemoryAddress long_opt$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)gpgrt_opt_t.long_opt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void long_opt$set(MemorySegment seg, long index, MemoryAddress x) {
        gpgrt_opt_t.long_opt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return gpgrt_opt_t.flags$VH;
    }
    public static int flags$get(MemorySegment seg) {
        return (int)gpgrt_opt_t.flags$VH.get(seg);
    }
    public static void flags$set( MemorySegment seg, int x) {
        gpgrt_opt_t.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)gpgrt_opt_t.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        gpgrt_opt_t.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle description$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("description")));
    public static VarHandle description$VH() {
        return gpgrt_opt_t.description$VH;
    }
    public static MemoryAddress description$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)gpgrt_opt_t.description$VH.get(seg);
    }
    public static void description$set( MemorySegment seg, MemoryAddress x) {
        gpgrt_opt_t.description$VH.set(seg, x);
    }
    public static MemoryAddress description$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)gpgrt_opt_t.description$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void description$set(MemorySegment seg, long index, MemoryAddress x) {
        gpgrt_opt_t.description$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


