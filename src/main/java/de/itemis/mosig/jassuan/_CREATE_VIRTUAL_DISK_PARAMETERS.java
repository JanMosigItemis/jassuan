// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _CREATE_VIRTUAL_DISK_PARAMETERS {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("Version"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    C_LONG.withName("Data1"),
                    C_SHORT.withName("Data2"),
                    C_SHORT.withName("Data3"),
                    MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
                ).withName("UniqueId"),
                C_LONG_LONG.withName("MaximumSize"),
                C_LONG.withName("BlockSizeInBytes"),
                C_LONG.withName("SectorSizeInBytes"),
                C_POINTER.withName("ParentPath"),
                C_POINTER.withName("SourcePath")
            ).withName("Version1")
        ).withName("$anon$0")
    ).withName("_CREATE_VIRTUAL_DISK_PARAMETERS");
    public static MemoryLayout $LAYOUT() {
        return _CREATE_VIRTUAL_DISK_PARAMETERS.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _CREATE_VIRTUAL_DISK_PARAMETERS.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)_CREATE_VIRTUAL_DISK_PARAMETERS.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        _CREATE_VIRTUAL_DISK_PARAMETERS.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_CREATE_VIRTUAL_DISK_PARAMETERS.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _CREATE_VIRTUAL_DISK_PARAMETERS.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class Version1 {

        static final MemoryLayout Version1$struct$LAYOUT = MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
            ).withName("UniqueId"),
            C_LONG_LONG.withName("MaximumSize"),
            C_LONG.withName("BlockSizeInBytes"),
            C_LONG.withName("SectorSizeInBytes"),
            C_POINTER.withName("ParentPath"),
            C_POINTER.withName("SourcePath")
        );
        public static MemoryLayout $LAYOUT() {
            return Version1.Version1$struct$LAYOUT;
        }
        public static MemorySegment UniqueId$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        static final VarHandle MaximumSize$VH = Version1$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaximumSize"));
        public static VarHandle MaximumSize$VH() {
            return Version1.MaximumSize$VH;
        }
        public static long MaximumSize$get(MemorySegment seg) {
            return (long)Version1.MaximumSize$VH.get(seg);
        }
        public static void MaximumSize$set( MemorySegment seg, long x) {
            Version1.MaximumSize$VH.set(seg, x);
        }
        public static long MaximumSize$get(MemorySegment seg, long index) {
            return (long)Version1.MaximumSize$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void MaximumSize$set(MemorySegment seg, long index, long x) {
            Version1.MaximumSize$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle BlockSizeInBytes$VH = Version1$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("BlockSizeInBytes"));
        public static VarHandle BlockSizeInBytes$VH() {
            return Version1.BlockSizeInBytes$VH;
        }
        public static int BlockSizeInBytes$get(MemorySegment seg) {
            return (int)Version1.BlockSizeInBytes$VH.get(seg);
        }
        public static void BlockSizeInBytes$set( MemorySegment seg, int x) {
            Version1.BlockSizeInBytes$VH.set(seg, x);
        }
        public static int BlockSizeInBytes$get(MemorySegment seg, long index) {
            return (int)Version1.BlockSizeInBytes$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void BlockSizeInBytes$set(MemorySegment seg, long index, int x) {
            Version1.BlockSizeInBytes$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle SectorSizeInBytes$VH = Version1$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("SectorSizeInBytes"));
        public static VarHandle SectorSizeInBytes$VH() {
            return Version1.SectorSizeInBytes$VH;
        }
        public static int SectorSizeInBytes$get(MemorySegment seg) {
            return (int)Version1.SectorSizeInBytes$VH.get(seg);
        }
        public static void SectorSizeInBytes$set( MemorySegment seg, int x) {
            Version1.SectorSizeInBytes$VH.set(seg, x);
        }
        public static int SectorSizeInBytes$get(MemorySegment seg, long index) {
            return (int)Version1.SectorSizeInBytes$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void SectorSizeInBytes$set(MemorySegment seg, long index, int x) {
            Version1.SectorSizeInBytes$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle ParentPath$VH = MemoryHandles.asAddressVarHandle(Version1$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ParentPath")));
        public static VarHandle ParentPath$VH() {
            return Version1.ParentPath$VH;
        }
        public static MemoryAddress ParentPath$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)Version1.ParentPath$VH.get(seg);
        }
        public static void ParentPath$set( MemorySegment seg, MemoryAddress x) {
            Version1.ParentPath$VH.set(seg, x);
        }
        public static MemoryAddress ParentPath$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)Version1.ParentPath$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void ParentPath$set(MemorySegment seg, long index, MemoryAddress x) {
            Version1.ParentPath$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle SourcePath$VH = MemoryHandles.asAddressVarHandle(Version1$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SourcePath")));
        public static VarHandle SourcePath$VH() {
            return Version1.SourcePath$VH;
        }
        public static MemoryAddress SourcePath$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)Version1.SourcePath$VH.get(seg);
        }
        public static void SourcePath$set( MemorySegment seg, MemoryAddress x) {
            Version1.SourcePath$VH.set(seg, x);
        }
        public static MemoryAddress SourcePath$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)Version1.SourcePath$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void SourcePath$set(MemorySegment seg, long index, MemoryAddress x) {
            Version1.SourcePath$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.ofScope(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment Version1$slice(MemorySegment seg) {
        return seg.asSlice(8, 48);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


