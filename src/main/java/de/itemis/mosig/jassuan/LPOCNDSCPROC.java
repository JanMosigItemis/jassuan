// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public interface LPOCNDSCPROC {

    void apply(long x0, long x1, jdk.incubator.foreign.MemoryAddress x2);
    static MemoryAddress allocate(LPOCNDSCPROC fi) {
        return RuntimeHelper.upcallStub(LPOCNDSCPROC.class, fi, constants$1287.LPOCNDSCPROC$FUNC, "(JJLjdk/incubator/foreign/MemoryAddress;)V");
    }
    static MemoryAddress allocate(LPOCNDSCPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(LPOCNDSCPROC.class, fi, constants$1287.LPOCNDSCPROC$FUNC, "(JJLjdk/incubator/foreign/MemoryAddress;)V", scope);
    }
    static LPOCNDSCPROC ofAddress(MemoryAddress addr) {
        return (long x0, long x1, jdk.incubator.foreign.MemoryAddress x2) -> {
            try {
                constants$1287.LPOCNDSCPROC$MH.invokeExact((Addressable)addr, x0, x1, x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


