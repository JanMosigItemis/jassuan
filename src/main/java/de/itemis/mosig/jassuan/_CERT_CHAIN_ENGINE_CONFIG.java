// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _CERT_CHAIN_ENGINE_CONFIG {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("cbSize"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("hRestrictedRoot"),
        C_POINTER.withName("hRestrictedTrust"),
        C_POINTER.withName("hRestrictedOther"),
        C_LONG.withName("cAdditionalStore"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("rghAdditionalStore"),
        C_LONG.withName("dwFlags"),
        C_LONG.withName("dwUrlRetrievalTimeout"),
        C_LONG.withName("MaximumCachedCertificates"),
        C_LONG.withName("CycleDetectionModulus"),
        C_POINTER.withName("hExclusiveRoot"),
        C_POINTER.withName("hExclusiveTrustedPeople")
    ).withName("_CERT_CHAIN_ENGINE_CONFIG");
    public static MemoryLayout $LAYOUT() {
        return _CERT_CHAIN_ENGINE_CONFIG.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return _CERT_CHAIN_ENGINE_CONFIG.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)_CERT_CHAIN_ENGINE_CONFIG.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        _CERT_CHAIN_ENGINE_CONFIG.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)_CERT_CHAIN_ENGINE_CONFIG.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        _CERT_CHAIN_ENGINE_CONFIG.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hRestrictedRoot$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hRestrictedRoot")));
    public static VarHandle hRestrictedRoot$VH() {
        return _CERT_CHAIN_ENGINE_CONFIG.hRestrictedRoot$VH;
    }
    public static MemoryAddress hRestrictedRoot$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_CHAIN_ENGINE_CONFIG.hRestrictedRoot$VH.get(seg);
    }
    public static void hRestrictedRoot$set( MemorySegment seg, MemoryAddress x) {
        _CERT_CHAIN_ENGINE_CONFIG.hRestrictedRoot$VH.set(seg, x);
    }
    public static MemoryAddress hRestrictedRoot$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_CHAIN_ENGINE_CONFIG.hRestrictedRoot$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hRestrictedRoot$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_CHAIN_ENGINE_CONFIG.hRestrictedRoot$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hRestrictedTrust$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hRestrictedTrust")));
    public static VarHandle hRestrictedTrust$VH() {
        return _CERT_CHAIN_ENGINE_CONFIG.hRestrictedTrust$VH;
    }
    public static MemoryAddress hRestrictedTrust$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_CHAIN_ENGINE_CONFIG.hRestrictedTrust$VH.get(seg);
    }
    public static void hRestrictedTrust$set( MemorySegment seg, MemoryAddress x) {
        _CERT_CHAIN_ENGINE_CONFIG.hRestrictedTrust$VH.set(seg, x);
    }
    public static MemoryAddress hRestrictedTrust$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_CHAIN_ENGINE_CONFIG.hRestrictedTrust$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hRestrictedTrust$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_CHAIN_ENGINE_CONFIG.hRestrictedTrust$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hRestrictedOther$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hRestrictedOther")));
    public static VarHandle hRestrictedOther$VH() {
        return _CERT_CHAIN_ENGINE_CONFIG.hRestrictedOther$VH;
    }
    public static MemoryAddress hRestrictedOther$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_CHAIN_ENGINE_CONFIG.hRestrictedOther$VH.get(seg);
    }
    public static void hRestrictedOther$set( MemorySegment seg, MemoryAddress x) {
        _CERT_CHAIN_ENGINE_CONFIG.hRestrictedOther$VH.set(seg, x);
    }
    public static MemoryAddress hRestrictedOther$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_CHAIN_ENGINE_CONFIG.hRestrictedOther$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hRestrictedOther$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_CHAIN_ENGINE_CONFIG.hRestrictedOther$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cAdditionalStore$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cAdditionalStore"));
    public static VarHandle cAdditionalStore$VH() {
        return _CERT_CHAIN_ENGINE_CONFIG.cAdditionalStore$VH;
    }
    public static int cAdditionalStore$get(MemorySegment seg) {
        return (int)_CERT_CHAIN_ENGINE_CONFIG.cAdditionalStore$VH.get(seg);
    }
    public static void cAdditionalStore$set( MemorySegment seg, int x) {
        _CERT_CHAIN_ENGINE_CONFIG.cAdditionalStore$VH.set(seg, x);
    }
    public static int cAdditionalStore$get(MemorySegment seg, long index) {
        return (int)_CERT_CHAIN_ENGINE_CONFIG.cAdditionalStore$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cAdditionalStore$set(MemorySegment seg, long index, int x) {
        _CERT_CHAIN_ENGINE_CONFIG.cAdditionalStore$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rghAdditionalStore$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("rghAdditionalStore")));
    public static VarHandle rghAdditionalStore$VH() {
        return _CERT_CHAIN_ENGINE_CONFIG.rghAdditionalStore$VH;
    }
    public static MemoryAddress rghAdditionalStore$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_CHAIN_ENGINE_CONFIG.rghAdditionalStore$VH.get(seg);
    }
    public static void rghAdditionalStore$set( MemorySegment seg, MemoryAddress x) {
        _CERT_CHAIN_ENGINE_CONFIG.rghAdditionalStore$VH.set(seg, x);
    }
    public static MemoryAddress rghAdditionalStore$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_CHAIN_ENGINE_CONFIG.rghAdditionalStore$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rghAdditionalStore$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_CHAIN_ENGINE_CONFIG.rghAdditionalStore$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwFlags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static VarHandle dwFlags$VH() {
        return _CERT_CHAIN_ENGINE_CONFIG.dwFlags$VH;
    }
    public static int dwFlags$get(MemorySegment seg) {
        return (int)_CERT_CHAIN_ENGINE_CONFIG.dwFlags$VH.get(seg);
    }
    public static void dwFlags$set( MemorySegment seg, int x) {
        _CERT_CHAIN_ENGINE_CONFIG.dwFlags$VH.set(seg, x);
    }
    public static int dwFlags$get(MemorySegment seg, long index) {
        return (int)_CERT_CHAIN_ENGINE_CONFIG.dwFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFlags$set(MemorySegment seg, long index, int x) {
        _CERT_CHAIN_ENGINE_CONFIG.dwFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwUrlRetrievalTimeout$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwUrlRetrievalTimeout"));
    public static VarHandle dwUrlRetrievalTimeout$VH() {
        return _CERT_CHAIN_ENGINE_CONFIG.dwUrlRetrievalTimeout$VH;
    }
    public static int dwUrlRetrievalTimeout$get(MemorySegment seg) {
        return (int)_CERT_CHAIN_ENGINE_CONFIG.dwUrlRetrievalTimeout$VH.get(seg);
    }
    public static void dwUrlRetrievalTimeout$set( MemorySegment seg, int x) {
        _CERT_CHAIN_ENGINE_CONFIG.dwUrlRetrievalTimeout$VH.set(seg, x);
    }
    public static int dwUrlRetrievalTimeout$get(MemorySegment seg, long index) {
        return (int)_CERT_CHAIN_ENGINE_CONFIG.dwUrlRetrievalTimeout$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwUrlRetrievalTimeout$set(MemorySegment seg, long index, int x) {
        _CERT_CHAIN_ENGINE_CONFIG.dwUrlRetrievalTimeout$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaximumCachedCertificates$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaximumCachedCertificates"));
    public static VarHandle MaximumCachedCertificates$VH() {
        return _CERT_CHAIN_ENGINE_CONFIG.MaximumCachedCertificates$VH;
    }
    public static int MaximumCachedCertificates$get(MemorySegment seg) {
        return (int)_CERT_CHAIN_ENGINE_CONFIG.MaximumCachedCertificates$VH.get(seg);
    }
    public static void MaximumCachedCertificates$set( MemorySegment seg, int x) {
        _CERT_CHAIN_ENGINE_CONFIG.MaximumCachedCertificates$VH.set(seg, x);
    }
    public static int MaximumCachedCertificates$get(MemorySegment seg, long index) {
        return (int)_CERT_CHAIN_ENGINE_CONFIG.MaximumCachedCertificates$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumCachedCertificates$set(MemorySegment seg, long index, int x) {
        _CERT_CHAIN_ENGINE_CONFIG.MaximumCachedCertificates$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CycleDetectionModulus$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("CycleDetectionModulus"));
    public static VarHandle CycleDetectionModulus$VH() {
        return _CERT_CHAIN_ENGINE_CONFIG.CycleDetectionModulus$VH;
    }
    public static int CycleDetectionModulus$get(MemorySegment seg) {
        return (int)_CERT_CHAIN_ENGINE_CONFIG.CycleDetectionModulus$VH.get(seg);
    }
    public static void CycleDetectionModulus$set( MemorySegment seg, int x) {
        _CERT_CHAIN_ENGINE_CONFIG.CycleDetectionModulus$VH.set(seg, x);
    }
    public static int CycleDetectionModulus$get(MemorySegment seg, long index) {
        return (int)_CERT_CHAIN_ENGINE_CONFIG.CycleDetectionModulus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CycleDetectionModulus$set(MemorySegment seg, long index, int x) {
        _CERT_CHAIN_ENGINE_CONFIG.CycleDetectionModulus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hExclusiveRoot$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hExclusiveRoot")));
    public static VarHandle hExclusiveRoot$VH() {
        return _CERT_CHAIN_ENGINE_CONFIG.hExclusiveRoot$VH;
    }
    public static MemoryAddress hExclusiveRoot$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_CHAIN_ENGINE_CONFIG.hExclusiveRoot$VH.get(seg);
    }
    public static void hExclusiveRoot$set( MemorySegment seg, MemoryAddress x) {
        _CERT_CHAIN_ENGINE_CONFIG.hExclusiveRoot$VH.set(seg, x);
    }
    public static MemoryAddress hExclusiveRoot$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_CHAIN_ENGINE_CONFIG.hExclusiveRoot$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hExclusiveRoot$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_CHAIN_ENGINE_CONFIG.hExclusiveRoot$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hExclusiveTrustedPeople$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hExclusiveTrustedPeople")));
    public static VarHandle hExclusiveTrustedPeople$VH() {
        return _CERT_CHAIN_ENGINE_CONFIG.hExclusiveTrustedPeople$VH;
    }
    public static MemoryAddress hExclusiveTrustedPeople$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_CHAIN_ENGINE_CONFIG.hExclusiveTrustedPeople$VH.get(seg);
    }
    public static void hExclusiveTrustedPeople$set( MemorySegment seg, MemoryAddress x) {
        _CERT_CHAIN_ENGINE_CONFIG.hExclusiveTrustedPeople$VH.set(seg, x);
    }
    public static MemoryAddress hExclusiveTrustedPeople$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_CERT_CHAIN_ENGINE_CONFIG.hExclusiveTrustedPeople$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hExclusiveTrustedPeople$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_CHAIN_ENGINE_CONFIG.hExclusiveTrustedPeople$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


