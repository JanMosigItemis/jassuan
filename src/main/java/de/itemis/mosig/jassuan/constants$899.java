// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$899 {

    static final FunctionDescriptor CertGetPublicKeyLength$FUNC = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle CertGetPublicKeyLength$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CertGetPublicKeyLength",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        constants$899.CertGetPublicKeyLength$FUNC, false
    );
    static final FunctionDescriptor CryptVerifyCertificateSignature$FUNC = FunctionDescriptor.of(C_INT,
        C_LONG_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle CryptVerifyCertificateSignature$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CryptVerifyCertificateSignature",
        "(JILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        constants$899.CryptVerifyCertificateSignature$FUNC, false
    );
    static final FunctionDescriptor CryptVerifyCertificateSignatureEx$FUNC = FunctionDescriptor.of(C_INT,
        C_LONG_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle CryptVerifyCertificateSignatureEx$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CryptVerifyCertificateSignatureEx",
        "(JIILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        constants$899.CryptVerifyCertificateSignatureEx$FUNC, false
    );
    static final FunctionDescriptor CertIsStrongHashToSign$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle CertIsStrongHashToSign$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CertIsStrongHashToSign",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$899.CertIsStrongHashToSign$FUNC, false
    );
    static final FunctionDescriptor CryptHashToBeSigned$FUNC = FunctionDescriptor.of(C_INT,
        C_LONG_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle CryptHashToBeSigned$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CryptHashToBeSigned",
        "(JILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$899.CryptHashToBeSigned$FUNC, false
    );
    static final FunctionDescriptor CryptHashCertificate$FUNC = FunctionDescriptor.of(C_INT,
        C_LONG_LONG,
        C_INT,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle CryptHashCertificate$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "CryptHashCertificate",
        "(JIILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$899.CryptHashCertificate$FUNC, false
    );
}


