// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _WOW64_LDT_ENTRY {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_SHORT.withName("LimitLow"),
        C_SHORT.withName("BaseLow"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_CHAR.withName("BaseMid"),
                C_CHAR.withName("Flags1"),
                C_CHAR.withName("Flags2"),
                C_CHAR.withName("BaseHi")
            ).withName("Bytes"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    MemoryLayout.valueLayout(8, ByteOrder.nativeOrder()).withName("BaseMid"),
                    MemoryLayout.valueLayout(5, ByteOrder.nativeOrder()).withName("Type"),
                    MemoryLayout.valueLayout(2, ByteOrder.nativeOrder()).withName("Dpl"),
                    MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("Pres"),
                    MemoryLayout.valueLayout(4, ByteOrder.nativeOrder()).withName("LimitHi"),
                    MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("Sys"),
                    MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("Reserved_0"),
                    MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("Default_Big"),
                    MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("Granularity"),
                    MemoryLayout.valueLayout(8, ByteOrder.nativeOrder()).withName("BaseHi")
                )
            ).withName("Bits")
        ).withName("HighWord")
    ).withName("_WOW64_LDT_ENTRY");
    public static MemoryLayout $LAYOUT() {
        return _WOW64_LDT_ENTRY.$struct$LAYOUT;
    }
    static final VarHandle LimitLow$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("LimitLow"));
    public static VarHandle LimitLow$VH() {
        return _WOW64_LDT_ENTRY.LimitLow$VH;
    }
    public static short LimitLow$get(MemorySegment seg) {
        return (short)_WOW64_LDT_ENTRY.LimitLow$VH.get(seg);
    }
    public static void LimitLow$set( MemorySegment seg, short x) {
        _WOW64_LDT_ENTRY.LimitLow$VH.set(seg, x);
    }
    public static short LimitLow$get(MemorySegment seg, long index) {
        return (short)_WOW64_LDT_ENTRY.LimitLow$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LimitLow$set(MemorySegment seg, long index, short x) {
        _WOW64_LDT_ENTRY.LimitLow$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BaseLow$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("BaseLow"));
    public static VarHandle BaseLow$VH() {
        return _WOW64_LDT_ENTRY.BaseLow$VH;
    }
    public static short BaseLow$get(MemorySegment seg) {
        return (short)_WOW64_LDT_ENTRY.BaseLow$VH.get(seg);
    }
    public static void BaseLow$set( MemorySegment seg, short x) {
        _WOW64_LDT_ENTRY.BaseLow$VH.set(seg, x);
    }
    public static short BaseLow$get(MemorySegment seg, long index) {
        return (short)_WOW64_LDT_ENTRY.BaseLow$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BaseLow$set(MemorySegment seg, long index, short x) {
        _WOW64_LDT_ENTRY.BaseLow$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class HighWord {

        static final MemoryLayout HighWord$union$LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_CHAR.withName("BaseMid"),
                C_CHAR.withName("Flags1"),
                C_CHAR.withName("Flags2"),
                C_CHAR.withName("BaseHi")
            ).withName("Bytes"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    MemoryLayout.valueLayout(8, ByteOrder.nativeOrder()).withName("BaseMid"),
                    MemoryLayout.valueLayout(5, ByteOrder.nativeOrder()).withName("Type"),
                    MemoryLayout.valueLayout(2, ByteOrder.nativeOrder()).withName("Dpl"),
                    MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("Pres"),
                    MemoryLayout.valueLayout(4, ByteOrder.nativeOrder()).withName("LimitHi"),
                    MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("Sys"),
                    MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("Reserved_0"),
                    MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("Default_Big"),
                    MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("Granularity"),
                    MemoryLayout.valueLayout(8, ByteOrder.nativeOrder()).withName("BaseHi")
                )
            ).withName("Bits")
        );
        public static MemoryLayout $LAYOUT() {
            return HighWord.HighWord$union$LAYOUT;
        }
        public static class Bytes {

            static final MemoryLayout HighWord$Bytes$struct$LAYOUT = MemoryLayout.structLayout(
                C_CHAR.withName("BaseMid"),
                C_CHAR.withName("Flags1"),
                C_CHAR.withName("Flags2"),
                C_CHAR.withName("BaseHi")
            );
            public static MemoryLayout $LAYOUT() {
                return Bytes.HighWord$Bytes$struct$LAYOUT;
            }
            static final VarHandle BaseMid$VH = HighWord$Bytes$struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BaseMid"));
            public static VarHandle BaseMid$VH() {
                return Bytes.BaseMid$VH;
            }
            public static byte BaseMid$get(MemorySegment seg) {
                return (byte)Bytes.BaseMid$VH.get(seg);
            }
            public static void BaseMid$set( MemorySegment seg, byte x) {
                Bytes.BaseMid$VH.set(seg, x);
            }
            public static byte BaseMid$get(MemorySegment seg, long index) {
                return (byte)Bytes.BaseMid$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void BaseMid$set(MemorySegment seg, long index, byte x) {
                Bytes.BaseMid$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle Flags1$VH = HighWord$Bytes$struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Flags1"));
            public static VarHandle Flags1$VH() {
                return Bytes.Flags1$VH;
            }
            public static byte Flags1$get(MemorySegment seg) {
                return (byte)Bytes.Flags1$VH.get(seg);
            }
            public static void Flags1$set( MemorySegment seg, byte x) {
                Bytes.Flags1$VH.set(seg, x);
            }
            public static byte Flags1$get(MemorySegment seg, long index) {
                return (byte)Bytes.Flags1$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void Flags1$set(MemorySegment seg, long index, byte x) {
                Bytes.Flags1$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle Flags2$VH = HighWord$Bytes$struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Flags2"));
            public static VarHandle Flags2$VH() {
                return Bytes.Flags2$VH;
            }
            public static byte Flags2$get(MemorySegment seg) {
                return (byte)Bytes.Flags2$VH.get(seg);
            }
            public static void Flags2$set( MemorySegment seg, byte x) {
                Bytes.Flags2$VH.set(seg, x);
            }
            public static byte Flags2$get(MemorySegment seg, long index) {
                return (byte)Bytes.Flags2$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void Flags2$set(MemorySegment seg, long index, byte x) {
                Bytes.Flags2$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle BaseHi$VH = HighWord$Bytes$struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BaseHi"));
            public static VarHandle BaseHi$VH() {
                return Bytes.BaseHi$VH;
            }
            public static byte BaseHi$get(MemorySegment seg) {
                return (byte)Bytes.BaseHi$VH.get(seg);
            }
            public static void BaseHi$set( MemorySegment seg, byte x) {
                Bytes.BaseHi$VH.set(seg, x);
            }
            public static byte BaseHi$get(MemorySegment seg, long index) {
                return (byte)Bytes.BaseHi$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void BaseHi$set(MemorySegment seg, long index, byte x) {
                Bytes.BaseHi$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
            public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment allocateArray(int len, ResourceScope scope) {
                return allocateArray(len, SegmentAllocator.ofScope(scope));
            }
            public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment Bytes$slice(MemorySegment seg) {
            return seg.asSlice(0, 4);
        }
        public static class Bits {

            static final MemoryLayout HighWord$Bits$struct$LAYOUT = MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    MemoryLayout.valueLayout(8, ByteOrder.nativeOrder()).withName("BaseMid"),
                    MemoryLayout.valueLayout(5, ByteOrder.nativeOrder()).withName("Type"),
                    MemoryLayout.valueLayout(2, ByteOrder.nativeOrder()).withName("Dpl"),
                    MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("Pres"),
                    MemoryLayout.valueLayout(4, ByteOrder.nativeOrder()).withName("LimitHi"),
                    MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("Sys"),
                    MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("Reserved_0"),
                    MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("Default_Big"),
                    MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("Granularity"),
                    MemoryLayout.valueLayout(8, ByteOrder.nativeOrder()).withName("BaseHi")
                )
            );
            public static MemoryLayout $LAYOUT() {
                return Bits.HighWord$Bits$struct$LAYOUT;
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
            public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment allocateArray(int len, ResourceScope scope) {
                return allocateArray(len, SegmentAllocator.ofScope(scope));
            }
            public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment Bits$slice(MemorySegment seg) {
            return seg.asSlice(0, 4);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.ofScope(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment HighWord$slice(MemorySegment seg) {
        return seg.asSlice(4, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


