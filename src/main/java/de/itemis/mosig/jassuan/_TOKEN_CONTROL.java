// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _TOKEN_CONTROL {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("TokenId"),
        MemoryLayout.structLayout(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("AuthenticationId"),
        MemoryLayout.structLayout(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("ModifiedId"),
        MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(8, C_CHAR).withName("SourceName"),
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("SourceIdentifier")
        ).withName("TokenSource")
    ).withName("_TOKEN_CONTROL");
    public static MemoryLayout $LAYOUT() {
        return _TOKEN_CONTROL.$struct$LAYOUT;
    }
    public static MemorySegment TokenId$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment AuthenticationId$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static MemorySegment ModifiedId$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static MemorySegment TokenSource$slice(MemorySegment seg) {
        return seg.asSlice(24, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


