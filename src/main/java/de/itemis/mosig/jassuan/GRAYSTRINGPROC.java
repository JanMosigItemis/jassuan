// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public interface GRAYSTRINGPROC {

    int apply(jdk.incubator.foreign.MemoryAddress x0, long x1, int x2);
    static MemoryAddress allocate(GRAYSTRINGPROC fi) {
        return RuntimeHelper.upcallStub(GRAYSTRINGPROC.class, fi, constants$544.GRAYSTRINGPROC$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;JI)I");
    }
    static MemoryAddress allocate(GRAYSTRINGPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(GRAYSTRINGPROC.class, fi, constants$544.GRAYSTRINGPROC$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;JI)I", scope);
    }
    static GRAYSTRINGPROC ofAddress(MemoryAddress addr) {
        return (jdk.incubator.foreign.MemoryAddress x0, long x1, int x2) -> {
            try {
                return (int)constants$545.GRAYSTRINGPROC$MH.invokeExact((Addressable)addr, x0, x1, x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


