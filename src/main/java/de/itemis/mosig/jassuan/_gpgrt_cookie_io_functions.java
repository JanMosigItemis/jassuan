// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _gpgrt_cookie_io_functions {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("func_read"),
        C_POINTER.withName("func_write"),
        C_POINTER.withName("func_seek"),
        C_POINTER.withName("func_close")
    ).withName("_gpgrt_cookie_io_functions");
    public static MemoryLayout $LAYOUT() {
        return _gpgrt_cookie_io_functions.$struct$LAYOUT;
    }
    static final VarHandle func_read$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("func_read")));
    public static VarHandle func_read$VH() {
        return _gpgrt_cookie_io_functions.func_read$VH;
    }
    public static MemoryAddress func_read$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_gpgrt_cookie_io_functions.func_read$VH.get(seg);
    }
    public static void func_read$set( MemorySegment seg, MemoryAddress x) {
        _gpgrt_cookie_io_functions.func_read$VH.set(seg, x);
    }
    public static MemoryAddress func_read$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_gpgrt_cookie_io_functions.func_read$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void func_read$set(MemorySegment seg, long index, MemoryAddress x) {
        _gpgrt_cookie_io_functions.func_read$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static gpgrt_cookie_read_function_t func_read (MemorySegment segment) {
        return gpgrt_cookie_read_function_t.ofAddress(func_read$get(segment));
    }
    static final VarHandle func_write$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("func_write")));
    public static VarHandle func_write$VH() {
        return _gpgrt_cookie_io_functions.func_write$VH;
    }
    public static MemoryAddress func_write$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_gpgrt_cookie_io_functions.func_write$VH.get(seg);
    }
    public static void func_write$set( MemorySegment seg, MemoryAddress x) {
        _gpgrt_cookie_io_functions.func_write$VH.set(seg, x);
    }
    public static MemoryAddress func_write$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_gpgrt_cookie_io_functions.func_write$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void func_write$set(MemorySegment seg, long index, MemoryAddress x) {
        _gpgrt_cookie_io_functions.func_write$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static gpgrt_cookie_write_function_t func_write (MemorySegment segment) {
        return gpgrt_cookie_write_function_t.ofAddress(func_write$get(segment));
    }
    static final VarHandle func_seek$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("func_seek")));
    public static VarHandle func_seek$VH() {
        return _gpgrt_cookie_io_functions.func_seek$VH;
    }
    public static MemoryAddress func_seek$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_gpgrt_cookie_io_functions.func_seek$VH.get(seg);
    }
    public static void func_seek$set( MemorySegment seg, MemoryAddress x) {
        _gpgrt_cookie_io_functions.func_seek$VH.set(seg, x);
    }
    public static MemoryAddress func_seek$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_gpgrt_cookie_io_functions.func_seek$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void func_seek$set(MemorySegment seg, long index, MemoryAddress x) {
        _gpgrt_cookie_io_functions.func_seek$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static gpgrt_cookie_seek_function_t func_seek (MemorySegment segment) {
        return gpgrt_cookie_seek_function_t.ofAddress(func_seek$get(segment));
    }
    static final VarHandle func_close$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("func_close")));
    public static VarHandle func_close$VH() {
        return _gpgrt_cookie_io_functions.func_close$VH;
    }
    public static MemoryAddress func_close$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_gpgrt_cookie_io_functions.func_close$VH.get(seg);
    }
    public static void func_close$set( MemorySegment seg, MemoryAddress x) {
        _gpgrt_cookie_io_functions.func_close$VH.set(seg, x);
    }
    public static MemoryAddress func_close$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_gpgrt_cookie_io_functions.func_close$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void func_close$set(MemorySegment seg, long index, MemoryAddress x) {
        _gpgrt_cookie_io_functions.func_close$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static gpgrt_cookie_close_function_t func_close (MemorySegment segment) {
        return gpgrt_cookie_close_function_t.ofAddress(func_close$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


