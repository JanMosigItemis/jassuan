// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IServerSecurityVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("QueryBlanket"),
        C_POINTER.withName("ImpersonateClient"),
        C_POINTER.withName("RevertToSelf"),
        C_POINTER.withName("IsImpersonating")
    ).withName("IServerSecurityVtbl");
    public static MemoryLayout $LAYOUT() {
        return IServerSecurityVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IServerSecurityVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IServerSecurityVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IServerSecurityVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IServerSecurityVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IServerSecurityVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IServerSecurityVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IServerSecurityVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IServerSecurityVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IServerSecurityVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IServerSecurityVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IServerSecurityVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IServerSecurityVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IServerSecurityVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IServerSecurityVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IServerSecurityVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IServerSecurityVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IServerSecurityVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IServerSecurityVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IServerSecurityVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IServerSecurityVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IServerSecurityVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IServerSecurityVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IServerSecurityVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IServerSecurityVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IServerSecurityVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IServerSecurityVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IServerSecurityVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor QueryBlanket$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryBlanket$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IServerSecurityVtbl.QueryBlanket$FUNC, false
    );
    public interface QueryBlanket {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7);
        static MemoryAddress allocate(QueryBlanket fi) {
            return RuntimeHelper.upcallStub(QueryBlanket.class, fi, IServerSecurityVtbl.QueryBlanket$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryBlanket fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryBlanket.class, fi, IServerSecurityVtbl.QueryBlanket$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryBlanket ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7) -> {
                try {
                    return (int)IServerSecurityVtbl.QueryBlanket$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6, x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryBlanket$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryBlanket")));
    public static VarHandle QueryBlanket$VH() {
        return IServerSecurityVtbl.QueryBlanket$VH;
    }
    public static MemoryAddress QueryBlanket$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IServerSecurityVtbl.QueryBlanket$VH.get(seg);
    }
    public static void QueryBlanket$set( MemorySegment seg, MemoryAddress x) {
        IServerSecurityVtbl.QueryBlanket$VH.set(seg, x);
    }
    public static MemoryAddress QueryBlanket$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IServerSecurityVtbl.QueryBlanket$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryBlanket$set(MemorySegment seg, long index, MemoryAddress x) {
        IServerSecurityVtbl.QueryBlanket$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryBlanket QueryBlanket (MemorySegment segment) {
        return QueryBlanket.ofAddress(QueryBlanket$get(segment));
    }
    static final FunctionDescriptor ImpersonateClient$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle ImpersonateClient$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IServerSecurityVtbl.ImpersonateClient$FUNC, false
    );
    public interface ImpersonateClient {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(ImpersonateClient fi) {
            return RuntimeHelper.upcallStub(ImpersonateClient.class, fi, IServerSecurityVtbl.ImpersonateClient$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(ImpersonateClient fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(ImpersonateClient.class, fi, IServerSecurityVtbl.ImpersonateClient$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static ImpersonateClient ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IServerSecurityVtbl.ImpersonateClient$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ImpersonateClient$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ImpersonateClient")));
    public static VarHandle ImpersonateClient$VH() {
        return IServerSecurityVtbl.ImpersonateClient$VH;
    }
    public static MemoryAddress ImpersonateClient$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IServerSecurityVtbl.ImpersonateClient$VH.get(seg);
    }
    public static void ImpersonateClient$set( MemorySegment seg, MemoryAddress x) {
        IServerSecurityVtbl.ImpersonateClient$VH.set(seg, x);
    }
    public static MemoryAddress ImpersonateClient$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IServerSecurityVtbl.ImpersonateClient$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ImpersonateClient$set(MemorySegment seg, long index, MemoryAddress x) {
        IServerSecurityVtbl.ImpersonateClient$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ImpersonateClient ImpersonateClient (MemorySegment segment) {
        return ImpersonateClient.ofAddress(ImpersonateClient$get(segment));
    }
    static final FunctionDescriptor RevertToSelf$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle RevertToSelf$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IServerSecurityVtbl.RevertToSelf$FUNC, false
    );
    public interface RevertToSelf {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(RevertToSelf fi) {
            return RuntimeHelper.upcallStub(RevertToSelf.class, fi, IServerSecurityVtbl.RevertToSelf$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(RevertToSelf fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(RevertToSelf.class, fi, IServerSecurityVtbl.RevertToSelf$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static RevertToSelf ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IServerSecurityVtbl.RevertToSelf$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RevertToSelf$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("RevertToSelf")));
    public static VarHandle RevertToSelf$VH() {
        return IServerSecurityVtbl.RevertToSelf$VH;
    }
    public static MemoryAddress RevertToSelf$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IServerSecurityVtbl.RevertToSelf$VH.get(seg);
    }
    public static void RevertToSelf$set( MemorySegment seg, MemoryAddress x) {
        IServerSecurityVtbl.RevertToSelf$VH.set(seg, x);
    }
    public static MemoryAddress RevertToSelf$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IServerSecurityVtbl.RevertToSelf$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RevertToSelf$set(MemorySegment seg, long index, MemoryAddress x) {
        IServerSecurityVtbl.RevertToSelf$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RevertToSelf RevertToSelf (MemorySegment segment) {
        return RevertToSelf.ofAddress(RevertToSelf$get(segment));
    }
    static final FunctionDescriptor IsImpersonating$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle IsImpersonating$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IServerSecurityVtbl.IsImpersonating$FUNC, false
    );
    public interface IsImpersonating {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(IsImpersonating fi) {
            return RuntimeHelper.upcallStub(IsImpersonating.class, fi, IServerSecurityVtbl.IsImpersonating$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(IsImpersonating fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(IsImpersonating.class, fi, IServerSecurityVtbl.IsImpersonating$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static IsImpersonating ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IServerSecurityVtbl.IsImpersonating$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle IsImpersonating$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("IsImpersonating")));
    public static VarHandle IsImpersonating$VH() {
        return IServerSecurityVtbl.IsImpersonating$VH;
    }
    public static MemoryAddress IsImpersonating$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IServerSecurityVtbl.IsImpersonating$VH.get(seg);
    }
    public static void IsImpersonating$set( MemorySegment seg, MemoryAddress x) {
        IServerSecurityVtbl.IsImpersonating$VH.set(seg, x);
    }
    public static MemoryAddress IsImpersonating$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IServerSecurityVtbl.IsImpersonating$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IsImpersonating$set(MemorySegment seg, long index, MemoryAddress x) {
        IServerSecurityVtbl.IsImpersonating$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsImpersonating IsImpersonating (MemorySegment segment) {
        return IsImpersonating.ofAddress(IsImpersonating$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


