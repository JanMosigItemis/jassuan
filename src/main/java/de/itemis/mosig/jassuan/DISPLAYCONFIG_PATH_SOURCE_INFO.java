// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class DISPLAYCONFIG_PATH_SOURCE_INFO {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("adapterId"),
        C_INT.withName("id"),
        MemoryLayout.unionLayout(
            C_INT.withName("modeInfoIdx"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    MemoryLayout.valueLayout(16, ByteOrder.nativeOrder()).withName("cloneGroupId"),
                    MemoryLayout.valueLayout(16, ByteOrder.nativeOrder()).withName("sourceModeInfoIdx")
                )
            ).withName("$anon$0")
        ).withName("$anon$0"),
        C_INT.withName("statusFlags")
    ).withName("DISPLAYCONFIG_PATH_SOURCE_INFO");
    public static MemoryLayout $LAYOUT() {
        return DISPLAYCONFIG_PATH_SOURCE_INFO.$struct$LAYOUT;
    }
    public static MemorySegment adapterId$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    static final VarHandle id$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("id"));
    public static VarHandle id$VH() {
        return DISPLAYCONFIG_PATH_SOURCE_INFO.id$VH;
    }
    public static int id$get(MemorySegment seg) {
        return (int)DISPLAYCONFIG_PATH_SOURCE_INFO.id$VH.get(seg);
    }
    public static void id$set( MemorySegment seg, int x) {
        DISPLAYCONFIG_PATH_SOURCE_INFO.id$VH.set(seg, x);
    }
    public static int id$get(MemorySegment seg, long index) {
        return (int)DISPLAYCONFIG_PATH_SOURCE_INFO.id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void id$set(MemorySegment seg, long index, int x) {
        DISPLAYCONFIG_PATH_SOURCE_INFO.id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle modeInfoIdx$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("modeInfoIdx"));
    public static VarHandle modeInfoIdx$VH() {
        return DISPLAYCONFIG_PATH_SOURCE_INFO.modeInfoIdx$VH;
    }
    public static int modeInfoIdx$get(MemorySegment seg) {
        return (int)DISPLAYCONFIG_PATH_SOURCE_INFO.modeInfoIdx$VH.get(seg);
    }
    public static void modeInfoIdx$set( MemorySegment seg, int x) {
        DISPLAYCONFIG_PATH_SOURCE_INFO.modeInfoIdx$VH.set(seg, x);
    }
    public static int modeInfoIdx$get(MemorySegment seg, long index) {
        return (int)DISPLAYCONFIG_PATH_SOURCE_INFO.modeInfoIdx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void modeInfoIdx$set(MemorySegment seg, long index, int x) {
        DISPLAYCONFIG_PATH_SOURCE_INFO.modeInfoIdx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle statusFlags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("statusFlags"));
    public static VarHandle statusFlags$VH() {
        return DISPLAYCONFIG_PATH_SOURCE_INFO.statusFlags$VH;
    }
    public static int statusFlags$get(MemorySegment seg) {
        return (int)DISPLAYCONFIG_PATH_SOURCE_INFO.statusFlags$VH.get(seg);
    }
    public static void statusFlags$set( MemorySegment seg, int x) {
        DISPLAYCONFIG_PATH_SOURCE_INFO.statusFlags$VH.set(seg, x);
    }
    public static int statusFlags$get(MemorySegment seg, long index) {
        return (int)DISPLAYCONFIG_PATH_SOURCE_INFO.statusFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void statusFlags$set(MemorySegment seg, long index, int x) {
        DISPLAYCONFIG_PATH_SOURCE_INFO.statusFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


