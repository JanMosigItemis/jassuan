// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class tagMIXERLINEA {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("cbStruct"),
        C_LONG.withName("dwDestination"),
        C_LONG.withName("dwSource"),
        C_LONG.withName("dwLineID"),
        C_LONG.withName("fdwLine"),
        C_LONG_LONG.withName("dwUser"),
        C_LONG.withName("dwComponentType"),
        C_LONG.withName("cChannels"),
        C_LONG.withName("cConnections"),
        C_LONG.withName("cControls"),
        MemoryLayout.sequenceLayout(16, C_CHAR).withName("szShortName"),
        MemoryLayout.sequenceLayout(64, C_CHAR).withName("szName"),
        MemoryLayout.structLayout(
            C_LONG.withName("dwType"),
            C_LONG.withName("dwDeviceID"),
            C_SHORT.withName("wMid"),
            C_SHORT.withName("wPid"),
            C_INT.withName("vDriverVersion"),
            MemoryLayout.sequenceLayout(32, C_CHAR).withName("szPname")
        ).withName("Target")
    ).withName("tagMIXERLINEA");
    public static MemoryLayout $LAYOUT() {
        return tagMIXERLINEA.$struct$LAYOUT;
    }
    static final VarHandle cbStruct$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbStruct"));
    public static VarHandle cbStruct$VH() {
        return tagMIXERLINEA.cbStruct$VH;
    }
    public static int cbStruct$get(MemorySegment seg) {
        return (int)tagMIXERLINEA.cbStruct$VH.get(seg);
    }
    public static void cbStruct$set( MemorySegment seg, int x) {
        tagMIXERLINEA.cbStruct$VH.set(seg, x);
    }
    public static int cbStruct$get(MemorySegment seg, long index) {
        return (int)tagMIXERLINEA.cbStruct$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbStruct$set(MemorySegment seg, long index, int x) {
        tagMIXERLINEA.cbStruct$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwDestination$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwDestination"));
    public static VarHandle dwDestination$VH() {
        return tagMIXERLINEA.dwDestination$VH;
    }
    public static int dwDestination$get(MemorySegment seg) {
        return (int)tagMIXERLINEA.dwDestination$VH.get(seg);
    }
    public static void dwDestination$set( MemorySegment seg, int x) {
        tagMIXERLINEA.dwDestination$VH.set(seg, x);
    }
    public static int dwDestination$get(MemorySegment seg, long index) {
        return (int)tagMIXERLINEA.dwDestination$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwDestination$set(MemorySegment seg, long index, int x) {
        tagMIXERLINEA.dwDestination$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwSource$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSource"));
    public static VarHandle dwSource$VH() {
        return tagMIXERLINEA.dwSource$VH;
    }
    public static int dwSource$get(MemorySegment seg) {
        return (int)tagMIXERLINEA.dwSource$VH.get(seg);
    }
    public static void dwSource$set( MemorySegment seg, int x) {
        tagMIXERLINEA.dwSource$VH.set(seg, x);
    }
    public static int dwSource$get(MemorySegment seg, long index) {
        return (int)tagMIXERLINEA.dwSource$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwSource$set(MemorySegment seg, long index, int x) {
        tagMIXERLINEA.dwSource$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwLineID$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwLineID"));
    public static VarHandle dwLineID$VH() {
        return tagMIXERLINEA.dwLineID$VH;
    }
    public static int dwLineID$get(MemorySegment seg) {
        return (int)tagMIXERLINEA.dwLineID$VH.get(seg);
    }
    public static void dwLineID$set( MemorySegment seg, int x) {
        tagMIXERLINEA.dwLineID$VH.set(seg, x);
    }
    public static int dwLineID$get(MemorySegment seg, long index) {
        return (int)tagMIXERLINEA.dwLineID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwLineID$set(MemorySegment seg, long index, int x) {
        tagMIXERLINEA.dwLineID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fdwLine$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("fdwLine"));
    public static VarHandle fdwLine$VH() {
        return tagMIXERLINEA.fdwLine$VH;
    }
    public static int fdwLine$get(MemorySegment seg) {
        return (int)tagMIXERLINEA.fdwLine$VH.get(seg);
    }
    public static void fdwLine$set( MemorySegment seg, int x) {
        tagMIXERLINEA.fdwLine$VH.set(seg, x);
    }
    public static int fdwLine$get(MemorySegment seg, long index) {
        return (int)tagMIXERLINEA.fdwLine$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fdwLine$set(MemorySegment seg, long index, int x) {
        tagMIXERLINEA.fdwLine$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwUser$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwUser"));
    public static VarHandle dwUser$VH() {
        return tagMIXERLINEA.dwUser$VH;
    }
    public static long dwUser$get(MemorySegment seg) {
        return (long)tagMIXERLINEA.dwUser$VH.get(seg);
    }
    public static void dwUser$set( MemorySegment seg, long x) {
        tagMIXERLINEA.dwUser$VH.set(seg, x);
    }
    public static long dwUser$get(MemorySegment seg, long index) {
        return (long)tagMIXERLINEA.dwUser$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwUser$set(MemorySegment seg, long index, long x) {
        tagMIXERLINEA.dwUser$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwComponentType$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwComponentType"));
    public static VarHandle dwComponentType$VH() {
        return tagMIXERLINEA.dwComponentType$VH;
    }
    public static int dwComponentType$get(MemorySegment seg) {
        return (int)tagMIXERLINEA.dwComponentType$VH.get(seg);
    }
    public static void dwComponentType$set( MemorySegment seg, int x) {
        tagMIXERLINEA.dwComponentType$VH.set(seg, x);
    }
    public static int dwComponentType$get(MemorySegment seg, long index) {
        return (int)tagMIXERLINEA.dwComponentType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwComponentType$set(MemorySegment seg, long index, int x) {
        tagMIXERLINEA.dwComponentType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cChannels$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cChannels"));
    public static VarHandle cChannels$VH() {
        return tagMIXERLINEA.cChannels$VH;
    }
    public static int cChannels$get(MemorySegment seg) {
        return (int)tagMIXERLINEA.cChannels$VH.get(seg);
    }
    public static void cChannels$set( MemorySegment seg, int x) {
        tagMIXERLINEA.cChannels$VH.set(seg, x);
    }
    public static int cChannels$get(MemorySegment seg, long index) {
        return (int)tagMIXERLINEA.cChannels$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cChannels$set(MemorySegment seg, long index, int x) {
        tagMIXERLINEA.cChannels$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cConnections$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cConnections"));
    public static VarHandle cConnections$VH() {
        return tagMIXERLINEA.cConnections$VH;
    }
    public static int cConnections$get(MemorySegment seg) {
        return (int)tagMIXERLINEA.cConnections$VH.get(seg);
    }
    public static void cConnections$set( MemorySegment seg, int x) {
        tagMIXERLINEA.cConnections$VH.set(seg, x);
    }
    public static int cConnections$get(MemorySegment seg, long index) {
        return (int)tagMIXERLINEA.cConnections$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cConnections$set(MemorySegment seg, long index, int x) {
        tagMIXERLINEA.cConnections$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cControls$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cControls"));
    public static VarHandle cControls$VH() {
        return tagMIXERLINEA.cControls$VH;
    }
    public static int cControls$get(MemorySegment seg) {
        return (int)tagMIXERLINEA.cControls$VH.get(seg);
    }
    public static void cControls$set( MemorySegment seg, int x) {
        tagMIXERLINEA.cControls$VH.set(seg, x);
    }
    public static int cControls$get(MemorySegment seg, long index) {
        return (int)tagMIXERLINEA.cControls$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cControls$set(MemorySegment seg, long index, int x) {
        tagMIXERLINEA.cControls$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment szShortName$slice(MemorySegment seg) {
        return seg.asSlice(44, 16);
    }
    public static MemorySegment szName$slice(MemorySegment seg) {
        return seg.asSlice(60, 64);
    }
    public static class Target {

        static final MemoryLayout Target$struct$LAYOUT = MemoryLayout.structLayout(
            C_LONG.withName("dwType"),
            C_LONG.withName("dwDeviceID"),
            C_SHORT.withName("wMid"),
            C_SHORT.withName("wPid"),
            C_INT.withName("vDriverVersion"),
            MemoryLayout.sequenceLayout(32, C_CHAR).withName("szPname")
        );
        public static MemoryLayout $LAYOUT() {
            return Target.Target$struct$LAYOUT;
        }
        static final VarHandle dwType$VH = Target$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwType"));
        public static VarHandle dwType$VH() {
            return Target.dwType$VH;
        }
        public static int dwType$get(MemorySegment seg) {
            return (int)Target.dwType$VH.get(seg);
        }
        public static void dwType$set( MemorySegment seg, int x) {
            Target.dwType$VH.set(seg, x);
        }
        public static int dwType$get(MemorySegment seg, long index) {
            return (int)Target.dwType$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void dwType$set(MemorySegment seg, long index, int x) {
            Target.dwType$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle dwDeviceID$VH = Target$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwDeviceID"));
        public static VarHandle dwDeviceID$VH() {
            return Target.dwDeviceID$VH;
        }
        public static int dwDeviceID$get(MemorySegment seg) {
            return (int)Target.dwDeviceID$VH.get(seg);
        }
        public static void dwDeviceID$set( MemorySegment seg, int x) {
            Target.dwDeviceID$VH.set(seg, x);
        }
        public static int dwDeviceID$get(MemorySegment seg, long index) {
            return (int)Target.dwDeviceID$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void dwDeviceID$set(MemorySegment seg, long index, int x) {
            Target.dwDeviceID$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle wMid$VH = Target$struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("wMid"));
        public static VarHandle wMid$VH() {
            return Target.wMid$VH;
        }
        public static short wMid$get(MemorySegment seg) {
            return (short)Target.wMid$VH.get(seg);
        }
        public static void wMid$set( MemorySegment seg, short x) {
            Target.wMid$VH.set(seg, x);
        }
        public static short wMid$get(MemorySegment seg, long index) {
            return (short)Target.wMid$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void wMid$set(MemorySegment seg, long index, short x) {
            Target.wMid$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle wPid$VH = Target$struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("wPid"));
        public static VarHandle wPid$VH() {
            return Target.wPid$VH;
        }
        public static short wPid$get(MemorySegment seg) {
            return (short)Target.wPid$VH.get(seg);
        }
        public static void wPid$set( MemorySegment seg, short x) {
            Target.wPid$VH.set(seg, x);
        }
        public static short wPid$get(MemorySegment seg, long index) {
            return (short)Target.wPid$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void wPid$set(MemorySegment seg, long index, short x) {
            Target.wPid$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle vDriverVersion$VH = Target$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("vDriverVersion"));
        public static VarHandle vDriverVersion$VH() {
            return Target.vDriverVersion$VH;
        }
        public static int vDriverVersion$get(MemorySegment seg) {
            return (int)Target.vDriverVersion$VH.get(seg);
        }
        public static void vDriverVersion$set( MemorySegment seg, int x) {
            Target.vDriverVersion$VH.set(seg, x);
        }
        public static int vDriverVersion$get(MemorySegment seg, long index) {
            return (int)Target.vDriverVersion$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void vDriverVersion$set(MemorySegment seg, long index, int x) {
            Target.vDriverVersion$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment szPname$slice(MemorySegment seg) {
            return seg.asSlice(16, 32);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.ofScope(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment Target$slice(MemorySegment seg) {
        return seg.asSlice(124, 48);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


