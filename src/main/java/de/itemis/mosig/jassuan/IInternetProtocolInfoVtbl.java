// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IInternetProtocolInfoVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("ParseUrl"),
        C_POINTER.withName("CombineUrl"),
        C_POINTER.withName("CompareUrl"),
        C_POINTER.withName("QueryInfo")
    ).withName("IInternetProtocolInfoVtbl");
    public static MemoryLayout $LAYOUT() {
        return IInternetProtocolInfoVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetProtocolInfoVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IInternetProtocolInfoVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IInternetProtocolInfoVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IInternetProtocolInfoVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IInternetProtocolInfoVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolInfoVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolInfoVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolInfoVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolInfoVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetProtocolInfoVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IInternetProtocolInfoVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IInternetProtocolInfoVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IInternetProtocolInfoVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IInternetProtocolInfoVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolInfoVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolInfoVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolInfoVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolInfoVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetProtocolInfoVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IInternetProtocolInfoVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IInternetProtocolInfoVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IInternetProtocolInfoVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IInternetProtocolInfoVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolInfoVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolInfoVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolInfoVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolInfoVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor ParseUrl$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle ParseUrl$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        IInternetProtocolInfoVtbl.ParseUrl$FUNC, false
    );
    public interface ParseUrl {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, int x3, jdk.incubator.foreign.MemoryAddress x4, int x5, jdk.incubator.foreign.MemoryAddress x6, int x7);
        static MemoryAddress allocate(ParseUrl fi) {
            return RuntimeHelper.upcallStub(ParseUrl.class, fi, IInternetProtocolInfoVtbl.ParseUrl$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(ParseUrl fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(ParseUrl.class, fi, IInternetProtocolInfoVtbl.ParseUrl$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static ParseUrl ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, int x3, jdk.incubator.foreign.MemoryAddress x4, int x5, jdk.incubator.foreign.MemoryAddress x6, int x7) -> {
                try {
                    return (int)IInternetProtocolInfoVtbl.ParseUrl$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6, x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ParseUrl$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ParseUrl")));
    public static VarHandle ParseUrl$VH() {
        return IInternetProtocolInfoVtbl.ParseUrl$VH;
    }
    public static MemoryAddress ParseUrl$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolInfoVtbl.ParseUrl$VH.get(seg);
    }
    public static void ParseUrl$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolInfoVtbl.ParseUrl$VH.set(seg, x);
    }
    public static MemoryAddress ParseUrl$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolInfoVtbl.ParseUrl$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ParseUrl$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolInfoVtbl.ParseUrl$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ParseUrl ParseUrl (MemorySegment segment) {
        return ParseUrl.ofAddress(ParseUrl$get(segment));
    }
    static final FunctionDescriptor CombineUrl$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle CombineUrl$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        IInternetProtocolInfoVtbl.CombineUrl$FUNC, false
    );
    public interface CombineUrl {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4, int x5, jdk.incubator.foreign.MemoryAddress x6, int x7);
        static MemoryAddress allocate(CombineUrl fi) {
            return RuntimeHelper.upcallStub(CombineUrl.class, fi, IInternetProtocolInfoVtbl.CombineUrl$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(CombineUrl fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(CombineUrl.class, fi, IInternetProtocolInfoVtbl.CombineUrl$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static CombineUrl ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4, int x5, jdk.incubator.foreign.MemoryAddress x6, int x7) -> {
                try {
                    return (int)IInternetProtocolInfoVtbl.CombineUrl$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6, x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CombineUrl$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("CombineUrl")));
    public static VarHandle CombineUrl$VH() {
        return IInternetProtocolInfoVtbl.CombineUrl$VH;
    }
    public static MemoryAddress CombineUrl$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolInfoVtbl.CombineUrl$VH.get(seg);
    }
    public static void CombineUrl$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolInfoVtbl.CombineUrl$VH.set(seg, x);
    }
    public static MemoryAddress CombineUrl$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolInfoVtbl.CombineUrl$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CombineUrl$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolInfoVtbl.CombineUrl$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CombineUrl CombineUrl (MemorySegment segment) {
        return CombineUrl.ofAddress(CombineUrl$get(segment));
    }
    static final FunctionDescriptor CompareUrl$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle CompareUrl$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        IInternetProtocolInfoVtbl.CompareUrl$FUNC, false
    );
    public interface CompareUrl {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3);
        static MemoryAddress allocate(CompareUrl fi) {
            return RuntimeHelper.upcallStub(CompareUrl.class, fi, IInternetProtocolInfoVtbl.CompareUrl$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(CompareUrl fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(CompareUrl.class, fi, IInternetProtocolInfoVtbl.CompareUrl$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static CompareUrl ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3) -> {
                try {
                    return (int)IInternetProtocolInfoVtbl.CompareUrl$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CompareUrl$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("CompareUrl")));
    public static VarHandle CompareUrl$VH() {
        return IInternetProtocolInfoVtbl.CompareUrl$VH;
    }
    public static MemoryAddress CompareUrl$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolInfoVtbl.CompareUrl$VH.get(seg);
    }
    public static void CompareUrl$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolInfoVtbl.CompareUrl$VH.set(seg, x);
    }
    public static MemoryAddress CompareUrl$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolInfoVtbl.CompareUrl$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CompareUrl$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolInfoVtbl.CompareUrl$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CompareUrl CompareUrl (MemorySegment segment) {
        return CompareUrl.ofAddress(CompareUrl$get(segment));
    }
    static final FunctionDescriptor QueryInfo$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle QueryInfo$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        IInternetProtocolInfoVtbl.QueryInfo$FUNC, false
    );
    public interface QueryInfo {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, int x3, jdk.incubator.foreign.MemoryAddress x4, int x5, jdk.incubator.foreign.MemoryAddress x6, int x7);
        static MemoryAddress allocate(QueryInfo fi) {
            return RuntimeHelper.upcallStub(QueryInfo.class, fi, IInternetProtocolInfoVtbl.QueryInfo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(QueryInfo fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInfo.class, fi, IInternetProtocolInfoVtbl.QueryInfo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static QueryInfo ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, int x3, jdk.incubator.foreign.MemoryAddress x4, int x5, jdk.incubator.foreign.MemoryAddress x6, int x7) -> {
                try {
                    return (int)IInternetProtocolInfoVtbl.QueryInfo$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6, x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInfo$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInfo")));
    public static VarHandle QueryInfo$VH() {
        return IInternetProtocolInfoVtbl.QueryInfo$VH;
    }
    public static MemoryAddress QueryInfo$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolInfoVtbl.QueryInfo$VH.get(seg);
    }
    public static void QueryInfo$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolInfoVtbl.QueryInfo$VH.set(seg, x);
    }
    public static MemoryAddress QueryInfo$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetProtocolInfoVtbl.QueryInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolInfoVtbl.QueryInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInfo QueryInfo (MemorySegment segment) {
        return QueryInfo.ofAddress(QueryInfo$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


