// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$801 {

    static final FunctionDescriptor I_RpcAllocate$FUNC = FunctionDescriptor.of(C_POINTER,
        C_INT
    );
    static final MethodHandle I_RpcAllocate$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "I_RpcAllocate",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        constants$801.I_RpcAllocate$FUNC, false
    );
    static final FunctionDescriptor I_RpcFree$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle I_RpcFree$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "I_RpcFree",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$801.I_RpcFree$FUNC, false
    );
    static final FunctionDescriptor I_RpcPauseExecution$FUNC = FunctionDescriptor.ofVoid(
        C_LONG
    );
    static final MethodHandle I_RpcPauseExecution$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "I_RpcPauseExecution",
        "(I)V",
        constants$801.I_RpcPauseExecution$FUNC, false
    );
    static final FunctionDescriptor I_RpcGetExtendedError$FUNC = FunctionDescriptor.of(C_LONG);
    static final MethodHandle I_RpcGetExtendedError$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "I_RpcGetExtendedError",
        "()I",
        constants$801.I_RpcGetExtendedError$FUNC, false
    );
    static final FunctionDescriptor PRPC_RUNDOWN$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle PRPC_RUNDOWN$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$801.PRPC_RUNDOWN$FUNC, false
    );
}


