// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _wireSAFEARRAY_UNION {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("sfType"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_LONG.withName("Size"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("aBstr")
            ).withName("BstrStr"),
            MemoryLayout.structLayout(
                C_LONG.withName("Size"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("apUnknown")
            ).withName("UnknownStr"),
            MemoryLayout.structLayout(
                C_LONG.withName("Size"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("apDispatch")
            ).withName("DispatchStr"),
            MemoryLayout.structLayout(
                C_LONG.withName("Size"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("aVariant")
            ).withName("VariantStr"),
            MemoryLayout.structLayout(
                C_LONG.withName("Size"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("aRecord")
            ).withName("RecordStr"),
            MemoryLayout.structLayout(
                C_LONG.withName("Size"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("apUnknown"),
                MemoryLayout.structLayout(
                    C_LONG.withName("Data1"),
                    C_SHORT.withName("Data2"),
                    C_SHORT.withName("Data3"),
                    MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
                ).withName("iid")
            ).withName("HaveIidStr"),
            MemoryLayout.structLayout(
                C_LONG.withName("clSize"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("pData")
            ).withName("ByteStr"),
            MemoryLayout.structLayout(
                C_LONG.withName("clSize"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("pData")
            ).withName("WordStr"),
            MemoryLayout.structLayout(
                C_LONG.withName("clSize"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("pData")
            ).withName("LongStr"),
            MemoryLayout.structLayout(
                C_LONG.withName("clSize"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("pData")
            ).withName("HyperStr")
        ).withName("u")
    ).withName("_wireSAFEARRAY_UNION");
    public static MemoryLayout $LAYOUT() {
        return _wireSAFEARRAY_UNION.$struct$LAYOUT;
    }
    static final VarHandle sfType$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("sfType"));
    public static VarHandle sfType$VH() {
        return _wireSAFEARRAY_UNION.sfType$VH;
    }
    public static int sfType$get(MemorySegment seg) {
        return (int)_wireSAFEARRAY_UNION.sfType$VH.get(seg);
    }
    public static void sfType$set( MemorySegment seg, int x) {
        _wireSAFEARRAY_UNION.sfType$VH.set(seg, x);
    }
    public static int sfType$get(MemorySegment seg, long index) {
        return (int)_wireSAFEARRAY_UNION.sfType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sfType$set(MemorySegment seg, long index, int x) {
        _wireSAFEARRAY_UNION.sfType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class __WIDL_oaidl_generated_name_0000000E {

        static final MemoryLayout __WIDL_oaidl_generated_name_0000000E$union$LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_LONG.withName("Size"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("aBstr")
            ).withName("BstrStr"),
            MemoryLayout.structLayout(
                C_LONG.withName("Size"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("apUnknown")
            ).withName("UnknownStr"),
            MemoryLayout.structLayout(
                C_LONG.withName("Size"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("apDispatch")
            ).withName("DispatchStr"),
            MemoryLayout.structLayout(
                C_LONG.withName("Size"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("aVariant")
            ).withName("VariantStr"),
            MemoryLayout.structLayout(
                C_LONG.withName("Size"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("aRecord")
            ).withName("RecordStr"),
            MemoryLayout.structLayout(
                C_LONG.withName("Size"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("apUnknown"),
                MemoryLayout.structLayout(
                    C_LONG.withName("Data1"),
                    C_SHORT.withName("Data2"),
                    C_SHORT.withName("Data3"),
                    MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
                ).withName("iid")
            ).withName("HaveIidStr"),
            MemoryLayout.structLayout(
                C_LONG.withName("clSize"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("pData")
            ).withName("ByteStr"),
            MemoryLayout.structLayout(
                C_LONG.withName("clSize"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("pData")
            ).withName("WordStr"),
            MemoryLayout.structLayout(
                C_LONG.withName("clSize"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("pData")
            ).withName("LongStr"),
            MemoryLayout.structLayout(
                C_LONG.withName("clSize"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("pData")
            ).withName("HyperStr")
        ).withName("__WIDL_oaidl_generated_name_0000000E");
        public static MemoryLayout $LAYOUT() {
            return __WIDL_oaidl_generated_name_0000000E.__WIDL_oaidl_generated_name_0000000E$union$LAYOUT;
        }
        public static MemorySegment BstrStr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment UnknownStr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment DispatchStr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment VariantStr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment RecordStr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment HaveIidStr$slice(MemorySegment seg) {
            return seg.asSlice(0, 32);
        }
        public static MemorySegment ByteStr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment WordStr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment LongStr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static MemorySegment HyperStr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.ofScope(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment u$slice(MemorySegment seg) {
        return seg.asSlice(8, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


