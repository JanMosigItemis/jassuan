// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$379 {

    static final FunctionDescriptor GetProductInfo$FUNC = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle GetProductInfo$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "GetProductInfo",
        "(IIIILjdk/incubator/foreign/MemoryAddress;)I",
        constants$379.GetProductInfo$FUNC, false
    );
    static final FunctionDescriptor GetLogicalProcessorInformationEx$FUNC = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetLogicalProcessorInformationEx$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "GetLogicalProcessorInformationEx",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$379.GetLogicalProcessorInformationEx$FUNC, false
    );
    static final FunctionDescriptor GetNumaHighestNodeNumber$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle GetNumaHighestNodeNumber$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "GetNumaHighestNodeNumber",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$379.GetNumaHighestNodeNumber$FUNC, false
    );
    static final FunctionDescriptor GetNumaNodeProcessorMaskEx$FUNC = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER
    );
    static final MethodHandle GetNumaNodeProcessorMaskEx$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "GetNumaNodeProcessorMaskEx",
        "(SLjdk/incubator/foreign/MemoryAddress;)I",
        constants$379.GetNumaNodeProcessorMaskEx$FUNC, false
    );
    static final FunctionDescriptor PTP_WIN32_IO_CALLBACK$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG_LONG,
        C_POINTER
    );
    static final MethodHandle PTP_WIN32_IO_CALLBACK$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJLjdk/incubator/foreign/MemoryAddress;)V",
        constants$379.PTP_WIN32_IO_CALLBACK$FUNC, false
    );
}


