// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _OCSP_BASIC_SIGNED_RESPONSE_INFO {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            C_LONG.withName("cbData"),
            MemoryLayout.paddingLayout(32),
            C_POINTER.withName("pbData")
        ).withName("ToBeSigned"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                C_POINTER.withName("pszObjId"),
                MemoryLayout.structLayout(
                    C_LONG.withName("cbData"),
                    MemoryLayout.paddingLayout(32),
                    C_POINTER.withName("pbData")
                ).withName("Parameters")
            ).withName("SignatureAlgorithm"),
            MemoryLayout.structLayout(
                C_LONG.withName("cbData"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("pbData"),
                C_LONG.withName("cUnusedBits"),
                MemoryLayout.paddingLayout(32)
            ).withName("Signature"),
            C_LONG.withName("cCertEncoded"),
            MemoryLayout.paddingLayout(32),
            C_POINTER.withName("rgCertEncoded")
        ).withName("SignatureInfo")
    ).withName("_OCSP_BASIC_SIGNED_RESPONSE_INFO");
    public static MemoryLayout $LAYOUT() {
        return _OCSP_BASIC_SIGNED_RESPONSE_INFO.$struct$LAYOUT;
    }
    public static MemorySegment ToBeSigned$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment SignatureInfo$slice(MemorySegment seg) {
        return seg.asSlice(16, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


