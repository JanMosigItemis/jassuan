// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class IInternetZoneManagerVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetZoneAttributes"),
        C_POINTER.withName("SetZoneAttributes"),
        C_POINTER.withName("GetZoneCustomPolicy"),
        C_POINTER.withName("SetZoneCustomPolicy"),
        C_POINTER.withName("GetZoneActionPolicy"),
        C_POINTER.withName("SetZoneActionPolicy"),
        C_POINTER.withName("PromptAction"),
        C_POINTER.withName("LogAction"),
        C_POINTER.withName("CreateZoneEnumerator"),
        C_POINTER.withName("GetZoneAt"),
        C_POINTER.withName("DestroyZoneEnumerator"),
        C_POINTER.withName("CopyTemplatePoliciesToZone")
    ).withName("IInternetZoneManagerVtbl");
    public static MemoryLayout $LAYOUT() {
        return IInternetZoneManagerVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetZoneManagerVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IInternetZoneManagerVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IInternetZoneManagerVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return IInternetZoneManagerVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetZoneManagerVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IInternetZoneManagerVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IInternetZoneManagerVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return IInternetZoneManagerVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IInternetZoneManagerVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, IInternetZoneManagerVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IInternetZoneManagerVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return IInternetZoneManagerVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor GetZoneAttributes$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle GetZoneAttributes$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        IInternetZoneManagerVtbl.GetZoneAttributes$FUNC, false
    );
    public interface GetZoneAttributes {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetZoneAttributes fi) {
            return RuntimeHelper.upcallStub(GetZoneAttributes.class, fi, IInternetZoneManagerVtbl.GetZoneAttributes$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetZoneAttributes fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetZoneAttributes.class, fi, IInternetZoneManagerVtbl.GetZoneAttributes$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetZoneAttributes ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.GetZoneAttributes$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetZoneAttributes$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetZoneAttributes")));
    public static VarHandle GetZoneAttributes$VH() {
        return IInternetZoneManagerVtbl.GetZoneAttributes$VH;
    }
    public static MemoryAddress GetZoneAttributes$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.GetZoneAttributes$VH.get(seg);
    }
    public static void GetZoneAttributes$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.GetZoneAttributes$VH.set(seg, x);
    }
    public static MemoryAddress GetZoneAttributes$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.GetZoneAttributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetZoneAttributes$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.GetZoneAttributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetZoneAttributes GetZoneAttributes (MemorySegment segment) {
        return GetZoneAttributes.ofAddress(GetZoneAttributes$get(segment));
    }
    static final FunctionDescriptor SetZoneAttributes$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle SetZoneAttributes$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        IInternetZoneManagerVtbl.SetZoneAttributes$FUNC, false
    );
    public interface SetZoneAttributes {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(SetZoneAttributes fi) {
            return RuntimeHelper.upcallStub(SetZoneAttributes.class, fi, IInternetZoneManagerVtbl.SetZoneAttributes$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SetZoneAttributes fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetZoneAttributes.class, fi, IInternetZoneManagerVtbl.SetZoneAttributes$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SetZoneAttributes ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.SetZoneAttributes$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetZoneAttributes$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetZoneAttributes")));
    public static VarHandle SetZoneAttributes$VH() {
        return IInternetZoneManagerVtbl.SetZoneAttributes$VH;
    }
    public static MemoryAddress SetZoneAttributes$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.SetZoneAttributes$VH.get(seg);
    }
    public static void SetZoneAttributes$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.SetZoneAttributes$VH.set(seg, x);
    }
    public static MemoryAddress SetZoneAttributes$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.SetZoneAttributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetZoneAttributes$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.SetZoneAttributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetZoneAttributes SetZoneAttributes (MemorySegment segment) {
        return SetZoneAttributes.ofAddress(SetZoneAttributes$get(segment));
    }
    static final FunctionDescriptor GetZoneCustomPolicy$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle GetZoneCustomPolicy$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        IInternetZoneManagerVtbl.GetZoneCustomPolicy$FUNC, false
    );
    public interface GetZoneCustomPolicy {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, int x5);
        static MemoryAddress allocate(GetZoneCustomPolicy fi) {
            return RuntimeHelper.upcallStub(GetZoneCustomPolicy.class, fi, IInternetZoneManagerVtbl.GetZoneCustomPolicy$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(GetZoneCustomPolicy fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetZoneCustomPolicy.class, fi, IInternetZoneManagerVtbl.GetZoneCustomPolicy$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static GetZoneCustomPolicy ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, int x5) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.GetZoneCustomPolicy$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetZoneCustomPolicy$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetZoneCustomPolicy")));
    public static VarHandle GetZoneCustomPolicy$VH() {
        return IInternetZoneManagerVtbl.GetZoneCustomPolicy$VH;
    }
    public static MemoryAddress GetZoneCustomPolicy$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.GetZoneCustomPolicy$VH.get(seg);
    }
    public static void GetZoneCustomPolicy$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.GetZoneCustomPolicy$VH.set(seg, x);
    }
    public static MemoryAddress GetZoneCustomPolicy$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.GetZoneCustomPolicy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetZoneCustomPolicy$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.GetZoneCustomPolicy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetZoneCustomPolicy GetZoneCustomPolicy (MemorySegment segment) {
        return GetZoneCustomPolicy.ofAddress(GetZoneCustomPolicy$get(segment));
    }
    static final FunctionDescriptor SetZoneCustomPolicy$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_INT
    );
    static final MethodHandle SetZoneCustomPolicy$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        IInternetZoneManagerVtbl.SetZoneCustomPolicy$FUNC, false
    );
    public interface SetZoneCustomPolicy {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, int x4, int x5);
        static MemoryAddress allocate(SetZoneCustomPolicy fi) {
            return RuntimeHelper.upcallStub(SetZoneCustomPolicy.class, fi, IInternetZoneManagerVtbl.SetZoneCustomPolicy$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I");
        }
        static MemoryAddress allocate(SetZoneCustomPolicy fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetZoneCustomPolicy.class, fi, IInternetZoneManagerVtbl.SetZoneCustomPolicy$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I", scope);
        }
        static SetZoneCustomPolicy ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, int x4, int x5) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.SetZoneCustomPolicy$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetZoneCustomPolicy$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetZoneCustomPolicy")));
    public static VarHandle SetZoneCustomPolicy$VH() {
        return IInternetZoneManagerVtbl.SetZoneCustomPolicy$VH;
    }
    public static MemoryAddress SetZoneCustomPolicy$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.SetZoneCustomPolicy$VH.get(seg);
    }
    public static void SetZoneCustomPolicy$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.SetZoneCustomPolicy$VH.set(seg, x);
    }
    public static MemoryAddress SetZoneCustomPolicy$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.SetZoneCustomPolicy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetZoneCustomPolicy$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.SetZoneCustomPolicy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetZoneCustomPolicy SetZoneCustomPolicy (MemorySegment segment) {
        return SetZoneCustomPolicy.ofAddress(SetZoneCustomPolicy$get(segment));
    }
    static final FunctionDescriptor GetZoneActionPolicy$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_INT
    );
    static final MethodHandle GetZoneActionPolicy$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;II)I",
        IInternetZoneManagerVtbl.GetZoneActionPolicy$FUNC, false
    );
    public interface GetZoneActionPolicy {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3, int x4, int x5);
        static MemoryAddress allocate(GetZoneActionPolicy fi) {
            return RuntimeHelper.upcallStub(GetZoneActionPolicy.class, fi, IInternetZoneManagerVtbl.GetZoneActionPolicy$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;II)I");
        }
        static MemoryAddress allocate(GetZoneActionPolicy fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetZoneActionPolicy.class, fi, IInternetZoneManagerVtbl.GetZoneActionPolicy$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;II)I", scope);
        }
        static GetZoneActionPolicy ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3, int x4, int x5) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.GetZoneActionPolicy$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetZoneActionPolicy$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetZoneActionPolicy")));
    public static VarHandle GetZoneActionPolicy$VH() {
        return IInternetZoneManagerVtbl.GetZoneActionPolicy$VH;
    }
    public static MemoryAddress GetZoneActionPolicy$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.GetZoneActionPolicy$VH.get(seg);
    }
    public static void GetZoneActionPolicy$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.GetZoneActionPolicy$VH.set(seg, x);
    }
    public static MemoryAddress GetZoneActionPolicy$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.GetZoneActionPolicy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetZoneActionPolicy$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.GetZoneActionPolicy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetZoneActionPolicy GetZoneActionPolicy (MemorySegment segment) {
        return GetZoneActionPolicy.ofAddress(GetZoneActionPolicy$get(segment));
    }
    static final FunctionDescriptor SetZoneActionPolicy$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_INT
    );
    static final MethodHandle SetZoneActionPolicy$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;II)I",
        IInternetZoneManagerVtbl.SetZoneActionPolicy$FUNC, false
    );
    public interface SetZoneActionPolicy {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3, int x4, int x5);
        static MemoryAddress allocate(SetZoneActionPolicy fi) {
            return RuntimeHelper.upcallStub(SetZoneActionPolicy.class, fi, IInternetZoneManagerVtbl.SetZoneActionPolicy$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;II)I");
        }
        static MemoryAddress allocate(SetZoneActionPolicy fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetZoneActionPolicy.class, fi, IInternetZoneManagerVtbl.SetZoneActionPolicy$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;II)I", scope);
        }
        static SetZoneActionPolicy ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3, int x4, int x5) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.SetZoneActionPolicy$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetZoneActionPolicy$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetZoneActionPolicy")));
    public static VarHandle SetZoneActionPolicy$VH() {
        return IInternetZoneManagerVtbl.SetZoneActionPolicy$VH;
    }
    public static MemoryAddress SetZoneActionPolicy$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.SetZoneActionPolicy$VH.get(seg);
    }
    public static void SetZoneActionPolicy$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.SetZoneActionPolicy$VH.set(seg, x);
    }
    public static MemoryAddress SetZoneActionPolicy$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.SetZoneActionPolicy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetZoneActionPolicy$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.SetZoneActionPolicy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetZoneActionPolicy SetZoneActionPolicy (MemorySegment segment) {
        return SetZoneActionPolicy.ofAddress(SetZoneActionPolicy$get(segment));
    }
    static final FunctionDescriptor PromptAction$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle PromptAction$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        IInternetZoneManagerVtbl.PromptAction$FUNC, false
    );
    public interface PromptAction {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, int x5);
        static MemoryAddress allocate(PromptAction fi) {
            return RuntimeHelper.upcallStub(PromptAction.class, fi, IInternetZoneManagerVtbl.PromptAction$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(PromptAction fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(PromptAction.class, fi, IInternetZoneManagerVtbl.PromptAction$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static PromptAction ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, int x5) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.PromptAction$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PromptAction$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("PromptAction")));
    public static VarHandle PromptAction$VH() {
        return IInternetZoneManagerVtbl.PromptAction$VH;
    }
    public static MemoryAddress PromptAction$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.PromptAction$VH.get(seg);
    }
    public static void PromptAction$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.PromptAction$VH.set(seg, x);
    }
    public static MemoryAddress PromptAction$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.PromptAction$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PromptAction$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.PromptAction$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PromptAction PromptAction (MemorySegment segment) {
        return PromptAction.ofAddress(PromptAction$get(segment));
    }
    static final FunctionDescriptor LogAction$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle LogAction$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        IInternetZoneManagerVtbl.LogAction$FUNC, false
    );
    public interface LogAction {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, int x4);
        static MemoryAddress allocate(LogAction fi) {
            return RuntimeHelper.upcallStub(LogAction.class, fi, IInternetZoneManagerVtbl.LogAction$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(LogAction fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(LogAction.class, fi, IInternetZoneManagerVtbl.LogAction$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static LogAction ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, int x4) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.LogAction$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle LogAction$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("LogAction")));
    public static VarHandle LogAction$VH() {
        return IInternetZoneManagerVtbl.LogAction$VH;
    }
    public static MemoryAddress LogAction$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.LogAction$VH.get(seg);
    }
    public static void LogAction$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.LogAction$VH.set(seg, x);
    }
    public static MemoryAddress LogAction$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.LogAction$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LogAction$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.LogAction$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static LogAction LogAction (MemorySegment segment) {
        return LogAction.ofAddress(LogAction$get(segment));
    }
    static final FunctionDescriptor CreateZoneEnumerator$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle CreateZoneEnumerator$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        IInternetZoneManagerVtbl.CreateZoneEnumerator$FUNC, false
    );
    public interface CreateZoneEnumerator {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3);
        static MemoryAddress allocate(CreateZoneEnumerator fi) {
            return RuntimeHelper.upcallStub(CreateZoneEnumerator.class, fi, IInternetZoneManagerVtbl.CreateZoneEnumerator$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(CreateZoneEnumerator fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(CreateZoneEnumerator.class, fi, IInternetZoneManagerVtbl.CreateZoneEnumerator$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static CreateZoneEnumerator ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.CreateZoneEnumerator$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateZoneEnumerator$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("CreateZoneEnumerator")));
    public static VarHandle CreateZoneEnumerator$VH() {
        return IInternetZoneManagerVtbl.CreateZoneEnumerator$VH;
    }
    public static MemoryAddress CreateZoneEnumerator$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.CreateZoneEnumerator$VH.get(seg);
    }
    public static void CreateZoneEnumerator$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.CreateZoneEnumerator$VH.set(seg, x);
    }
    public static MemoryAddress CreateZoneEnumerator$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.CreateZoneEnumerator$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateZoneEnumerator$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.CreateZoneEnumerator$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateZoneEnumerator CreateZoneEnumerator (MemorySegment segment) {
        return CreateZoneEnumerator.ofAddress(CreateZoneEnumerator$get(segment));
    }
    static final FunctionDescriptor GetZoneAt$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle GetZoneAt$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        IInternetZoneManagerVtbl.GetZoneAt$FUNC, false
    );
    public interface GetZoneAt {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(GetZoneAt fi) {
            return RuntimeHelper.upcallStub(GetZoneAt.class, fi, IInternetZoneManagerVtbl.GetZoneAt$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetZoneAt fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetZoneAt.class, fi, IInternetZoneManagerVtbl.GetZoneAt$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetZoneAt ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.GetZoneAt$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetZoneAt$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetZoneAt")));
    public static VarHandle GetZoneAt$VH() {
        return IInternetZoneManagerVtbl.GetZoneAt$VH;
    }
    public static MemoryAddress GetZoneAt$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.GetZoneAt$VH.get(seg);
    }
    public static void GetZoneAt$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.GetZoneAt$VH.set(seg, x);
    }
    public static MemoryAddress GetZoneAt$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.GetZoneAt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetZoneAt$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.GetZoneAt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetZoneAt GetZoneAt (MemorySegment segment) {
        return GetZoneAt.ofAddress(GetZoneAt$get(segment));
    }
    static final FunctionDescriptor DestroyZoneEnumerator$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle DestroyZoneEnumerator$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        IInternetZoneManagerVtbl.DestroyZoneEnumerator$FUNC, false
    );
    public interface DestroyZoneEnumerator {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
        static MemoryAddress allocate(DestroyZoneEnumerator fi) {
            return RuntimeHelper.upcallStub(DestroyZoneEnumerator.class, fi, IInternetZoneManagerVtbl.DestroyZoneEnumerator$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(DestroyZoneEnumerator fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(DestroyZoneEnumerator.class, fi, IInternetZoneManagerVtbl.DestroyZoneEnumerator$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static DestroyZoneEnumerator ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.DestroyZoneEnumerator$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DestroyZoneEnumerator$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("DestroyZoneEnumerator")));
    public static VarHandle DestroyZoneEnumerator$VH() {
        return IInternetZoneManagerVtbl.DestroyZoneEnumerator$VH;
    }
    public static MemoryAddress DestroyZoneEnumerator$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.DestroyZoneEnumerator$VH.get(seg);
    }
    public static void DestroyZoneEnumerator$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.DestroyZoneEnumerator$VH.set(seg, x);
    }
    public static MemoryAddress DestroyZoneEnumerator$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.DestroyZoneEnumerator$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DestroyZoneEnumerator$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.DestroyZoneEnumerator$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DestroyZoneEnumerator DestroyZoneEnumerator (MemorySegment segment) {
        return DestroyZoneEnumerator.ofAddress(DestroyZoneEnumerator$get(segment));
    }
    static final FunctionDescriptor CopyTemplatePoliciesToZone$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG
    );
    static final MethodHandle CopyTemplatePoliciesToZone$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;III)I",
        IInternetZoneManagerVtbl.CopyTemplatePoliciesToZone$FUNC, false
    );
    public interface CopyTemplatePoliciesToZone {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, int x3);
        static MemoryAddress allocate(CopyTemplatePoliciesToZone fi) {
            return RuntimeHelper.upcallStub(CopyTemplatePoliciesToZone.class, fi, IInternetZoneManagerVtbl.CopyTemplatePoliciesToZone$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;III)I");
        }
        static MemoryAddress allocate(CopyTemplatePoliciesToZone fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(CopyTemplatePoliciesToZone.class, fi, IInternetZoneManagerVtbl.CopyTemplatePoliciesToZone$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;III)I", scope);
        }
        static CopyTemplatePoliciesToZone ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, int x3) -> {
                try {
                    return (int)IInternetZoneManagerVtbl.CopyTemplatePoliciesToZone$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CopyTemplatePoliciesToZone$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("CopyTemplatePoliciesToZone")));
    public static VarHandle CopyTemplatePoliciesToZone$VH() {
        return IInternetZoneManagerVtbl.CopyTemplatePoliciesToZone$VH;
    }
    public static MemoryAddress CopyTemplatePoliciesToZone$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.CopyTemplatePoliciesToZone$VH.get(seg);
    }
    public static void CopyTemplatePoliciesToZone$set( MemorySegment seg, MemoryAddress x) {
        IInternetZoneManagerVtbl.CopyTemplatePoliciesToZone$VH.set(seg, x);
    }
    public static MemoryAddress CopyTemplatePoliciesToZone$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)IInternetZoneManagerVtbl.CopyTemplatePoliciesToZone$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CopyTemplatePoliciesToZone$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetZoneManagerVtbl.CopyTemplatePoliciesToZone$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CopyTemplatePoliciesToZone CopyTemplatePoliciesToZone (MemorySegment segment) {
        return CopyTemplatePoliciesToZone.ofAddress(CopyTemplatePoliciesToZone$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


