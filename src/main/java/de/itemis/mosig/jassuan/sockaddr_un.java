// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class sockaddr_un {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_SHORT.withName("sun_family"),
        C_SHORT.withName("sun_port"),
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    C_CHAR.withName("s_b1"),
                    C_CHAR.withName("s_b2"),
                    C_CHAR.withName("s_b3"),
                    C_CHAR.withName("s_b4")
                ).withName("S_un_b"),
                MemoryLayout.structLayout(
                    C_SHORT.withName("s_w1"),
                    C_SHORT.withName("s_w2")
                ).withName("S_un_w"),
                C_LONG.withName("S_addr")
            ).withName("S_un")
        ).withName("sun_addr"),
        MemoryLayout.sequenceLayout(102, C_CHAR).withName("sun_path"),
        MemoryLayout.paddingLayout(16)
    ).withName("sockaddr_un");
    public static MemoryLayout $LAYOUT() {
        return sockaddr_un.$struct$LAYOUT;
    }
    static final VarHandle sun_family$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("sun_family"));
    public static VarHandle sun_family$VH() {
        return sockaddr_un.sun_family$VH;
    }
    public static short sun_family$get(MemorySegment seg) {
        return (short)sockaddr_un.sun_family$VH.get(seg);
    }
    public static void sun_family$set( MemorySegment seg, short x) {
        sockaddr_un.sun_family$VH.set(seg, x);
    }
    public static short sun_family$get(MemorySegment seg, long index) {
        return (short)sockaddr_un.sun_family$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sun_family$set(MemorySegment seg, long index, short x) {
        sockaddr_un.sun_family$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sun_port$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("sun_port"));
    public static VarHandle sun_port$VH() {
        return sockaddr_un.sun_port$VH;
    }
    public static short sun_port$get(MemorySegment seg) {
        return (short)sockaddr_un.sun_port$VH.get(seg);
    }
    public static void sun_port$set( MemorySegment seg, short x) {
        sockaddr_un.sun_port$VH.set(seg, x);
    }
    public static short sun_port$get(MemorySegment seg, long index) {
        return (short)sockaddr_un.sun_port$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sun_port$set(MemorySegment seg, long index, short x) {
        sockaddr_un.sun_port$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment sun_addr$slice(MemorySegment seg) {
        return seg.asSlice(4, 4);
    }
    public static MemorySegment sun_path$slice(MemorySegment seg) {
        return seg.asSlice(8, 102);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


