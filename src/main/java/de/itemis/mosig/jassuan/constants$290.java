// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$290 {

    static final FunctionDescriptor OutputDebugStringA$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle OutputDebugStringA$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "OutputDebugStringA",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$290.OutputDebugStringA$FUNC, false
    );
    static final FunctionDescriptor OutputDebugStringW$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle OutputDebugStringW$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "OutputDebugStringW",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$290.OutputDebugStringW$FUNC, false
    );
    static final FunctionDescriptor ContinueDebugEvent$FUNC = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_LONG,
        C_LONG
    );
    static final MethodHandle ContinueDebugEvent$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "ContinueDebugEvent",
        "(III)I",
        constants$290.ContinueDebugEvent$FUNC, false
    );
    static final FunctionDescriptor WaitForDebugEvent$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle WaitForDebugEvent$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "WaitForDebugEvent",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$290.WaitForDebugEvent$FUNC, false
    );
    static final FunctionDescriptor DebugActiveProcess$FUNC = FunctionDescriptor.of(C_INT,
        C_LONG
    );
    static final MethodHandle DebugActiveProcess$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "DebugActiveProcess",
        "(I)I",
        constants$290.DebugActiveProcess$FUNC, false
    );
    static final FunctionDescriptor DebugActiveProcessStop$FUNC = FunctionDescriptor.of(C_INT,
        C_LONG
    );
    static final MethodHandle DebugActiveProcessStop$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "DebugActiveProcessStop",
        "(I)I",
        constants$290.DebugActiveProcessStop$FUNC, false
    );
}


