// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class ARRAY_INFO {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Dimension"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("BufferConformanceMark"),
        C_POINTER.withName("BufferVarianceMark"),
        C_POINTER.withName("MaxCountArray"),
        C_POINTER.withName("OffsetArray"),
        C_POINTER.withName("ActualCountArray")
    );
    public static MemoryLayout $LAYOUT() {
        return ARRAY_INFO.$struct$LAYOUT;
    }
    static final VarHandle Dimension$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Dimension"));
    public static VarHandle Dimension$VH() {
        return ARRAY_INFO.Dimension$VH;
    }
    public static int Dimension$get(MemorySegment seg) {
        return (int)ARRAY_INFO.Dimension$VH.get(seg);
    }
    public static void Dimension$set( MemorySegment seg, int x) {
        ARRAY_INFO.Dimension$VH.set(seg, x);
    }
    public static int Dimension$get(MemorySegment seg, long index) {
        return (int)ARRAY_INFO.Dimension$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Dimension$set(MemorySegment seg, long index, int x) {
        ARRAY_INFO.Dimension$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BufferConformanceMark$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("BufferConformanceMark")));
    public static VarHandle BufferConformanceMark$VH() {
        return ARRAY_INFO.BufferConformanceMark$VH;
    }
    public static MemoryAddress BufferConformanceMark$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ARRAY_INFO.BufferConformanceMark$VH.get(seg);
    }
    public static void BufferConformanceMark$set( MemorySegment seg, MemoryAddress x) {
        ARRAY_INFO.BufferConformanceMark$VH.set(seg, x);
    }
    public static MemoryAddress BufferConformanceMark$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ARRAY_INFO.BufferConformanceMark$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BufferConformanceMark$set(MemorySegment seg, long index, MemoryAddress x) {
        ARRAY_INFO.BufferConformanceMark$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BufferVarianceMark$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("BufferVarianceMark")));
    public static VarHandle BufferVarianceMark$VH() {
        return ARRAY_INFO.BufferVarianceMark$VH;
    }
    public static MemoryAddress BufferVarianceMark$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ARRAY_INFO.BufferVarianceMark$VH.get(seg);
    }
    public static void BufferVarianceMark$set( MemorySegment seg, MemoryAddress x) {
        ARRAY_INFO.BufferVarianceMark$VH.set(seg, x);
    }
    public static MemoryAddress BufferVarianceMark$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ARRAY_INFO.BufferVarianceMark$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BufferVarianceMark$set(MemorySegment seg, long index, MemoryAddress x) {
        ARRAY_INFO.BufferVarianceMark$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaxCountArray$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxCountArray")));
    public static VarHandle MaxCountArray$VH() {
        return ARRAY_INFO.MaxCountArray$VH;
    }
    public static MemoryAddress MaxCountArray$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ARRAY_INFO.MaxCountArray$VH.get(seg);
    }
    public static void MaxCountArray$set( MemorySegment seg, MemoryAddress x) {
        ARRAY_INFO.MaxCountArray$VH.set(seg, x);
    }
    public static MemoryAddress MaxCountArray$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ARRAY_INFO.MaxCountArray$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxCountArray$set(MemorySegment seg, long index, MemoryAddress x) {
        ARRAY_INFO.MaxCountArray$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle OffsetArray$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("OffsetArray")));
    public static VarHandle OffsetArray$VH() {
        return ARRAY_INFO.OffsetArray$VH;
    }
    public static MemoryAddress OffsetArray$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ARRAY_INFO.OffsetArray$VH.get(seg);
    }
    public static void OffsetArray$set( MemorySegment seg, MemoryAddress x) {
        ARRAY_INFO.OffsetArray$VH.set(seg, x);
    }
    public static MemoryAddress OffsetArray$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ARRAY_INFO.OffsetArray$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OffsetArray$set(MemorySegment seg, long index, MemoryAddress x) {
        ARRAY_INFO.OffsetArray$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ActualCountArray$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ActualCountArray")));
    public static VarHandle ActualCountArray$VH() {
        return ARRAY_INFO.ActualCountArray$VH;
    }
    public static MemoryAddress ActualCountArray$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ARRAY_INFO.ActualCountArray$VH.get(seg);
    }
    public static void ActualCountArray$set( MemorySegment seg, MemoryAddress x) {
        ARRAY_INFO.ActualCountArray$VH.set(seg, x);
    }
    public static MemoryAddress ActualCountArray$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ARRAY_INFO.ActualCountArray$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ActualCountArray$set(MemorySegment seg, long index, MemoryAddress x) {
        ARRAY_INFO.ActualCountArray$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


