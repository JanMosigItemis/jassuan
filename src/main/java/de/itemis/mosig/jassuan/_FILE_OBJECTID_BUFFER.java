// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _FILE_OBJECTID_BUFFER {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(16, C_CHAR).withName("ObjectId"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                MemoryLayout.sequenceLayout(16, C_CHAR).withName("BirthVolumeId"),
                MemoryLayout.sequenceLayout(16, C_CHAR).withName("BirthObjectId"),
                MemoryLayout.sequenceLayout(16, C_CHAR).withName("DomainId")
            ).withName("$anon$0"),
            MemoryLayout.sequenceLayout(48, C_CHAR).withName("ExtendedInfo")
        ).withName("$anon$0")
    ).withName("_FILE_OBJECTID_BUFFER");
    public static MemoryLayout $LAYOUT() {
        return _FILE_OBJECTID_BUFFER.$struct$LAYOUT;
    }
    public static MemorySegment ObjectId$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment BirthVolumeId$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static MemorySegment BirthObjectId$slice(MemorySegment seg) {
        return seg.asSlice(32, 16);
    }
    public static MemorySegment DomainId$slice(MemorySegment seg) {
        return seg.asSlice(48, 16);
    }
    public static MemorySegment ExtendedInfo$slice(MemorySegment seg) {
        return seg.asSlice(16, 48);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


