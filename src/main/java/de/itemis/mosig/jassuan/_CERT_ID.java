// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _CERT_ID {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("dwIdChoice"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    C_LONG.withName("cbData"),
                    MemoryLayout.paddingLayout(32),
                    C_POINTER.withName("pbData")
                ).withName("Issuer"),
                MemoryLayout.structLayout(
                    C_LONG.withName("cbData"),
                    MemoryLayout.paddingLayout(32),
                    C_POINTER.withName("pbData")
                ).withName("SerialNumber")
            ).withName("IssuerSerialNumber"),
            MemoryLayout.structLayout(
                C_LONG.withName("cbData"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("pbData")
            ).withName("KeyId"),
            MemoryLayout.structLayout(
                C_LONG.withName("cbData"),
                MemoryLayout.paddingLayout(32),
                C_POINTER.withName("pbData")
            ).withName("HashId")
        ).withName("$anon$0")
    ).withName("_CERT_ID");
    public static MemoryLayout $LAYOUT() {
        return _CERT_ID.$struct$LAYOUT;
    }
    static final VarHandle dwIdChoice$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwIdChoice"));
    public static VarHandle dwIdChoice$VH() {
        return _CERT_ID.dwIdChoice$VH;
    }
    public static int dwIdChoice$get(MemorySegment seg) {
        return (int)_CERT_ID.dwIdChoice$VH.get(seg);
    }
    public static void dwIdChoice$set( MemorySegment seg, int x) {
        _CERT_ID.dwIdChoice$VH.set(seg, x);
    }
    public static int dwIdChoice$get(MemorySegment seg, long index) {
        return (int)_CERT_ID.dwIdChoice$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwIdChoice$set(MemorySegment seg, long index, int x) {
        _CERT_ID.dwIdChoice$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment IssuerSerialNumber$slice(MemorySegment seg) {
        return seg.asSlice(8, 32);
    }
    public static MemorySegment KeyId$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static MemorySegment HashId$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


