// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class PROCESSOR_IDLESTATE_INFO {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("TimeCheck"),
        C_CHAR.withName("DemotePercent"),
        C_CHAR.withName("PromotePercent"),
        MemoryLayout.sequenceLayout(2, C_CHAR).withName("Spare")
    );
    public static MemoryLayout $LAYOUT() {
        return PROCESSOR_IDLESTATE_INFO.$struct$LAYOUT;
    }
    static final VarHandle TimeCheck$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeCheck"));
    public static VarHandle TimeCheck$VH() {
        return PROCESSOR_IDLESTATE_INFO.TimeCheck$VH;
    }
    public static int TimeCheck$get(MemorySegment seg) {
        return (int)PROCESSOR_IDLESTATE_INFO.TimeCheck$VH.get(seg);
    }
    public static void TimeCheck$set( MemorySegment seg, int x) {
        PROCESSOR_IDLESTATE_INFO.TimeCheck$VH.set(seg, x);
    }
    public static int TimeCheck$get(MemorySegment seg, long index) {
        return (int)PROCESSOR_IDLESTATE_INFO.TimeCheck$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TimeCheck$set(MemorySegment seg, long index, int x) {
        PROCESSOR_IDLESTATE_INFO.TimeCheck$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DemotePercent$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DemotePercent"));
    public static VarHandle DemotePercent$VH() {
        return PROCESSOR_IDLESTATE_INFO.DemotePercent$VH;
    }
    public static byte DemotePercent$get(MemorySegment seg) {
        return (byte)PROCESSOR_IDLESTATE_INFO.DemotePercent$VH.get(seg);
    }
    public static void DemotePercent$set( MemorySegment seg, byte x) {
        PROCESSOR_IDLESTATE_INFO.DemotePercent$VH.set(seg, x);
    }
    public static byte DemotePercent$get(MemorySegment seg, long index) {
        return (byte)PROCESSOR_IDLESTATE_INFO.DemotePercent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DemotePercent$set(MemorySegment seg, long index, byte x) {
        PROCESSOR_IDLESTATE_INFO.DemotePercent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle PromotePercent$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("PromotePercent"));
    public static VarHandle PromotePercent$VH() {
        return PROCESSOR_IDLESTATE_INFO.PromotePercent$VH;
    }
    public static byte PromotePercent$get(MemorySegment seg) {
        return (byte)PROCESSOR_IDLESTATE_INFO.PromotePercent$VH.get(seg);
    }
    public static void PromotePercent$set( MemorySegment seg, byte x) {
        PROCESSOR_IDLESTATE_INFO.PromotePercent$VH.set(seg, x);
    }
    public static byte PromotePercent$get(MemorySegment seg, long index) {
        return (byte)PROCESSOR_IDLESTATE_INFO.PromotePercent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PromotePercent$set(MemorySegment seg, long index, byte x) {
        PROCESSOR_IDLESTATE_INFO.PromotePercent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Spare$slice(MemorySegment seg) {
        return seg.asSlice(6, 2);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


