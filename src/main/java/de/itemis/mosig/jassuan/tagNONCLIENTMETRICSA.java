// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class tagNONCLIENTMETRICSA {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("cbSize"),
        C_INT.withName("iBorderWidth"),
        C_INT.withName("iScrollWidth"),
        C_INT.withName("iScrollHeight"),
        C_INT.withName("iCaptionWidth"),
        C_INT.withName("iCaptionHeight"),
        MemoryLayout.structLayout(
            C_LONG.withName("lfHeight"),
            C_LONG.withName("lfWidth"),
            C_LONG.withName("lfEscapement"),
            C_LONG.withName("lfOrientation"),
            C_LONG.withName("lfWeight"),
            C_CHAR.withName("lfItalic"),
            C_CHAR.withName("lfUnderline"),
            C_CHAR.withName("lfStrikeOut"),
            C_CHAR.withName("lfCharSet"),
            C_CHAR.withName("lfOutPrecision"),
            C_CHAR.withName("lfClipPrecision"),
            C_CHAR.withName("lfQuality"),
            C_CHAR.withName("lfPitchAndFamily"),
            MemoryLayout.sequenceLayout(32, C_CHAR).withName("lfFaceName")
        ).withName("lfCaptionFont"),
        C_INT.withName("iSmCaptionWidth"),
        C_INT.withName("iSmCaptionHeight"),
        MemoryLayout.structLayout(
            C_LONG.withName("lfHeight"),
            C_LONG.withName("lfWidth"),
            C_LONG.withName("lfEscapement"),
            C_LONG.withName("lfOrientation"),
            C_LONG.withName("lfWeight"),
            C_CHAR.withName("lfItalic"),
            C_CHAR.withName("lfUnderline"),
            C_CHAR.withName("lfStrikeOut"),
            C_CHAR.withName("lfCharSet"),
            C_CHAR.withName("lfOutPrecision"),
            C_CHAR.withName("lfClipPrecision"),
            C_CHAR.withName("lfQuality"),
            C_CHAR.withName("lfPitchAndFamily"),
            MemoryLayout.sequenceLayout(32, C_CHAR).withName("lfFaceName")
        ).withName("lfSmCaptionFont"),
        C_INT.withName("iMenuWidth"),
        C_INT.withName("iMenuHeight"),
        MemoryLayout.structLayout(
            C_LONG.withName("lfHeight"),
            C_LONG.withName("lfWidth"),
            C_LONG.withName("lfEscapement"),
            C_LONG.withName("lfOrientation"),
            C_LONG.withName("lfWeight"),
            C_CHAR.withName("lfItalic"),
            C_CHAR.withName("lfUnderline"),
            C_CHAR.withName("lfStrikeOut"),
            C_CHAR.withName("lfCharSet"),
            C_CHAR.withName("lfOutPrecision"),
            C_CHAR.withName("lfClipPrecision"),
            C_CHAR.withName("lfQuality"),
            C_CHAR.withName("lfPitchAndFamily"),
            MemoryLayout.sequenceLayout(32, C_CHAR).withName("lfFaceName")
        ).withName("lfMenuFont"),
        MemoryLayout.structLayout(
            C_LONG.withName("lfHeight"),
            C_LONG.withName("lfWidth"),
            C_LONG.withName("lfEscapement"),
            C_LONG.withName("lfOrientation"),
            C_LONG.withName("lfWeight"),
            C_CHAR.withName("lfItalic"),
            C_CHAR.withName("lfUnderline"),
            C_CHAR.withName("lfStrikeOut"),
            C_CHAR.withName("lfCharSet"),
            C_CHAR.withName("lfOutPrecision"),
            C_CHAR.withName("lfClipPrecision"),
            C_CHAR.withName("lfQuality"),
            C_CHAR.withName("lfPitchAndFamily"),
            MemoryLayout.sequenceLayout(32, C_CHAR).withName("lfFaceName")
        ).withName("lfStatusFont"),
        MemoryLayout.structLayout(
            C_LONG.withName("lfHeight"),
            C_LONG.withName("lfWidth"),
            C_LONG.withName("lfEscapement"),
            C_LONG.withName("lfOrientation"),
            C_LONG.withName("lfWeight"),
            C_CHAR.withName("lfItalic"),
            C_CHAR.withName("lfUnderline"),
            C_CHAR.withName("lfStrikeOut"),
            C_CHAR.withName("lfCharSet"),
            C_CHAR.withName("lfOutPrecision"),
            C_CHAR.withName("lfClipPrecision"),
            C_CHAR.withName("lfQuality"),
            C_CHAR.withName("lfPitchAndFamily"),
            MemoryLayout.sequenceLayout(32, C_CHAR).withName("lfFaceName")
        ).withName("lfMessageFont"),
        C_INT.withName("iPaddedBorderWidth")
    ).withName("tagNONCLIENTMETRICSA");
    public static MemoryLayout $LAYOUT() {
        return tagNONCLIENTMETRICSA.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return tagNONCLIENTMETRICSA.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)tagNONCLIENTMETRICSA.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        tagNONCLIENTMETRICSA.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)tagNONCLIENTMETRICSA.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        tagNONCLIENTMETRICSA.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iBorderWidth$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("iBorderWidth"));
    public static VarHandle iBorderWidth$VH() {
        return tagNONCLIENTMETRICSA.iBorderWidth$VH;
    }
    public static int iBorderWidth$get(MemorySegment seg) {
        return (int)tagNONCLIENTMETRICSA.iBorderWidth$VH.get(seg);
    }
    public static void iBorderWidth$set( MemorySegment seg, int x) {
        tagNONCLIENTMETRICSA.iBorderWidth$VH.set(seg, x);
    }
    public static int iBorderWidth$get(MemorySegment seg, long index) {
        return (int)tagNONCLIENTMETRICSA.iBorderWidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iBorderWidth$set(MemorySegment seg, long index, int x) {
        tagNONCLIENTMETRICSA.iBorderWidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iScrollWidth$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("iScrollWidth"));
    public static VarHandle iScrollWidth$VH() {
        return tagNONCLIENTMETRICSA.iScrollWidth$VH;
    }
    public static int iScrollWidth$get(MemorySegment seg) {
        return (int)tagNONCLIENTMETRICSA.iScrollWidth$VH.get(seg);
    }
    public static void iScrollWidth$set( MemorySegment seg, int x) {
        tagNONCLIENTMETRICSA.iScrollWidth$VH.set(seg, x);
    }
    public static int iScrollWidth$get(MemorySegment seg, long index) {
        return (int)tagNONCLIENTMETRICSA.iScrollWidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iScrollWidth$set(MemorySegment seg, long index, int x) {
        tagNONCLIENTMETRICSA.iScrollWidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iScrollHeight$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("iScrollHeight"));
    public static VarHandle iScrollHeight$VH() {
        return tagNONCLIENTMETRICSA.iScrollHeight$VH;
    }
    public static int iScrollHeight$get(MemorySegment seg) {
        return (int)tagNONCLIENTMETRICSA.iScrollHeight$VH.get(seg);
    }
    public static void iScrollHeight$set( MemorySegment seg, int x) {
        tagNONCLIENTMETRICSA.iScrollHeight$VH.set(seg, x);
    }
    public static int iScrollHeight$get(MemorySegment seg, long index) {
        return (int)tagNONCLIENTMETRICSA.iScrollHeight$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iScrollHeight$set(MemorySegment seg, long index, int x) {
        tagNONCLIENTMETRICSA.iScrollHeight$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iCaptionWidth$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("iCaptionWidth"));
    public static VarHandle iCaptionWidth$VH() {
        return tagNONCLIENTMETRICSA.iCaptionWidth$VH;
    }
    public static int iCaptionWidth$get(MemorySegment seg) {
        return (int)tagNONCLIENTMETRICSA.iCaptionWidth$VH.get(seg);
    }
    public static void iCaptionWidth$set( MemorySegment seg, int x) {
        tagNONCLIENTMETRICSA.iCaptionWidth$VH.set(seg, x);
    }
    public static int iCaptionWidth$get(MemorySegment seg, long index) {
        return (int)tagNONCLIENTMETRICSA.iCaptionWidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iCaptionWidth$set(MemorySegment seg, long index, int x) {
        tagNONCLIENTMETRICSA.iCaptionWidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iCaptionHeight$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("iCaptionHeight"));
    public static VarHandle iCaptionHeight$VH() {
        return tagNONCLIENTMETRICSA.iCaptionHeight$VH;
    }
    public static int iCaptionHeight$get(MemorySegment seg) {
        return (int)tagNONCLIENTMETRICSA.iCaptionHeight$VH.get(seg);
    }
    public static void iCaptionHeight$set( MemorySegment seg, int x) {
        tagNONCLIENTMETRICSA.iCaptionHeight$VH.set(seg, x);
    }
    public static int iCaptionHeight$get(MemorySegment seg, long index) {
        return (int)tagNONCLIENTMETRICSA.iCaptionHeight$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iCaptionHeight$set(MemorySegment seg, long index, int x) {
        tagNONCLIENTMETRICSA.iCaptionHeight$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment lfCaptionFont$slice(MemorySegment seg) {
        return seg.asSlice(24, 60);
    }
    static final VarHandle iSmCaptionWidth$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("iSmCaptionWidth"));
    public static VarHandle iSmCaptionWidth$VH() {
        return tagNONCLIENTMETRICSA.iSmCaptionWidth$VH;
    }
    public static int iSmCaptionWidth$get(MemorySegment seg) {
        return (int)tagNONCLIENTMETRICSA.iSmCaptionWidth$VH.get(seg);
    }
    public static void iSmCaptionWidth$set( MemorySegment seg, int x) {
        tagNONCLIENTMETRICSA.iSmCaptionWidth$VH.set(seg, x);
    }
    public static int iSmCaptionWidth$get(MemorySegment seg, long index) {
        return (int)tagNONCLIENTMETRICSA.iSmCaptionWidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iSmCaptionWidth$set(MemorySegment seg, long index, int x) {
        tagNONCLIENTMETRICSA.iSmCaptionWidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iSmCaptionHeight$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("iSmCaptionHeight"));
    public static VarHandle iSmCaptionHeight$VH() {
        return tagNONCLIENTMETRICSA.iSmCaptionHeight$VH;
    }
    public static int iSmCaptionHeight$get(MemorySegment seg) {
        return (int)tagNONCLIENTMETRICSA.iSmCaptionHeight$VH.get(seg);
    }
    public static void iSmCaptionHeight$set( MemorySegment seg, int x) {
        tagNONCLIENTMETRICSA.iSmCaptionHeight$VH.set(seg, x);
    }
    public static int iSmCaptionHeight$get(MemorySegment seg, long index) {
        return (int)tagNONCLIENTMETRICSA.iSmCaptionHeight$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iSmCaptionHeight$set(MemorySegment seg, long index, int x) {
        tagNONCLIENTMETRICSA.iSmCaptionHeight$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment lfSmCaptionFont$slice(MemorySegment seg) {
        return seg.asSlice(92, 60);
    }
    static final VarHandle iMenuWidth$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("iMenuWidth"));
    public static VarHandle iMenuWidth$VH() {
        return tagNONCLIENTMETRICSA.iMenuWidth$VH;
    }
    public static int iMenuWidth$get(MemorySegment seg) {
        return (int)tagNONCLIENTMETRICSA.iMenuWidth$VH.get(seg);
    }
    public static void iMenuWidth$set( MemorySegment seg, int x) {
        tagNONCLIENTMETRICSA.iMenuWidth$VH.set(seg, x);
    }
    public static int iMenuWidth$get(MemorySegment seg, long index) {
        return (int)tagNONCLIENTMETRICSA.iMenuWidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iMenuWidth$set(MemorySegment seg, long index, int x) {
        tagNONCLIENTMETRICSA.iMenuWidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iMenuHeight$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("iMenuHeight"));
    public static VarHandle iMenuHeight$VH() {
        return tagNONCLIENTMETRICSA.iMenuHeight$VH;
    }
    public static int iMenuHeight$get(MemorySegment seg) {
        return (int)tagNONCLIENTMETRICSA.iMenuHeight$VH.get(seg);
    }
    public static void iMenuHeight$set( MemorySegment seg, int x) {
        tagNONCLIENTMETRICSA.iMenuHeight$VH.set(seg, x);
    }
    public static int iMenuHeight$get(MemorySegment seg, long index) {
        return (int)tagNONCLIENTMETRICSA.iMenuHeight$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iMenuHeight$set(MemorySegment seg, long index, int x) {
        tagNONCLIENTMETRICSA.iMenuHeight$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment lfMenuFont$slice(MemorySegment seg) {
        return seg.asSlice(160, 60);
    }
    public static MemorySegment lfStatusFont$slice(MemorySegment seg) {
        return seg.asSlice(220, 60);
    }
    public static MemorySegment lfMessageFont$slice(MemorySegment seg) {
        return seg.asSlice(280, 60);
    }
    static final VarHandle iPaddedBorderWidth$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("iPaddedBorderWidth"));
    public static VarHandle iPaddedBorderWidth$VH() {
        return tagNONCLIENTMETRICSA.iPaddedBorderWidth$VH;
    }
    public static int iPaddedBorderWidth$get(MemorySegment seg) {
        return (int)tagNONCLIENTMETRICSA.iPaddedBorderWidth$VH.get(seg);
    }
    public static void iPaddedBorderWidth$set( MemorySegment seg, int x) {
        tagNONCLIENTMETRICSA.iPaddedBorderWidth$VH.set(seg, x);
    }
    public static int iPaddedBorderWidth$get(MemorySegment seg, long index) {
        return (int)tagNONCLIENTMETRICSA.iPaddedBorderWidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iPaddedBorderWidth$set(MemorySegment seg, long index, int x) {
        tagNONCLIENTMETRICSA.iPaddedBorderWidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


