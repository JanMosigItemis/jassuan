// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _STORAGE_MINIPORT_DESCRIPTOR {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        C_INT.withName("Portdriver"),
        C_CHAR.withName("LUNResetSupported"),
        C_CHAR.withName("TargetResetSupported"),
        MemoryLayout.paddingLayout(16)
    ).withName("_STORAGE_MINIPORT_DESCRIPTOR");
    public static MemoryLayout $LAYOUT() {
        return _STORAGE_MINIPORT_DESCRIPTOR.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _STORAGE_MINIPORT_DESCRIPTOR.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)_STORAGE_MINIPORT_DESCRIPTOR.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        _STORAGE_MINIPORT_DESCRIPTOR.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_STORAGE_MINIPORT_DESCRIPTOR.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _STORAGE_MINIPORT_DESCRIPTOR.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _STORAGE_MINIPORT_DESCRIPTOR.Size$VH;
    }
    public static int Size$get(MemorySegment seg) {
        return (int)_STORAGE_MINIPORT_DESCRIPTOR.Size$VH.get(seg);
    }
    public static void Size$set( MemorySegment seg, int x) {
        _STORAGE_MINIPORT_DESCRIPTOR.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_STORAGE_MINIPORT_DESCRIPTOR.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _STORAGE_MINIPORT_DESCRIPTOR.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Portdriver$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Portdriver"));
    public static VarHandle Portdriver$VH() {
        return _STORAGE_MINIPORT_DESCRIPTOR.Portdriver$VH;
    }
    public static int Portdriver$get(MemorySegment seg) {
        return (int)_STORAGE_MINIPORT_DESCRIPTOR.Portdriver$VH.get(seg);
    }
    public static void Portdriver$set( MemorySegment seg, int x) {
        _STORAGE_MINIPORT_DESCRIPTOR.Portdriver$VH.set(seg, x);
    }
    public static int Portdriver$get(MemorySegment seg, long index) {
        return (int)_STORAGE_MINIPORT_DESCRIPTOR.Portdriver$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Portdriver$set(MemorySegment seg, long index, int x) {
        _STORAGE_MINIPORT_DESCRIPTOR.Portdriver$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LUNResetSupported$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("LUNResetSupported"));
    public static VarHandle LUNResetSupported$VH() {
        return _STORAGE_MINIPORT_DESCRIPTOR.LUNResetSupported$VH;
    }
    public static byte LUNResetSupported$get(MemorySegment seg) {
        return (byte)_STORAGE_MINIPORT_DESCRIPTOR.LUNResetSupported$VH.get(seg);
    }
    public static void LUNResetSupported$set( MemorySegment seg, byte x) {
        _STORAGE_MINIPORT_DESCRIPTOR.LUNResetSupported$VH.set(seg, x);
    }
    public static byte LUNResetSupported$get(MemorySegment seg, long index) {
        return (byte)_STORAGE_MINIPORT_DESCRIPTOR.LUNResetSupported$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LUNResetSupported$set(MemorySegment seg, long index, byte x) {
        _STORAGE_MINIPORT_DESCRIPTOR.LUNResetSupported$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle TargetResetSupported$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("TargetResetSupported"));
    public static VarHandle TargetResetSupported$VH() {
        return _STORAGE_MINIPORT_DESCRIPTOR.TargetResetSupported$VH;
    }
    public static byte TargetResetSupported$get(MemorySegment seg) {
        return (byte)_STORAGE_MINIPORT_DESCRIPTOR.TargetResetSupported$VH.get(seg);
    }
    public static void TargetResetSupported$set( MemorySegment seg, byte x) {
        _STORAGE_MINIPORT_DESCRIPTOR.TargetResetSupported$VH.set(seg, x);
    }
    public static byte TargetResetSupported$get(MemorySegment seg, long index) {
        return (byte)_STORAGE_MINIPORT_DESCRIPTOR.TargetResetSupported$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TargetResetSupported$set(MemorySegment seg, long index, byte x) {
        _STORAGE_MINIPORT_DESCRIPTOR.TargetResetSupported$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


