// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _WIN32_STREAM_ID {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("dwStreamId"),
        C_LONG.withName("dwStreamAttributes"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONG_LONG.withName("QuadPart")
        ).withName("Size"),
        C_LONG.withName("dwStreamNameSize"),
        MemoryLayout.sequenceLayout(1, C_SHORT).withName("cStreamName"),
        MemoryLayout.paddingLayout(16)
    ).withName("_WIN32_STREAM_ID");
    public static MemoryLayout $LAYOUT() {
        return _WIN32_STREAM_ID.$struct$LAYOUT;
    }
    static final VarHandle dwStreamId$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwStreamId"));
    public static VarHandle dwStreamId$VH() {
        return _WIN32_STREAM_ID.dwStreamId$VH;
    }
    public static int dwStreamId$get(MemorySegment seg) {
        return (int)_WIN32_STREAM_ID.dwStreamId$VH.get(seg);
    }
    public static void dwStreamId$set( MemorySegment seg, int x) {
        _WIN32_STREAM_ID.dwStreamId$VH.set(seg, x);
    }
    public static int dwStreamId$get(MemorySegment seg, long index) {
        return (int)_WIN32_STREAM_ID.dwStreamId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwStreamId$set(MemorySegment seg, long index, int x) {
        _WIN32_STREAM_ID.dwStreamId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwStreamAttributes$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwStreamAttributes"));
    public static VarHandle dwStreamAttributes$VH() {
        return _WIN32_STREAM_ID.dwStreamAttributes$VH;
    }
    public static int dwStreamAttributes$get(MemorySegment seg) {
        return (int)_WIN32_STREAM_ID.dwStreamAttributes$VH.get(seg);
    }
    public static void dwStreamAttributes$set( MemorySegment seg, int x) {
        _WIN32_STREAM_ID.dwStreamAttributes$VH.set(seg, x);
    }
    public static int dwStreamAttributes$get(MemorySegment seg, long index) {
        return (int)_WIN32_STREAM_ID.dwStreamAttributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwStreamAttributes$set(MemorySegment seg, long index, int x) {
        _WIN32_STREAM_ID.dwStreamAttributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Size$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    static final VarHandle dwStreamNameSize$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwStreamNameSize"));
    public static VarHandle dwStreamNameSize$VH() {
        return _WIN32_STREAM_ID.dwStreamNameSize$VH;
    }
    public static int dwStreamNameSize$get(MemorySegment seg) {
        return (int)_WIN32_STREAM_ID.dwStreamNameSize$VH.get(seg);
    }
    public static void dwStreamNameSize$set( MemorySegment seg, int x) {
        _WIN32_STREAM_ID.dwStreamNameSize$VH.set(seg, x);
    }
    public static int dwStreamNameSize$get(MemorySegment seg, long index) {
        return (int)_WIN32_STREAM_ID.dwStreamNameSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwStreamNameSize$set(MemorySegment seg, long index, int x) {
        _WIN32_STREAM_ID.dwStreamNameSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment cStreamName$slice(MemorySegment seg) {
        return seg.asSlice(20, 2);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


