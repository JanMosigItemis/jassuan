// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class ILockBytesVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("ReadAt"),
        C_POINTER.withName("WriteAt"),
        C_POINTER.withName("Flush"),
        C_POINTER.withName("SetSize"),
        C_POINTER.withName("LockRegion"),
        C_POINTER.withName("UnlockRegion"),
        C_POINTER.withName("Stat")
    ).withName("ILockBytesVtbl");
    public static MemoryLayout $LAYOUT() {
        return ILockBytesVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ILockBytesVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, ILockBytesVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, ILockBytesVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ILockBytesVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return ILockBytesVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ILockBytesVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        ILockBytesVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ILockBytesVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        ILockBytesVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ILockBytesVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, ILockBytesVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, ILockBytesVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)ILockBytesVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return ILockBytesVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ILockBytesVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        ILockBytesVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ILockBytesVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        ILockBytesVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ILockBytesVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, ILockBytesVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, ILockBytesVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)ILockBytesVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return ILockBytesVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ILockBytesVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        ILockBytesVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ILockBytesVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        ILockBytesVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor ReadAt$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONG_LONG.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle ReadAt$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ILockBytesVtbl.ReadAt$FUNC, false
    );
    public interface ReadAt {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4);
        static MemoryAddress allocate(ReadAt fi) {
            return RuntimeHelper.upcallStub(ReadAt.class, fi, ILockBytesVtbl.ReadAt$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(ReadAt fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(ReadAt.class, fi, ILockBytesVtbl.ReadAt$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static ReadAt ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4) -> {
                try {
                    return (int)ILockBytesVtbl.ReadAt$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReadAt$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReadAt")));
    public static VarHandle ReadAt$VH() {
        return ILockBytesVtbl.ReadAt$VH;
    }
    public static MemoryAddress ReadAt$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ILockBytesVtbl.ReadAt$VH.get(seg);
    }
    public static void ReadAt$set( MemorySegment seg, MemoryAddress x) {
        ILockBytesVtbl.ReadAt$VH.set(seg, x);
    }
    public static MemoryAddress ReadAt$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ILockBytesVtbl.ReadAt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReadAt$set(MemorySegment seg, long index, MemoryAddress x) {
        ILockBytesVtbl.ReadAt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReadAt ReadAt (MemorySegment segment) {
        return ReadAt.ofAddress(ReadAt$get(segment));
    }
    static final FunctionDescriptor WriteAt$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONG_LONG.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle WriteAt$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ILockBytesVtbl.WriteAt$FUNC, false
    );
    public interface WriteAt {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4);
        static MemoryAddress allocate(WriteAt fi) {
            return RuntimeHelper.upcallStub(WriteAt.class, fi, ILockBytesVtbl.WriteAt$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(WriteAt fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(WriteAt.class, fi, ILockBytesVtbl.WriteAt$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static WriteAt ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4) -> {
                try {
                    return (int)ILockBytesVtbl.WriteAt$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle WriteAt$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("WriteAt")));
    public static VarHandle WriteAt$VH() {
        return ILockBytesVtbl.WriteAt$VH;
    }
    public static MemoryAddress WriteAt$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ILockBytesVtbl.WriteAt$VH.get(seg);
    }
    public static void WriteAt$set( MemorySegment seg, MemoryAddress x) {
        ILockBytesVtbl.WriteAt$VH.set(seg, x);
    }
    public static MemoryAddress WriteAt$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ILockBytesVtbl.WriteAt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void WriteAt$set(MemorySegment seg, long index, MemoryAddress x) {
        ILockBytesVtbl.WriteAt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static WriteAt WriteAt (MemorySegment segment) {
        return WriteAt.ofAddress(WriteAt$get(segment));
    }
    static final FunctionDescriptor Flush$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Flush$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ILockBytesVtbl.Flush$FUNC, false
    );
    public interface Flush {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Flush fi) {
            return RuntimeHelper.upcallStub(Flush.class, fi, ILockBytesVtbl.Flush$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Flush fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Flush.class, fi, ILockBytesVtbl.Flush$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Flush ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)ILockBytesVtbl.Flush$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Flush$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Flush")));
    public static VarHandle Flush$VH() {
        return ILockBytesVtbl.Flush$VH;
    }
    public static MemoryAddress Flush$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ILockBytesVtbl.Flush$VH.get(seg);
    }
    public static void Flush$set( MemorySegment seg, MemoryAddress x) {
        ILockBytesVtbl.Flush$VH.set(seg, x);
    }
    public static MemoryAddress Flush$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ILockBytesVtbl.Flush$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flush$set(MemorySegment seg, long index, MemoryAddress x) {
        ILockBytesVtbl.Flush$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Flush Flush (MemorySegment segment) {
        return Flush.ofAddress(Flush$get(segment));
    }
    static final FunctionDescriptor SetSize$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONG_LONG.withName("QuadPart")
        ).withName("_ULARGE_INTEGER")
    );
    static final MethodHandle SetSize$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        ILockBytesVtbl.SetSize$FUNC, false
    );
    public interface SetSize {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1);
        static MemoryAddress allocate(SetSize fi) {
            return RuntimeHelper.upcallStub(SetSize.class, fi, ILockBytesVtbl.SetSize$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I");
        }
        static MemoryAddress allocate(SetSize fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetSize.class, fi, ILockBytesVtbl.SetSize$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I", scope);
        }
        static SetSize ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1) -> {
                try {
                    return (int)ILockBytesVtbl.SetSize$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetSize$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetSize")));
    public static VarHandle SetSize$VH() {
        return ILockBytesVtbl.SetSize$VH;
    }
    public static MemoryAddress SetSize$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ILockBytesVtbl.SetSize$VH.get(seg);
    }
    public static void SetSize$set( MemorySegment seg, MemoryAddress x) {
        ILockBytesVtbl.SetSize$VH.set(seg, x);
    }
    public static MemoryAddress SetSize$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ILockBytesVtbl.SetSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetSize$set(MemorySegment seg, long index, MemoryAddress x) {
        ILockBytesVtbl.SetSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetSize SetSize (MemorySegment segment) {
        return SetSize.ofAddress(SetSize$get(segment));
    }
    static final FunctionDescriptor LockRegion$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONG_LONG.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONG_LONG.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        C_LONG
    );
    static final MethodHandle LockRegion$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;I)I",
        ILockBytesVtbl.LockRegion$FUNC, false
    );
    public interface LockRegion {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemorySegment x2, int x3);
        static MemoryAddress allocate(LockRegion fi) {
            return RuntimeHelper.upcallStub(LockRegion.class, fi, ILockBytesVtbl.LockRegion$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;I)I");
        }
        static MemoryAddress allocate(LockRegion fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(LockRegion.class, fi, ILockBytesVtbl.LockRegion$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;I)I", scope);
        }
        static LockRegion ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemorySegment x2, int x3) -> {
                try {
                    return (int)ILockBytesVtbl.LockRegion$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle LockRegion$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("LockRegion")));
    public static VarHandle LockRegion$VH() {
        return ILockBytesVtbl.LockRegion$VH;
    }
    public static MemoryAddress LockRegion$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ILockBytesVtbl.LockRegion$VH.get(seg);
    }
    public static void LockRegion$set( MemorySegment seg, MemoryAddress x) {
        ILockBytesVtbl.LockRegion$VH.set(seg, x);
    }
    public static MemoryAddress LockRegion$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ILockBytesVtbl.LockRegion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LockRegion$set(MemorySegment seg, long index, MemoryAddress x) {
        ILockBytesVtbl.LockRegion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static LockRegion LockRegion (MemorySegment segment) {
        return LockRegion.ofAddress(LockRegion$get(segment));
    }
    static final FunctionDescriptor UnlockRegion$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONG_LONG.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONG_LONG.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        C_LONG
    );
    static final MethodHandle UnlockRegion$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;I)I",
        ILockBytesVtbl.UnlockRegion$FUNC, false
    );
    public interface UnlockRegion {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemorySegment x2, int x3);
        static MemoryAddress allocate(UnlockRegion fi) {
            return RuntimeHelper.upcallStub(UnlockRegion.class, fi, ILockBytesVtbl.UnlockRegion$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;I)I");
        }
        static MemoryAddress allocate(UnlockRegion fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(UnlockRegion.class, fi, ILockBytesVtbl.UnlockRegion$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;I)I", scope);
        }
        static UnlockRegion ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemorySegment x2, int x3) -> {
                try {
                    return (int)ILockBytesVtbl.UnlockRegion$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle UnlockRegion$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("UnlockRegion")));
    public static VarHandle UnlockRegion$VH() {
        return ILockBytesVtbl.UnlockRegion$VH;
    }
    public static MemoryAddress UnlockRegion$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ILockBytesVtbl.UnlockRegion$VH.get(seg);
    }
    public static void UnlockRegion$set( MemorySegment seg, MemoryAddress x) {
        ILockBytesVtbl.UnlockRegion$VH.set(seg, x);
    }
    public static MemoryAddress UnlockRegion$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ILockBytesVtbl.UnlockRegion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UnlockRegion$set(MemorySegment seg, long index, MemoryAddress x) {
        ILockBytesVtbl.UnlockRegion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static UnlockRegion UnlockRegion (MemorySegment segment) {
        return UnlockRegion.ofAddress(UnlockRegion$get(segment));
    }
    static final FunctionDescriptor Stat$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle Stat$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        ILockBytesVtbl.Stat$FUNC, false
    );
    public interface Stat {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2);
        static MemoryAddress allocate(Stat fi) {
            return RuntimeHelper.upcallStub(Stat.class, fi, ILockBytesVtbl.Stat$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(Stat fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Stat.class, fi, ILockBytesVtbl.Stat$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static Stat ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2) -> {
                try {
                    return (int)ILockBytesVtbl.Stat$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Stat$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Stat")));
    public static VarHandle Stat$VH() {
        return ILockBytesVtbl.Stat$VH;
    }
    public static MemoryAddress Stat$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ILockBytesVtbl.Stat$VH.get(seg);
    }
    public static void Stat$set( MemorySegment seg, MemoryAddress x) {
        ILockBytesVtbl.Stat$VH.set(seg, x);
    }
    public static MemoryAddress Stat$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ILockBytesVtbl.Stat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Stat$set(MemorySegment seg, long index, MemoryAddress x) {
        ILockBytesVtbl.Stat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Stat Stat (MemorySegment segment) {
        return Stat.ofAddress(Stat$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


