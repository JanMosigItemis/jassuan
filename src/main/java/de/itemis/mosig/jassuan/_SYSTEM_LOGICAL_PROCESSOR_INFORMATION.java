// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG_LONG.withName("ProcessorMask"),
        C_INT.withName("Relationship"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_CHAR.withName("Flags")
            ).withName("ProcessorCore"),
            MemoryLayout.structLayout(
                C_LONG.withName("NodeNumber")
            ).withName("NumaNode"),
            MemoryLayout.structLayout(
                C_CHAR.withName("Level"),
                C_CHAR.withName("Associativity"),
                C_SHORT.withName("LineSize"),
                C_LONG.withName("Size"),
                C_INT.withName("Type")
            ).withName("Cache"),
            MemoryLayout.sequenceLayout(2, C_LONG_LONG).withName("Reserved")
        ).withName("$anon$0")
    ).withName("_SYSTEM_LOGICAL_PROCESSOR_INFORMATION");
    public static MemoryLayout $LAYOUT() {
        return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION.$struct$LAYOUT;
    }
    static final VarHandle ProcessorMask$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ProcessorMask"));
    public static VarHandle ProcessorMask$VH() {
        return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION.ProcessorMask$VH;
    }
    public static long ProcessorMask$get(MemorySegment seg) {
        return (long)_SYSTEM_LOGICAL_PROCESSOR_INFORMATION.ProcessorMask$VH.get(seg);
    }
    public static void ProcessorMask$set( MemorySegment seg, long x) {
        _SYSTEM_LOGICAL_PROCESSOR_INFORMATION.ProcessorMask$VH.set(seg, x);
    }
    public static long ProcessorMask$get(MemorySegment seg, long index) {
        return (long)_SYSTEM_LOGICAL_PROCESSOR_INFORMATION.ProcessorMask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessorMask$set(MemorySegment seg, long index, long x) {
        _SYSTEM_LOGICAL_PROCESSOR_INFORMATION.ProcessorMask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Relationship$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Relationship"));
    public static VarHandle Relationship$VH() {
        return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION.Relationship$VH;
    }
    public static int Relationship$get(MemorySegment seg) {
        return (int)_SYSTEM_LOGICAL_PROCESSOR_INFORMATION.Relationship$VH.get(seg);
    }
    public static void Relationship$set( MemorySegment seg, int x) {
        _SYSTEM_LOGICAL_PROCESSOR_INFORMATION.Relationship$VH.set(seg, x);
    }
    public static int Relationship$get(MemorySegment seg, long index) {
        return (int)_SYSTEM_LOGICAL_PROCESSOR_INFORMATION.Relationship$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Relationship$set(MemorySegment seg, long index, int x) {
        _SYSTEM_LOGICAL_PROCESSOR_INFORMATION.Relationship$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class ProcessorCore {

        static final MemoryLayout ProcessorCore$struct$LAYOUT = MemoryLayout.structLayout(
            C_CHAR.withName("Flags")
        );
        public static MemoryLayout $LAYOUT() {
            return ProcessorCore.ProcessorCore$struct$LAYOUT;
        }
        static final VarHandle Flags$VH = ProcessorCore$struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Flags"));
        public static VarHandle Flags$VH() {
            return ProcessorCore.Flags$VH;
        }
        public static byte Flags$get(MemorySegment seg) {
            return (byte)ProcessorCore.Flags$VH.get(seg);
        }
        public static void Flags$set( MemorySegment seg, byte x) {
            ProcessorCore.Flags$VH.set(seg, x);
        }
        public static byte Flags$get(MemorySegment seg, long index) {
            return (byte)ProcessorCore.Flags$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(MemorySegment seg, long index, byte x) {
            ProcessorCore.Flags$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.ofScope(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment ProcessorCore$slice(MemorySegment seg) {
        return seg.asSlice(16, 1);
    }
    public static class NumaNode {

        static final MemoryLayout NumaNode$struct$LAYOUT = MemoryLayout.structLayout(
            C_LONG.withName("NodeNumber")
        );
        public static MemoryLayout $LAYOUT() {
            return NumaNode.NumaNode$struct$LAYOUT;
        }
        static final VarHandle NodeNumber$VH = NumaNode$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("NodeNumber"));
        public static VarHandle NodeNumber$VH() {
            return NumaNode.NodeNumber$VH;
        }
        public static int NodeNumber$get(MemorySegment seg) {
            return (int)NumaNode.NodeNumber$VH.get(seg);
        }
        public static void NodeNumber$set( MemorySegment seg, int x) {
            NumaNode.NodeNumber$VH.set(seg, x);
        }
        public static int NodeNumber$get(MemorySegment seg, long index) {
            return (int)NumaNode.NodeNumber$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void NodeNumber$set(MemorySegment seg, long index, int x) {
            NumaNode.NodeNumber$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.ofScope(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment NumaNode$slice(MemorySegment seg) {
        return seg.asSlice(16, 4);
    }
    public static MemorySegment Cache$slice(MemorySegment seg) {
        return seg.asSlice(16, 12);
    }
    public static MemorySegment Reserved$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


