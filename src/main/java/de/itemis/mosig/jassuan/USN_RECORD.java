// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class USN_RECORD {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("RecordLength"),
        C_SHORT.withName("MajorVersion"),
        C_SHORT.withName("MinorVersion"),
        C_LONG_LONG.withName("FileReferenceNumber"),
        C_LONG_LONG.withName("ParentFileReferenceNumber"),
        C_LONG_LONG.withName("Usn"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONG_LONG.withName("QuadPart")
        ).withName("TimeStamp"),
        C_LONG.withName("Reason"),
        C_LONG.withName("SourceInfo"),
        C_LONG.withName("SecurityId"),
        C_LONG.withName("FileAttributes"),
        C_SHORT.withName("FileNameLength"),
        C_SHORT.withName("FileNameOffset"),
        MemoryLayout.sequenceLayout(1, C_SHORT).withName("FileName"),
        MemoryLayout.paddingLayout(16)
    );
    public static MemoryLayout $LAYOUT() {
        return USN_RECORD.$struct$LAYOUT;
    }
    static final VarHandle RecordLength$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("RecordLength"));
    public static VarHandle RecordLength$VH() {
        return USN_RECORD.RecordLength$VH;
    }
    public static int RecordLength$get(MemorySegment seg) {
        return (int)USN_RECORD.RecordLength$VH.get(seg);
    }
    public static void RecordLength$set( MemorySegment seg, int x) {
        USN_RECORD.RecordLength$VH.set(seg, x);
    }
    public static int RecordLength$get(MemorySegment seg, long index) {
        return (int)USN_RECORD.RecordLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RecordLength$set(MemorySegment seg, long index, int x) {
        USN_RECORD.RecordLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MajorVersion$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorVersion"));
    public static VarHandle MajorVersion$VH() {
        return USN_RECORD.MajorVersion$VH;
    }
    public static short MajorVersion$get(MemorySegment seg) {
        return (short)USN_RECORD.MajorVersion$VH.get(seg);
    }
    public static void MajorVersion$set( MemorySegment seg, short x) {
        USN_RECORD.MajorVersion$VH.set(seg, x);
    }
    public static short MajorVersion$get(MemorySegment seg, long index) {
        return (short)USN_RECORD.MajorVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MajorVersion$set(MemorySegment seg, long index, short x) {
        USN_RECORD.MajorVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MinorVersion$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorVersion"));
    public static VarHandle MinorVersion$VH() {
        return USN_RECORD.MinorVersion$VH;
    }
    public static short MinorVersion$get(MemorySegment seg) {
        return (short)USN_RECORD.MinorVersion$VH.get(seg);
    }
    public static void MinorVersion$set( MemorySegment seg, short x) {
        USN_RECORD.MinorVersion$VH.set(seg, x);
    }
    public static short MinorVersion$get(MemorySegment seg, long index) {
        return (short)USN_RECORD.MinorVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MinorVersion$set(MemorySegment seg, long index, short x) {
        USN_RECORD.MinorVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FileReferenceNumber$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("FileReferenceNumber"));
    public static VarHandle FileReferenceNumber$VH() {
        return USN_RECORD.FileReferenceNumber$VH;
    }
    public static long FileReferenceNumber$get(MemorySegment seg) {
        return (long)USN_RECORD.FileReferenceNumber$VH.get(seg);
    }
    public static void FileReferenceNumber$set( MemorySegment seg, long x) {
        USN_RECORD.FileReferenceNumber$VH.set(seg, x);
    }
    public static long FileReferenceNumber$get(MemorySegment seg, long index) {
        return (long)USN_RECORD.FileReferenceNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FileReferenceNumber$set(MemorySegment seg, long index, long x) {
        USN_RECORD.FileReferenceNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ParentFileReferenceNumber$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ParentFileReferenceNumber"));
    public static VarHandle ParentFileReferenceNumber$VH() {
        return USN_RECORD.ParentFileReferenceNumber$VH;
    }
    public static long ParentFileReferenceNumber$get(MemorySegment seg) {
        return (long)USN_RECORD.ParentFileReferenceNumber$VH.get(seg);
    }
    public static void ParentFileReferenceNumber$set( MemorySegment seg, long x) {
        USN_RECORD.ParentFileReferenceNumber$VH.set(seg, x);
    }
    public static long ParentFileReferenceNumber$get(MemorySegment seg, long index) {
        return (long)USN_RECORD.ParentFileReferenceNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ParentFileReferenceNumber$set(MemorySegment seg, long index, long x) {
        USN_RECORD.ParentFileReferenceNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Usn$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Usn"));
    public static VarHandle Usn$VH() {
        return USN_RECORD.Usn$VH;
    }
    public static long Usn$get(MemorySegment seg) {
        return (long)USN_RECORD.Usn$VH.get(seg);
    }
    public static void Usn$set( MemorySegment seg, long x) {
        USN_RECORD.Usn$VH.set(seg, x);
    }
    public static long Usn$get(MemorySegment seg, long index) {
        return (long)USN_RECORD.Usn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Usn$set(MemorySegment seg, long index, long x) {
        USN_RECORD.Usn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment TimeStamp$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    static final VarHandle Reason$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reason"));
    public static VarHandle Reason$VH() {
        return USN_RECORD.Reason$VH;
    }
    public static int Reason$get(MemorySegment seg) {
        return (int)USN_RECORD.Reason$VH.get(seg);
    }
    public static void Reason$set( MemorySegment seg, int x) {
        USN_RECORD.Reason$VH.set(seg, x);
    }
    public static int Reason$get(MemorySegment seg, long index) {
        return (int)USN_RECORD.Reason$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reason$set(MemorySegment seg, long index, int x) {
        USN_RECORD.Reason$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SourceInfo$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("SourceInfo"));
    public static VarHandle SourceInfo$VH() {
        return USN_RECORD.SourceInfo$VH;
    }
    public static int SourceInfo$get(MemorySegment seg) {
        return (int)USN_RECORD.SourceInfo$VH.get(seg);
    }
    public static void SourceInfo$set( MemorySegment seg, int x) {
        USN_RECORD.SourceInfo$VH.set(seg, x);
    }
    public static int SourceInfo$get(MemorySegment seg, long index) {
        return (int)USN_RECORD.SourceInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SourceInfo$set(MemorySegment seg, long index, int x) {
        USN_RECORD.SourceInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SecurityId$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("SecurityId"));
    public static VarHandle SecurityId$VH() {
        return USN_RECORD.SecurityId$VH;
    }
    public static int SecurityId$get(MemorySegment seg) {
        return (int)USN_RECORD.SecurityId$VH.get(seg);
    }
    public static void SecurityId$set( MemorySegment seg, int x) {
        USN_RECORD.SecurityId$VH.set(seg, x);
    }
    public static int SecurityId$get(MemorySegment seg, long index) {
        return (int)USN_RECORD.SecurityId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SecurityId$set(MemorySegment seg, long index, int x) {
        USN_RECORD.SecurityId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FileAttributes$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileAttributes"));
    public static VarHandle FileAttributes$VH() {
        return USN_RECORD.FileAttributes$VH;
    }
    public static int FileAttributes$get(MemorySegment seg) {
        return (int)USN_RECORD.FileAttributes$VH.get(seg);
    }
    public static void FileAttributes$set( MemorySegment seg, int x) {
        USN_RECORD.FileAttributes$VH.set(seg, x);
    }
    public static int FileAttributes$get(MemorySegment seg, long index) {
        return (int)USN_RECORD.FileAttributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FileAttributes$set(MemorySegment seg, long index, int x) {
        USN_RECORD.FileAttributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FileNameLength$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("FileNameLength"));
    public static VarHandle FileNameLength$VH() {
        return USN_RECORD.FileNameLength$VH;
    }
    public static short FileNameLength$get(MemorySegment seg) {
        return (short)USN_RECORD.FileNameLength$VH.get(seg);
    }
    public static void FileNameLength$set( MemorySegment seg, short x) {
        USN_RECORD.FileNameLength$VH.set(seg, x);
    }
    public static short FileNameLength$get(MemorySegment seg, long index) {
        return (short)USN_RECORD.FileNameLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FileNameLength$set(MemorySegment seg, long index, short x) {
        USN_RECORD.FileNameLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FileNameOffset$VH = $struct$LAYOUT.varHandle(short.class, MemoryLayout.PathElement.groupElement("FileNameOffset"));
    public static VarHandle FileNameOffset$VH() {
        return USN_RECORD.FileNameOffset$VH;
    }
    public static short FileNameOffset$get(MemorySegment seg) {
        return (short)USN_RECORD.FileNameOffset$VH.get(seg);
    }
    public static void FileNameOffset$set( MemorySegment seg, short x) {
        USN_RECORD.FileNameOffset$VH.set(seg, x);
    }
    public static short FileNameOffset$get(MemorySegment seg, long index) {
        return (short)USN_RECORD.FileNameOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FileNameOffset$set(MemorySegment seg, long index, short x) {
        USN_RECORD.FileNameOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment FileName$slice(MemorySegment seg) {
        return seg.asSlice(60, 2);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


