// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class group_filter {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("gf_interface"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.structLayout(
            C_SHORT.withName("ss_family"),
            MemoryLayout.sequenceLayout(6, C_CHAR).withName("__ss_pad1"),
            C_LONG_LONG.withName("__ss_align"),
            MemoryLayout.sequenceLayout(112, C_CHAR).withName("__ss_pad2")
        ).withName("gf_group"),
        C_INT.withName("gf_fmode"),
        C_LONG.withName("gf_numsrc"),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            C_SHORT.withName("ss_family"),
            MemoryLayout.sequenceLayout(6, C_CHAR).withName("__ss_pad1"),
            C_LONG_LONG.withName("__ss_align"),
            MemoryLayout.sequenceLayout(112, C_CHAR).withName("__ss_pad2")
        ).withName("sockaddr_storage")).withName("gf_slist")
    ).withName("group_filter");
    public static MemoryLayout $LAYOUT() {
        return group_filter.$struct$LAYOUT;
    }
    static final VarHandle gf_interface$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("gf_interface"));
    public static VarHandle gf_interface$VH() {
        return group_filter.gf_interface$VH;
    }
    public static int gf_interface$get(MemorySegment seg) {
        return (int)group_filter.gf_interface$VH.get(seg);
    }
    public static void gf_interface$set( MemorySegment seg, int x) {
        group_filter.gf_interface$VH.set(seg, x);
    }
    public static int gf_interface$get(MemorySegment seg, long index) {
        return (int)group_filter.gf_interface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void gf_interface$set(MemorySegment seg, long index, int x) {
        group_filter.gf_interface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment gf_group$slice(MemorySegment seg) {
        return seg.asSlice(8, 128);
    }
    static final VarHandle gf_fmode$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("gf_fmode"));
    public static VarHandle gf_fmode$VH() {
        return group_filter.gf_fmode$VH;
    }
    public static int gf_fmode$get(MemorySegment seg) {
        return (int)group_filter.gf_fmode$VH.get(seg);
    }
    public static void gf_fmode$set( MemorySegment seg, int x) {
        group_filter.gf_fmode$VH.set(seg, x);
    }
    public static int gf_fmode$get(MemorySegment seg, long index) {
        return (int)group_filter.gf_fmode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void gf_fmode$set(MemorySegment seg, long index, int x) {
        group_filter.gf_fmode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle gf_numsrc$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("gf_numsrc"));
    public static VarHandle gf_numsrc$VH() {
        return group_filter.gf_numsrc$VH;
    }
    public static int gf_numsrc$get(MemorySegment seg) {
        return (int)group_filter.gf_numsrc$VH.get(seg);
    }
    public static void gf_numsrc$set( MemorySegment seg, int x) {
        group_filter.gf_numsrc$VH.set(seg, x);
    }
    public static int gf_numsrc$get(MemorySegment seg, long index) {
        return (int)group_filter.gf_numsrc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void gf_numsrc$set(MemorySegment seg, long index, int x) {
        group_filter.gf_numsrc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment gf_slist$slice(MemorySegment seg) {
        return seg.asSlice(144, 128);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


