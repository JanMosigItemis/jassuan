// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class ITypeInfo2Vtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetTypeAttr"),
        C_POINTER.withName("GetTypeComp"),
        C_POINTER.withName("GetFuncDesc"),
        C_POINTER.withName("GetVarDesc"),
        C_POINTER.withName("GetNames"),
        C_POINTER.withName("GetRefTypeOfImplType"),
        C_POINTER.withName("GetImplTypeFlags"),
        C_POINTER.withName("GetIDsOfNames"),
        C_POINTER.withName("Invoke"),
        C_POINTER.withName("GetDocumentation"),
        C_POINTER.withName("GetDllEntry"),
        C_POINTER.withName("GetRefTypeInfo"),
        C_POINTER.withName("AddressOfMember"),
        C_POINTER.withName("CreateInstance"),
        C_POINTER.withName("GetMops"),
        C_POINTER.withName("GetContainingTypeLib"),
        C_POINTER.withName("ReleaseTypeAttr"),
        C_POINTER.withName("ReleaseFuncDesc"),
        C_POINTER.withName("ReleaseVarDesc"),
        C_POINTER.withName("GetTypeKind"),
        C_POINTER.withName("GetTypeFlags"),
        C_POINTER.withName("GetFuncIndexOfMemId"),
        C_POINTER.withName("GetVarIndexOfMemId"),
        C_POINTER.withName("GetCustData"),
        C_POINTER.withName("GetFuncCustData"),
        C_POINTER.withName("GetParamCustData"),
        C_POINTER.withName("GetVarCustData"),
        C_POINTER.withName("GetImplTypeCustData"),
        C_POINTER.withName("GetDocumentation2"),
        C_POINTER.withName("GetAllCustData"),
        C_POINTER.withName("GetAllFuncCustData"),
        C_POINTER.withName("GetAllParamCustData"),
        C_POINTER.withName("GetAllVarCustData"),
        C_POINTER.withName("GetAllImplTypeCustData")
    ).withName("ITypeInfo2Vtbl");
    public static MemoryLayout $LAYOUT() {
        return ITypeInfo2Vtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, ITypeInfo2Vtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, ITypeInfo2Vtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ITypeInfo2Vtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return ITypeInfo2Vtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, ITypeInfo2Vtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, ITypeInfo2Vtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)ITypeInfo2Vtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return ITypeInfo2Vtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, ITypeInfo2Vtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, ITypeInfo2Vtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)ITypeInfo2Vtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return ITypeInfo2Vtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor GetTypeAttr$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetTypeAttr$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetTypeAttr$FUNC, false
    );
    public interface GetTypeAttr {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetTypeAttr fi) {
            return RuntimeHelper.upcallStub(GetTypeAttr.class, fi, ITypeInfo2Vtbl.GetTypeAttr$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetTypeAttr fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetTypeAttr.class, fi, ITypeInfo2Vtbl.GetTypeAttr$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetTypeAttr ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetTypeAttr$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeAttr$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeAttr")));
    public static VarHandle GetTypeAttr$VH() {
        return ITypeInfo2Vtbl.GetTypeAttr$VH;
    }
    public static MemoryAddress GetTypeAttr$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetTypeAttr$VH.get(seg);
    }
    public static void GetTypeAttr$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetTypeAttr$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeAttr$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetTypeAttr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeAttr$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetTypeAttr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeAttr GetTypeAttr (MemorySegment segment) {
        return GetTypeAttr.ofAddress(GetTypeAttr$get(segment));
    }
    static final FunctionDescriptor GetTypeComp$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetTypeComp$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetTypeComp$FUNC, false
    );
    public interface GetTypeComp {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetTypeComp fi) {
            return RuntimeHelper.upcallStub(GetTypeComp.class, fi, ITypeInfo2Vtbl.GetTypeComp$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetTypeComp fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetTypeComp.class, fi, ITypeInfo2Vtbl.GetTypeComp$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetTypeComp ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetTypeComp$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeComp$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeComp")));
    public static VarHandle GetTypeComp$VH() {
        return ITypeInfo2Vtbl.GetTypeComp$VH;
    }
    public static MemoryAddress GetTypeComp$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetTypeComp$VH.get(seg);
    }
    public static void GetTypeComp$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetTypeComp$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeComp$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetTypeComp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeComp$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetTypeComp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeComp GetTypeComp (MemorySegment segment) {
        return GetTypeComp.ofAddress(GetTypeComp$get(segment));
    }
    static final FunctionDescriptor GetFuncDesc$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle GetFuncDesc$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetFuncDesc$FUNC, false
    );
    public interface GetFuncDesc {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetFuncDesc fi) {
            return RuntimeHelper.upcallStub(GetFuncDesc.class, fi, ITypeInfo2Vtbl.GetFuncDesc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetFuncDesc fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetFuncDesc.class, fi, ITypeInfo2Vtbl.GetFuncDesc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetFuncDesc ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetFuncDesc$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetFuncDesc$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetFuncDesc")));
    public static VarHandle GetFuncDesc$VH() {
        return ITypeInfo2Vtbl.GetFuncDesc$VH;
    }
    public static MemoryAddress GetFuncDesc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetFuncDesc$VH.get(seg);
    }
    public static void GetFuncDesc$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetFuncDesc$VH.set(seg, x);
    }
    public static MemoryAddress GetFuncDesc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetFuncDesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFuncDesc$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetFuncDesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFuncDesc GetFuncDesc (MemorySegment segment) {
        return GetFuncDesc.ofAddress(GetFuncDesc$get(segment));
    }
    static final FunctionDescriptor GetVarDesc$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle GetVarDesc$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetVarDesc$FUNC, false
    );
    public interface GetVarDesc {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetVarDesc fi) {
            return RuntimeHelper.upcallStub(GetVarDesc.class, fi, ITypeInfo2Vtbl.GetVarDesc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetVarDesc fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetVarDesc.class, fi, ITypeInfo2Vtbl.GetVarDesc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetVarDesc ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetVarDesc$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetVarDesc$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetVarDesc")));
    public static VarHandle GetVarDesc$VH() {
        return ITypeInfo2Vtbl.GetVarDesc$VH;
    }
    public static MemoryAddress GetVarDesc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetVarDesc$VH.get(seg);
    }
    public static void GetVarDesc$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetVarDesc$VH.set(seg, x);
    }
    public static MemoryAddress GetVarDesc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetVarDesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetVarDesc$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetVarDesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetVarDesc GetVarDesc (MemorySegment segment) {
        return GetVarDesc.ofAddress(GetVarDesc$get(segment));
    }
    static final FunctionDescriptor GetNames$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle GetNames$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetNames$FUNC, false
    );
    public interface GetNames {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4);
        static MemoryAddress allocate(GetNames fi) {
            return RuntimeHelper.upcallStub(GetNames.class, fi, ITypeInfo2Vtbl.GetNames$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetNames fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetNames.class, fi, ITypeInfo2Vtbl.GetNames$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetNames ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetNames$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetNames$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetNames")));
    public static VarHandle GetNames$VH() {
        return ITypeInfo2Vtbl.GetNames$VH;
    }
    public static MemoryAddress GetNames$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetNames$VH.get(seg);
    }
    public static void GetNames$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetNames$VH.set(seg, x);
    }
    public static MemoryAddress GetNames$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetNames$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetNames GetNames (MemorySegment segment) {
        return GetNames.ofAddress(GetNames$get(segment));
    }
    static final FunctionDescriptor GetRefTypeOfImplType$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle GetRefTypeOfImplType$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetRefTypeOfImplType$FUNC, false
    );
    public interface GetRefTypeOfImplType {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetRefTypeOfImplType fi) {
            return RuntimeHelper.upcallStub(GetRefTypeOfImplType.class, fi, ITypeInfo2Vtbl.GetRefTypeOfImplType$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetRefTypeOfImplType fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetRefTypeOfImplType.class, fi, ITypeInfo2Vtbl.GetRefTypeOfImplType$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetRefTypeOfImplType ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetRefTypeOfImplType$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetRefTypeOfImplType$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetRefTypeOfImplType")));
    public static VarHandle GetRefTypeOfImplType$VH() {
        return ITypeInfo2Vtbl.GetRefTypeOfImplType$VH;
    }
    public static MemoryAddress GetRefTypeOfImplType$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetRefTypeOfImplType$VH.get(seg);
    }
    public static void GetRefTypeOfImplType$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetRefTypeOfImplType$VH.set(seg, x);
    }
    public static MemoryAddress GetRefTypeOfImplType$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetRefTypeOfImplType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetRefTypeOfImplType$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetRefTypeOfImplType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetRefTypeOfImplType GetRefTypeOfImplType (MemorySegment segment) {
        return GetRefTypeOfImplType.ofAddress(GetRefTypeOfImplType$get(segment));
    }
    static final FunctionDescriptor GetImplTypeFlags$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle GetImplTypeFlags$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetImplTypeFlags$FUNC, false
    );
    public interface GetImplTypeFlags {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetImplTypeFlags fi) {
            return RuntimeHelper.upcallStub(GetImplTypeFlags.class, fi, ITypeInfo2Vtbl.GetImplTypeFlags$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetImplTypeFlags fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetImplTypeFlags.class, fi, ITypeInfo2Vtbl.GetImplTypeFlags$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetImplTypeFlags ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetImplTypeFlags$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetImplTypeFlags$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetImplTypeFlags")));
    public static VarHandle GetImplTypeFlags$VH() {
        return ITypeInfo2Vtbl.GetImplTypeFlags$VH;
    }
    public static MemoryAddress GetImplTypeFlags$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetImplTypeFlags$VH.get(seg);
    }
    public static void GetImplTypeFlags$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetImplTypeFlags$VH.set(seg, x);
    }
    public static MemoryAddress GetImplTypeFlags$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetImplTypeFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetImplTypeFlags$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetImplTypeFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetImplTypeFlags GetImplTypeFlags (MemorySegment segment) {
        return GetImplTypeFlags.ofAddress(GetImplTypeFlags$get(segment));
    }
    static final FunctionDescriptor GetIDsOfNames$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle GetIDsOfNames$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetIDsOfNames$FUNC, false
    );
    public interface GetIDsOfNames {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(GetIDsOfNames fi) {
            return RuntimeHelper.upcallStub(GetIDsOfNames.class, fi, ITypeInfo2Vtbl.GetIDsOfNames$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetIDsOfNames fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetIDsOfNames.class, fi, ITypeInfo2Vtbl.GetIDsOfNames$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetIDsOfNames ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetIDsOfNames$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetIDsOfNames$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetIDsOfNames")));
    public static VarHandle GetIDsOfNames$VH() {
        return ITypeInfo2Vtbl.GetIDsOfNames$VH;
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetIDsOfNames$VH.get(seg);
    }
    public static void GetIDsOfNames$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetIDsOfNames$VH.set(seg, x);
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetIDsOfNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetIDsOfNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames (MemorySegment segment) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment));
    }
    static final FunctionDescriptor Invoke$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_SHORT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle Invoke$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ISLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.Invoke$FUNC, false
    );
    public interface Invoke {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, short x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7);
        static MemoryAddress allocate(Invoke fi) {
            return RuntimeHelper.upcallStub(Invoke.class, fi, ITypeInfo2Vtbl.Invoke$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ISLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Invoke fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Invoke.class, fi, ITypeInfo2Vtbl.Invoke$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ISLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Invoke ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, short x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7) -> {
                try {
                    return (int)ITypeInfo2Vtbl.Invoke$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6, x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Invoke$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Invoke")));
    public static VarHandle Invoke$VH() {
        return ITypeInfo2Vtbl.Invoke$VH;
    }
    public static MemoryAddress Invoke$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.Invoke$VH.get(seg);
    }
    public static void Invoke$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.Invoke$VH.set(seg, x);
    }
    public static MemoryAddress Invoke$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.Invoke$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.Invoke$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke (MemorySegment segment) {
        return Invoke.ofAddress(Invoke$get(segment));
    }
    static final FunctionDescriptor GetDocumentation$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetDocumentation$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetDocumentation$FUNC, false
    );
    public interface GetDocumentation {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5);
        static MemoryAddress allocate(GetDocumentation fi) {
            return RuntimeHelper.upcallStub(GetDocumentation.class, fi, ITypeInfo2Vtbl.GetDocumentation$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetDocumentation fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetDocumentation.class, fi, ITypeInfo2Vtbl.GetDocumentation$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetDocumentation ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetDocumentation$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDocumentation$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetDocumentation")));
    public static VarHandle GetDocumentation$VH() {
        return ITypeInfo2Vtbl.GetDocumentation$VH;
    }
    public static MemoryAddress GetDocumentation$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetDocumentation$VH.get(seg);
    }
    public static void GetDocumentation$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetDocumentation$VH.set(seg, x);
    }
    public static MemoryAddress GetDocumentation$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetDocumentation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDocumentation$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetDocumentation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDocumentation GetDocumentation (MemorySegment segment) {
        return GetDocumentation.ofAddress(GetDocumentation$get(segment));
    }
    static final FunctionDescriptor GetDllEntry$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetDllEntry$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetDllEntry$FUNC, false
    );
    public interface GetDllEntry {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5);
        static MemoryAddress allocate(GetDllEntry fi) {
            return RuntimeHelper.upcallStub(GetDllEntry.class, fi, ITypeInfo2Vtbl.GetDllEntry$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetDllEntry fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetDllEntry.class, fi, ITypeInfo2Vtbl.GetDllEntry$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetDllEntry ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetDllEntry$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDllEntry$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetDllEntry")));
    public static VarHandle GetDllEntry$VH() {
        return ITypeInfo2Vtbl.GetDllEntry$VH;
    }
    public static MemoryAddress GetDllEntry$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetDllEntry$VH.get(seg);
    }
    public static void GetDllEntry$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetDllEntry$VH.set(seg, x);
    }
    public static MemoryAddress GetDllEntry$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetDllEntry$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDllEntry$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetDllEntry$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDllEntry GetDllEntry (MemorySegment segment) {
        return GetDllEntry.ofAddress(GetDllEntry$get(segment));
    }
    static final FunctionDescriptor GetRefTypeInfo$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle GetRefTypeInfo$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetRefTypeInfo$FUNC, false
    );
    public interface GetRefTypeInfo {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetRefTypeInfo fi) {
            return RuntimeHelper.upcallStub(GetRefTypeInfo.class, fi, ITypeInfo2Vtbl.GetRefTypeInfo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetRefTypeInfo fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetRefTypeInfo.class, fi, ITypeInfo2Vtbl.GetRefTypeInfo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetRefTypeInfo ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetRefTypeInfo$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetRefTypeInfo$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetRefTypeInfo")));
    public static VarHandle GetRefTypeInfo$VH() {
        return ITypeInfo2Vtbl.GetRefTypeInfo$VH;
    }
    public static MemoryAddress GetRefTypeInfo$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetRefTypeInfo$VH.get(seg);
    }
    public static void GetRefTypeInfo$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetRefTypeInfo$VH.set(seg, x);
    }
    public static MemoryAddress GetRefTypeInfo$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetRefTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetRefTypeInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetRefTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetRefTypeInfo GetRefTypeInfo (MemorySegment segment) {
        return GetRefTypeInfo.ofAddress(GetRefTypeInfo$get(segment));
    }
    static final FunctionDescriptor AddressOfMember$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_INT,
        C_POINTER
    );
    static final MethodHandle AddressOfMember$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.AddressOfMember$FUNC, false
    );
    public interface AddressOfMember {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(AddressOfMember fi) {
            return RuntimeHelper.upcallStub(AddressOfMember.class, fi, ITypeInfo2Vtbl.AddressOfMember$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddressOfMember fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddressOfMember.class, fi, ITypeInfo2Vtbl.AddressOfMember$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddressOfMember ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)ITypeInfo2Vtbl.AddressOfMember$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddressOfMember$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddressOfMember")));
    public static VarHandle AddressOfMember$VH() {
        return ITypeInfo2Vtbl.AddressOfMember$VH;
    }
    public static MemoryAddress AddressOfMember$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.AddressOfMember$VH.get(seg);
    }
    public static void AddressOfMember$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.AddressOfMember$VH.set(seg, x);
    }
    public static MemoryAddress AddressOfMember$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.AddressOfMember$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddressOfMember$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.AddressOfMember$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddressOfMember AddressOfMember (MemorySegment segment) {
        return AddressOfMember.ofAddress(AddressOfMember$get(segment));
    }
    static final FunctionDescriptor CreateInstance$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle CreateInstance$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.CreateInstance$FUNC, false
    );
    public interface CreateInstance {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(CreateInstance fi) {
            return RuntimeHelper.upcallStub(CreateInstance.class, fi, ITypeInfo2Vtbl.CreateInstance$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(CreateInstance fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(CreateInstance.class, fi, ITypeInfo2Vtbl.CreateInstance$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static CreateInstance ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)ITypeInfo2Vtbl.CreateInstance$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateInstance$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("CreateInstance")));
    public static VarHandle CreateInstance$VH() {
        return ITypeInfo2Vtbl.CreateInstance$VH;
    }
    public static MemoryAddress CreateInstance$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.CreateInstance$VH.get(seg);
    }
    public static void CreateInstance$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.CreateInstance$VH.set(seg, x);
    }
    public static MemoryAddress CreateInstance$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.CreateInstance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateInstance$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.CreateInstance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateInstance CreateInstance (MemorySegment segment) {
        return CreateInstance.ofAddress(CreateInstance$get(segment));
    }
    static final FunctionDescriptor GetMops$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle GetMops$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetMops$FUNC, false
    );
    public interface GetMops {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetMops fi) {
            return RuntimeHelper.upcallStub(GetMops.class, fi, ITypeInfo2Vtbl.GetMops$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetMops fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetMops.class, fi, ITypeInfo2Vtbl.GetMops$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetMops ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetMops$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetMops$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetMops")));
    public static VarHandle GetMops$VH() {
        return ITypeInfo2Vtbl.GetMops$VH;
    }
    public static MemoryAddress GetMops$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetMops$VH.get(seg);
    }
    public static void GetMops$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetMops$VH.set(seg, x);
    }
    public static MemoryAddress GetMops$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetMops$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetMops$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetMops$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetMops GetMops (MemorySegment segment) {
        return GetMops.ofAddress(GetMops$get(segment));
    }
    static final FunctionDescriptor GetContainingTypeLib$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetContainingTypeLib$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetContainingTypeLib$FUNC, false
    );
    public interface GetContainingTypeLib {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetContainingTypeLib fi) {
            return RuntimeHelper.upcallStub(GetContainingTypeLib.class, fi, ITypeInfo2Vtbl.GetContainingTypeLib$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetContainingTypeLib fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetContainingTypeLib.class, fi, ITypeInfo2Vtbl.GetContainingTypeLib$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetContainingTypeLib ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetContainingTypeLib$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetContainingTypeLib$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetContainingTypeLib")));
    public static VarHandle GetContainingTypeLib$VH() {
        return ITypeInfo2Vtbl.GetContainingTypeLib$VH;
    }
    public static MemoryAddress GetContainingTypeLib$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetContainingTypeLib$VH.get(seg);
    }
    public static void GetContainingTypeLib$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetContainingTypeLib$VH.set(seg, x);
    }
    public static MemoryAddress GetContainingTypeLib$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetContainingTypeLib$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetContainingTypeLib$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetContainingTypeLib$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetContainingTypeLib GetContainingTypeLib (MemorySegment segment) {
        return GetContainingTypeLib.ofAddress(GetContainingTypeLib$get(segment));
    }
    static final FunctionDescriptor ReleaseTypeAttr$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle ReleaseTypeAttr$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeInfo2Vtbl.ReleaseTypeAttr$FUNC, false
    );
    public interface ReleaseTypeAttr {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(ReleaseTypeAttr fi) {
            return RuntimeHelper.upcallStub(ReleaseTypeAttr.class, fi, ITypeInfo2Vtbl.ReleaseTypeAttr$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        static MemoryAddress allocate(ReleaseTypeAttr fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(ReleaseTypeAttr.class, fi, ITypeInfo2Vtbl.ReleaseTypeAttr$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static ReleaseTypeAttr ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    ITypeInfo2Vtbl.ReleaseTypeAttr$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReleaseTypeAttr$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReleaseTypeAttr")));
    public static VarHandle ReleaseTypeAttr$VH() {
        return ITypeInfo2Vtbl.ReleaseTypeAttr$VH;
    }
    public static MemoryAddress ReleaseTypeAttr$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.ReleaseTypeAttr$VH.get(seg);
    }
    public static void ReleaseTypeAttr$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.ReleaseTypeAttr$VH.set(seg, x);
    }
    public static MemoryAddress ReleaseTypeAttr$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.ReleaseTypeAttr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseTypeAttr$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.ReleaseTypeAttr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseTypeAttr ReleaseTypeAttr (MemorySegment segment) {
        return ReleaseTypeAttr.ofAddress(ReleaseTypeAttr$get(segment));
    }
    static final FunctionDescriptor ReleaseFuncDesc$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle ReleaseFuncDesc$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeInfo2Vtbl.ReleaseFuncDesc$FUNC, false
    );
    public interface ReleaseFuncDesc {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(ReleaseFuncDesc fi) {
            return RuntimeHelper.upcallStub(ReleaseFuncDesc.class, fi, ITypeInfo2Vtbl.ReleaseFuncDesc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        static MemoryAddress allocate(ReleaseFuncDesc fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(ReleaseFuncDesc.class, fi, ITypeInfo2Vtbl.ReleaseFuncDesc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static ReleaseFuncDesc ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    ITypeInfo2Vtbl.ReleaseFuncDesc$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReleaseFuncDesc$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReleaseFuncDesc")));
    public static VarHandle ReleaseFuncDesc$VH() {
        return ITypeInfo2Vtbl.ReleaseFuncDesc$VH;
    }
    public static MemoryAddress ReleaseFuncDesc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.ReleaseFuncDesc$VH.get(seg);
    }
    public static void ReleaseFuncDesc$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.ReleaseFuncDesc$VH.set(seg, x);
    }
    public static MemoryAddress ReleaseFuncDesc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.ReleaseFuncDesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseFuncDesc$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.ReleaseFuncDesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseFuncDesc ReleaseFuncDesc (MemorySegment segment) {
        return ReleaseFuncDesc.ofAddress(ReleaseFuncDesc$get(segment));
    }
    static final FunctionDescriptor ReleaseVarDesc$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle ReleaseVarDesc$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeInfo2Vtbl.ReleaseVarDesc$FUNC, false
    );
    public interface ReleaseVarDesc {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(ReleaseVarDesc fi) {
            return RuntimeHelper.upcallStub(ReleaseVarDesc.class, fi, ITypeInfo2Vtbl.ReleaseVarDesc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        static MemoryAddress allocate(ReleaseVarDesc fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(ReleaseVarDesc.class, fi, ITypeInfo2Vtbl.ReleaseVarDesc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static ReleaseVarDesc ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    ITypeInfo2Vtbl.ReleaseVarDesc$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReleaseVarDesc$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReleaseVarDesc")));
    public static VarHandle ReleaseVarDesc$VH() {
        return ITypeInfo2Vtbl.ReleaseVarDesc$VH;
    }
    public static MemoryAddress ReleaseVarDesc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.ReleaseVarDesc$VH.get(seg);
    }
    public static void ReleaseVarDesc$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.ReleaseVarDesc$VH.set(seg, x);
    }
    public static MemoryAddress ReleaseVarDesc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.ReleaseVarDesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseVarDesc$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.ReleaseVarDesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseVarDesc ReleaseVarDesc (MemorySegment segment) {
        return ReleaseVarDesc.ofAddress(ReleaseVarDesc$get(segment));
    }
    static final FunctionDescriptor GetTypeKind$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetTypeKind$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetTypeKind$FUNC, false
    );
    public interface GetTypeKind {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetTypeKind fi) {
            return RuntimeHelper.upcallStub(GetTypeKind.class, fi, ITypeInfo2Vtbl.GetTypeKind$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetTypeKind fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetTypeKind.class, fi, ITypeInfo2Vtbl.GetTypeKind$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetTypeKind ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetTypeKind$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeKind$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeKind")));
    public static VarHandle GetTypeKind$VH() {
        return ITypeInfo2Vtbl.GetTypeKind$VH;
    }
    public static MemoryAddress GetTypeKind$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetTypeKind$VH.get(seg);
    }
    public static void GetTypeKind$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetTypeKind$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeKind$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetTypeKind$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeKind$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetTypeKind$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeKind GetTypeKind (MemorySegment segment) {
        return GetTypeKind.ofAddress(GetTypeKind$get(segment));
    }
    static final FunctionDescriptor GetTypeFlags$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetTypeFlags$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetTypeFlags$FUNC, false
    );
    public interface GetTypeFlags {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetTypeFlags fi) {
            return RuntimeHelper.upcallStub(GetTypeFlags.class, fi, ITypeInfo2Vtbl.GetTypeFlags$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetTypeFlags fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetTypeFlags.class, fi, ITypeInfo2Vtbl.GetTypeFlags$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetTypeFlags ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetTypeFlags$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeFlags$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeFlags")));
    public static VarHandle GetTypeFlags$VH() {
        return ITypeInfo2Vtbl.GetTypeFlags$VH;
    }
    public static MemoryAddress GetTypeFlags$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetTypeFlags$VH.get(seg);
    }
    public static void GetTypeFlags$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetTypeFlags$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeFlags$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetTypeFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeFlags$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetTypeFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeFlags GetTypeFlags (MemorySegment segment) {
        return GetTypeFlags.ofAddress(GetTypeFlags$get(segment));
    }
    static final FunctionDescriptor GetFuncIndexOfMemId$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_INT,
        C_POINTER
    );
    static final MethodHandle GetFuncIndexOfMemId$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetFuncIndexOfMemId$FUNC, false
    );
    public interface GetFuncIndexOfMemId {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(GetFuncIndexOfMemId fi) {
            return RuntimeHelper.upcallStub(GetFuncIndexOfMemId.class, fi, ITypeInfo2Vtbl.GetFuncIndexOfMemId$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetFuncIndexOfMemId fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetFuncIndexOfMemId.class, fi, ITypeInfo2Vtbl.GetFuncIndexOfMemId$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetFuncIndexOfMemId ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetFuncIndexOfMemId$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetFuncIndexOfMemId$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetFuncIndexOfMemId")));
    public static VarHandle GetFuncIndexOfMemId$VH() {
        return ITypeInfo2Vtbl.GetFuncIndexOfMemId$VH;
    }
    public static MemoryAddress GetFuncIndexOfMemId$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetFuncIndexOfMemId$VH.get(seg);
    }
    public static void GetFuncIndexOfMemId$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetFuncIndexOfMemId$VH.set(seg, x);
    }
    public static MemoryAddress GetFuncIndexOfMemId$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetFuncIndexOfMemId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFuncIndexOfMemId$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetFuncIndexOfMemId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFuncIndexOfMemId GetFuncIndexOfMemId (MemorySegment segment) {
        return GetFuncIndexOfMemId.ofAddress(GetFuncIndexOfMemId$get(segment));
    }
    static final FunctionDescriptor GetVarIndexOfMemId$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle GetVarIndexOfMemId$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetVarIndexOfMemId$FUNC, false
    );
    public interface GetVarIndexOfMemId {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetVarIndexOfMemId fi) {
            return RuntimeHelper.upcallStub(GetVarIndexOfMemId.class, fi, ITypeInfo2Vtbl.GetVarIndexOfMemId$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetVarIndexOfMemId fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetVarIndexOfMemId.class, fi, ITypeInfo2Vtbl.GetVarIndexOfMemId$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetVarIndexOfMemId ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetVarIndexOfMemId$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetVarIndexOfMemId$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetVarIndexOfMemId")));
    public static VarHandle GetVarIndexOfMemId$VH() {
        return ITypeInfo2Vtbl.GetVarIndexOfMemId$VH;
    }
    public static MemoryAddress GetVarIndexOfMemId$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetVarIndexOfMemId$VH.get(seg);
    }
    public static void GetVarIndexOfMemId$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetVarIndexOfMemId$VH.set(seg, x);
    }
    public static MemoryAddress GetVarIndexOfMemId$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetVarIndexOfMemId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetVarIndexOfMemId$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetVarIndexOfMemId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetVarIndexOfMemId GetVarIndexOfMemId (MemorySegment segment) {
        return GetVarIndexOfMemId.ofAddress(GetVarIndexOfMemId$get(segment));
    }
    static final FunctionDescriptor GetCustData$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetCustData$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetCustData$FUNC, false
    );
    public interface GetCustData {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetCustData fi) {
            return RuntimeHelper.upcallStub(GetCustData.class, fi, ITypeInfo2Vtbl.GetCustData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetCustData fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetCustData.class, fi, ITypeInfo2Vtbl.GetCustData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetCustData ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetCustData$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetCustData$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetCustData")));
    public static VarHandle GetCustData$VH() {
        return ITypeInfo2Vtbl.GetCustData$VH;
    }
    public static MemoryAddress GetCustData$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetCustData$VH.get(seg);
    }
    public static void GetCustData$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetCustData$VH.set(seg, x);
    }
    public static MemoryAddress GetCustData$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetCustData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetCustData$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetCustData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetCustData GetCustData (MemorySegment segment) {
        return GetCustData.ofAddress(GetCustData$get(segment));
    }
    static final FunctionDescriptor GetFuncCustData$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetFuncCustData$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetFuncCustData$FUNC, false
    );
    public interface GetFuncCustData {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(GetFuncCustData fi) {
            return RuntimeHelper.upcallStub(GetFuncCustData.class, fi, ITypeInfo2Vtbl.GetFuncCustData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetFuncCustData fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetFuncCustData.class, fi, ITypeInfo2Vtbl.GetFuncCustData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetFuncCustData ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetFuncCustData$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetFuncCustData$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetFuncCustData")));
    public static VarHandle GetFuncCustData$VH() {
        return ITypeInfo2Vtbl.GetFuncCustData$VH;
    }
    public static MemoryAddress GetFuncCustData$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetFuncCustData$VH.get(seg);
    }
    public static void GetFuncCustData$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetFuncCustData$VH.set(seg, x);
    }
    public static MemoryAddress GetFuncCustData$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetFuncCustData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFuncCustData$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetFuncCustData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFuncCustData GetFuncCustData (MemorySegment segment) {
        return GetFuncCustData.ofAddress(GetFuncCustData$get(segment));
    }
    static final FunctionDescriptor GetParamCustData$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetParamCustData$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetParamCustData$FUNC, false
    );
    public interface GetParamCustData {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4);
        static MemoryAddress allocate(GetParamCustData fi) {
            return RuntimeHelper.upcallStub(GetParamCustData.class, fi, ITypeInfo2Vtbl.GetParamCustData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetParamCustData fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetParamCustData.class, fi, ITypeInfo2Vtbl.GetParamCustData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetParamCustData ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetParamCustData$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetParamCustData$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetParamCustData")));
    public static VarHandle GetParamCustData$VH() {
        return ITypeInfo2Vtbl.GetParamCustData$VH;
    }
    public static MemoryAddress GetParamCustData$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetParamCustData$VH.get(seg);
    }
    public static void GetParamCustData$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetParamCustData$VH.set(seg, x);
    }
    public static MemoryAddress GetParamCustData$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetParamCustData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetParamCustData$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetParamCustData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetParamCustData GetParamCustData (MemorySegment segment) {
        return GetParamCustData.ofAddress(GetParamCustData$get(segment));
    }
    static final FunctionDescriptor GetVarCustData$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetVarCustData$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetVarCustData$FUNC, false
    );
    public interface GetVarCustData {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(GetVarCustData fi) {
            return RuntimeHelper.upcallStub(GetVarCustData.class, fi, ITypeInfo2Vtbl.GetVarCustData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetVarCustData fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetVarCustData.class, fi, ITypeInfo2Vtbl.GetVarCustData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetVarCustData ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetVarCustData$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetVarCustData$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetVarCustData")));
    public static VarHandle GetVarCustData$VH() {
        return ITypeInfo2Vtbl.GetVarCustData$VH;
    }
    public static MemoryAddress GetVarCustData$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetVarCustData$VH.get(seg);
    }
    public static void GetVarCustData$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetVarCustData$VH.set(seg, x);
    }
    public static MemoryAddress GetVarCustData$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetVarCustData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetVarCustData$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetVarCustData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetVarCustData GetVarCustData (MemorySegment segment) {
        return GetVarCustData.ofAddress(GetVarCustData$get(segment));
    }
    static final FunctionDescriptor GetImplTypeCustData$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetImplTypeCustData$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetImplTypeCustData$FUNC, false
    );
    public interface GetImplTypeCustData {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(GetImplTypeCustData fi) {
            return RuntimeHelper.upcallStub(GetImplTypeCustData.class, fi, ITypeInfo2Vtbl.GetImplTypeCustData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetImplTypeCustData fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetImplTypeCustData.class, fi, ITypeInfo2Vtbl.GetImplTypeCustData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetImplTypeCustData ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetImplTypeCustData$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetImplTypeCustData$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetImplTypeCustData")));
    public static VarHandle GetImplTypeCustData$VH() {
        return ITypeInfo2Vtbl.GetImplTypeCustData$VH;
    }
    public static MemoryAddress GetImplTypeCustData$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetImplTypeCustData$VH.get(seg);
    }
    public static void GetImplTypeCustData$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetImplTypeCustData$VH.set(seg, x);
    }
    public static MemoryAddress GetImplTypeCustData$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetImplTypeCustData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetImplTypeCustData$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetImplTypeCustData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetImplTypeCustData GetImplTypeCustData (MemorySegment segment) {
        return GetImplTypeCustData.ofAddress(GetImplTypeCustData$get(segment));
    }
    static final FunctionDescriptor GetDocumentation2$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetDocumentation2$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetDocumentation2$FUNC, false
    );
    public interface GetDocumentation2 {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5);
        static MemoryAddress allocate(GetDocumentation2 fi) {
            return RuntimeHelper.upcallStub(GetDocumentation2.class, fi, ITypeInfo2Vtbl.GetDocumentation2$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetDocumentation2 fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetDocumentation2.class, fi, ITypeInfo2Vtbl.GetDocumentation2$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetDocumentation2 ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetDocumentation2$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDocumentation2$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetDocumentation2")));
    public static VarHandle GetDocumentation2$VH() {
        return ITypeInfo2Vtbl.GetDocumentation2$VH;
    }
    public static MemoryAddress GetDocumentation2$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetDocumentation2$VH.get(seg);
    }
    public static void GetDocumentation2$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetDocumentation2$VH.set(seg, x);
    }
    public static MemoryAddress GetDocumentation2$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetDocumentation2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDocumentation2$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetDocumentation2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDocumentation2 GetDocumentation2 (MemorySegment segment) {
        return GetDocumentation2.ofAddress(GetDocumentation2$get(segment));
    }
    static final FunctionDescriptor GetAllCustData$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetAllCustData$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetAllCustData$FUNC, false
    );
    public interface GetAllCustData {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetAllCustData fi) {
            return RuntimeHelper.upcallStub(GetAllCustData.class, fi, ITypeInfo2Vtbl.GetAllCustData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetAllCustData fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetAllCustData.class, fi, ITypeInfo2Vtbl.GetAllCustData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetAllCustData ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetAllCustData$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetAllCustData$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetAllCustData")));
    public static VarHandle GetAllCustData$VH() {
        return ITypeInfo2Vtbl.GetAllCustData$VH;
    }
    public static MemoryAddress GetAllCustData$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetAllCustData$VH.get(seg);
    }
    public static void GetAllCustData$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetAllCustData$VH.set(seg, x);
    }
    public static MemoryAddress GetAllCustData$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetAllCustData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetAllCustData$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetAllCustData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetAllCustData GetAllCustData (MemorySegment segment) {
        return GetAllCustData.ofAddress(GetAllCustData$get(segment));
    }
    static final FunctionDescriptor GetAllFuncCustData$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle GetAllFuncCustData$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetAllFuncCustData$FUNC, false
    );
    public interface GetAllFuncCustData {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetAllFuncCustData fi) {
            return RuntimeHelper.upcallStub(GetAllFuncCustData.class, fi, ITypeInfo2Vtbl.GetAllFuncCustData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetAllFuncCustData fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetAllFuncCustData.class, fi, ITypeInfo2Vtbl.GetAllFuncCustData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetAllFuncCustData ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetAllFuncCustData$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetAllFuncCustData$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetAllFuncCustData")));
    public static VarHandle GetAllFuncCustData$VH() {
        return ITypeInfo2Vtbl.GetAllFuncCustData$VH;
    }
    public static MemoryAddress GetAllFuncCustData$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetAllFuncCustData$VH.get(seg);
    }
    public static void GetAllFuncCustData$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetAllFuncCustData$VH.set(seg, x);
    }
    public static MemoryAddress GetAllFuncCustData$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetAllFuncCustData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetAllFuncCustData$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetAllFuncCustData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetAllFuncCustData GetAllFuncCustData (MemorySegment segment) {
        return GetAllFuncCustData.ofAddress(GetAllFuncCustData$get(segment));
    }
    static final FunctionDescriptor GetAllParamCustData$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final MethodHandle GetAllParamCustData$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetAllParamCustData$FUNC, false
    );
    public interface GetAllParamCustData {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(GetAllParamCustData fi) {
            return RuntimeHelper.upcallStub(GetAllParamCustData.class, fi, ITypeInfo2Vtbl.GetAllParamCustData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetAllParamCustData fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetAllParamCustData.class, fi, ITypeInfo2Vtbl.GetAllParamCustData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetAllParamCustData ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetAllParamCustData$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetAllParamCustData$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetAllParamCustData")));
    public static VarHandle GetAllParamCustData$VH() {
        return ITypeInfo2Vtbl.GetAllParamCustData$VH;
    }
    public static MemoryAddress GetAllParamCustData$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetAllParamCustData$VH.get(seg);
    }
    public static void GetAllParamCustData$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetAllParamCustData$VH.set(seg, x);
    }
    public static MemoryAddress GetAllParamCustData$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetAllParamCustData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetAllParamCustData$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetAllParamCustData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetAllParamCustData GetAllParamCustData (MemorySegment segment) {
        return GetAllParamCustData.ofAddress(GetAllParamCustData$get(segment));
    }
    static final FunctionDescriptor GetAllVarCustData$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle GetAllVarCustData$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetAllVarCustData$FUNC, false
    );
    public interface GetAllVarCustData {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetAllVarCustData fi) {
            return RuntimeHelper.upcallStub(GetAllVarCustData.class, fi, ITypeInfo2Vtbl.GetAllVarCustData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetAllVarCustData fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetAllVarCustData.class, fi, ITypeInfo2Vtbl.GetAllVarCustData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetAllVarCustData ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetAllVarCustData$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetAllVarCustData$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetAllVarCustData")));
    public static VarHandle GetAllVarCustData$VH() {
        return ITypeInfo2Vtbl.GetAllVarCustData$VH;
    }
    public static MemoryAddress GetAllVarCustData$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetAllVarCustData$VH.get(seg);
    }
    public static void GetAllVarCustData$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetAllVarCustData$VH.set(seg, x);
    }
    public static MemoryAddress GetAllVarCustData$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetAllVarCustData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetAllVarCustData$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetAllVarCustData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetAllVarCustData GetAllVarCustData (MemorySegment segment) {
        return GetAllVarCustData.ofAddress(GetAllVarCustData$get(segment));
    }
    static final FunctionDescriptor GetAllImplTypeCustData$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle GetAllImplTypeCustData$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2Vtbl.GetAllImplTypeCustData$FUNC, false
    );
    public interface GetAllImplTypeCustData {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetAllImplTypeCustData fi) {
            return RuntimeHelper.upcallStub(GetAllImplTypeCustData.class, fi, ITypeInfo2Vtbl.GetAllImplTypeCustData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetAllImplTypeCustData fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetAllImplTypeCustData.class, fi, ITypeInfo2Vtbl.GetAllImplTypeCustData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetAllImplTypeCustData ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ITypeInfo2Vtbl.GetAllImplTypeCustData$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetAllImplTypeCustData$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetAllImplTypeCustData")));
    public static VarHandle GetAllImplTypeCustData$VH() {
        return ITypeInfo2Vtbl.GetAllImplTypeCustData$VH;
    }
    public static MemoryAddress GetAllImplTypeCustData$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetAllImplTypeCustData$VH.get(seg);
    }
    public static void GetAllImplTypeCustData$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfo2Vtbl.GetAllImplTypeCustData$VH.set(seg, x);
    }
    public static MemoryAddress GetAllImplTypeCustData$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeInfo2Vtbl.GetAllImplTypeCustData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetAllImplTypeCustData$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfo2Vtbl.GetAllImplTypeCustData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetAllImplTypeCustData GetAllImplTypeCustData (MemorySegment segment) {
        return GetAllImplTypeCustData.ofAddress(GetAllImplTypeCustData$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


