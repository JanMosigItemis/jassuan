// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class ITypeLib2Vtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetTypeInfoCount"),
        C_POINTER.withName("GetTypeInfo"),
        C_POINTER.withName("GetTypeInfoType"),
        C_POINTER.withName("GetTypeInfoOfGuid"),
        C_POINTER.withName("GetLibAttr"),
        C_POINTER.withName("GetTypeComp"),
        C_POINTER.withName("GetDocumentation"),
        C_POINTER.withName("IsName"),
        C_POINTER.withName("FindName"),
        C_POINTER.withName("ReleaseTLibAttr"),
        C_POINTER.withName("GetCustData"),
        C_POINTER.withName("GetLibStatistics"),
        C_POINTER.withName("GetDocumentation2"),
        C_POINTER.withName("GetAllCustData")
    ).withName("ITypeLib2Vtbl");
    public static MemoryLayout $LAYOUT() {
        return ITypeLib2Vtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeLib2Vtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, ITypeLib2Vtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, ITypeLib2Vtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ITypeLib2Vtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return ITypeLib2Vtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        ITypeLib2Vtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLib2Vtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeLib2Vtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, ITypeLib2Vtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, ITypeLib2Vtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)ITypeLib2Vtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return ITypeLib2Vtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        ITypeLib2Vtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLib2Vtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeLib2Vtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, ITypeLib2Vtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, ITypeLib2Vtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)ITypeLib2Vtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return ITypeLib2Vtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        ITypeLib2Vtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLib2Vtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor GetTypeInfoCount$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle GetTypeInfoCount$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeLib2Vtbl.GetTypeInfoCount$FUNC, false
    );
    public interface GetTypeInfoCount {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(GetTypeInfoCount fi) {
            return RuntimeHelper.upcallStub(GetTypeInfoCount.class, fi, ITypeLib2Vtbl.GetTypeInfoCount$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetTypeInfoCount fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetTypeInfoCount.class, fi, ITypeLib2Vtbl.GetTypeInfoCount$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetTypeInfoCount ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)ITypeLib2Vtbl.GetTypeInfoCount$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoCount$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfoCount")));
    public static VarHandle GetTypeInfoCount$VH() {
        return ITypeLib2Vtbl.GetTypeInfoCount$VH;
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.GetTypeInfoCount$VH.get(seg);
    }
    public static void GetTypeInfoCount$set( MemorySegment seg, MemoryAddress x) {
        ITypeLib2Vtbl.GetTypeInfoCount$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.GetTypeInfoCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLib2Vtbl.GetTypeInfoCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount (MemorySegment segment) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment));
    }
    static final FunctionDescriptor GetTypeInfo$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle GetTypeInfo$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ITypeLib2Vtbl.GetTypeInfo$FUNC, false
    );
    public interface GetTypeInfo {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetTypeInfo fi) {
            return RuntimeHelper.upcallStub(GetTypeInfo.class, fi, ITypeLib2Vtbl.GetTypeInfo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetTypeInfo fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetTypeInfo.class, fi, ITypeLib2Vtbl.GetTypeInfo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetTypeInfo ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ITypeLib2Vtbl.GetTypeInfo$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfo$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfo")));
    public static VarHandle GetTypeInfo$VH() {
        return ITypeLib2Vtbl.GetTypeInfo$VH;
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.GetTypeInfo$VH.get(seg);
    }
    public static void GetTypeInfo$set( MemorySegment seg, MemoryAddress x) {
        ITypeLib2Vtbl.GetTypeInfo$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.GetTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLib2Vtbl.GetTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo (MemorySegment segment) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment));
    }
    static final FunctionDescriptor GetTypeInfoType$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle GetTypeInfoType$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ITypeLib2Vtbl.GetTypeInfoType$FUNC, false
    );
    public interface GetTypeInfoType {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetTypeInfoType fi) {
            return RuntimeHelper.upcallStub(GetTypeInfoType.class, fi, ITypeLib2Vtbl.GetTypeInfoType$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetTypeInfoType fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetTypeInfoType.class, fi, ITypeLib2Vtbl.GetTypeInfoType$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetTypeInfoType ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ITypeLib2Vtbl.GetTypeInfoType$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoType$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfoType")));
    public static VarHandle GetTypeInfoType$VH() {
        return ITypeLib2Vtbl.GetTypeInfoType$VH;
    }
    public static MemoryAddress GetTypeInfoType$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.GetTypeInfoType$VH.get(seg);
    }
    public static void GetTypeInfoType$set( MemorySegment seg, MemoryAddress x) {
        ITypeLib2Vtbl.GetTypeInfoType$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfoType$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.GetTypeInfoType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoType$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLib2Vtbl.GetTypeInfoType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoType GetTypeInfoType (MemorySegment segment) {
        return GetTypeInfoType.ofAddress(GetTypeInfoType$get(segment));
    }
    static final FunctionDescriptor GetTypeInfoOfGuid$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetTypeInfoOfGuid$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeLib2Vtbl.GetTypeInfoOfGuid$FUNC, false
    );
    public interface GetTypeInfoOfGuid {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetTypeInfoOfGuid fi) {
            return RuntimeHelper.upcallStub(GetTypeInfoOfGuid.class, fi, ITypeLib2Vtbl.GetTypeInfoOfGuid$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetTypeInfoOfGuid fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetTypeInfoOfGuid.class, fi, ITypeLib2Vtbl.GetTypeInfoOfGuid$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetTypeInfoOfGuid ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ITypeLib2Vtbl.GetTypeInfoOfGuid$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoOfGuid$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfoOfGuid")));
    public static VarHandle GetTypeInfoOfGuid$VH() {
        return ITypeLib2Vtbl.GetTypeInfoOfGuid$VH;
    }
    public static MemoryAddress GetTypeInfoOfGuid$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.GetTypeInfoOfGuid$VH.get(seg);
    }
    public static void GetTypeInfoOfGuid$set( MemorySegment seg, MemoryAddress x) {
        ITypeLib2Vtbl.GetTypeInfoOfGuid$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfoOfGuid$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.GetTypeInfoOfGuid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoOfGuid$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLib2Vtbl.GetTypeInfoOfGuid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoOfGuid GetTypeInfoOfGuid (MemorySegment segment) {
        return GetTypeInfoOfGuid.ofAddress(GetTypeInfoOfGuid$get(segment));
    }
    static final FunctionDescriptor GetLibAttr$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetLibAttr$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeLib2Vtbl.GetLibAttr$FUNC, false
    );
    public interface GetLibAttr {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetLibAttr fi) {
            return RuntimeHelper.upcallStub(GetLibAttr.class, fi, ITypeLib2Vtbl.GetLibAttr$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetLibAttr fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetLibAttr.class, fi, ITypeLib2Vtbl.GetLibAttr$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetLibAttr ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)ITypeLib2Vtbl.GetLibAttr$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetLibAttr$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetLibAttr")));
    public static VarHandle GetLibAttr$VH() {
        return ITypeLib2Vtbl.GetLibAttr$VH;
    }
    public static MemoryAddress GetLibAttr$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.GetLibAttr$VH.get(seg);
    }
    public static void GetLibAttr$set( MemorySegment seg, MemoryAddress x) {
        ITypeLib2Vtbl.GetLibAttr$VH.set(seg, x);
    }
    public static MemoryAddress GetLibAttr$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.GetLibAttr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetLibAttr$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLib2Vtbl.GetLibAttr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetLibAttr GetLibAttr (MemorySegment segment) {
        return GetLibAttr.ofAddress(GetLibAttr$get(segment));
    }
    static final FunctionDescriptor GetTypeComp$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetTypeComp$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeLib2Vtbl.GetTypeComp$FUNC, false
    );
    public interface GetTypeComp {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetTypeComp fi) {
            return RuntimeHelper.upcallStub(GetTypeComp.class, fi, ITypeLib2Vtbl.GetTypeComp$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetTypeComp fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetTypeComp.class, fi, ITypeLib2Vtbl.GetTypeComp$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetTypeComp ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)ITypeLib2Vtbl.GetTypeComp$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeComp$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeComp")));
    public static VarHandle GetTypeComp$VH() {
        return ITypeLib2Vtbl.GetTypeComp$VH;
    }
    public static MemoryAddress GetTypeComp$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.GetTypeComp$VH.get(seg);
    }
    public static void GetTypeComp$set( MemorySegment seg, MemoryAddress x) {
        ITypeLib2Vtbl.GetTypeComp$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeComp$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.GetTypeComp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeComp$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLib2Vtbl.GetTypeComp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeComp GetTypeComp (MemorySegment segment) {
        return GetTypeComp.ofAddress(GetTypeComp$get(segment));
    }
    static final FunctionDescriptor GetDocumentation$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetDocumentation$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeLib2Vtbl.GetDocumentation$FUNC, false
    );
    public interface GetDocumentation {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5);
        static MemoryAddress allocate(GetDocumentation fi) {
            return RuntimeHelper.upcallStub(GetDocumentation.class, fi, ITypeLib2Vtbl.GetDocumentation$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetDocumentation fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetDocumentation.class, fi, ITypeLib2Vtbl.GetDocumentation$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetDocumentation ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5) -> {
                try {
                    return (int)ITypeLib2Vtbl.GetDocumentation$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDocumentation$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetDocumentation")));
    public static VarHandle GetDocumentation$VH() {
        return ITypeLib2Vtbl.GetDocumentation$VH;
    }
    public static MemoryAddress GetDocumentation$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.GetDocumentation$VH.get(seg);
    }
    public static void GetDocumentation$set( MemorySegment seg, MemoryAddress x) {
        ITypeLib2Vtbl.GetDocumentation$VH.set(seg, x);
    }
    public static MemoryAddress GetDocumentation$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.GetDocumentation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDocumentation$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLib2Vtbl.GetDocumentation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDocumentation GetDocumentation (MemorySegment segment) {
        return GetDocumentation.ofAddress(GetDocumentation$get(segment));
    }
    static final FunctionDescriptor IsName$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle IsName$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ITypeLib2Vtbl.IsName$FUNC, false
    );
    public interface IsName {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(IsName fi) {
            return RuntimeHelper.upcallStub(IsName.class, fi, ITypeLib2Vtbl.IsName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(IsName fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(IsName.class, fi, ITypeLib2Vtbl.IsName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static IsName ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)ITypeLib2Vtbl.IsName$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle IsName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("IsName")));
    public static VarHandle IsName$VH() {
        return ITypeLib2Vtbl.IsName$VH;
    }
    public static MemoryAddress IsName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.IsName$VH.get(seg);
    }
    public static void IsName$set( MemorySegment seg, MemoryAddress x) {
        ITypeLib2Vtbl.IsName$VH.set(seg, x);
    }
    public static MemoryAddress IsName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.IsName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IsName$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLib2Vtbl.IsName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsName IsName (MemorySegment segment) {
        return IsName.ofAddress(IsName$get(segment));
    }
    static final FunctionDescriptor FindName$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle FindName$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeLib2Vtbl.FindName$FUNC, false
    );
    public interface FindName {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5);
        static MemoryAddress allocate(FindName fi) {
            return RuntimeHelper.upcallStub(FindName.class, fi, ITypeLib2Vtbl.FindName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(FindName fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(FindName.class, fi, ITypeLib2Vtbl.FindName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static FindName ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5) -> {
                try {
                    return (int)ITypeLib2Vtbl.FindName$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle FindName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("FindName")));
    public static VarHandle FindName$VH() {
        return ITypeLib2Vtbl.FindName$VH;
    }
    public static MemoryAddress FindName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.FindName$VH.get(seg);
    }
    public static void FindName$set( MemorySegment seg, MemoryAddress x) {
        ITypeLib2Vtbl.FindName$VH.set(seg, x);
    }
    public static MemoryAddress FindName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.FindName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FindName$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLib2Vtbl.FindName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static FindName FindName (MemorySegment segment) {
        return FindName.ofAddress(FindName$get(segment));
    }
    static final FunctionDescriptor ReleaseTLibAttr$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle ReleaseTLibAttr$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeLib2Vtbl.ReleaseTLibAttr$FUNC, false
    );
    public interface ReleaseTLibAttr {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(ReleaseTLibAttr fi) {
            return RuntimeHelper.upcallStub(ReleaseTLibAttr.class, fi, ITypeLib2Vtbl.ReleaseTLibAttr$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        static MemoryAddress allocate(ReleaseTLibAttr fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(ReleaseTLibAttr.class, fi, ITypeLib2Vtbl.ReleaseTLibAttr$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static ReleaseTLibAttr ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    ITypeLib2Vtbl.ReleaseTLibAttr$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReleaseTLibAttr$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReleaseTLibAttr")));
    public static VarHandle ReleaseTLibAttr$VH() {
        return ITypeLib2Vtbl.ReleaseTLibAttr$VH;
    }
    public static MemoryAddress ReleaseTLibAttr$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.ReleaseTLibAttr$VH.get(seg);
    }
    public static void ReleaseTLibAttr$set( MemorySegment seg, MemoryAddress x) {
        ITypeLib2Vtbl.ReleaseTLibAttr$VH.set(seg, x);
    }
    public static MemoryAddress ReleaseTLibAttr$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.ReleaseTLibAttr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseTLibAttr$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLib2Vtbl.ReleaseTLibAttr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseTLibAttr ReleaseTLibAttr (MemorySegment segment) {
        return ReleaseTLibAttr.ofAddress(ReleaseTLibAttr$get(segment));
    }
    static final FunctionDescriptor GetCustData$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetCustData$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeLib2Vtbl.GetCustData$FUNC, false
    );
    public interface GetCustData {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetCustData fi) {
            return RuntimeHelper.upcallStub(GetCustData.class, fi, ITypeLib2Vtbl.GetCustData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetCustData fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetCustData.class, fi, ITypeLib2Vtbl.GetCustData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetCustData ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ITypeLib2Vtbl.GetCustData$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetCustData$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetCustData")));
    public static VarHandle GetCustData$VH() {
        return ITypeLib2Vtbl.GetCustData$VH;
    }
    public static MemoryAddress GetCustData$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.GetCustData$VH.get(seg);
    }
    public static void GetCustData$set( MemorySegment seg, MemoryAddress x) {
        ITypeLib2Vtbl.GetCustData$VH.set(seg, x);
    }
    public static MemoryAddress GetCustData$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.GetCustData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetCustData$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLib2Vtbl.GetCustData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetCustData GetCustData (MemorySegment segment) {
        return GetCustData.ofAddress(GetCustData$get(segment));
    }
    static final FunctionDescriptor GetLibStatistics$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetLibStatistics$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeLib2Vtbl.GetLibStatistics$FUNC, false
    );
    public interface GetLibStatistics {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(GetLibStatistics fi) {
            return RuntimeHelper.upcallStub(GetLibStatistics.class, fi, ITypeLib2Vtbl.GetLibStatistics$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetLibStatistics fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetLibStatistics.class, fi, ITypeLib2Vtbl.GetLibStatistics$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetLibStatistics ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ITypeLib2Vtbl.GetLibStatistics$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetLibStatistics$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetLibStatistics")));
    public static VarHandle GetLibStatistics$VH() {
        return ITypeLib2Vtbl.GetLibStatistics$VH;
    }
    public static MemoryAddress GetLibStatistics$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.GetLibStatistics$VH.get(seg);
    }
    public static void GetLibStatistics$set( MemorySegment seg, MemoryAddress x) {
        ITypeLib2Vtbl.GetLibStatistics$VH.set(seg, x);
    }
    public static MemoryAddress GetLibStatistics$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.GetLibStatistics$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetLibStatistics$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLib2Vtbl.GetLibStatistics$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetLibStatistics GetLibStatistics (MemorySegment segment) {
        return GetLibStatistics.ofAddress(GetLibStatistics$get(segment));
    }
    static final FunctionDescriptor GetDocumentation2$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetDocumentation2$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeLib2Vtbl.GetDocumentation2$FUNC, false
    );
    public interface GetDocumentation2 {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5);
        static MemoryAddress allocate(GetDocumentation2 fi) {
            return RuntimeHelper.upcallStub(GetDocumentation2.class, fi, ITypeLib2Vtbl.GetDocumentation2$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetDocumentation2 fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetDocumentation2.class, fi, ITypeLib2Vtbl.GetDocumentation2$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetDocumentation2 ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5) -> {
                try {
                    return (int)ITypeLib2Vtbl.GetDocumentation2$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDocumentation2$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetDocumentation2")));
    public static VarHandle GetDocumentation2$VH() {
        return ITypeLib2Vtbl.GetDocumentation2$VH;
    }
    public static MemoryAddress GetDocumentation2$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.GetDocumentation2$VH.get(seg);
    }
    public static void GetDocumentation2$set( MemorySegment seg, MemoryAddress x) {
        ITypeLib2Vtbl.GetDocumentation2$VH.set(seg, x);
    }
    public static MemoryAddress GetDocumentation2$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.GetDocumentation2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDocumentation2$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLib2Vtbl.GetDocumentation2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDocumentation2 GetDocumentation2 (MemorySegment segment) {
        return GetDocumentation2.ofAddress(GetDocumentation2$get(segment));
    }
    static final FunctionDescriptor GetAllCustData$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetAllCustData$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeLib2Vtbl.GetAllCustData$FUNC, false
    );
    public interface GetAllCustData {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(GetAllCustData fi) {
            return RuntimeHelper.upcallStub(GetAllCustData.class, fi, ITypeLib2Vtbl.GetAllCustData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(GetAllCustData fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(GetAllCustData.class, fi, ITypeLib2Vtbl.GetAllCustData$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static GetAllCustData ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)ITypeLib2Vtbl.GetAllCustData$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetAllCustData$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetAllCustData")));
    public static VarHandle GetAllCustData$VH() {
        return ITypeLib2Vtbl.GetAllCustData$VH;
    }
    public static MemoryAddress GetAllCustData$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.GetAllCustData$VH.get(seg);
    }
    public static void GetAllCustData$set( MemorySegment seg, MemoryAddress x) {
        ITypeLib2Vtbl.GetAllCustData$VH.set(seg, x);
    }
    public static MemoryAddress GetAllCustData$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ITypeLib2Vtbl.GetAllCustData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetAllCustData$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLib2Vtbl.GetAllCustData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetAllCustData GetAllCustData (MemorySegment segment) {
        return GetAllCustData.ofAddress(GetAllCustData$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


