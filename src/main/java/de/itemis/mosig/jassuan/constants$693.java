// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$693 {

    static final FunctionDescriptor GetNumberOfConsoleInputEvents$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetNumberOfConsoleInputEvents$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "GetNumberOfConsoleInputEvents",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$693.GetNumberOfConsoleInputEvents$FUNC, false
    );
    static final FunctionDescriptor GetConsoleScreenBufferInfo$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetConsoleScreenBufferInfo$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "GetConsoleScreenBufferInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$693.GetConsoleScreenBufferInfo$FUNC, false
    );
    static final FunctionDescriptor GetLargestConsoleWindowSize$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        C_SHORT.withName("X"),
        C_SHORT.withName("Y")
    ).withName("_COORD"),
        C_POINTER
    );
    static final MethodHandle GetLargestConsoleWindowSize$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "GetLargestConsoleWindowSize",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        constants$693.GetLargestConsoleWindowSize$FUNC, false
    );
    static final FunctionDescriptor GetConsoleCursorInfo$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle GetConsoleCursorInfo$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "GetConsoleCursorInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$693.GetConsoleCursorInfo$FUNC, false
    );
    static final FunctionDescriptor GetCurrentConsoleFont$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle GetCurrentConsoleFont$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "GetCurrentConsoleFont",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        constants$693.GetCurrentConsoleFont$FUNC, false
    );
    static final FunctionDescriptor GetConsoleFontSize$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        C_SHORT.withName("X"),
        C_SHORT.withName("Y")
    ).withName("_COORD"),
        C_POINTER,
        C_LONG
    );
    static final MethodHandle GetConsoleFontSize$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "GetConsoleFontSize",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemorySegment;",
        constants$693.GetConsoleFontSize$FUNC, false
    );
}


