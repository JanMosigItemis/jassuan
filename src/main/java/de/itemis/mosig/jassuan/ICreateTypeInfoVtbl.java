// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class ICreateTypeInfoVtbl {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("SetGuid"),
        C_POINTER.withName("SetTypeFlags"),
        C_POINTER.withName("SetDocString"),
        C_POINTER.withName("SetHelpContext"),
        C_POINTER.withName("SetVersion"),
        C_POINTER.withName("AddRefTypeInfo"),
        C_POINTER.withName("AddFuncDesc"),
        C_POINTER.withName("AddImplType"),
        C_POINTER.withName("SetImplTypeFlags"),
        C_POINTER.withName("SetAlignment"),
        C_POINTER.withName("SetSchema"),
        C_POINTER.withName("AddVarDesc"),
        C_POINTER.withName("SetFuncAndParamNames"),
        C_POINTER.withName("SetVarName"),
        C_POINTER.withName("SetTypeDescAlias"),
        C_POINTER.withName("DefineFuncAsDllEntry"),
        C_POINTER.withName("SetFuncDocString"),
        C_POINTER.withName("SetVarDocString"),
        C_POINTER.withName("SetFuncHelpContext"),
        C_POINTER.withName("SetVarHelpContext"),
        C_POINTER.withName("SetMops"),
        C_POINTER.withName("SetTypeIdldesc"),
        C_POINTER.withName("LayOut")
    ).withName("ICreateTypeInfoVtbl");
    public static MemoryLayout $LAYOUT() {
        return ICreateTypeInfoVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ICreateTypeInfoVtbl.QueryInterface$FUNC, false
    );
    public interface QueryInterface {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(QueryInterface fi) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, ICreateTypeInfoVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(QueryInterface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, ICreateTypeInfoVtbl.QueryInterface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static QueryInterface ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.QueryInterface$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    public static VarHandle QueryInterface$VH() {
        return ICreateTypeInfoVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment) {
        return QueryInterface.ofAddress(QueryInterface$get(segment));
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ICreateTypeInfoVtbl.AddRef$FUNC, false
    );
    public interface AddRef {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(AddRef fi) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, ICreateTypeInfoVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRef fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, ICreateTypeInfoVtbl.AddRef$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRef ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.AddRef$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    public static VarHandle AddRef$VH() {
        return ICreateTypeInfoVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment) {
        return AddRef.ofAddress(AddRef$get(segment));
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ICreateTypeInfoVtbl.Release$FUNC, false
    );
    public interface Release {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(Release fi) {
            return RuntimeHelper.upcallStub(Release.class, fi, ICreateTypeInfoVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(Release fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, ICreateTypeInfoVtbl.Release$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static Release ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.Release$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    public static VarHandle Release$VH() {
        return ICreateTypeInfoVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment) {
        return Release.ofAddress(Release$get(segment));
    }
    static final FunctionDescriptor SetGuid$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle SetGuid$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ICreateTypeInfoVtbl.SetGuid$FUNC, false
    );
    public interface SetGuid {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(SetGuid fi) {
            return RuntimeHelper.upcallStub(SetGuid.class, fi, ICreateTypeInfoVtbl.SetGuid$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SetGuid fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetGuid.class, fi, ICreateTypeInfoVtbl.SetGuid$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SetGuid ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetGuid$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetGuid$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetGuid")));
    public static VarHandle SetGuid$VH() {
        return ICreateTypeInfoVtbl.SetGuid$VH;
    }
    public static MemoryAddress SetGuid$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetGuid$VH.get(seg);
    }
    public static void SetGuid$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetGuid$VH.set(seg, x);
    }
    public static MemoryAddress SetGuid$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetGuid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetGuid$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetGuid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetGuid SetGuid (MemorySegment segment) {
        return SetGuid.ofAddress(SetGuid$get(segment));
    }
    static final FunctionDescriptor SetTypeFlags$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT
    );
    static final MethodHandle SetTypeFlags$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        ICreateTypeInfoVtbl.SetTypeFlags$FUNC, false
    );
    public interface SetTypeFlags {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
        static MemoryAddress allocate(SetTypeFlags fi) {
            return RuntimeHelper.upcallStub(SetTypeFlags.class, fi, ICreateTypeInfoVtbl.SetTypeFlags$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(SetTypeFlags fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetTypeFlags.class, fi, ICreateTypeInfoVtbl.SetTypeFlags$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static SetTypeFlags ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetTypeFlags$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetTypeFlags$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetTypeFlags")));
    public static VarHandle SetTypeFlags$VH() {
        return ICreateTypeInfoVtbl.SetTypeFlags$VH;
    }
    public static MemoryAddress SetTypeFlags$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetTypeFlags$VH.get(seg);
    }
    public static void SetTypeFlags$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetTypeFlags$VH.set(seg, x);
    }
    public static MemoryAddress SetTypeFlags$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetTypeFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetTypeFlags$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetTypeFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetTypeFlags SetTypeFlags (MemorySegment segment) {
        return SetTypeFlags.ofAddress(SetTypeFlags$get(segment));
    }
    static final FunctionDescriptor SetDocString$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle SetDocString$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ICreateTypeInfoVtbl.SetDocString$FUNC, false
    );
    public interface SetDocString {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(SetDocString fi) {
            return RuntimeHelper.upcallStub(SetDocString.class, fi, ICreateTypeInfoVtbl.SetDocString$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SetDocString fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetDocString.class, fi, ICreateTypeInfoVtbl.SetDocString$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SetDocString ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetDocString$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetDocString$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetDocString")));
    public static VarHandle SetDocString$VH() {
        return ICreateTypeInfoVtbl.SetDocString$VH;
    }
    public static MemoryAddress SetDocString$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetDocString$VH.get(seg);
    }
    public static void SetDocString$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetDocString$VH.set(seg, x);
    }
    public static MemoryAddress SetDocString$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetDocString$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetDocString$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetDocString$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetDocString SetDocString (MemorySegment segment) {
        return SetDocString.ofAddress(SetDocString$get(segment));
    }
    static final FunctionDescriptor SetHelpContext$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle SetHelpContext$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        ICreateTypeInfoVtbl.SetHelpContext$FUNC, false
    );
    public interface SetHelpContext {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
        static MemoryAddress allocate(SetHelpContext fi) {
            return RuntimeHelper.upcallStub(SetHelpContext.class, fi, ICreateTypeInfoVtbl.SetHelpContext$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(SetHelpContext fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetHelpContext.class, fi, ICreateTypeInfoVtbl.SetHelpContext$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static SetHelpContext ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetHelpContext$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetHelpContext$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetHelpContext")));
    public static VarHandle SetHelpContext$VH() {
        return ICreateTypeInfoVtbl.SetHelpContext$VH;
    }
    public static MemoryAddress SetHelpContext$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetHelpContext$VH.get(seg);
    }
    public static void SetHelpContext$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetHelpContext$VH.set(seg, x);
    }
    public static MemoryAddress SetHelpContext$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetHelpContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetHelpContext$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetHelpContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetHelpContext SetHelpContext (MemorySegment segment) {
        return SetHelpContext.ofAddress(SetHelpContext$get(segment));
    }
    static final FunctionDescriptor SetVersion$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_SHORT,
        C_SHORT
    );
    static final MethodHandle SetVersion$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;SS)I",
        ICreateTypeInfoVtbl.SetVersion$FUNC, false
    );
    public interface SetVersion {

        int apply(jdk.incubator.foreign.MemoryAddress x0, short x1, short x2);
        static MemoryAddress allocate(SetVersion fi) {
            return RuntimeHelper.upcallStub(SetVersion.class, fi, ICreateTypeInfoVtbl.SetVersion$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;SS)I");
        }
        static MemoryAddress allocate(SetVersion fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetVersion.class, fi, ICreateTypeInfoVtbl.SetVersion$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;SS)I", scope);
        }
        static SetVersion ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, short x1, short x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetVersion$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetVersion$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetVersion")));
    public static VarHandle SetVersion$VH() {
        return ICreateTypeInfoVtbl.SetVersion$VH;
    }
    public static MemoryAddress SetVersion$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetVersion$VH.get(seg);
    }
    public static void SetVersion$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetVersion$VH.set(seg, x);
    }
    public static MemoryAddress SetVersion$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetVersion$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetVersion SetVersion (MemorySegment segment) {
        return SetVersion.ofAddress(SetVersion$get(segment));
    }
    static final FunctionDescriptor AddRefTypeInfo$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle AddRefTypeInfo$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ICreateTypeInfoVtbl.AddRefTypeInfo$FUNC, false
    );
    public interface AddRefTypeInfo {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(AddRefTypeInfo fi) {
            return RuntimeHelper.upcallStub(AddRefTypeInfo.class, fi, ICreateTypeInfoVtbl.AddRefTypeInfo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddRefTypeInfo fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddRefTypeInfo.class, fi, ICreateTypeInfoVtbl.AddRefTypeInfo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddRefTypeInfo ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.AddRefTypeInfo$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRefTypeInfo$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRefTypeInfo")));
    public static VarHandle AddRefTypeInfo$VH() {
        return ICreateTypeInfoVtbl.AddRefTypeInfo$VH;
    }
    public static MemoryAddress AddRefTypeInfo$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.AddRefTypeInfo$VH.get(seg);
    }
    public static void AddRefTypeInfo$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.AddRefTypeInfo$VH.set(seg, x);
    }
    public static MemoryAddress AddRefTypeInfo$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.AddRefTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRefTypeInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.AddRefTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRefTypeInfo AddRefTypeInfo (MemorySegment segment) {
        return AddRefTypeInfo.ofAddress(AddRefTypeInfo$get(segment));
    }
    static final FunctionDescriptor AddFuncDesc$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle AddFuncDesc$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ICreateTypeInfoVtbl.AddFuncDesc$FUNC, false
    );
    public interface AddFuncDesc {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(AddFuncDesc fi) {
            return RuntimeHelper.upcallStub(AddFuncDesc.class, fi, ICreateTypeInfoVtbl.AddFuncDesc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddFuncDesc fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddFuncDesc.class, fi, ICreateTypeInfoVtbl.AddFuncDesc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddFuncDesc ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.AddFuncDesc$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddFuncDesc$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddFuncDesc")));
    public static VarHandle AddFuncDesc$VH() {
        return ICreateTypeInfoVtbl.AddFuncDesc$VH;
    }
    public static MemoryAddress AddFuncDesc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.AddFuncDesc$VH.get(seg);
    }
    public static void AddFuncDesc$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.AddFuncDesc$VH.set(seg, x);
    }
    public static MemoryAddress AddFuncDesc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.AddFuncDesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddFuncDesc$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.AddFuncDesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddFuncDesc AddFuncDesc (MemorySegment segment) {
        return AddFuncDesc.ofAddress(AddFuncDesc$get(segment));
    }
    static final FunctionDescriptor AddImplType$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_LONG
    );
    static final MethodHandle AddImplType$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        ICreateTypeInfoVtbl.AddImplType$FUNC, false
    );
    public interface AddImplType {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2);
        static MemoryAddress allocate(AddImplType fi) {
            return RuntimeHelper.upcallStub(AddImplType.class, fi, ICreateTypeInfoVtbl.AddImplType$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)I");
        }
        static MemoryAddress allocate(AddImplType fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddImplType.class, fi, ICreateTypeInfoVtbl.AddImplType$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)I", scope);
        }
        static AddImplType ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.AddImplType$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddImplType$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddImplType")));
    public static VarHandle AddImplType$VH() {
        return ICreateTypeInfoVtbl.AddImplType$VH;
    }
    public static MemoryAddress AddImplType$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.AddImplType$VH.get(seg);
    }
    public static void AddImplType$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.AddImplType$VH.set(seg, x);
    }
    public static MemoryAddress AddImplType$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.AddImplType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddImplType$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.AddImplType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddImplType AddImplType (MemorySegment segment) {
        return AddImplType.ofAddress(AddImplType$get(segment));
    }
    static final FunctionDescriptor SetImplTypeFlags$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final MethodHandle SetImplTypeFlags$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        ICreateTypeInfoVtbl.SetImplTypeFlags$FUNC, false
    );
    public interface SetImplTypeFlags {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2);
        static MemoryAddress allocate(SetImplTypeFlags fi) {
            return RuntimeHelper.upcallStub(SetImplTypeFlags.class, fi, ICreateTypeInfoVtbl.SetImplTypeFlags$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)I");
        }
        static MemoryAddress allocate(SetImplTypeFlags fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetImplTypeFlags.class, fi, ICreateTypeInfoVtbl.SetImplTypeFlags$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)I", scope);
        }
        static SetImplTypeFlags ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetImplTypeFlags$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetImplTypeFlags$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetImplTypeFlags")));
    public static VarHandle SetImplTypeFlags$VH() {
        return ICreateTypeInfoVtbl.SetImplTypeFlags$VH;
    }
    public static MemoryAddress SetImplTypeFlags$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetImplTypeFlags$VH.get(seg);
    }
    public static void SetImplTypeFlags$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetImplTypeFlags$VH.set(seg, x);
    }
    public static MemoryAddress SetImplTypeFlags$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetImplTypeFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetImplTypeFlags$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetImplTypeFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetImplTypeFlags SetImplTypeFlags (MemorySegment segment) {
        return SetImplTypeFlags.ofAddress(SetImplTypeFlags$get(segment));
    }
    static final FunctionDescriptor SetAlignment$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_SHORT
    );
    static final MethodHandle SetAlignment$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;S)I",
        ICreateTypeInfoVtbl.SetAlignment$FUNC, false
    );
    public interface SetAlignment {

        int apply(jdk.incubator.foreign.MemoryAddress x0, short x1);
        static MemoryAddress allocate(SetAlignment fi) {
            return RuntimeHelper.upcallStub(SetAlignment.class, fi, ICreateTypeInfoVtbl.SetAlignment$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;S)I");
        }
        static MemoryAddress allocate(SetAlignment fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetAlignment.class, fi, ICreateTypeInfoVtbl.SetAlignment$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;S)I", scope);
        }
        static SetAlignment ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, short x1) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetAlignment$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetAlignment$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetAlignment")));
    public static VarHandle SetAlignment$VH() {
        return ICreateTypeInfoVtbl.SetAlignment$VH;
    }
    public static MemoryAddress SetAlignment$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetAlignment$VH.get(seg);
    }
    public static void SetAlignment$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetAlignment$VH.set(seg, x);
    }
    public static MemoryAddress SetAlignment$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetAlignment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetAlignment$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetAlignment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetAlignment SetAlignment (MemorySegment segment) {
        return SetAlignment.ofAddress(SetAlignment$get(segment));
    }
    static final FunctionDescriptor SetSchema$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle SetSchema$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ICreateTypeInfoVtbl.SetSchema$FUNC, false
    );
    public interface SetSchema {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(SetSchema fi) {
            return RuntimeHelper.upcallStub(SetSchema.class, fi, ICreateTypeInfoVtbl.SetSchema$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SetSchema fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetSchema.class, fi, ICreateTypeInfoVtbl.SetSchema$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SetSchema ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetSchema$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetSchema$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetSchema")));
    public static VarHandle SetSchema$VH() {
        return ICreateTypeInfoVtbl.SetSchema$VH;
    }
    public static MemoryAddress SetSchema$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetSchema$VH.get(seg);
    }
    public static void SetSchema$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetSchema$VH.set(seg, x);
    }
    public static MemoryAddress SetSchema$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetSchema$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetSchema$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetSchema$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetSchema SetSchema (MemorySegment segment) {
        return SetSchema.ofAddress(SetSchema$get(segment));
    }
    static final FunctionDescriptor AddVarDesc$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle AddVarDesc$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ICreateTypeInfoVtbl.AddVarDesc$FUNC, false
    );
    public interface AddVarDesc {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(AddVarDesc fi) {
            return RuntimeHelper.upcallStub(AddVarDesc.class, fi, ICreateTypeInfoVtbl.AddVarDesc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(AddVarDesc fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(AddVarDesc.class, fi, ICreateTypeInfoVtbl.AddVarDesc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static AddVarDesc ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.AddVarDesc$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddVarDesc$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddVarDesc")));
    public static VarHandle AddVarDesc$VH() {
        return ICreateTypeInfoVtbl.AddVarDesc$VH;
    }
    public static MemoryAddress AddVarDesc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.AddVarDesc$VH.get(seg);
    }
    public static void AddVarDesc$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.AddVarDesc$VH.set(seg, x);
    }
    public static MemoryAddress AddVarDesc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.AddVarDesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddVarDesc$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.AddVarDesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddVarDesc AddVarDesc (MemorySegment segment) {
        return AddVarDesc.ofAddress(AddVarDesc$get(segment));
    }
    static final FunctionDescriptor SetFuncAndParamNames$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final MethodHandle SetFuncAndParamNames$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        ICreateTypeInfoVtbl.SetFuncAndParamNames$FUNC, false
    );
    public interface SetFuncAndParamNames {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3);
        static MemoryAddress allocate(SetFuncAndParamNames fi) {
            return RuntimeHelper.upcallStub(SetFuncAndParamNames.class, fi, ICreateTypeInfoVtbl.SetFuncAndParamNames$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I");
        }
        static MemoryAddress allocate(SetFuncAndParamNames fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetFuncAndParamNames.class, fi, ICreateTypeInfoVtbl.SetFuncAndParamNames$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static SetFuncAndParamNames ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, int x3) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetFuncAndParamNames$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetFuncAndParamNames$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetFuncAndParamNames")));
    public static VarHandle SetFuncAndParamNames$VH() {
        return ICreateTypeInfoVtbl.SetFuncAndParamNames$VH;
    }
    public static MemoryAddress SetFuncAndParamNames$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetFuncAndParamNames$VH.get(seg);
    }
    public static void SetFuncAndParamNames$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetFuncAndParamNames$VH.set(seg, x);
    }
    public static MemoryAddress SetFuncAndParamNames$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetFuncAndParamNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetFuncAndParamNames$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetFuncAndParamNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetFuncAndParamNames SetFuncAndParamNames (MemorySegment segment) {
        return SetFuncAndParamNames.ofAddress(SetFuncAndParamNames$get(segment));
    }
    static final FunctionDescriptor SetVarName$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle SetVarName$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ICreateTypeInfoVtbl.SetVarName$FUNC, false
    );
    public interface SetVarName {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(SetVarName fi) {
            return RuntimeHelper.upcallStub(SetVarName.class, fi, ICreateTypeInfoVtbl.SetVarName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SetVarName fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetVarName.class, fi, ICreateTypeInfoVtbl.SetVarName$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SetVarName ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetVarName$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetVarName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetVarName")));
    public static VarHandle SetVarName$VH() {
        return ICreateTypeInfoVtbl.SetVarName$VH;
    }
    public static MemoryAddress SetVarName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetVarName$VH.get(seg);
    }
    public static void SetVarName$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetVarName$VH.set(seg, x);
    }
    public static MemoryAddress SetVarName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetVarName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetVarName$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetVarName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetVarName SetVarName (MemorySegment segment) {
        return SetVarName.ofAddress(SetVarName$get(segment));
    }
    static final FunctionDescriptor SetTypeDescAlias$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle SetTypeDescAlias$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ICreateTypeInfoVtbl.SetTypeDescAlias$FUNC, false
    );
    public interface SetTypeDescAlias {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(SetTypeDescAlias fi) {
            return RuntimeHelper.upcallStub(SetTypeDescAlias.class, fi, ICreateTypeInfoVtbl.SetTypeDescAlias$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SetTypeDescAlias fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetTypeDescAlias.class, fi, ICreateTypeInfoVtbl.SetTypeDescAlias$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SetTypeDescAlias ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetTypeDescAlias$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetTypeDescAlias$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetTypeDescAlias")));
    public static VarHandle SetTypeDescAlias$VH() {
        return ICreateTypeInfoVtbl.SetTypeDescAlias$VH;
    }
    public static MemoryAddress SetTypeDescAlias$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetTypeDescAlias$VH.get(seg);
    }
    public static void SetTypeDescAlias$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetTypeDescAlias$VH.set(seg, x);
    }
    public static MemoryAddress SetTypeDescAlias$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetTypeDescAlias$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetTypeDescAlias$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetTypeDescAlias$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetTypeDescAlias SetTypeDescAlias (MemorySegment segment) {
        return SetTypeDescAlias.ofAddress(SetTypeDescAlias$get(segment));
    }
    static final FunctionDescriptor DefineFuncAsDllEntry$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle DefineFuncAsDllEntry$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ICreateTypeInfoVtbl.DefineFuncAsDllEntry$FUNC, false
    );
    public interface DefineFuncAsDllEntry {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        static MemoryAddress allocate(DefineFuncAsDllEntry fi) {
            return RuntimeHelper.upcallStub(DefineFuncAsDllEntry.class, fi, ICreateTypeInfoVtbl.DefineFuncAsDllEntry$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(DefineFuncAsDllEntry fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(DefineFuncAsDllEntry.class, fi, ICreateTypeInfoVtbl.DefineFuncAsDllEntry$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static DefineFuncAsDllEntry ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.DefineFuncAsDllEntry$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DefineFuncAsDllEntry$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("DefineFuncAsDllEntry")));
    public static VarHandle DefineFuncAsDllEntry$VH() {
        return ICreateTypeInfoVtbl.DefineFuncAsDllEntry$VH;
    }
    public static MemoryAddress DefineFuncAsDllEntry$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.DefineFuncAsDllEntry$VH.get(seg);
    }
    public static void DefineFuncAsDllEntry$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.DefineFuncAsDllEntry$VH.set(seg, x);
    }
    public static MemoryAddress DefineFuncAsDllEntry$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.DefineFuncAsDllEntry$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DefineFuncAsDllEntry$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.DefineFuncAsDllEntry$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DefineFuncAsDllEntry DefineFuncAsDllEntry (MemorySegment segment) {
        return DefineFuncAsDllEntry.ofAddress(DefineFuncAsDllEntry$get(segment));
    }
    static final FunctionDescriptor SetFuncDocString$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle SetFuncDocString$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ICreateTypeInfoVtbl.SetFuncDocString$FUNC, false
    );
    public interface SetFuncDocString {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(SetFuncDocString fi) {
            return RuntimeHelper.upcallStub(SetFuncDocString.class, fi, ICreateTypeInfoVtbl.SetFuncDocString$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SetFuncDocString fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetFuncDocString.class, fi, ICreateTypeInfoVtbl.SetFuncDocString$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SetFuncDocString ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetFuncDocString$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetFuncDocString$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetFuncDocString")));
    public static VarHandle SetFuncDocString$VH() {
        return ICreateTypeInfoVtbl.SetFuncDocString$VH;
    }
    public static MemoryAddress SetFuncDocString$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetFuncDocString$VH.get(seg);
    }
    public static void SetFuncDocString$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetFuncDocString$VH.set(seg, x);
    }
    public static MemoryAddress SetFuncDocString$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetFuncDocString$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetFuncDocString$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetFuncDocString$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetFuncDocString SetFuncDocString (MemorySegment segment) {
        return SetFuncDocString.ofAddress(SetFuncDocString$get(segment));
    }
    static final FunctionDescriptor SetVarDocString$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle SetVarDocString$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ICreateTypeInfoVtbl.SetVarDocString$FUNC, false
    );
    public interface SetVarDocString {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(SetVarDocString fi) {
            return RuntimeHelper.upcallStub(SetVarDocString.class, fi, ICreateTypeInfoVtbl.SetVarDocString$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SetVarDocString fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetVarDocString.class, fi, ICreateTypeInfoVtbl.SetVarDocString$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SetVarDocString ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetVarDocString$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetVarDocString$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetVarDocString")));
    public static VarHandle SetVarDocString$VH() {
        return ICreateTypeInfoVtbl.SetVarDocString$VH;
    }
    public static MemoryAddress SetVarDocString$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetVarDocString$VH.get(seg);
    }
    public static void SetVarDocString$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetVarDocString$VH.set(seg, x);
    }
    public static MemoryAddress SetVarDocString$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetVarDocString$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetVarDocString$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetVarDocString$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetVarDocString SetVarDocString (MemorySegment segment) {
        return SetVarDocString.ofAddress(SetVarDocString$get(segment));
    }
    static final FunctionDescriptor SetFuncHelpContext$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_LONG
    );
    static final MethodHandle SetFuncHelpContext$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        ICreateTypeInfoVtbl.SetFuncHelpContext$FUNC, false
    );
    public interface SetFuncHelpContext {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2);
        static MemoryAddress allocate(SetFuncHelpContext fi) {
            return RuntimeHelper.upcallStub(SetFuncHelpContext.class, fi, ICreateTypeInfoVtbl.SetFuncHelpContext$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)I");
        }
        static MemoryAddress allocate(SetFuncHelpContext fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetFuncHelpContext.class, fi, ICreateTypeInfoVtbl.SetFuncHelpContext$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)I", scope);
        }
        static SetFuncHelpContext ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetFuncHelpContext$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetFuncHelpContext$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetFuncHelpContext")));
    public static VarHandle SetFuncHelpContext$VH() {
        return ICreateTypeInfoVtbl.SetFuncHelpContext$VH;
    }
    public static MemoryAddress SetFuncHelpContext$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetFuncHelpContext$VH.get(seg);
    }
    public static void SetFuncHelpContext$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetFuncHelpContext$VH.set(seg, x);
    }
    public static MemoryAddress SetFuncHelpContext$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetFuncHelpContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetFuncHelpContext$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetFuncHelpContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetFuncHelpContext SetFuncHelpContext (MemorySegment segment) {
        return SetFuncHelpContext.ofAddress(SetFuncHelpContext$get(segment));
    }
    static final FunctionDescriptor SetVarHelpContext$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_LONG
    );
    static final MethodHandle SetVarHelpContext$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        ICreateTypeInfoVtbl.SetVarHelpContext$FUNC, false
    );
    public interface SetVarHelpContext {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2);
        static MemoryAddress allocate(SetVarHelpContext fi) {
            return RuntimeHelper.upcallStub(SetVarHelpContext.class, fi, ICreateTypeInfoVtbl.SetVarHelpContext$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)I");
        }
        static MemoryAddress allocate(SetVarHelpContext fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetVarHelpContext.class, fi, ICreateTypeInfoVtbl.SetVarHelpContext$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)I", scope);
        }
        static SetVarHelpContext ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetVarHelpContext$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetVarHelpContext$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetVarHelpContext")));
    public static VarHandle SetVarHelpContext$VH() {
        return ICreateTypeInfoVtbl.SetVarHelpContext$VH;
    }
    public static MemoryAddress SetVarHelpContext$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetVarHelpContext$VH.get(seg);
    }
    public static void SetVarHelpContext$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetVarHelpContext$VH.set(seg, x);
    }
    public static MemoryAddress SetVarHelpContext$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetVarHelpContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetVarHelpContext$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetVarHelpContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetVarHelpContext SetVarHelpContext (MemorySegment segment) {
        return SetVarHelpContext.ofAddress(SetVarHelpContext$get(segment));
    }
    static final FunctionDescriptor SetMops$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle SetMops$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ICreateTypeInfoVtbl.SetMops$FUNC, false
    );
    public interface SetMops {

        int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(SetMops fi) {
            return RuntimeHelper.upcallStub(SetMops.class, fi, ICreateTypeInfoVtbl.SetMops$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SetMops fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetMops.class, fi, ICreateTypeInfoVtbl.SetMops$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SetMops ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetMops$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetMops$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetMops")));
    public static VarHandle SetMops$VH() {
        return ICreateTypeInfoVtbl.SetMops$VH;
    }
    public static MemoryAddress SetMops$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetMops$VH.get(seg);
    }
    public static void SetMops$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetMops$VH.set(seg, x);
    }
    public static MemoryAddress SetMops$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetMops$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetMops$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetMops$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetMops SetMops (MemorySegment segment) {
        return SetMops.ofAddress(SetMops$get(segment));
    }
    static final FunctionDescriptor SetTypeIdldesc$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle SetTypeIdldesc$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ICreateTypeInfoVtbl.SetTypeIdldesc$FUNC, false
    );
    public interface SetTypeIdldesc {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(SetTypeIdldesc fi) {
            return RuntimeHelper.upcallStub(SetTypeIdldesc.class, fi, ICreateTypeInfoVtbl.SetTypeIdldesc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(SetTypeIdldesc fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(SetTypeIdldesc.class, fi, ICreateTypeInfoVtbl.SetTypeIdldesc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static SetTypeIdldesc ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetTypeIdldesc$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetTypeIdldesc$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetTypeIdldesc")));
    public static VarHandle SetTypeIdldesc$VH() {
        return ICreateTypeInfoVtbl.SetTypeIdldesc$VH;
    }
    public static MemoryAddress SetTypeIdldesc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetTypeIdldesc$VH.get(seg);
    }
    public static void SetTypeIdldesc$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetTypeIdldesc$VH.set(seg, x);
    }
    public static MemoryAddress SetTypeIdldesc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.SetTypeIdldesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetTypeIdldesc$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.SetTypeIdldesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetTypeIdldesc SetTypeIdldesc (MemorySegment segment) {
        return SetTypeIdldesc.ofAddress(SetTypeIdldesc$get(segment));
    }
    static final FunctionDescriptor LayOut$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle LayOut$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ICreateTypeInfoVtbl.LayOut$FUNC, false
    );
    public interface LayOut {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(LayOut fi) {
            return RuntimeHelper.upcallStub(LayOut.class, fi, ICreateTypeInfoVtbl.LayOut$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(LayOut fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(LayOut.class, fi, ICreateTypeInfoVtbl.LayOut$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static LayOut ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.LayOut$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle LayOut$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("LayOut")));
    public static VarHandle LayOut$VH() {
        return ICreateTypeInfoVtbl.LayOut$VH;
    }
    public static MemoryAddress LayOut$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.LayOut$VH.get(seg);
    }
    public static void LayOut$set( MemorySegment seg, MemoryAddress x) {
        ICreateTypeInfoVtbl.LayOut$VH.set(seg, x);
    }
    public static MemoryAddress LayOut$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ICreateTypeInfoVtbl.LayOut$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LayOut$set(MemorySegment seg, long index, MemoryAddress x) {
        ICreateTypeInfoVtbl.LayOut$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static LayOut LayOut (MemorySegment segment) {
        return LayOut.ofAddress(LayOut$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


