// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _JOB_INFO_2W {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("JobId"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("pPrinterName"),
        C_POINTER.withName("pMachineName"),
        C_POINTER.withName("pUserName"),
        C_POINTER.withName("pDocument"),
        C_POINTER.withName("pNotifyName"),
        C_POINTER.withName("pDatatype"),
        C_POINTER.withName("pPrintProcessor"),
        C_POINTER.withName("pParameters"),
        C_POINTER.withName("pDriverName"),
        C_POINTER.withName("pDevMode"),
        C_POINTER.withName("pStatus"),
        C_POINTER.withName("pSecurityDescriptor"),
        C_LONG.withName("Status"),
        C_LONG.withName("Priority"),
        C_LONG.withName("Position"),
        C_LONG.withName("StartTime"),
        C_LONG.withName("UntilTime"),
        C_LONG.withName("TotalPages"),
        C_LONG.withName("Size"),
        MemoryLayout.structLayout(
            C_SHORT.withName("wYear"),
            C_SHORT.withName("wMonth"),
            C_SHORT.withName("wDayOfWeek"),
            C_SHORT.withName("wDay"),
            C_SHORT.withName("wHour"),
            C_SHORT.withName("wMinute"),
            C_SHORT.withName("wSecond"),
            C_SHORT.withName("wMilliseconds")
        ).withName("Submitted"),
        C_LONG.withName("Time"),
        C_LONG.withName("PagesPrinted"),
        MemoryLayout.paddingLayout(32)
    ).withName("_JOB_INFO_2W");
    public static MemoryLayout $LAYOUT() {
        return _JOB_INFO_2W.$struct$LAYOUT;
    }
    static final VarHandle JobId$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("JobId"));
    public static VarHandle JobId$VH() {
        return _JOB_INFO_2W.JobId$VH;
    }
    public static int JobId$get(MemorySegment seg) {
        return (int)_JOB_INFO_2W.JobId$VH.get(seg);
    }
    public static void JobId$set( MemorySegment seg, int x) {
        _JOB_INFO_2W.JobId$VH.set(seg, x);
    }
    public static int JobId$get(MemorySegment seg, long index) {
        return (int)_JOB_INFO_2W.JobId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void JobId$set(MemorySegment seg, long index, int x) {
        _JOB_INFO_2W.JobId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pPrinterName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pPrinterName")));
    public static VarHandle pPrinterName$VH() {
        return _JOB_INFO_2W.pPrinterName$VH;
    }
    public static MemoryAddress pPrinterName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_JOB_INFO_2W.pPrinterName$VH.get(seg);
    }
    public static void pPrinterName$set( MemorySegment seg, MemoryAddress x) {
        _JOB_INFO_2W.pPrinterName$VH.set(seg, x);
    }
    public static MemoryAddress pPrinterName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_JOB_INFO_2W.pPrinterName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pPrinterName$set(MemorySegment seg, long index, MemoryAddress x) {
        _JOB_INFO_2W.pPrinterName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pMachineName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pMachineName")));
    public static VarHandle pMachineName$VH() {
        return _JOB_INFO_2W.pMachineName$VH;
    }
    public static MemoryAddress pMachineName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_JOB_INFO_2W.pMachineName$VH.get(seg);
    }
    public static void pMachineName$set( MemorySegment seg, MemoryAddress x) {
        _JOB_INFO_2W.pMachineName$VH.set(seg, x);
    }
    public static MemoryAddress pMachineName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_JOB_INFO_2W.pMachineName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pMachineName$set(MemorySegment seg, long index, MemoryAddress x) {
        _JOB_INFO_2W.pMachineName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pUserName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pUserName")));
    public static VarHandle pUserName$VH() {
        return _JOB_INFO_2W.pUserName$VH;
    }
    public static MemoryAddress pUserName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_JOB_INFO_2W.pUserName$VH.get(seg);
    }
    public static void pUserName$set( MemorySegment seg, MemoryAddress x) {
        _JOB_INFO_2W.pUserName$VH.set(seg, x);
    }
    public static MemoryAddress pUserName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_JOB_INFO_2W.pUserName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pUserName$set(MemorySegment seg, long index, MemoryAddress x) {
        _JOB_INFO_2W.pUserName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pDocument$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pDocument")));
    public static VarHandle pDocument$VH() {
        return _JOB_INFO_2W.pDocument$VH;
    }
    public static MemoryAddress pDocument$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_JOB_INFO_2W.pDocument$VH.get(seg);
    }
    public static void pDocument$set( MemorySegment seg, MemoryAddress x) {
        _JOB_INFO_2W.pDocument$VH.set(seg, x);
    }
    public static MemoryAddress pDocument$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_JOB_INFO_2W.pDocument$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pDocument$set(MemorySegment seg, long index, MemoryAddress x) {
        _JOB_INFO_2W.pDocument$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pNotifyName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pNotifyName")));
    public static VarHandle pNotifyName$VH() {
        return _JOB_INFO_2W.pNotifyName$VH;
    }
    public static MemoryAddress pNotifyName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_JOB_INFO_2W.pNotifyName$VH.get(seg);
    }
    public static void pNotifyName$set( MemorySegment seg, MemoryAddress x) {
        _JOB_INFO_2W.pNotifyName$VH.set(seg, x);
    }
    public static MemoryAddress pNotifyName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_JOB_INFO_2W.pNotifyName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pNotifyName$set(MemorySegment seg, long index, MemoryAddress x) {
        _JOB_INFO_2W.pNotifyName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pDatatype$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pDatatype")));
    public static VarHandle pDatatype$VH() {
        return _JOB_INFO_2W.pDatatype$VH;
    }
    public static MemoryAddress pDatatype$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_JOB_INFO_2W.pDatatype$VH.get(seg);
    }
    public static void pDatatype$set( MemorySegment seg, MemoryAddress x) {
        _JOB_INFO_2W.pDatatype$VH.set(seg, x);
    }
    public static MemoryAddress pDatatype$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_JOB_INFO_2W.pDatatype$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pDatatype$set(MemorySegment seg, long index, MemoryAddress x) {
        _JOB_INFO_2W.pDatatype$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pPrintProcessor$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pPrintProcessor")));
    public static VarHandle pPrintProcessor$VH() {
        return _JOB_INFO_2W.pPrintProcessor$VH;
    }
    public static MemoryAddress pPrintProcessor$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_JOB_INFO_2W.pPrintProcessor$VH.get(seg);
    }
    public static void pPrintProcessor$set( MemorySegment seg, MemoryAddress x) {
        _JOB_INFO_2W.pPrintProcessor$VH.set(seg, x);
    }
    public static MemoryAddress pPrintProcessor$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_JOB_INFO_2W.pPrintProcessor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pPrintProcessor$set(MemorySegment seg, long index, MemoryAddress x) {
        _JOB_INFO_2W.pPrintProcessor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pParameters$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pParameters")));
    public static VarHandle pParameters$VH() {
        return _JOB_INFO_2W.pParameters$VH;
    }
    public static MemoryAddress pParameters$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_JOB_INFO_2W.pParameters$VH.get(seg);
    }
    public static void pParameters$set( MemorySegment seg, MemoryAddress x) {
        _JOB_INFO_2W.pParameters$VH.set(seg, x);
    }
    public static MemoryAddress pParameters$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_JOB_INFO_2W.pParameters$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pParameters$set(MemorySegment seg, long index, MemoryAddress x) {
        _JOB_INFO_2W.pParameters$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pDriverName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pDriverName")));
    public static VarHandle pDriverName$VH() {
        return _JOB_INFO_2W.pDriverName$VH;
    }
    public static MemoryAddress pDriverName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_JOB_INFO_2W.pDriverName$VH.get(seg);
    }
    public static void pDriverName$set( MemorySegment seg, MemoryAddress x) {
        _JOB_INFO_2W.pDriverName$VH.set(seg, x);
    }
    public static MemoryAddress pDriverName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_JOB_INFO_2W.pDriverName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pDriverName$set(MemorySegment seg, long index, MemoryAddress x) {
        _JOB_INFO_2W.pDriverName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pDevMode$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pDevMode")));
    public static VarHandle pDevMode$VH() {
        return _JOB_INFO_2W.pDevMode$VH;
    }
    public static MemoryAddress pDevMode$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_JOB_INFO_2W.pDevMode$VH.get(seg);
    }
    public static void pDevMode$set( MemorySegment seg, MemoryAddress x) {
        _JOB_INFO_2W.pDevMode$VH.set(seg, x);
    }
    public static MemoryAddress pDevMode$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_JOB_INFO_2W.pDevMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pDevMode$set(MemorySegment seg, long index, MemoryAddress x) {
        _JOB_INFO_2W.pDevMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pStatus$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pStatus")));
    public static VarHandle pStatus$VH() {
        return _JOB_INFO_2W.pStatus$VH;
    }
    public static MemoryAddress pStatus$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_JOB_INFO_2W.pStatus$VH.get(seg);
    }
    public static void pStatus$set( MemorySegment seg, MemoryAddress x) {
        _JOB_INFO_2W.pStatus$VH.set(seg, x);
    }
    public static MemoryAddress pStatus$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_JOB_INFO_2W.pStatus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pStatus$set(MemorySegment seg, long index, MemoryAddress x) {
        _JOB_INFO_2W.pStatus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pSecurityDescriptor$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pSecurityDescriptor")));
    public static VarHandle pSecurityDescriptor$VH() {
        return _JOB_INFO_2W.pSecurityDescriptor$VH;
    }
    public static MemoryAddress pSecurityDescriptor$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_JOB_INFO_2W.pSecurityDescriptor$VH.get(seg);
    }
    public static void pSecurityDescriptor$set( MemorySegment seg, MemoryAddress x) {
        _JOB_INFO_2W.pSecurityDescriptor$VH.set(seg, x);
    }
    public static MemoryAddress pSecurityDescriptor$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_JOB_INFO_2W.pSecurityDescriptor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pSecurityDescriptor$set(MemorySegment seg, long index, MemoryAddress x) {
        _JOB_INFO_2W.pSecurityDescriptor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Status$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Status"));
    public static VarHandle Status$VH() {
        return _JOB_INFO_2W.Status$VH;
    }
    public static int Status$get(MemorySegment seg) {
        return (int)_JOB_INFO_2W.Status$VH.get(seg);
    }
    public static void Status$set( MemorySegment seg, int x) {
        _JOB_INFO_2W.Status$VH.set(seg, x);
    }
    public static int Status$get(MemorySegment seg, long index) {
        return (int)_JOB_INFO_2W.Status$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Status$set(MemorySegment seg, long index, int x) {
        _JOB_INFO_2W.Status$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Priority$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Priority"));
    public static VarHandle Priority$VH() {
        return _JOB_INFO_2W.Priority$VH;
    }
    public static int Priority$get(MemorySegment seg) {
        return (int)_JOB_INFO_2W.Priority$VH.get(seg);
    }
    public static void Priority$set( MemorySegment seg, int x) {
        _JOB_INFO_2W.Priority$VH.set(seg, x);
    }
    public static int Priority$get(MemorySegment seg, long index) {
        return (int)_JOB_INFO_2W.Priority$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Priority$set(MemorySegment seg, long index, int x) {
        _JOB_INFO_2W.Priority$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Position$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Position"));
    public static VarHandle Position$VH() {
        return _JOB_INFO_2W.Position$VH;
    }
    public static int Position$get(MemorySegment seg) {
        return (int)_JOB_INFO_2W.Position$VH.get(seg);
    }
    public static void Position$set( MemorySegment seg, int x) {
        _JOB_INFO_2W.Position$VH.set(seg, x);
    }
    public static int Position$get(MemorySegment seg, long index) {
        return (int)_JOB_INFO_2W.Position$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Position$set(MemorySegment seg, long index, int x) {
        _JOB_INFO_2W.Position$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle StartTime$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("StartTime"));
    public static VarHandle StartTime$VH() {
        return _JOB_INFO_2W.StartTime$VH;
    }
    public static int StartTime$get(MemorySegment seg) {
        return (int)_JOB_INFO_2W.StartTime$VH.get(seg);
    }
    public static void StartTime$set( MemorySegment seg, int x) {
        _JOB_INFO_2W.StartTime$VH.set(seg, x);
    }
    public static int StartTime$get(MemorySegment seg, long index) {
        return (int)_JOB_INFO_2W.StartTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StartTime$set(MemorySegment seg, long index, int x) {
        _JOB_INFO_2W.StartTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle UntilTime$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("UntilTime"));
    public static VarHandle UntilTime$VH() {
        return _JOB_INFO_2W.UntilTime$VH;
    }
    public static int UntilTime$get(MemorySegment seg) {
        return (int)_JOB_INFO_2W.UntilTime$VH.get(seg);
    }
    public static void UntilTime$set( MemorySegment seg, int x) {
        _JOB_INFO_2W.UntilTime$VH.set(seg, x);
    }
    public static int UntilTime$get(MemorySegment seg, long index) {
        return (int)_JOB_INFO_2W.UntilTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UntilTime$set(MemorySegment seg, long index, int x) {
        _JOB_INFO_2W.UntilTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle TotalPages$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("TotalPages"));
    public static VarHandle TotalPages$VH() {
        return _JOB_INFO_2W.TotalPages$VH;
    }
    public static int TotalPages$get(MemorySegment seg) {
        return (int)_JOB_INFO_2W.TotalPages$VH.get(seg);
    }
    public static void TotalPages$set( MemorySegment seg, int x) {
        _JOB_INFO_2W.TotalPages$VH.set(seg, x);
    }
    public static int TotalPages$get(MemorySegment seg, long index) {
        return (int)_JOB_INFO_2W.TotalPages$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TotalPages$set(MemorySegment seg, long index, int x) {
        _JOB_INFO_2W.TotalPages$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _JOB_INFO_2W.Size$VH;
    }
    public static int Size$get(MemorySegment seg) {
        return (int)_JOB_INFO_2W.Size$VH.get(seg);
    }
    public static void Size$set( MemorySegment seg, int x) {
        _JOB_INFO_2W.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_JOB_INFO_2W.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _JOB_INFO_2W.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Submitted$slice(MemorySegment seg) {
        return seg.asSlice(132, 16);
    }
    static final VarHandle Time$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Time"));
    public static VarHandle Time$VH() {
        return _JOB_INFO_2W.Time$VH;
    }
    public static int Time$get(MemorySegment seg) {
        return (int)_JOB_INFO_2W.Time$VH.get(seg);
    }
    public static void Time$set( MemorySegment seg, int x) {
        _JOB_INFO_2W.Time$VH.set(seg, x);
    }
    public static int Time$get(MemorySegment seg, long index) {
        return (int)_JOB_INFO_2W.Time$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Time$set(MemorySegment seg, long index, int x) {
        _JOB_INFO_2W.Time$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle PagesPrinted$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("PagesPrinted"));
    public static VarHandle PagesPrinted$VH() {
        return _JOB_INFO_2W.PagesPrinted$VH;
    }
    public static int PagesPrinted$get(MemorySegment seg) {
        return (int)_JOB_INFO_2W.PagesPrinted$VH.get(seg);
    }
    public static void PagesPrinted$set( MemorySegment seg, int x) {
        _JOB_INFO_2W.PagesPrinted$VH.set(seg, x);
    }
    public static int PagesPrinted$get(MemorySegment seg, long index) {
        return (int)_JOB_INFO_2W.PagesPrinted$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PagesPrinted$set(MemorySegment seg, long index, int x) {
        _JOB_INFO_2W.PagesPrinted$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


