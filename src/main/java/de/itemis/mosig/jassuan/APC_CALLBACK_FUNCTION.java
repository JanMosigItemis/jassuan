// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public interface APC_CALLBACK_FUNCTION {

    void apply(int x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
    static MemoryAddress allocate(APC_CALLBACK_FUNCTION fi) {
        return RuntimeHelper.upcallStub(APC_CALLBACK_FUNCTION.class, fi, constants$278.APC_CALLBACK_FUNCTION$FUNC, "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
    }
    static MemoryAddress allocate(APC_CALLBACK_FUNCTION fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(APC_CALLBACK_FUNCTION.class, fi, constants$278.APC_CALLBACK_FUNCTION$FUNC, "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
    }
    static APC_CALLBACK_FUNCTION ofAddress(MemoryAddress addr) {
        return (int x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
            try {
                constants$278.APC_CALLBACK_FUNCTION$MH.invokeExact((Addressable)addr, x0, x1, x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


