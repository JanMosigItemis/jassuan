// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$92 {

    static final FunctionDescriptor _open_osfhandle$FUNC = FunctionDescriptor.of(C_INT,
        C_LONG_LONG,
        C_INT
    );
    static final MethodHandle _open_osfhandle$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "_open_osfhandle",
        "(JI)I",
        constants$92._open_osfhandle$FUNC, false
    );
    static final FunctionDescriptor access$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final MethodHandle access$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "access",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$92.access$FUNC, false
    );
    static final FunctionDescriptor chsize$FUNC = FunctionDescriptor.of(C_INT,
        C_INT,
        C_LONG
    );
    static final MethodHandle chsize$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "chsize",
        "(II)I",
        constants$92.chsize$FUNC, false
    );
    static final FunctionDescriptor close$FUNC = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final MethodHandle close$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "close",
        "(I)I",
        constants$92.close$FUNC, false
    );
    static final FunctionDescriptor creat$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final MethodHandle creat$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "creat",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$92.creat$FUNC, false
    );
    static final FunctionDescriptor dup$FUNC = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final MethodHandle dup$MH = RuntimeHelper.downcallHandle(
        assuan_h.LIBRARIES, "dup",
        "(I)I",
        constants$92.dup$FUNC, false
    );
}


