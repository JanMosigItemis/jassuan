// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _GET_VIRTUAL_DISK_INFO {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("Version"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_LONG_LONG.withName("VirtualSize"),
                C_LONG_LONG.withName("PhysicalSize"),
                C_LONG.withName("BlockSize"),
                C_LONG.withName("SectorSize")
            ).withName("Size"),
            MemoryLayout.structLayout(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
            ).withName("Identifier"),
            MemoryLayout.structLayout(
                C_INT.withName("ParentResolved"),
                MemoryLayout.sequenceLayout(1, C_SHORT).withName("ParentLocationBuffer"),
                MemoryLayout.paddingLayout(16)
            ).withName("ParentLocation"),
            MemoryLayout.structLayout(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
            ).withName("ParentIdentifier"),
            C_LONG.withName("ParentTimestamp"),
            MemoryLayout.structLayout(
                C_LONG.withName("DeviceId"),
                MemoryLayout.structLayout(
                    C_LONG.withName("Data1"),
                    C_SHORT.withName("Data2"),
                    C_SHORT.withName("Data3"),
                    MemoryLayout.sequenceLayout(8, C_CHAR).withName("Data4")
                ).withName("VendorId")
            ).withName("VirtualStorageType"),
            C_LONG.withName("ProviderSubtype")
        ).withName("$anon$0")
    ).withName("_GET_VIRTUAL_DISK_INFO");
    public static MemoryLayout $LAYOUT() {
        return _GET_VIRTUAL_DISK_INFO.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _GET_VIRTUAL_DISK_INFO.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)_GET_VIRTUAL_DISK_INFO.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        _GET_VIRTUAL_DISK_INFO.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_GET_VIRTUAL_DISK_INFO.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _GET_VIRTUAL_DISK_INFO.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class Size {

        static final MemoryLayout Size$struct$LAYOUT = MemoryLayout.structLayout(
            C_LONG_LONG.withName("VirtualSize"),
            C_LONG_LONG.withName("PhysicalSize"),
            C_LONG.withName("BlockSize"),
            C_LONG.withName("SectorSize")
        );
        public static MemoryLayout $LAYOUT() {
            return Size.Size$struct$LAYOUT;
        }
        static final VarHandle VirtualSize$VH = Size$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("VirtualSize"));
        public static VarHandle VirtualSize$VH() {
            return Size.VirtualSize$VH;
        }
        public static long VirtualSize$get(MemorySegment seg) {
            return (long)Size.VirtualSize$VH.get(seg);
        }
        public static void VirtualSize$set( MemorySegment seg, long x) {
            Size.VirtualSize$VH.set(seg, x);
        }
        public static long VirtualSize$get(MemorySegment seg, long index) {
            return (long)Size.VirtualSize$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void VirtualSize$set(MemorySegment seg, long index, long x) {
            Size.VirtualSize$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle PhysicalSize$VH = Size$struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("PhysicalSize"));
        public static VarHandle PhysicalSize$VH() {
            return Size.PhysicalSize$VH;
        }
        public static long PhysicalSize$get(MemorySegment seg) {
            return (long)Size.PhysicalSize$VH.get(seg);
        }
        public static void PhysicalSize$set( MemorySegment seg, long x) {
            Size.PhysicalSize$VH.set(seg, x);
        }
        public static long PhysicalSize$get(MemorySegment seg, long index) {
            return (long)Size.PhysicalSize$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void PhysicalSize$set(MemorySegment seg, long index, long x) {
            Size.PhysicalSize$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle BlockSize$VH = Size$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("BlockSize"));
        public static VarHandle BlockSize$VH() {
            return Size.BlockSize$VH;
        }
        public static int BlockSize$get(MemorySegment seg) {
            return (int)Size.BlockSize$VH.get(seg);
        }
        public static void BlockSize$set( MemorySegment seg, int x) {
            Size.BlockSize$VH.set(seg, x);
        }
        public static int BlockSize$get(MemorySegment seg, long index) {
            return (int)Size.BlockSize$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void BlockSize$set(MemorySegment seg, long index, int x) {
            Size.BlockSize$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle SectorSize$VH = Size$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("SectorSize"));
        public static VarHandle SectorSize$VH() {
            return Size.SectorSize$VH;
        }
        public static int SectorSize$get(MemorySegment seg) {
            return (int)Size.SectorSize$VH.get(seg);
        }
        public static void SectorSize$set( MemorySegment seg, int x) {
            Size.SectorSize$VH.set(seg, x);
        }
        public static int SectorSize$get(MemorySegment seg, long index) {
            return (int)Size.SectorSize$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void SectorSize$set(MemorySegment seg, long index, int x) {
            Size.SectorSize$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.ofScope(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment Size$slice(MemorySegment seg) {
        return seg.asSlice(8, 24);
    }
    public static MemorySegment Identifier$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static class ParentLocation {

        static final MemoryLayout ParentLocation$struct$LAYOUT = MemoryLayout.structLayout(
            C_INT.withName("ParentResolved"),
            MemoryLayout.sequenceLayout(1, C_SHORT).withName("ParentLocationBuffer"),
            MemoryLayout.paddingLayout(16)
        );
        public static MemoryLayout $LAYOUT() {
            return ParentLocation.ParentLocation$struct$LAYOUT;
        }
        static final VarHandle ParentResolved$VH = ParentLocation$struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ParentResolved"));
        public static VarHandle ParentResolved$VH() {
            return ParentLocation.ParentResolved$VH;
        }
        public static int ParentResolved$get(MemorySegment seg) {
            return (int)ParentLocation.ParentResolved$VH.get(seg);
        }
        public static void ParentResolved$set( MemorySegment seg, int x) {
            ParentLocation.ParentResolved$VH.set(seg, x);
        }
        public static int ParentResolved$get(MemorySegment seg, long index) {
            return (int)ParentLocation.ParentResolved$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void ParentResolved$set(MemorySegment seg, long index, int x) {
            ParentLocation.ParentResolved$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ParentLocationBuffer$slice(MemorySegment seg) {
            return seg.asSlice(4, 2);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.ofScope(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment ParentLocation$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static MemorySegment ParentIdentifier$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    static final VarHandle ParentTimestamp$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("ParentTimestamp"));
    public static VarHandle ParentTimestamp$VH() {
        return _GET_VIRTUAL_DISK_INFO.ParentTimestamp$VH;
    }
    public static int ParentTimestamp$get(MemorySegment seg) {
        return (int)_GET_VIRTUAL_DISK_INFO.ParentTimestamp$VH.get(seg);
    }
    public static void ParentTimestamp$set( MemorySegment seg, int x) {
        _GET_VIRTUAL_DISK_INFO.ParentTimestamp$VH.set(seg, x);
    }
    public static int ParentTimestamp$get(MemorySegment seg, long index) {
        return (int)_GET_VIRTUAL_DISK_INFO.ParentTimestamp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ParentTimestamp$set(MemorySegment seg, long index, int x) {
        _GET_VIRTUAL_DISK_INFO.ParentTimestamp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment VirtualStorageType$slice(MemorySegment seg) {
        return seg.asSlice(8, 20);
    }
    static final VarHandle ProviderSubtype$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("ProviderSubtype"));
    public static VarHandle ProviderSubtype$VH() {
        return _GET_VIRTUAL_DISK_INFO.ProviderSubtype$VH;
    }
    public static int ProviderSubtype$get(MemorySegment seg) {
        return (int)_GET_VIRTUAL_DISK_INFO.ProviderSubtype$VH.get(seg);
    }
    public static void ProviderSubtype$set( MemorySegment seg, int x) {
        _GET_VIRTUAL_DISK_INFO.ProviderSubtype$VH.set(seg, x);
    }
    public static int ProviderSubtype$get(MemorySegment seg, long index) {
        return (int)_GET_VIRTUAL_DISK_INFO.ProviderSubtype$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProviderSubtype$set(MemorySegment seg, long index, int x) {
        _GET_VIRTUAL_DISK_INFO.ProviderSubtype$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


