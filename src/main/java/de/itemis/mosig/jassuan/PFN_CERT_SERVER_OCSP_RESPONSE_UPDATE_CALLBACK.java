// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public interface PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK {

    void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, int x5);
    static MemoryAddress allocate(PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK fi) {
        return RuntimeHelper.upcallStub(PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK.class, fi, constants$920.PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V");
    }
    static MemoryAddress allocate(PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK.class, fi, constants$920.PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V", scope);
    }
    static PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK ofAddress(MemoryAddress addr) {
        return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, int x5) -> {
            try {
                constants$920.PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


