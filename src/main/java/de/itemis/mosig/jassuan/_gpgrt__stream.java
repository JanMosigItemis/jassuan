// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _gpgrt__stream {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.valueLayout(16, ByteOrder.nativeOrder()).withName("magic"),
                MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("writing"),
                MemoryLayout.valueLayout(15, ByteOrder.nativeOrder()).withName("reserved")
            )
        ).withName("flags"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("buffer"),
        C_LONG_LONG.withName("buffer_size"),
        C_LONG_LONG.withName("data_len"),
        C_LONG_LONG.withName("data_offset"),
        C_LONG_LONG.withName("data_flushed"),
        C_POINTER.withName("unread_buffer"),
        C_LONG_LONG.withName("unread_buffer_size"),
        C_LONG_LONG.withName("unread_data_len"),
        C_POINTER.withName("intern")
    ).withName("_gpgrt__stream");
    public static MemoryLayout $LAYOUT() {
        return _gpgrt__stream.$struct$LAYOUT;
    }
    public static class flags {

        static final MemoryLayout flags$struct$LAYOUT = MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.valueLayout(16, ByteOrder.nativeOrder()).withName("magic"),
                MemoryLayout.valueLayout(1, ByteOrder.nativeOrder()).withName("writing"),
                MemoryLayout.valueLayout(15, ByteOrder.nativeOrder()).withName("reserved")
            )
        );
        public static MemoryLayout $LAYOUT() {
            return flags.flags$struct$LAYOUT;
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.ofScope(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment flags$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    static final VarHandle buffer$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("buffer")));
    public static VarHandle buffer$VH() {
        return _gpgrt__stream.buffer$VH;
    }
    public static MemoryAddress buffer$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_gpgrt__stream.buffer$VH.get(seg);
    }
    public static void buffer$set( MemorySegment seg, MemoryAddress x) {
        _gpgrt__stream.buffer$VH.set(seg, x);
    }
    public static MemoryAddress buffer$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_gpgrt__stream.buffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void buffer$set(MemorySegment seg, long index, MemoryAddress x) {
        _gpgrt__stream.buffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle buffer_size$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("buffer_size"));
    public static VarHandle buffer_size$VH() {
        return _gpgrt__stream.buffer_size$VH;
    }
    public static long buffer_size$get(MemorySegment seg) {
        return (long)_gpgrt__stream.buffer_size$VH.get(seg);
    }
    public static void buffer_size$set( MemorySegment seg, long x) {
        _gpgrt__stream.buffer_size$VH.set(seg, x);
    }
    public static long buffer_size$get(MemorySegment seg, long index) {
        return (long)_gpgrt__stream.buffer_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void buffer_size$set(MemorySegment seg, long index, long x) {
        _gpgrt__stream.buffer_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle data_len$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("data_len"));
    public static VarHandle data_len$VH() {
        return _gpgrt__stream.data_len$VH;
    }
    public static long data_len$get(MemorySegment seg) {
        return (long)_gpgrt__stream.data_len$VH.get(seg);
    }
    public static void data_len$set( MemorySegment seg, long x) {
        _gpgrt__stream.data_len$VH.set(seg, x);
    }
    public static long data_len$get(MemorySegment seg, long index) {
        return (long)_gpgrt__stream.data_len$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data_len$set(MemorySegment seg, long index, long x) {
        _gpgrt__stream.data_len$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle data_offset$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("data_offset"));
    public static VarHandle data_offset$VH() {
        return _gpgrt__stream.data_offset$VH;
    }
    public static long data_offset$get(MemorySegment seg) {
        return (long)_gpgrt__stream.data_offset$VH.get(seg);
    }
    public static void data_offset$set( MemorySegment seg, long x) {
        _gpgrt__stream.data_offset$VH.set(seg, x);
    }
    public static long data_offset$get(MemorySegment seg, long index) {
        return (long)_gpgrt__stream.data_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data_offset$set(MemorySegment seg, long index, long x) {
        _gpgrt__stream.data_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle data_flushed$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("data_flushed"));
    public static VarHandle data_flushed$VH() {
        return _gpgrt__stream.data_flushed$VH;
    }
    public static long data_flushed$get(MemorySegment seg) {
        return (long)_gpgrt__stream.data_flushed$VH.get(seg);
    }
    public static void data_flushed$set( MemorySegment seg, long x) {
        _gpgrt__stream.data_flushed$VH.set(seg, x);
    }
    public static long data_flushed$get(MemorySegment seg, long index) {
        return (long)_gpgrt__stream.data_flushed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data_flushed$set(MemorySegment seg, long index, long x) {
        _gpgrt__stream.data_flushed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle unread_buffer$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("unread_buffer")));
    public static VarHandle unread_buffer$VH() {
        return _gpgrt__stream.unread_buffer$VH;
    }
    public static MemoryAddress unread_buffer$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_gpgrt__stream.unread_buffer$VH.get(seg);
    }
    public static void unread_buffer$set( MemorySegment seg, MemoryAddress x) {
        _gpgrt__stream.unread_buffer$VH.set(seg, x);
    }
    public static MemoryAddress unread_buffer$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_gpgrt__stream.unread_buffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unread_buffer$set(MemorySegment seg, long index, MemoryAddress x) {
        _gpgrt__stream.unread_buffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle unread_buffer_size$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("unread_buffer_size"));
    public static VarHandle unread_buffer_size$VH() {
        return _gpgrt__stream.unread_buffer_size$VH;
    }
    public static long unread_buffer_size$get(MemorySegment seg) {
        return (long)_gpgrt__stream.unread_buffer_size$VH.get(seg);
    }
    public static void unread_buffer_size$set( MemorySegment seg, long x) {
        _gpgrt__stream.unread_buffer_size$VH.set(seg, x);
    }
    public static long unread_buffer_size$get(MemorySegment seg, long index) {
        return (long)_gpgrt__stream.unread_buffer_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unread_buffer_size$set(MemorySegment seg, long index, long x) {
        _gpgrt__stream.unread_buffer_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle unread_data_len$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("unread_data_len"));
    public static VarHandle unread_data_len$VH() {
        return _gpgrt__stream.unread_data_len$VH;
    }
    public static long unread_data_len$get(MemorySegment seg) {
        return (long)_gpgrt__stream.unread_data_len$VH.get(seg);
    }
    public static void unread_data_len$set( MemorySegment seg, long x) {
        _gpgrt__stream.unread_data_len$VH.set(seg, x);
    }
    public static long unread_data_len$get(MemorySegment seg, long index) {
        return (long)_gpgrt__stream.unread_data_len$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unread_data_len$set(MemorySegment seg, long index, long x) {
        _gpgrt__stream.unread_data_len$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle intern$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("intern")));
    public static VarHandle intern$VH() {
        return _gpgrt__stream.intern$VH;
    }
    public static MemoryAddress intern$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_gpgrt__stream.intern$VH.get(seg);
    }
    public static void intern$set( MemorySegment seg, MemoryAddress x) {
        _gpgrt__stream.intern$VH.set(seg, x);
    }
    public static MemoryAddress intern$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_gpgrt__stream.intern$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void intern$set(MemorySegment seg, long index, MemoryAddress x) {
        _gpgrt__stream.intern$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


