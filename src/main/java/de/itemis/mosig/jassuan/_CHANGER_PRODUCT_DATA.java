// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _CHANGER_PRODUCT_DATA {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(8, C_CHAR).withName("VendorId"),
        MemoryLayout.sequenceLayout(16, C_CHAR).withName("ProductId"),
        MemoryLayout.sequenceLayout(4, C_CHAR).withName("Revision"),
        MemoryLayout.sequenceLayout(32, C_CHAR).withName("SerialNumber"),
        C_CHAR.withName("DeviceType")
    ).withName("_CHANGER_PRODUCT_DATA");
    public static MemoryLayout $LAYOUT() {
        return _CHANGER_PRODUCT_DATA.$struct$LAYOUT;
    }
    public static MemorySegment VendorId$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment ProductId$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static MemorySegment Revision$slice(MemorySegment seg) {
        return seg.asSlice(24, 4);
    }
    public static MemorySegment SerialNumber$slice(MemorySegment seg) {
        return seg.asSlice(28, 32);
    }
    static final VarHandle DeviceType$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DeviceType"));
    public static VarHandle DeviceType$VH() {
        return _CHANGER_PRODUCT_DATA.DeviceType$VH;
    }
    public static byte DeviceType$get(MemorySegment seg) {
        return (byte)_CHANGER_PRODUCT_DATA.DeviceType$VH.get(seg);
    }
    public static void DeviceType$set( MemorySegment seg, byte x) {
        _CHANGER_PRODUCT_DATA.DeviceType$VH.set(seg, x);
    }
    public static byte DeviceType$get(MemorySegment seg, long index) {
        return (byte)_CHANGER_PRODUCT_DATA.DeviceType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceType$set(MemorySegment seg, long index, byte x) {
        _CHANGER_PRODUCT_DATA.DeviceType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


