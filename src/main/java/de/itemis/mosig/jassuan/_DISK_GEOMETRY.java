// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _DISK_GEOMETRY {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONG_LONG.withName("QuadPart")
        ).withName("Cylinders"),
        C_INT.withName("MediaType"),
        C_LONG.withName("TracksPerCylinder"),
        C_LONG.withName("SectorsPerTrack"),
        C_LONG.withName("BytesPerSector")
    ).withName("_DISK_GEOMETRY");
    public static MemoryLayout $LAYOUT() {
        return _DISK_GEOMETRY.$struct$LAYOUT;
    }
    public static MemorySegment Cylinders$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    static final VarHandle MediaType$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("MediaType"));
    public static VarHandle MediaType$VH() {
        return _DISK_GEOMETRY.MediaType$VH;
    }
    public static int MediaType$get(MemorySegment seg) {
        return (int)_DISK_GEOMETRY.MediaType$VH.get(seg);
    }
    public static void MediaType$set( MemorySegment seg, int x) {
        _DISK_GEOMETRY.MediaType$VH.set(seg, x);
    }
    public static int MediaType$get(MemorySegment seg, long index) {
        return (int)_DISK_GEOMETRY.MediaType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MediaType$set(MemorySegment seg, long index, int x) {
        _DISK_GEOMETRY.MediaType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle TracksPerCylinder$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("TracksPerCylinder"));
    public static VarHandle TracksPerCylinder$VH() {
        return _DISK_GEOMETRY.TracksPerCylinder$VH;
    }
    public static int TracksPerCylinder$get(MemorySegment seg) {
        return (int)_DISK_GEOMETRY.TracksPerCylinder$VH.get(seg);
    }
    public static void TracksPerCylinder$set( MemorySegment seg, int x) {
        _DISK_GEOMETRY.TracksPerCylinder$VH.set(seg, x);
    }
    public static int TracksPerCylinder$get(MemorySegment seg, long index) {
        return (int)_DISK_GEOMETRY.TracksPerCylinder$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TracksPerCylinder$set(MemorySegment seg, long index, int x) {
        _DISK_GEOMETRY.TracksPerCylinder$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SectorsPerTrack$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("SectorsPerTrack"));
    public static VarHandle SectorsPerTrack$VH() {
        return _DISK_GEOMETRY.SectorsPerTrack$VH;
    }
    public static int SectorsPerTrack$get(MemorySegment seg) {
        return (int)_DISK_GEOMETRY.SectorsPerTrack$VH.get(seg);
    }
    public static void SectorsPerTrack$set( MemorySegment seg, int x) {
        _DISK_GEOMETRY.SectorsPerTrack$VH.set(seg, x);
    }
    public static int SectorsPerTrack$get(MemorySegment seg, long index) {
        return (int)_DISK_GEOMETRY.SectorsPerTrack$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SectorsPerTrack$set(MemorySegment seg, long index, int x) {
        _DISK_GEOMETRY.SectorsPerTrack$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BytesPerSector$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("BytesPerSector"));
    public static VarHandle BytesPerSector$VH() {
        return _DISK_GEOMETRY.BytesPerSector$VH;
    }
    public static int BytesPerSector$get(MemorySegment seg) {
        return (int)_DISK_GEOMETRY.BytesPerSector$VH.get(seg);
    }
    public static void BytesPerSector$set( MemorySegment seg, int x) {
        _DISK_GEOMETRY.BytesPerSector$VH.set(seg, x);
    }
    public static int BytesPerSector$get(MemorySegment seg, long index) {
        return (int)_DISK_GEOMETRY.BytesPerSector$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesPerSector$set(MemorySegment seg, long index, int x) {
        _DISK_GEOMETRY.BytesPerSector$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


