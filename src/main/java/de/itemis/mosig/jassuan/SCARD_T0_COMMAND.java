// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class SCARD_T0_COMMAND {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_CHAR.withName("bCla"),
        C_CHAR.withName("bIns"),
        C_CHAR.withName("bP1"),
        C_CHAR.withName("bP2"),
        C_CHAR.withName("bP3")
    );
    public static MemoryLayout $LAYOUT() {
        return SCARD_T0_COMMAND.$struct$LAYOUT;
    }
    static final VarHandle bCla$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bCla"));
    public static VarHandle bCla$VH() {
        return SCARD_T0_COMMAND.bCla$VH;
    }
    public static byte bCla$get(MemorySegment seg) {
        return (byte)SCARD_T0_COMMAND.bCla$VH.get(seg);
    }
    public static void bCla$set( MemorySegment seg, byte x) {
        SCARD_T0_COMMAND.bCla$VH.set(seg, x);
    }
    public static byte bCla$get(MemorySegment seg, long index) {
        return (byte)SCARD_T0_COMMAND.bCla$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bCla$set(MemorySegment seg, long index, byte x) {
        SCARD_T0_COMMAND.bCla$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bIns$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bIns"));
    public static VarHandle bIns$VH() {
        return SCARD_T0_COMMAND.bIns$VH;
    }
    public static byte bIns$get(MemorySegment seg) {
        return (byte)SCARD_T0_COMMAND.bIns$VH.get(seg);
    }
    public static void bIns$set( MemorySegment seg, byte x) {
        SCARD_T0_COMMAND.bIns$VH.set(seg, x);
    }
    public static byte bIns$get(MemorySegment seg, long index) {
        return (byte)SCARD_T0_COMMAND.bIns$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bIns$set(MemorySegment seg, long index, byte x) {
        SCARD_T0_COMMAND.bIns$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bP1$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bP1"));
    public static VarHandle bP1$VH() {
        return SCARD_T0_COMMAND.bP1$VH;
    }
    public static byte bP1$get(MemorySegment seg) {
        return (byte)SCARD_T0_COMMAND.bP1$VH.get(seg);
    }
    public static void bP1$set( MemorySegment seg, byte x) {
        SCARD_T0_COMMAND.bP1$VH.set(seg, x);
    }
    public static byte bP1$get(MemorySegment seg, long index) {
        return (byte)SCARD_T0_COMMAND.bP1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bP1$set(MemorySegment seg, long index, byte x) {
        SCARD_T0_COMMAND.bP1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bP2$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bP2"));
    public static VarHandle bP2$VH() {
        return SCARD_T0_COMMAND.bP2$VH;
    }
    public static byte bP2$get(MemorySegment seg) {
        return (byte)SCARD_T0_COMMAND.bP2$VH.get(seg);
    }
    public static void bP2$set( MemorySegment seg, byte x) {
        SCARD_T0_COMMAND.bP2$VH.set(seg, x);
    }
    public static byte bP2$get(MemorySegment seg, long index) {
        return (byte)SCARD_T0_COMMAND.bP2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bP2$set(MemorySegment seg, long index, byte x) {
        SCARD_T0_COMMAND.bP2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bP3$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bP3"));
    public static VarHandle bP3$VH() {
        return SCARD_T0_COMMAND.bP3$VH;
    }
    public static byte bP3$get(MemorySegment seg) {
        return (byte)SCARD_T0_COMMAND.bP3$VH.get(seg);
    }
    public static void bP3$set( MemorySegment seg, byte x) {
        SCARD_T0_COMMAND.bP3$VH.set(seg, x);
    }
    public static byte bP3$get(MemorySegment seg, long index) {
        return (byte)SCARD_T0_COMMAND.bP3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bP3$set(MemorySegment seg, long index, byte x) {
        SCARD_T0_COMMAND.bP3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


