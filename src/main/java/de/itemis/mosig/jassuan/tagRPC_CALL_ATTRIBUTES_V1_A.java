// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class tagRPC_CALL_ATTRIBUTES_V1_A {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("Version"),
        C_LONG.withName("Flags"),
        C_LONG.withName("ServerPrincipalNameBufferLength"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("ServerPrincipalName"),
        C_LONG.withName("ClientPrincipalNameBufferLength"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("ClientPrincipalName"),
        C_LONG.withName("AuthenticationLevel"),
        C_LONG.withName("AuthenticationService"),
        C_INT.withName("NullSession"),
        MemoryLayout.paddingLayout(32)
    ).withName("tagRPC_CALL_ATTRIBUTES_V1_A");
    public static MemoryLayout $LAYOUT() {
        return tagRPC_CALL_ATTRIBUTES_V1_A.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return tagRPC_CALL_ATTRIBUTES_V1_A.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)tagRPC_CALL_ATTRIBUTES_V1_A.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        tagRPC_CALL_ATTRIBUTES_V1_A.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)tagRPC_CALL_ATTRIBUTES_V1_A.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        tagRPC_CALL_ATTRIBUTES_V1_A.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return tagRPC_CALL_ATTRIBUTES_V1_A.Flags$VH;
    }
    public static int Flags$get(MemorySegment seg) {
        return (int)tagRPC_CALL_ATTRIBUTES_V1_A.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, int x) {
        tagRPC_CALL_ATTRIBUTES_V1_A.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)tagRPC_CALL_ATTRIBUTES_V1_A.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        tagRPC_CALL_ATTRIBUTES_V1_A.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ServerPrincipalNameBufferLength$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ServerPrincipalNameBufferLength"));
    public static VarHandle ServerPrincipalNameBufferLength$VH() {
        return tagRPC_CALL_ATTRIBUTES_V1_A.ServerPrincipalNameBufferLength$VH;
    }
    public static int ServerPrincipalNameBufferLength$get(MemorySegment seg) {
        return (int)tagRPC_CALL_ATTRIBUTES_V1_A.ServerPrincipalNameBufferLength$VH.get(seg);
    }
    public static void ServerPrincipalNameBufferLength$set( MemorySegment seg, int x) {
        tagRPC_CALL_ATTRIBUTES_V1_A.ServerPrincipalNameBufferLength$VH.set(seg, x);
    }
    public static int ServerPrincipalNameBufferLength$get(MemorySegment seg, long index) {
        return (int)tagRPC_CALL_ATTRIBUTES_V1_A.ServerPrincipalNameBufferLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ServerPrincipalNameBufferLength$set(MemorySegment seg, long index, int x) {
        tagRPC_CALL_ATTRIBUTES_V1_A.ServerPrincipalNameBufferLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ServerPrincipalName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ServerPrincipalName")));
    public static VarHandle ServerPrincipalName$VH() {
        return tagRPC_CALL_ATTRIBUTES_V1_A.ServerPrincipalName$VH;
    }
    public static MemoryAddress ServerPrincipalName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagRPC_CALL_ATTRIBUTES_V1_A.ServerPrincipalName$VH.get(seg);
    }
    public static void ServerPrincipalName$set( MemorySegment seg, MemoryAddress x) {
        tagRPC_CALL_ATTRIBUTES_V1_A.ServerPrincipalName$VH.set(seg, x);
    }
    public static MemoryAddress ServerPrincipalName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagRPC_CALL_ATTRIBUTES_V1_A.ServerPrincipalName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ServerPrincipalName$set(MemorySegment seg, long index, MemoryAddress x) {
        tagRPC_CALL_ATTRIBUTES_V1_A.ServerPrincipalName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ClientPrincipalNameBufferLength$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("ClientPrincipalNameBufferLength"));
    public static VarHandle ClientPrincipalNameBufferLength$VH() {
        return tagRPC_CALL_ATTRIBUTES_V1_A.ClientPrincipalNameBufferLength$VH;
    }
    public static int ClientPrincipalNameBufferLength$get(MemorySegment seg) {
        return (int)tagRPC_CALL_ATTRIBUTES_V1_A.ClientPrincipalNameBufferLength$VH.get(seg);
    }
    public static void ClientPrincipalNameBufferLength$set( MemorySegment seg, int x) {
        tagRPC_CALL_ATTRIBUTES_V1_A.ClientPrincipalNameBufferLength$VH.set(seg, x);
    }
    public static int ClientPrincipalNameBufferLength$get(MemorySegment seg, long index) {
        return (int)tagRPC_CALL_ATTRIBUTES_V1_A.ClientPrincipalNameBufferLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ClientPrincipalNameBufferLength$set(MemorySegment seg, long index, int x) {
        tagRPC_CALL_ATTRIBUTES_V1_A.ClientPrincipalNameBufferLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ClientPrincipalName$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ClientPrincipalName")));
    public static VarHandle ClientPrincipalName$VH() {
        return tagRPC_CALL_ATTRIBUTES_V1_A.ClientPrincipalName$VH;
    }
    public static MemoryAddress ClientPrincipalName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagRPC_CALL_ATTRIBUTES_V1_A.ClientPrincipalName$VH.get(seg);
    }
    public static void ClientPrincipalName$set( MemorySegment seg, MemoryAddress x) {
        tagRPC_CALL_ATTRIBUTES_V1_A.ClientPrincipalName$VH.set(seg, x);
    }
    public static MemoryAddress ClientPrincipalName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagRPC_CALL_ATTRIBUTES_V1_A.ClientPrincipalName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ClientPrincipalName$set(MemorySegment seg, long index, MemoryAddress x) {
        tagRPC_CALL_ATTRIBUTES_V1_A.ClientPrincipalName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AuthenticationLevel$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("AuthenticationLevel"));
    public static VarHandle AuthenticationLevel$VH() {
        return tagRPC_CALL_ATTRIBUTES_V1_A.AuthenticationLevel$VH;
    }
    public static int AuthenticationLevel$get(MemorySegment seg) {
        return (int)tagRPC_CALL_ATTRIBUTES_V1_A.AuthenticationLevel$VH.get(seg);
    }
    public static void AuthenticationLevel$set( MemorySegment seg, int x) {
        tagRPC_CALL_ATTRIBUTES_V1_A.AuthenticationLevel$VH.set(seg, x);
    }
    public static int AuthenticationLevel$get(MemorySegment seg, long index) {
        return (int)tagRPC_CALL_ATTRIBUTES_V1_A.AuthenticationLevel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AuthenticationLevel$set(MemorySegment seg, long index, int x) {
        tagRPC_CALL_ATTRIBUTES_V1_A.AuthenticationLevel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AuthenticationService$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("AuthenticationService"));
    public static VarHandle AuthenticationService$VH() {
        return tagRPC_CALL_ATTRIBUTES_V1_A.AuthenticationService$VH;
    }
    public static int AuthenticationService$get(MemorySegment seg) {
        return (int)tagRPC_CALL_ATTRIBUTES_V1_A.AuthenticationService$VH.get(seg);
    }
    public static void AuthenticationService$set( MemorySegment seg, int x) {
        tagRPC_CALL_ATTRIBUTES_V1_A.AuthenticationService$VH.set(seg, x);
    }
    public static int AuthenticationService$get(MemorySegment seg, long index) {
        return (int)tagRPC_CALL_ATTRIBUTES_V1_A.AuthenticationService$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AuthenticationService$set(MemorySegment seg, long index, int x) {
        tagRPC_CALL_ATTRIBUTES_V1_A.AuthenticationService$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NullSession$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("NullSession"));
    public static VarHandle NullSession$VH() {
        return tagRPC_CALL_ATTRIBUTES_V1_A.NullSession$VH;
    }
    public static int NullSession$get(MemorySegment seg) {
        return (int)tagRPC_CALL_ATTRIBUTES_V1_A.NullSession$VH.get(seg);
    }
    public static void NullSession$set( MemorySegment seg, int x) {
        tagRPC_CALL_ATTRIBUTES_V1_A.NullSession$VH.set(seg, x);
    }
    public static int NullSession$get(MemorySegment seg, long index) {
        return (int)tagRPC_CALL_ATTRIBUTES_V1_A.NullSession$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NullSession$set(MemorySegment seg, long index, int x) {
        tagRPC_CALL_ATTRIBUTES_V1_A.NullSession$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


