// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _PROPSHEETHEADERW {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("dwSize"),
        C_LONG.withName("dwFlags"),
        C_POINTER.withName("hwndParent"),
        C_POINTER.withName("hInstance"),
        MemoryLayout.unionLayout(
            C_POINTER.withName("hIcon"),
            C_POINTER.withName("pszIcon")
        ).withName("$anon$0"),
        C_POINTER.withName("pszCaption"),
        C_INT.withName("nPages"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            C_INT.withName("nStartPage"),
            C_POINTER.withName("pStartPage")
        ).withName("$anon$1"),
        MemoryLayout.unionLayout(
            C_POINTER.withName("ppsp"),
            C_POINTER.withName("phpage")
        ).withName("$anon$2"),
        C_POINTER.withName("pfnCallback"),
        MemoryLayout.unionLayout(
            C_POINTER.withName("hbmWatermark"),
            C_POINTER.withName("pszbmWatermark")
        ).withName("$anon$3"),
        C_POINTER.withName("hplWatermark"),
        MemoryLayout.unionLayout(
            C_POINTER.withName("hbmHeader"),
            C_POINTER.withName("pszbmHeader")
        ).withName("$anon$4")
    ).withName("_PROPSHEETHEADERW");
    public static MemoryLayout $LAYOUT() {
        return _PROPSHEETHEADERW.$struct$LAYOUT;
    }
    static final VarHandle dwSize$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSize"));
    public static VarHandle dwSize$VH() {
        return _PROPSHEETHEADERW.dwSize$VH;
    }
    public static int dwSize$get(MemorySegment seg) {
        return (int)_PROPSHEETHEADERW.dwSize$VH.get(seg);
    }
    public static void dwSize$set( MemorySegment seg, int x) {
        _PROPSHEETHEADERW.dwSize$VH.set(seg, x);
    }
    public static int dwSize$get(MemorySegment seg, long index) {
        return (int)_PROPSHEETHEADERW.dwSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwSize$set(MemorySegment seg, long index, int x) {
        _PROPSHEETHEADERW.dwSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwFlags$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    public static VarHandle dwFlags$VH() {
        return _PROPSHEETHEADERW.dwFlags$VH;
    }
    public static int dwFlags$get(MemorySegment seg) {
        return (int)_PROPSHEETHEADERW.dwFlags$VH.get(seg);
    }
    public static void dwFlags$set( MemorySegment seg, int x) {
        _PROPSHEETHEADERW.dwFlags$VH.set(seg, x);
    }
    public static int dwFlags$get(MemorySegment seg, long index) {
        return (int)_PROPSHEETHEADERW.dwFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFlags$set(MemorySegment seg, long index, int x) {
        _PROPSHEETHEADERW.dwFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hwndParent$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndParent")));
    public static VarHandle hwndParent$VH() {
        return _PROPSHEETHEADERW.hwndParent$VH;
    }
    public static MemoryAddress hwndParent$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.hwndParent$VH.get(seg);
    }
    public static void hwndParent$set( MemorySegment seg, MemoryAddress x) {
        _PROPSHEETHEADERW.hwndParent$VH.set(seg, x);
    }
    public static MemoryAddress hwndParent$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.hwndParent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndParent$set(MemorySegment seg, long index, MemoryAddress x) {
        _PROPSHEETHEADERW.hwndParent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hInstance$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hInstance")));
    public static VarHandle hInstance$VH() {
        return _PROPSHEETHEADERW.hInstance$VH;
    }
    public static MemoryAddress hInstance$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.hInstance$VH.get(seg);
    }
    public static void hInstance$set( MemorySegment seg, MemoryAddress x) {
        _PROPSHEETHEADERW.hInstance$VH.set(seg, x);
    }
    public static MemoryAddress hInstance$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.hInstance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hInstance$set(MemorySegment seg, long index, MemoryAddress x) {
        _PROPSHEETHEADERW.hInstance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hIcon$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("hIcon")));
    public static VarHandle hIcon$VH() {
        return _PROPSHEETHEADERW.hIcon$VH;
    }
    public static MemoryAddress hIcon$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.hIcon$VH.get(seg);
    }
    public static void hIcon$set( MemorySegment seg, MemoryAddress x) {
        _PROPSHEETHEADERW.hIcon$VH.set(seg, x);
    }
    public static MemoryAddress hIcon$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.hIcon$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hIcon$set(MemorySegment seg, long index, MemoryAddress x) {
        _PROPSHEETHEADERW.hIcon$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pszIcon$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("pszIcon")));
    public static VarHandle pszIcon$VH() {
        return _PROPSHEETHEADERW.pszIcon$VH;
    }
    public static MemoryAddress pszIcon$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.pszIcon$VH.get(seg);
    }
    public static void pszIcon$set( MemorySegment seg, MemoryAddress x) {
        _PROPSHEETHEADERW.pszIcon$VH.set(seg, x);
    }
    public static MemoryAddress pszIcon$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.pszIcon$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pszIcon$set(MemorySegment seg, long index, MemoryAddress x) {
        _PROPSHEETHEADERW.pszIcon$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pszCaption$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszCaption")));
    public static VarHandle pszCaption$VH() {
        return _PROPSHEETHEADERW.pszCaption$VH;
    }
    public static MemoryAddress pszCaption$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.pszCaption$VH.get(seg);
    }
    public static void pszCaption$set( MemorySegment seg, MemoryAddress x) {
        _PROPSHEETHEADERW.pszCaption$VH.set(seg, x);
    }
    public static MemoryAddress pszCaption$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.pszCaption$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pszCaption$set(MemorySegment seg, long index, MemoryAddress x) {
        _PROPSHEETHEADERW.pszCaption$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nPages$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("nPages"));
    public static VarHandle nPages$VH() {
        return _PROPSHEETHEADERW.nPages$VH;
    }
    public static int nPages$get(MemorySegment seg) {
        return (int)_PROPSHEETHEADERW.nPages$VH.get(seg);
    }
    public static void nPages$set( MemorySegment seg, int x) {
        _PROPSHEETHEADERW.nPages$VH.set(seg, x);
    }
    public static int nPages$get(MemorySegment seg, long index) {
        return (int)_PROPSHEETHEADERW.nPages$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nPages$set(MemorySegment seg, long index, int x) {
        _PROPSHEETHEADERW.nPages$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nStartPage$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("$anon$1"), MemoryLayout.PathElement.groupElement("nStartPage"));
    public static VarHandle nStartPage$VH() {
        return _PROPSHEETHEADERW.nStartPage$VH;
    }
    public static int nStartPage$get(MemorySegment seg) {
        return (int)_PROPSHEETHEADERW.nStartPage$VH.get(seg);
    }
    public static void nStartPage$set( MemorySegment seg, int x) {
        _PROPSHEETHEADERW.nStartPage$VH.set(seg, x);
    }
    public static int nStartPage$get(MemorySegment seg, long index) {
        return (int)_PROPSHEETHEADERW.nStartPage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nStartPage$set(MemorySegment seg, long index, int x) {
        _PROPSHEETHEADERW.nStartPage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pStartPage$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("$anon$1"), MemoryLayout.PathElement.groupElement("pStartPage")));
    public static VarHandle pStartPage$VH() {
        return _PROPSHEETHEADERW.pStartPage$VH;
    }
    public static MemoryAddress pStartPage$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.pStartPage$VH.get(seg);
    }
    public static void pStartPage$set( MemorySegment seg, MemoryAddress x) {
        _PROPSHEETHEADERW.pStartPage$VH.set(seg, x);
    }
    public static MemoryAddress pStartPage$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.pStartPage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pStartPage$set(MemorySegment seg, long index, MemoryAddress x) {
        _PROPSHEETHEADERW.pStartPage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ppsp$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("$anon$2"), MemoryLayout.PathElement.groupElement("ppsp")));
    public static VarHandle ppsp$VH() {
        return _PROPSHEETHEADERW.ppsp$VH;
    }
    public static MemoryAddress ppsp$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.ppsp$VH.get(seg);
    }
    public static void ppsp$set( MemorySegment seg, MemoryAddress x) {
        _PROPSHEETHEADERW.ppsp$VH.set(seg, x);
    }
    public static MemoryAddress ppsp$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.ppsp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ppsp$set(MemorySegment seg, long index, MemoryAddress x) {
        _PROPSHEETHEADERW.ppsp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle phpage$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("$anon$2"), MemoryLayout.PathElement.groupElement("phpage")));
    public static VarHandle phpage$VH() {
        return _PROPSHEETHEADERW.phpage$VH;
    }
    public static MemoryAddress phpage$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.phpage$VH.get(seg);
    }
    public static void phpage$set( MemorySegment seg, MemoryAddress x) {
        _PROPSHEETHEADERW.phpage$VH.set(seg, x);
    }
    public static MemoryAddress phpage$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.phpage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void phpage$set(MemorySegment seg, long index, MemoryAddress x) {
        _PROPSHEETHEADERW.phpage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pfnCallback$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnCallback")));
    public static VarHandle pfnCallback$VH() {
        return _PROPSHEETHEADERW.pfnCallback$VH;
    }
    public static MemoryAddress pfnCallback$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.pfnCallback$VH.get(seg);
    }
    public static void pfnCallback$set( MemorySegment seg, MemoryAddress x) {
        _PROPSHEETHEADERW.pfnCallback$VH.set(seg, x);
    }
    public static MemoryAddress pfnCallback$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.pfnCallback$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnCallback$set(MemorySegment seg, long index, MemoryAddress x) {
        _PROPSHEETHEADERW.pfnCallback$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PFNPROPSHEETCALLBACK pfnCallback (MemorySegment segment) {
        return PFNPROPSHEETCALLBACK.ofAddress(pfnCallback$get(segment));
    }
    static final VarHandle hbmWatermark$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("$anon$3"), MemoryLayout.PathElement.groupElement("hbmWatermark")));
    public static VarHandle hbmWatermark$VH() {
        return _PROPSHEETHEADERW.hbmWatermark$VH;
    }
    public static MemoryAddress hbmWatermark$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.hbmWatermark$VH.get(seg);
    }
    public static void hbmWatermark$set( MemorySegment seg, MemoryAddress x) {
        _PROPSHEETHEADERW.hbmWatermark$VH.set(seg, x);
    }
    public static MemoryAddress hbmWatermark$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.hbmWatermark$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hbmWatermark$set(MemorySegment seg, long index, MemoryAddress x) {
        _PROPSHEETHEADERW.hbmWatermark$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pszbmWatermark$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("$anon$3"), MemoryLayout.PathElement.groupElement("pszbmWatermark")));
    public static VarHandle pszbmWatermark$VH() {
        return _PROPSHEETHEADERW.pszbmWatermark$VH;
    }
    public static MemoryAddress pszbmWatermark$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.pszbmWatermark$VH.get(seg);
    }
    public static void pszbmWatermark$set( MemorySegment seg, MemoryAddress x) {
        _PROPSHEETHEADERW.pszbmWatermark$VH.set(seg, x);
    }
    public static MemoryAddress pszbmWatermark$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.pszbmWatermark$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pszbmWatermark$set(MemorySegment seg, long index, MemoryAddress x) {
        _PROPSHEETHEADERW.pszbmWatermark$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hplWatermark$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("hplWatermark")));
    public static VarHandle hplWatermark$VH() {
        return _PROPSHEETHEADERW.hplWatermark$VH;
    }
    public static MemoryAddress hplWatermark$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.hplWatermark$VH.get(seg);
    }
    public static void hplWatermark$set( MemorySegment seg, MemoryAddress x) {
        _PROPSHEETHEADERW.hplWatermark$VH.set(seg, x);
    }
    public static MemoryAddress hplWatermark$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.hplWatermark$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hplWatermark$set(MemorySegment seg, long index, MemoryAddress x) {
        _PROPSHEETHEADERW.hplWatermark$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hbmHeader$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("$anon$4"), MemoryLayout.PathElement.groupElement("hbmHeader")));
    public static VarHandle hbmHeader$VH() {
        return _PROPSHEETHEADERW.hbmHeader$VH;
    }
    public static MemoryAddress hbmHeader$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.hbmHeader$VH.get(seg);
    }
    public static void hbmHeader$set( MemorySegment seg, MemoryAddress x) {
        _PROPSHEETHEADERW.hbmHeader$VH.set(seg, x);
    }
    public static MemoryAddress hbmHeader$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.hbmHeader$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hbmHeader$set(MemorySegment seg, long index, MemoryAddress x) {
        _PROPSHEETHEADERW.hbmHeader$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pszbmHeader$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("$anon$4"), MemoryLayout.PathElement.groupElement("pszbmHeader")));
    public static VarHandle pszbmHeader$VH() {
        return _PROPSHEETHEADERW.pszbmHeader$VH;
    }
    public static MemoryAddress pszbmHeader$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.pszbmHeader$VH.get(seg);
    }
    public static void pszbmHeader$set( MemorySegment seg, MemoryAddress x) {
        _PROPSHEETHEADERW.pszbmHeader$VH.set(seg, x);
    }
    public static MemoryAddress pszbmHeader$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PROPSHEETHEADERW.pszbmHeader$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pszbmHeader$set(MemorySegment seg, long index, MemoryAddress x) {
        _PROPSHEETHEADERW.pszbmHeader$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


