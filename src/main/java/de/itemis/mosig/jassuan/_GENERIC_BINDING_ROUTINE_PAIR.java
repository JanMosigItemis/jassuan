// Generated by jextract

package de.itemis.mosig.jassuan;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _GENERIC_BINDING_ROUTINE_PAIR {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("pfnBind"),
        C_POINTER.withName("pfnUnbind")
    ).withName("_GENERIC_BINDING_ROUTINE_PAIR");
    public static MemoryLayout $LAYOUT() {
        return _GENERIC_BINDING_ROUTINE_PAIR.$struct$LAYOUT;
    }
    static final VarHandle pfnBind$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnBind")));
    public static VarHandle pfnBind$VH() {
        return _GENERIC_BINDING_ROUTINE_PAIR.pfnBind$VH;
    }
    public static MemoryAddress pfnBind$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GENERIC_BINDING_ROUTINE_PAIR.pfnBind$VH.get(seg);
    }
    public static void pfnBind$set( MemorySegment seg, MemoryAddress x) {
        _GENERIC_BINDING_ROUTINE_PAIR.pfnBind$VH.set(seg, x);
    }
    public static MemoryAddress pfnBind$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GENERIC_BINDING_ROUTINE_PAIR.pfnBind$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnBind$set(MemorySegment seg, long index, MemoryAddress x) {
        _GENERIC_BINDING_ROUTINE_PAIR.pfnBind$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GENERIC_BINDING_ROUTINE pfnBind (MemorySegment segment) {
        return GENERIC_BINDING_ROUTINE.ofAddress(pfnBind$get(segment));
    }
    static final VarHandle pfnUnbind$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnUnbind")));
    public static VarHandle pfnUnbind$VH() {
        return _GENERIC_BINDING_ROUTINE_PAIR.pfnUnbind$VH;
    }
    public static MemoryAddress pfnUnbind$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GENERIC_BINDING_ROUTINE_PAIR.pfnUnbind$VH.get(seg);
    }
    public static void pfnUnbind$set( MemorySegment seg, MemoryAddress x) {
        _GENERIC_BINDING_ROUTINE_PAIR.pfnUnbind$VH.set(seg, x);
    }
    public static MemoryAddress pfnUnbind$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GENERIC_BINDING_ROUTINE_PAIR.pfnUnbind$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnUnbind$set(MemorySegment seg, long index, MemoryAddress x) {
        _GENERIC_BINDING_ROUTINE_PAIR.pfnUnbind$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GENERIC_UNBIND_ROUTINE pfnUnbind (MemorySegment segment) {
        return GENERIC_UNBIND_ROUTINE.ofAddress(pfnUnbind$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


